
kernel/bin/kernel:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <bump_alloc>:
#endif

static uint8_t bump_alloc_pool[FLANTERM_FB_BUMP_ALLOC_POOL_SIZE];
static size_t bump_alloc_ptr = 0;

static void *bump_alloc(size_t s) {
ffffffff80000000:	f3 0f 1e fa          	endbr64 
    size_t next_ptr = bump_alloc_ptr + s;
ffffffff80000004:	48 8b 05 1d cb 00 00 	mov    0xcb1d(%rip),%rax        # ffffffff8000cb28 <bump_alloc_ptr>
ffffffff8000000b:	48 01 c7             	add    %rax,%rdi
    if (next_ptr > FLANTERM_FB_BUMP_ALLOC_POOL_SIZE) {
ffffffff8000000e:	48 81 ff 28 52 0d 00 	cmp    $0xd5228,%rdi
ffffffff80000015:	77 19                	ja     ffffffff80000030 <bump_alloc+0x30>
        return NULL;
    }
    void *ret = &bump_alloc_pool[bump_alloc_ptr];
ffffffff80000017:	48 8d 15 22 cb 00 00 	lea    0xcb22(%rip),%rdx        # ffffffff8000cb40 <bump_alloc_pool>
    bump_alloc_ptr = next_ptr;
ffffffff8000001e:	48 89 3d 03 cb 00 00 	mov    %rdi,0xcb03(%rip)        # ffffffff8000cb28 <bump_alloc_ptr>
    void *ret = &bump_alloc_pool[bump_alloc_ptr];
ffffffff80000025:	48 01 d0             	add    %rdx,%rax
    return ret;
ffffffff80000028:	c3                   	ret    
ffffffff80000029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return NULL;
ffffffff80000030:	31 c0                	xor    %eax,%eax
}
ffffffff80000032:	c3                   	ret    
ffffffff80000033:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000003a:	00 00 00 00 
ffffffff8000003e:	66 90                	xchg   %ax,%ax

ffffffff80000040 <flanterm_fb_save_state>:
    uint32_t g = (colour >> 8) & 0xff;
    uint32_t b =  colour & 0xff;
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
}

static void flanterm_fb_save_state(struct flanterm_context *_ctx) {
ffffffff80000040:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;
    ctx->saved_state_text_fg = ctx->text_fg;
    ctx->saved_state_text_bg = ctx->text_bg;
    ctx->saved_state_cursor_x = ctx->cursor_x;
ffffffff80000044:	48 8b 97 e0 02 00 00 	mov    0x2e0(%rdi),%rdx
    ctx->saved_state_cursor_y = ctx->cursor_y;
ffffffff8000004b:	48 8b 87 e8 02 00 00 	mov    0x2e8(%rdi),%rax
    ctx->saved_state_text_fg = ctx->text_fg;
ffffffff80000052:	48 8b 8f d8 02 00 00 	mov    0x2d8(%rdi),%rcx
    ctx->saved_state_cursor_x = ctx->cursor_x;
ffffffff80000059:	48 89 97 f8 02 00 00 	mov    %rdx,0x2f8(%rdi)
    ctx->saved_state_text_fg = ctx->text_fg;
ffffffff80000060:	48 89 8f f0 02 00 00 	mov    %rcx,0x2f0(%rdi)
    ctx->saved_state_cursor_y = ctx->cursor_y;
ffffffff80000067:	48 89 87 00 03 00 00 	mov    %rax,0x300(%rdi)
}
ffffffff8000006e:	c3                   	ret    
ffffffff8000006f:	90                   	nop

ffffffff80000070 <flanterm_fb_restore_state>:

static void flanterm_fb_restore_state(struct flanterm_context *_ctx) {
ffffffff80000070:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;
    ctx->text_fg = ctx->saved_state_text_fg;
    ctx->text_bg = ctx->saved_state_text_bg;
    ctx->cursor_x = ctx->saved_state_cursor_x;
ffffffff80000074:	48 8b 97 f8 02 00 00 	mov    0x2f8(%rdi),%rdx
    ctx->cursor_y = ctx->saved_state_cursor_y;
ffffffff8000007b:	48 8b 87 00 03 00 00 	mov    0x300(%rdi),%rax
    ctx->text_fg = ctx->saved_state_text_fg;
ffffffff80000082:	48 8b 8f f0 02 00 00 	mov    0x2f0(%rdi),%rcx
    ctx->cursor_x = ctx->saved_state_cursor_x;
ffffffff80000089:	48 89 97 e0 02 00 00 	mov    %rdx,0x2e0(%rdi)
    ctx->text_fg = ctx->saved_state_text_fg;
ffffffff80000090:	48 89 8f d8 02 00 00 	mov    %rcx,0x2d8(%rdi)
    ctx->cursor_y = ctx->saved_state_cursor_y;
ffffffff80000097:	48 89 87 e8 02 00 00 	mov    %rax,0x2e8(%rdi)
}
ffffffff8000009e:	c3                   	ret    
ffffffff8000009f:	90                   	nop

ffffffff800000a0 <flanterm_fb_swap_palette>:

static void flanterm_fb_swap_palette(struct flanterm_context *_ctx) {
ffffffff800000a0:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;
    uint32_t tmp = ctx->text_bg;
ffffffff800000a4:	8b 87 dc 02 00 00    	mov    0x2dc(%rdi),%eax
    ctx->text_bg = ctx->text_fg;
ffffffff800000aa:	8b 97 d8 02 00 00    	mov    0x2d8(%rdi),%edx
    ctx->text_fg = tmp;
ffffffff800000b0:	89 87 d8 02 00 00    	mov    %eax,0x2d8(%rdi)
    ctx->text_bg = ctx->text_fg;
ffffffff800000b6:	89 97 dc 02 00 00    	mov    %edx,0x2dc(%rdi)
}
ffffffff800000bc:	c3                   	ret    
ffffffff800000bd:	0f 1f 00             	nopl   (%rax)

ffffffff800000c0 <push_to_queue>:

static inline bool compare_char(struct flanterm_fb_char *a, struct flanterm_fb_char *b) {
    return !(a->c != b->c || a->bg != b->bg || a->fg != b->fg);
}

static void push_to_queue(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff800000c0:	49 89 f0             	mov    %rsi,%r8
ffffffff800000c3:	48 89 ce             	mov    %rcx,%rsi
    struct flanterm_fb_context *ctx = (void *)_ctx;

    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff800000c6:	48 8b 8f e8 00 00 00 	mov    0xe8(%rdi),%rcx
static void push_to_queue(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff800000cd:	48 89 f8             	mov    %rdi,%rax
    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff800000d0:	48 39 d1             	cmp    %rdx,%rcx
ffffffff800000d3:	76 3b                	jbe    ffffffff80000110 <push_to_queue+0x50>
ffffffff800000d5:	48 39 b7 e0 00 00 00 	cmp    %rsi,0xe0(%rdi)
ffffffff800000dc:	76 32                	jbe    ffffffff80000110 <push_to_queue+0x50>
        return;
    }

    size_t i = y * _ctx->cols + x;
ffffffff800000de:	48 0f af ce          	imul   %rsi,%rcx

    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800000e2:	48 8b bf d0 02 00 00 	mov    0x2d0(%rdi),%rdi
    size_t i = y * _ctx->cols + x;
ffffffff800000e9:	48 01 d1             	add    %rdx,%rcx
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800000ec:	4c 8d 0c cf          	lea    (%rdi,%rcx,8),%r9
ffffffff800000f0:	49 8b 39             	mov    (%r9),%rdi

    if (q == NULL) {
ffffffff800000f3:	48 85 ff             	test   %rdi,%rdi
ffffffff800000f6:	74 20                	je     ffffffff80000118 <push_to_queue+0x58>
        q->x = x;
        q->y = y;
        ctx->map[i] = q;
    }

    q->c = *c;
ffffffff800000f8:	49 8b 00             	mov    (%r8),%rax
ffffffff800000fb:	48 89 47 10          	mov    %rax,0x10(%rdi)
ffffffff800000ff:	41 8b 40 08          	mov    0x8(%r8),%eax
ffffffff80000103:	89 47 18             	mov    %eax,0x18(%rdi)
ffffffff80000106:	c3                   	ret    
ffffffff80000107:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000010e:	00 00 
}
ffffffff80000110:	c3                   	ret    
ffffffff80000111:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (compare_char(&ctx->grid[i], c)) {
ffffffff80000118:	48 8d 3c 49          	lea    (%rcx,%rcx,2),%rdi
ffffffff8000011c:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff80000123:	48 8d 0c b9          	lea    (%rcx,%rdi,4),%rcx
    return !(a->c != b->c || a->bg != b->bg || a->fg != b->fg);
ffffffff80000127:	41 8b 38             	mov    (%r8),%edi
ffffffff8000012a:	39 39                	cmp    %edi,(%rcx)
ffffffff8000012c:	74 32                	je     ffffffff80000160 <push_to_queue+0xa0>
        q = &ctx->queue[ctx->queue_i++];
ffffffff8000012e:	48 8b b8 c8 02 00 00 	mov    0x2c8(%rax),%rdi
ffffffff80000135:	48 8d 4f 01          	lea    0x1(%rdi),%rcx
ffffffff80000139:	48 c1 e7 05          	shl    $0x5,%rdi
ffffffff8000013d:	48 03 b8 c0 02 00 00 	add    0x2c0(%rax),%rdi
ffffffff80000144:	48 89 88 c8 02 00 00 	mov    %rcx,0x2c8(%rax)
        q->x = x;
ffffffff8000014b:	48 89 17             	mov    %rdx,(%rdi)
        q->y = y;
ffffffff8000014e:	48 89 77 08          	mov    %rsi,0x8(%rdi)
        ctx->map[i] = q;
ffffffff80000152:	49 89 39             	mov    %rdi,(%r9)
ffffffff80000155:	eb a1                	jmp    ffffffff800000f8 <push_to_queue+0x38>
ffffffff80000157:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000015e:	00 00 
    return !(a->c != b->c || a->bg != b->bg || a->fg != b->fg);
ffffffff80000160:	41 8b 78 08          	mov    0x8(%r8),%edi
ffffffff80000164:	39 79 08             	cmp    %edi,0x8(%rcx)
ffffffff80000167:	75 c5                	jne    ffffffff8000012e <push_to_queue+0x6e>
ffffffff80000169:	41 8b 78 04          	mov    0x4(%r8),%edi
ffffffff8000016d:	39 79 04             	cmp    %edi,0x4(%rcx)
ffffffff80000170:	75 bc                	jne    ffffffff8000012e <push_to_queue+0x6e>
ffffffff80000172:	c3                   	ret    
ffffffff80000173:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000017a:	00 00 00 00 
ffffffff8000017e:	66 90                	xchg   %ax,%ax

ffffffff80000180 <flanterm_fb_revscroll>:

static void flanterm_fb_revscroll(struct flanterm_context *_ctx) {
ffffffff80000180:	f3 0f 1e fa          	endbr64 
ffffffff80000184:	41 55                	push   %r13
ffffffff80000186:	49 89 fd             	mov    %rdi,%r13
ffffffff80000189:	41 54                	push   %r12
ffffffff8000018b:	55                   	push   %rbp
ffffffff8000018c:	53                   	push   %rbx
ffffffff8000018d:	48 83 ec 10          	sub    $0x10,%rsp
    struct flanterm_fb_context *ctx = (void *)_ctx;

    for (size_t i = (_ctx->scroll_bottom_margin - 1) * _ctx->cols - 1;
ffffffff80000191:	48 8b 47 70          	mov    0x70(%rdi),%rax
ffffffff80000195:	4c 8b 9f e8 00 00 00 	mov    0xe8(%rdi),%r11
         i >= _ctx->scroll_top_margin * _ctx->cols; i--) {
ffffffff8000019c:	48 8b 5f 68          	mov    0x68(%rdi),%rbx
    for (size_t i = (_ctx->scroll_bottom_margin - 1) * _ctx->cols - 1;
ffffffff800001a0:	48 83 e8 01          	sub    $0x1,%rax
         i >= _ctx->scroll_top_margin * _ctx->cols; i--) {
ffffffff800001a4:	4c 89 dd             	mov    %r11,%rbp
    for (size_t i = (_ctx->scroll_bottom_margin - 1) * _ctx->cols - 1;
ffffffff800001a7:	49 0f af c3          	imul   %r11,%rax
         i >= _ctx->scroll_top_margin * _ctx->cols; i--) {
ffffffff800001ab:	48 0f af eb          	imul   %rbx,%rbp
        if (i == (size_t)-1) {
ffffffff800001af:	48 85 c0             	test   %rax,%rax
ffffffff800001b2:	74 5c                	je     ffffffff80000210 <flanterm_fb_revscroll+0x90>
ffffffff800001b4:	4c 8d 50 ff          	lea    -0x1(%rax),%r10
ffffffff800001b8:	49 39 ea             	cmp    %rbp,%r10
ffffffff800001bb:	72 53                	jb     ffffffff80000210 <flanterm_fb_revscroll+0x90>
            break;
        }
        struct flanterm_fb_char *c;
        struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800001bd:	4c 8b a7 d0 02 00 00 	mov    0x2d0(%rdi),%r12
ffffffff800001c4:	eb 2d                	jmp    ffffffff800001f3 <flanterm_fb_revscroll+0x73>
ffffffff800001c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff800001cd:	00 00 00 
        if (q != NULL) {
            c = &q->c;
ffffffff800001d0:	48 83 c6 10          	add    $0x10,%rsi
        } else {
            c = &ctx->grid[i];
        }
        push_to_queue(_ctx, c, (i + _ctx->cols) % _ctx->cols, (i + _ctx->cols) / _ctx->cols);
ffffffff800001d4:	4b 8d 04 13          	lea    (%r11,%r10,1),%rax
ffffffff800001d8:	31 d2                	xor    %edx,%edx
ffffffff800001da:	4c 89 ef             	mov    %r13,%rdi
ffffffff800001dd:	49 f7 f3             	div    %r11
ffffffff800001e0:	48 89 c1             	mov    %rax,%rcx
ffffffff800001e3:	e8 d8 fe ff ff       	call   ffffffff800000c0 <push_to_queue>
        if (i == (size_t)-1) {
ffffffff800001e8:	49 83 ea 01          	sub    $0x1,%r10
ffffffff800001ec:	72 22                	jb     ffffffff80000210 <flanterm_fb_revscroll+0x90>
ffffffff800001ee:	49 39 ea             	cmp    %rbp,%r10
ffffffff800001f1:	72 1d                	jb     ffffffff80000210 <flanterm_fb_revscroll+0x90>
        struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800001f3:	4b 8b 34 d4          	mov    (%r12,%r10,8),%rsi
        if (q != NULL) {
ffffffff800001f7:	48 85 f6             	test   %rsi,%rsi
ffffffff800001fa:	75 d4                	jne    ffffffff800001d0 <flanterm_fb_revscroll+0x50>
            c = &ctx->grid[i];
ffffffff800001fc:	49 8b 95 b8 02 00 00 	mov    0x2b8(%r13),%rdx
ffffffff80000203:	4b 8d 04 52          	lea    (%r10,%r10,2),%rax
ffffffff80000207:	48 8d 34 82          	lea    (%rdx,%rax,4),%rsi
ffffffff8000020b:	eb c7                	jmp    ffffffff800001d4 <flanterm_fb_revscroll+0x54>
ffffffff8000020d:	0f 1f 00             	nopl   (%rax)
    }

    // Clear the first line of the screen.
    struct flanterm_fb_char empty;
    empty.c  = ' ';
    empty.fg = ctx->text_fg;
ffffffff80000210:	49 8b 85 d8 02 00 00 	mov    0x2d8(%r13),%rax
    empty.c  = ' ';
ffffffff80000217:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%rsp)
ffffffff8000021e:	00 
    empty.bg = ctx->text_bg;
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff8000021f:	31 d2                	xor    %edx,%edx
ffffffff80000221:	4c 8d 54 24 04       	lea    0x4(%rsp),%r10
    empty.fg = ctx->text_fg;
ffffffff80000226:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff8000022b:	4d 85 db             	test   %r11,%r11
ffffffff8000022e:	74 17                	je     ffffffff80000247 <flanterm_fb_revscroll+0xc7>
        push_to_queue(_ctx, &empty, i, _ctx->scroll_top_margin);
ffffffff80000230:	48 89 d9             	mov    %rbx,%rcx
ffffffff80000233:	4c 89 d6             	mov    %r10,%rsi
ffffffff80000236:	4c 89 ef             	mov    %r13,%rdi
ffffffff80000239:	e8 82 fe ff ff       	call   ffffffff800000c0 <push_to_queue>
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff8000023e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80000242:	49 39 d3             	cmp    %rdx,%r11
ffffffff80000245:	75 e9                	jne    ffffffff80000230 <flanterm_fb_revscroll+0xb0>
    }
}
ffffffff80000247:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000024b:	5b                   	pop    %rbx
ffffffff8000024c:	5d                   	pop    %rbp
ffffffff8000024d:	41 5c                	pop    %r12
ffffffff8000024f:	41 5d                	pop    %r13
ffffffff80000251:	c3                   	ret    
ffffffff80000252:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000259:	00 00 00 00 
ffffffff8000025d:	0f 1f 00             	nopl   (%rax)

ffffffff80000260 <flanterm_fb_scroll>:

static void flanterm_fb_scroll(struct flanterm_context *_ctx) {
ffffffff80000260:	f3 0f 1e fa          	endbr64 
ffffffff80000264:	41 56                	push   %r14
ffffffff80000266:	41 55                	push   %r13
ffffffff80000268:	41 54                	push   %r12
ffffffff8000026a:	55                   	push   %rbp
ffffffff8000026b:	53                   	push   %rbx
ffffffff8000026c:	48 89 fb             	mov    %rdi,%rbx
ffffffff8000026f:	48 83 ec 10          	sub    $0x10,%rsp
    struct flanterm_fb_context *ctx = (void *)_ctx;

    for (size_t i = (_ctx->scroll_top_margin + 1) * _ctx->cols;
ffffffff80000273:	4c 8b 9f e8 00 00 00 	mov    0xe8(%rdi),%r11
ffffffff8000027a:	48 8b 47 68          	mov    0x68(%rdi),%rax
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
ffffffff8000027e:	48 8b 6f 70          	mov    0x70(%rdi),%rbp
    for (size_t i = (_ctx->scroll_top_margin + 1) * _ctx->cols;
ffffffff80000282:	48 83 c0 01          	add    $0x1,%rax
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
ffffffff80000286:	4d 89 dc             	mov    %r11,%r12
    for (size_t i = (_ctx->scroll_top_margin + 1) * _ctx->cols;
ffffffff80000289:	49 0f af c3          	imul   %r11,%rax
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
ffffffff8000028d:	4c 0f af e5          	imul   %rbp,%r12
ffffffff80000291:	4c 39 e0             	cmp    %r12,%rax
ffffffff80000294:	73 62                	jae    ffffffff800002f8 <flanterm_fb_scroll+0x98>
ffffffff80000296:	49 89 c2             	mov    %rax,%r10
ffffffff80000299:	4c 8d 34 40          	lea    (%rax,%rax,2),%r14
ffffffff8000029d:	48 8b 87 d0 02 00 00 	mov    0x2d0(%rdi),%rax
ffffffff800002a4:	4d 29 dc             	sub    %r11,%r12
ffffffff800002a7:	4d 29 da             	sub    %r11,%r10
ffffffff800002aa:	49 c1 e6 02          	shl    $0x2,%r14
ffffffff800002ae:	4e 8d 2c d8          	lea    (%rax,%r11,8),%r13
ffffffff800002b2:	eb 28                	jmp    ffffffff800002dc <flanterm_fb_scroll+0x7c>
ffffffff800002b4:	0f 1f 40 00          	nopl   0x0(%rax)
        struct flanterm_fb_char *c;
        struct flanterm_fb_queue_item *q = ctx->map[i];
        if (q != NULL) {
            c = &q->c;
ffffffff800002b8:	48 83 c6 10          	add    $0x10,%rsi
        } else {
            c = &ctx->grid[i];
        }
        push_to_queue(_ctx, c, (i - _ctx->cols) % _ctx->cols, (i - _ctx->cols) / _ctx->cols);
ffffffff800002bc:	4c 89 d0             	mov    %r10,%rax
ffffffff800002bf:	31 d2                	xor    %edx,%edx
ffffffff800002c1:	48 89 df             	mov    %rbx,%rdi
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
ffffffff800002c4:	49 83 c2 01          	add    $0x1,%r10
ffffffff800002c8:	49 f7 f3             	div    %r11
ffffffff800002cb:	49 83 c6 0c          	add    $0xc,%r14
ffffffff800002cf:	48 89 c1             	mov    %rax,%rcx
        push_to_queue(_ctx, c, (i - _ctx->cols) % _ctx->cols, (i - _ctx->cols) / _ctx->cols);
ffffffff800002d2:	e8 e9 fd ff ff       	call   ffffffff800000c0 <push_to_queue>
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
ffffffff800002d7:	4d 39 d4             	cmp    %r10,%r12
ffffffff800002da:	74 1c                	je     ffffffff800002f8 <flanterm_fb_scroll+0x98>
        struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800002dc:	4b 8b 74 d5 00       	mov    0x0(%r13,%r10,8),%rsi
        if (q != NULL) {
ffffffff800002e1:	48 85 f6             	test   %rsi,%rsi
ffffffff800002e4:	75 d2                	jne    ffffffff800002b8 <flanterm_fb_scroll+0x58>
            c = &ctx->grid[i];
ffffffff800002e6:	48 8b b3 b8 02 00 00 	mov    0x2b8(%rbx),%rsi
ffffffff800002ed:	4c 01 f6             	add    %r14,%rsi
ffffffff800002f0:	eb ca                	jmp    ffffffff800002bc <flanterm_fb_scroll+0x5c>
ffffffff800002f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    }

    // Clear the last line of the screen.
    struct flanterm_fb_char empty;
    empty.c  = ' ';
    empty.fg = ctx->text_fg;
ffffffff800002f8:	48 8b 83 d8 02 00 00 	mov    0x2d8(%rbx),%rax
    empty.c  = ' ';
ffffffff800002ff:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%rsp)
ffffffff80000306:	00 
    empty.bg = ctx->text_bg;
    for (size_t i = 0; i < _ctx->cols; i++) {
        push_to_queue(_ctx, &empty, i, _ctx->scroll_bottom_margin - 1);
ffffffff80000307:	48 83 ed 01          	sub    $0x1,%rbp
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff8000030b:	31 d2                	xor    %edx,%edx
ffffffff8000030d:	4c 8d 54 24 04       	lea    0x4(%rsp),%r10
    empty.fg = ctx->text_fg;
ffffffff80000312:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff80000317:	4d 85 db             	test   %r11,%r11
ffffffff8000031a:	74 1b                	je     ffffffff80000337 <flanterm_fb_scroll+0xd7>
ffffffff8000031c:	0f 1f 40 00          	nopl   0x0(%rax)
        push_to_queue(_ctx, &empty, i, _ctx->scroll_bottom_margin - 1);
ffffffff80000320:	48 89 e9             	mov    %rbp,%rcx
ffffffff80000323:	4c 89 d6             	mov    %r10,%rsi
ffffffff80000326:	48 89 df             	mov    %rbx,%rdi
ffffffff80000329:	e8 92 fd ff ff       	call   ffffffff800000c0 <push_to_queue>
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff8000032e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80000332:	49 39 d3             	cmp    %rdx,%r11
ffffffff80000335:	75 e9                	jne    ffffffff80000320 <flanterm_fb_scroll+0xc0>
    }
}
ffffffff80000337:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000033b:	5b                   	pop    %rbx
ffffffff8000033c:	5d                   	pop    %rbp
ffffffff8000033d:	41 5c                	pop    %r12
ffffffff8000033f:	41 5d                	pop    %r13
ffffffff80000341:	41 5e                	pop    %r14
ffffffff80000343:	c3                   	ret    
ffffffff80000344:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000034b:	00 00 00 00 
ffffffff8000034f:	90                   	nop

ffffffff80000350 <flanterm_fb_clear>:

static void flanterm_fb_clear(struct flanterm_context *_ctx, bool move) {
ffffffff80000350:	f3 0f 1e fa          	endbr64 
ffffffff80000354:	41 55                	push   %r13
ffffffff80000356:	41 89 f5             	mov    %esi,%r13d
ffffffff80000359:	41 54                	push   %r12
ffffffff8000035b:	55                   	push   %rbp
ffffffff8000035c:	53                   	push   %rbx
ffffffff8000035d:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000360:	48 83 ec 10          	sub    $0x10,%rsp

    struct flanterm_fb_char empty;
    empty.c  = ' ';
    empty.fg = ctx->text_fg;
    empty.bg = ctx->text_bg;
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff80000364:	4c 8b 9f e8 00 00 00 	mov    0xe8(%rdi),%r11
ffffffff8000036b:	48 8b af e0 00 00 00 	mov    0xe0(%rdi),%rbp
    empty.fg = ctx->text_fg;
ffffffff80000372:	48 8b 87 d8 02 00 00 	mov    0x2d8(%rdi),%rax
    empty.c  = ' ';
ffffffff80000379:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%rsp)
ffffffff80000380:	00 
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff80000381:	49 0f af eb          	imul   %r11,%rbp
    empty.fg = ctx->text_fg;
ffffffff80000385:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff8000038a:	48 85 ed             	test   %rbp,%rbp
ffffffff8000038d:	74 30                	je     ffffffff800003bf <flanterm_fb_clear+0x6f>
ffffffff8000038f:	45 31 d2             	xor    %r10d,%r10d
ffffffff80000392:	4c 8d 64 24 04       	lea    0x4(%rsp),%r12
ffffffff80000397:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000039e:	00 00 
        push_to_queue(_ctx, &empty, i % _ctx->cols, i / _ctx->cols);
ffffffff800003a0:	4c 89 d0             	mov    %r10,%rax
ffffffff800003a3:	31 d2                	xor    %edx,%edx
ffffffff800003a5:	4c 89 e6             	mov    %r12,%rsi
ffffffff800003a8:	48 89 df             	mov    %rbx,%rdi
ffffffff800003ab:	49 f7 f3             	div    %r11
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff800003ae:	49 83 c2 01          	add    $0x1,%r10
ffffffff800003b2:	48 89 c1             	mov    %rax,%rcx
        push_to_queue(_ctx, &empty, i % _ctx->cols, i / _ctx->cols);
ffffffff800003b5:	e8 06 fd ff ff       	call   ffffffff800000c0 <push_to_queue>
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff800003ba:	49 39 ea             	cmp    %rbp,%r10
ffffffff800003bd:	75 e1                	jne    ffffffff800003a0 <flanterm_fb_clear+0x50>
    }

    if (move) {
ffffffff800003bf:	45 84 ed             	test   %r13b,%r13b
ffffffff800003c2:	74 16                	je     ffffffff800003da <flanterm_fb_clear+0x8a>
        ctx->cursor_x = 0;
ffffffff800003c4:	48 c7 83 e0 02 00 00 	movq   $0x0,0x2e0(%rbx)
ffffffff800003cb:	00 00 00 00 
        ctx->cursor_y = 0;
ffffffff800003cf:	48 c7 83 e8 02 00 00 	movq   $0x0,0x2e8(%rbx)
ffffffff800003d6:	00 00 00 00 
    }
}
ffffffff800003da:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800003de:	5b                   	pop    %rbx
ffffffff800003df:	5d                   	pop    %rbp
ffffffff800003e0:	41 5c                	pop    %r12
ffffffff800003e2:	41 5d                	pop    %r13
ffffffff800003e4:	c3                   	ret    
ffffffff800003e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff800003ec:	00 00 00 00 

ffffffff800003f0 <flanterm_fb_set_cursor_pos>:

static void flanterm_fb_set_cursor_pos(struct flanterm_context *_ctx, size_t x, size_t y) {
ffffffff800003f0:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    if (x >= _ctx->cols) {
ffffffff800003f4:	48 8b 87 e8 00 00 00 	mov    0xe8(%rdi),%rax
ffffffff800003fb:	48 39 f0             	cmp    %rsi,%rax
ffffffff800003fe:	77 0f                	ja     ffffffff8000040f <flanterm_fb_set_cursor_pos+0x1f>
        if ((int)x < 0) {
            x = 0;
        } else {
            x = _ctx->cols - 1;
ffffffff80000400:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80000404:	85 f6                	test   %esi,%esi
ffffffff80000406:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8000040b:	48 0f 49 f0          	cmovns %rax,%rsi
        }
    }
    if (y >= _ctx->rows) {
ffffffff8000040f:	48 8b 87 e0 00 00 00 	mov    0xe0(%rdi),%rax
ffffffff80000416:	48 39 d0             	cmp    %rdx,%rax
ffffffff80000419:	77 0f                	ja     ffffffff8000042a <flanterm_fb_set_cursor_pos+0x3a>
        if ((int)y < 0) {
            y = 0;
        } else {
            y = _ctx->rows - 1;
ffffffff8000041b:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000041f:	85 d2                	test   %edx,%edx
ffffffff80000421:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80000426:	48 0f 49 d0          	cmovns %rax,%rdx
        }
    }
    ctx->cursor_x = x;
ffffffff8000042a:	48 89 b7 e0 02 00 00 	mov    %rsi,0x2e0(%rdi)
    ctx->cursor_y = y;
ffffffff80000431:	48 89 97 e8 02 00 00 	mov    %rdx,0x2e8(%rdi)
}
ffffffff80000438:	c3                   	ret    
ffffffff80000439:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80000440 <flanterm_fb_get_cursor_pos>:

static void flanterm_fb_get_cursor_pos(struct flanterm_context *_ctx, size_t *x, size_t *y) {
ffffffff80000440:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    *x = ctx->cursor_x >= _ctx->cols ? _ctx->cols - 1 : ctx->cursor_x;
ffffffff80000444:	48 8b 87 e0 02 00 00 	mov    0x2e0(%rdi),%rax
static void flanterm_fb_get_cursor_pos(struct flanterm_context *_ctx, size_t *x, size_t *y) {
ffffffff8000044b:	49 89 d0             	mov    %rdx,%r8
    *x = ctx->cursor_x >= _ctx->cols ? _ctx->cols - 1 : ctx->cursor_x;
ffffffff8000044e:	48 8b 97 e8 00 00 00 	mov    0xe8(%rdi),%rdx
ffffffff80000455:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
ffffffff80000459:	48 39 d0             	cmp    %rdx,%rax
ffffffff8000045c:	48 0f 43 c1          	cmovae %rcx,%rax
ffffffff80000460:	48 89 06             	mov    %rax,(%rsi)
    *y = ctx->cursor_y >= _ctx->rows ? _ctx->rows - 1 : ctx->cursor_y;
ffffffff80000463:	48 8b 87 e8 02 00 00 	mov    0x2e8(%rdi),%rax
ffffffff8000046a:	48 8b 97 e0 00 00 00 	mov    0xe0(%rdi),%rdx
ffffffff80000471:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
ffffffff80000475:	48 39 d0             	cmp    %rdx,%rax
ffffffff80000478:	48 0f 43 c1          	cmovae %rcx,%rax
ffffffff8000047c:	49 89 00             	mov    %rax,(%r8)
}
ffffffff8000047f:	c3                   	ret    

ffffffff80000480 <flanterm_fb_move_character>:

static void flanterm_fb_move_character(struct flanterm_context *_ctx, size_t new_x, size_t new_y, size_t old_x, size_t old_y) {
ffffffff80000480:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    if (old_x >= _ctx->cols || old_y >= _ctx->rows
ffffffff80000484:	48 8b 87 e8 00 00 00 	mov    0xe8(%rdi),%rax
ffffffff8000048b:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000048e:	76 1f                	jbe    ffffffff800004af <flanterm_fb_move_character+0x2f>
ffffffff80000490:	4c 8b 97 e0 00 00 00 	mov    0xe0(%rdi),%r10
ffffffff80000497:	4d 39 c2             	cmp    %r8,%r10
ffffffff8000049a:	41 0f 96 c1          	setbe  %r9b
     || new_x >= _ctx->cols || new_y >= _ctx->rows) {
ffffffff8000049e:	48 39 f0             	cmp    %rsi,%rax
ffffffff800004a1:	41 0f 96 c3          	setbe  %r11b
ffffffff800004a5:	45 08 d9             	or     %r11b,%r9b
ffffffff800004a8:	75 05                	jne    ffffffff800004af <flanterm_fb_move_character+0x2f>
ffffffff800004aa:	49 39 d2             	cmp    %rdx,%r10
ffffffff800004ad:	77 01                	ja     ffffffff800004b0 <flanterm_fb_move_character+0x30>
    } else {
        c = &ctx->grid[i];
    }

    push_to_queue(_ctx, c, new_x, new_y);
}
ffffffff800004af:	c3                   	ret    
    size_t i = old_x + old_y * _ctx->cols;
ffffffff800004b0:	49 0f af c0          	imul   %r8,%rax
ffffffff800004b4:	48 01 c8             	add    %rcx,%rax
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800004b7:	48 8b 8f d0 02 00 00 	mov    0x2d0(%rdi),%rcx
ffffffff800004be:	48 8b 0c c1          	mov    (%rcx,%rax,8),%rcx
        c = &q->c;
ffffffff800004c2:	4c 8d 41 10          	lea    0x10(%rcx),%r8
    if (q != NULL) {
ffffffff800004c6:	48 85 c9             	test   %rcx,%rcx
ffffffff800004c9:	74 15                	je     ffffffff800004e0 <flanterm_fb_move_character+0x60>
    push_to_queue(_ctx, c, new_x, new_y);
ffffffff800004cb:	48 89 d1             	mov    %rdx,%rcx
ffffffff800004ce:	48 89 f2             	mov    %rsi,%rdx
ffffffff800004d1:	4c 89 c6             	mov    %r8,%rsi
ffffffff800004d4:	e9 e7 fb ff ff       	jmp    ffffffff800000c0 <push_to_queue>
ffffffff800004d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        c = &ctx->grid[i];
ffffffff800004e0:	48 8d 0c 40          	lea    (%rax,%rax,2),%rcx
ffffffff800004e4:	48 8b 87 b8 02 00 00 	mov    0x2b8(%rdi),%rax
ffffffff800004eb:	4c 8d 04 88          	lea    (%rax,%rcx,4),%r8
ffffffff800004ef:	eb da                	jmp    ffffffff800004cb <flanterm_fb_move_character+0x4b>
ffffffff800004f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff800004f8:	00 00 00 00 
ffffffff800004fc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000500 <flanterm_fb_set_text_fg>:

static void flanterm_fb_set_text_fg(struct flanterm_context *_ctx, size_t fg) {
ffffffff80000500:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_fg = ctx->ansi_colours[fg];
ffffffff80000504:	8b 84 b7 40 02 00 00 	mov    0x240(%rdi,%rsi,4),%eax
ffffffff8000050b:	89 87 d8 02 00 00    	mov    %eax,0x2d8(%rdi)
}
ffffffff80000511:	c3                   	ret    
ffffffff80000512:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000519:	00 00 00 00 
ffffffff8000051d:	0f 1f 00             	nopl   (%rax)

ffffffff80000520 <flanterm_fb_set_text_bg>:

static void flanterm_fb_set_text_bg(struct flanterm_context *_ctx, size_t bg) {
ffffffff80000520:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_bg = ctx->ansi_colours[bg];
ffffffff80000524:	8b 84 b7 40 02 00 00 	mov    0x240(%rdi,%rsi,4),%eax
ffffffff8000052b:	89 87 dc 02 00 00    	mov    %eax,0x2dc(%rdi)
}
ffffffff80000531:	c3                   	ret    
ffffffff80000532:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000539:	00 00 00 00 
ffffffff8000053d:	0f 1f 00             	nopl   (%rax)

ffffffff80000540 <flanterm_fb_set_text_fg_bright>:

static void flanterm_fb_set_text_fg_bright(struct flanterm_context *_ctx, size_t fg) {
ffffffff80000540:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_fg = ctx->ansi_bright_colours[fg];
ffffffff80000544:	8b 84 b7 60 02 00 00 	mov    0x260(%rdi,%rsi,4),%eax
ffffffff8000054b:	89 87 d8 02 00 00    	mov    %eax,0x2d8(%rdi)
}
ffffffff80000551:	c3                   	ret    
ffffffff80000552:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000559:	00 00 00 00 
ffffffff8000055d:	0f 1f 00             	nopl   (%rax)

ffffffff80000560 <flanterm_fb_set_text_bg_bright>:

static void flanterm_fb_set_text_bg_bright(struct flanterm_context *_ctx, size_t bg) {
ffffffff80000560:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_bg = ctx->ansi_bright_colours[bg];
ffffffff80000564:	8b 84 b7 60 02 00 00 	mov    0x260(%rdi,%rsi,4),%eax
ffffffff8000056b:	89 87 dc 02 00 00    	mov    %eax,0x2dc(%rdi)
}
ffffffff80000571:	c3                   	ret    
ffffffff80000572:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000579:	00 00 00 00 
ffffffff8000057d:	0f 1f 00             	nopl   (%rax)

ffffffff80000580 <flanterm_fb_set_text_fg_rgb>:

static void flanterm_fb_set_text_fg_rgb(struct flanterm_context *_ctx, uint32_t fg) {
ffffffff80000580:	f3 0f 1e fa          	endbr64 
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000584:	89 f0                	mov    %esi,%eax
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000586:	0f b6 8f 19 02 00 00 	movzbl 0x219(%rdi),%ecx
static void flanterm_fb_set_text_fg_rgb(struct flanterm_context *_ctx, uint32_t fg) {
ffffffff8000058d:	89 f2                	mov    %esi,%edx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000058f:	c1 e8 10             	shr    $0x10,%eax
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000592:	0f b6 f6             	movzbl %dh,%esi
    uint32_t b =  colour & 0xff;
ffffffff80000595:	0f b6 d2             	movzbl %dl,%edx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000598:	0f b6 c0             	movzbl %al,%eax
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff8000059b:	d3 e0                	shl    %cl,%eax
ffffffff8000059d:	0f b6 8f 1b 02 00 00 	movzbl 0x21b(%rdi),%ecx
ffffffff800005a4:	d3 e6                	shl    %cl,%esi
ffffffff800005a6:	0f b6 8f 1d 02 00 00 	movzbl 0x21d(%rdi),%ecx
ffffffff800005ad:	09 f0                	or     %esi,%eax
ffffffff800005af:	d3 e2                	shl    %cl,%edx
ffffffff800005b1:	09 d0                	or     %edx,%eax
ffffffff800005b3:	89 87 d8 02 00 00    	mov    %eax,0x2d8(%rdi)
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_fg = convert_colour(_ctx, fg);
}
ffffffff800005b9:	c3                   	ret    
ffffffff800005ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff800005c0 <flanterm_fb_set_text_bg_rgb>:

static void flanterm_fb_set_text_bg_rgb(struct flanterm_context *_ctx, uint32_t bg) {
ffffffff800005c0:	f3 0f 1e fa          	endbr64 
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800005c4:	89 f0                	mov    %esi,%eax
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800005c6:	0f b6 8f 19 02 00 00 	movzbl 0x219(%rdi),%ecx
static void flanterm_fb_set_text_bg_rgb(struct flanterm_context *_ctx, uint32_t bg) {
ffffffff800005cd:	89 f2                	mov    %esi,%edx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800005cf:	c1 e8 10             	shr    $0x10,%eax
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800005d2:	0f b6 f6             	movzbl %dh,%esi
    uint32_t b =  colour & 0xff;
ffffffff800005d5:	0f b6 d2             	movzbl %dl,%edx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800005d8:	0f b6 c0             	movzbl %al,%eax
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800005db:	d3 e0                	shl    %cl,%eax
ffffffff800005dd:	0f b6 8f 1b 02 00 00 	movzbl 0x21b(%rdi),%ecx
ffffffff800005e4:	d3 e6                	shl    %cl,%esi
ffffffff800005e6:	0f b6 8f 1d 02 00 00 	movzbl 0x21d(%rdi),%ecx
ffffffff800005ed:	09 f0                	or     %esi,%eax
ffffffff800005ef:	d3 e2                	shl    %cl,%edx
ffffffff800005f1:	09 d0                	or     %edx,%eax
ffffffff800005f3:	89 87 dc 02 00 00    	mov    %eax,0x2dc(%rdi)
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_bg = convert_colour(_ctx, bg);
}
ffffffff800005f9:	c3                   	ret    
ffffffff800005fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000600 <flanterm_fb_set_text_fg_default>:

static void flanterm_fb_set_text_fg_default(struct flanterm_context *_ctx) {
ffffffff80000600:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_fg = ctx->default_fg;
ffffffff80000604:	8b 87 80 02 00 00    	mov    0x280(%rdi),%eax
ffffffff8000060a:	89 87 d8 02 00 00    	mov    %eax,0x2d8(%rdi)
}
ffffffff80000610:	c3                   	ret    
ffffffff80000611:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000618:	00 00 00 00 
ffffffff8000061c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000620 <flanterm_fb_set_text_bg_default>:

static void flanterm_fb_set_text_bg_default(struct flanterm_context *_ctx) {
ffffffff80000620:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_bg = 0xffffffff;
ffffffff80000624:	c7 87 dc 02 00 00 ff 	movl   $0xffffffff,0x2dc(%rdi)
ffffffff8000062b:	ff ff ff 
}
ffffffff8000062e:	c3                   	ret    
ffffffff8000062f:	90                   	nop

ffffffff80000630 <flanterm_fb_set_text_fg_default_bright>:

static void flanterm_fb_set_text_fg_default_bright(struct flanterm_context *_ctx) {
ffffffff80000630:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_fg = ctx->default_fg_bright;
ffffffff80000634:	8b 87 88 02 00 00    	mov    0x288(%rdi),%eax
ffffffff8000063a:	89 87 d8 02 00 00    	mov    %eax,0x2d8(%rdi)
}
ffffffff80000640:	c3                   	ret    
ffffffff80000641:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000648:	00 00 00 00 
ffffffff8000064c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000650 <flanterm_fb_set_text_bg_default_bright>:

static void flanterm_fb_set_text_bg_default_bright(struct flanterm_context *_ctx) {
ffffffff80000650:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    ctx->text_bg = ctx->default_bg_bright;
ffffffff80000654:	8b 87 8c 02 00 00    	mov    0x28c(%rdi),%eax
ffffffff8000065a:	89 87 dc 02 00 00    	mov    %eax,0x2dc(%rdi)
}
ffffffff80000660:	c3                   	ret    
ffffffff80000661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000668:	00 00 00 00 
ffffffff8000066c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000670 <flanterm_fb_raw_putchar>:
    ctx->old_cursor_y = ctx->cursor_y;

    ctx->queue_i = 0;
}

static void flanterm_fb_raw_putchar(struct flanterm_context *_ctx, uint8_t c) {
ffffffff80000670:	f3 0f 1e fa          	endbr64 
ffffffff80000674:	55                   	push   %rbp
ffffffff80000675:	53                   	push   %rbx
ffffffff80000676:	89 f3                	mov    %esi,%ebx
ffffffff80000678:	48 83 ec 20          	sub    $0x20,%rsp
    struct flanterm_fb_context *ctx = (void *)_ctx;

    if (ctx->cursor_x >= _ctx->cols && (ctx->cursor_y < _ctx->scroll_bottom_margin - 1 || _ctx->scroll_enabled)) {
ffffffff8000067c:	48 8b 97 e0 02 00 00 	mov    0x2e0(%rdi),%rdx
ffffffff80000683:	48 8b af e8 00 00 00 	mov    0xe8(%rdi),%rbp
ffffffff8000068a:	48 8b 8f e8 02 00 00 	mov    0x2e8(%rdi),%rcx
ffffffff80000691:	48 39 ea             	cmp    %rbp,%rdx
ffffffff80000694:	72 50                	jb     ffffffff800006e6 <flanterm_fb_raw_putchar+0x76>
ffffffff80000696:	48 8b 47 70          	mov    0x70(%rdi),%rax
ffffffff8000069a:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff8000069e:	48 39 ce             	cmp    %rcx,%rsi
ffffffff800006a1:	76 3d                	jbe    ffffffff800006e0 <flanterm_fb_raw_putchar+0x70>
        ctx->cursor_x = 0;
ffffffff800006a3:	48 c7 87 e0 02 00 00 	movq   $0x0,0x2e0(%rdi)
ffffffff800006aa:	00 00 00 00 
        ctx->cursor_y++;
ffffffff800006ae:	48 8d 51 01          	lea    0x1(%rcx),%rdx
        if (ctx->cursor_y == _ctx->scroll_bottom_margin) {
ffffffff800006b2:	48 39 d0             	cmp    %rdx,%rax
ffffffff800006b5:	74 71                	je     ffffffff80000728 <flanterm_fb_raw_putchar+0xb8>
        ctx->cursor_y++;
ffffffff800006b7:	48 89 97 e8 02 00 00 	mov    %rdx,0x2e8(%rdi)
ffffffff800006be:	48 89 d1             	mov    %rdx,%rcx
            ctx->cursor_y--;
            flanterm_fb_scroll(_ctx);
        }
        if (ctx->cursor_y >= _ctx->cols) {
ffffffff800006c1:	48 39 cd             	cmp    %rcx,%rbp
ffffffff800006c4:	77 52                	ja     ffffffff80000718 <flanterm_fb_raw_putchar+0xa8>
            ctx->cursor_y = _ctx->cols - 1;
ffffffff800006c6:	48 8d 4d ff          	lea    -0x1(%rbp),%rcx
ffffffff800006ca:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800006cf:	31 d2                	xor    %edx,%edx
ffffffff800006d1:	48 89 8f e8 02 00 00 	mov    %rcx,0x2e8(%rdi)
ffffffff800006d8:	eb 10                	jmp    ffffffff800006ea <flanterm_fb_raw_putchar+0x7a>
ffffffff800006da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    if (ctx->cursor_x >= _ctx->cols && (ctx->cursor_y < _ctx->scroll_bottom_margin - 1 || _ctx->scroll_enabled)) {
ffffffff800006e0:	80 7f 0a 00          	cmpb   $0x0,0xa(%rdi)
ffffffff800006e4:	75 bd                	jne    ffffffff800006a3 <flanterm_fb_raw_putchar+0x33>

    struct flanterm_fb_char ch;
    ch.c  = c;
    ch.fg = ctx->text_fg;
    ch.bg = ctx->text_bg;
    push_to_queue(_ctx, &ch, ctx->cursor_x++, ctx->cursor_y);
ffffffff800006e6:	48 8d 72 01          	lea    0x1(%rdx),%rsi
ffffffff800006ea:	48 89 b7 e0 02 00 00 	mov    %rsi,0x2e0(%rdi)
    ch.fg = ctx->text_fg;
ffffffff800006f1:	48 8b 87 d8 02 00 00 	mov    0x2d8(%rdi),%rax
    ch.c  = c;
ffffffff800006f8:	0f b6 db             	movzbl %bl,%ebx
    push_to_queue(_ctx, &ch, ctx->cursor_x++, ctx->cursor_y);
ffffffff800006fb:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
    ch.c  = c;
ffffffff80000700:	89 5c 24 14          	mov    %ebx,0x14(%rsp)
    ch.fg = ctx->text_fg;
ffffffff80000704:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    push_to_queue(_ctx, &ch, ctx->cursor_x++, ctx->cursor_y);
ffffffff80000709:	e8 b2 f9 ff ff       	call   ffffffff800000c0 <push_to_queue>
}
ffffffff8000070e:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80000712:	5b                   	pop    %rbx
ffffffff80000713:	5d                   	pop    %rbp
ffffffff80000714:	c3                   	ret    
ffffffff80000715:	0f 1f 00             	nopl   (%rax)
ffffffff80000718:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000071d:	31 d2                	xor    %edx,%edx
ffffffff8000071f:	eb c9                	jmp    ffffffff800006ea <flanterm_fb_raw_putchar+0x7a>
ffffffff80000721:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80000728:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
            flanterm_fb_scroll(_ctx);
ffffffff8000072d:	48 89 3c 24          	mov    %rdi,(%rsp)
ffffffff80000731:	e8 2a fb ff ff       	call   ffffffff80000260 <flanterm_fb_scroll>
ffffffff80000736:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffffff8000073b:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff8000073f:	eb 80                	jmp    ffffffff800006c1 <flanterm_fb_raw_putchar+0x51>
ffffffff80000741:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000748:	00 00 00 00 
ffffffff8000074c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80000750 <flanterm_fb_deinit>:
    if (_ctx->cursor_enabled) {
        draw_cursor(_ctx);
    }
}

static void flanterm_fb_deinit(struct flanterm_context *_ctx, void (*_free)(void *, size_t)) {
ffffffff80000750:	f3 0f 1e fa          	endbr64 
    struct flanterm_fb_context *ctx = (void *)_ctx;

    if (_free == NULL) {
ffffffff80000754:	48 85 f6             	test   %rsi,%rsi
ffffffff80000757:	0f 84 8b 00 00 00    	je     ffffffff800007e8 <flanterm_fb_deinit+0x98>
static void flanterm_fb_deinit(struct flanterm_context *_ctx, void (*_free)(void *, size_t)) {
ffffffff8000075d:	55                   	push   %rbp
ffffffff8000075e:	48 89 fd             	mov    %rdi,%rbp
ffffffff80000761:	53                   	push   %rbx
ffffffff80000762:	48 89 f3             	mov    %rsi,%rbx
ffffffff80000765:	48 83 ec 08          	sub    $0x8,%rsp
        }
#endif
        return;
    }

    _free(ctx->font_bits, ctx->font_bits_size);
ffffffff80000769:	48 8b b7 20 02 00 00 	mov    0x220(%rdi),%rsi
ffffffff80000770:	48 8b bf 28 02 00 00 	mov    0x228(%rdi),%rdi
ffffffff80000777:	ff d3                	call   *%rbx
    _free(ctx->font_bool, ctx->font_bool_size);
ffffffff80000779:	48 8b b5 30 02 00 00 	mov    0x230(%rbp),%rsi
ffffffff80000780:	48 8b bd 38 02 00 00 	mov    0x238(%rbp),%rdi
ffffffff80000787:	ff d3                	call   *%rbx
    _free(ctx->grid, ctx->grid_size);
ffffffff80000789:	48 8b b5 a0 02 00 00 	mov    0x2a0(%rbp),%rsi
ffffffff80000790:	48 8b bd b8 02 00 00 	mov    0x2b8(%rbp),%rdi
ffffffff80000797:	ff d3                	call   *%rbx
    _free(ctx->queue, ctx->queue_size);
ffffffff80000799:	48 8b b5 a8 02 00 00 	mov    0x2a8(%rbp),%rsi
ffffffff800007a0:	48 8b bd c0 02 00 00 	mov    0x2c0(%rbp),%rdi
ffffffff800007a7:	ff d3                	call   *%rbx
    _free(ctx->map, ctx->map_size);
ffffffff800007a9:	48 8b bd d0 02 00 00 	mov    0x2d0(%rbp),%rdi
ffffffff800007b0:	48 8b b5 b0 02 00 00 	mov    0x2b0(%rbp),%rsi
ffffffff800007b7:	ff d3                	call   *%rbx

    if (ctx->canvas != NULL) {
ffffffff800007b9:	48 8b bd 98 02 00 00 	mov    0x298(%rbp),%rdi
ffffffff800007c0:	48 85 ff             	test   %rdi,%rdi
ffffffff800007c3:	74 09                	je     ffffffff800007ce <flanterm_fb_deinit+0x7e>
        _free(ctx->canvas, ctx->canvas_size);
ffffffff800007c5:	48 8b b5 90 02 00 00 	mov    0x290(%rbp),%rsi
ffffffff800007cc:	ff d3                	call   *%rbx
    }

    _free(ctx, sizeof(struct flanterm_fb_context));
}
ffffffff800007ce:	48 83 c4 08          	add    $0x8,%rsp
    _free(ctx, sizeof(struct flanterm_fb_context));
ffffffff800007d2:	48 89 ef             	mov    %rbp,%rdi
ffffffff800007d5:	48 89 d8             	mov    %rbx,%rax
ffffffff800007d8:	be 18 03 00 00       	mov    $0x318,%esi
}
ffffffff800007dd:	5b                   	pop    %rbx
ffffffff800007de:	5d                   	pop    %rbp
    _free(ctx, sizeof(struct flanterm_fb_context));
ffffffff800007df:	ff e0                	jmp    *%rax
ffffffff800007e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (bump_allocated_instance == true) {
ffffffff800007e8:	80 3d 31 c3 00 00 00 	cmpb   $0x0,0xc331(%rip)        # ffffffff8000cb20 <bump_allocated_instance>
ffffffff800007ef:	74 17                	je     ffffffff80000808 <flanterm_fb_deinit+0xb8>
            bump_alloc_ptr = 0;
ffffffff800007f1:	48 c7 05 2c c3 00 00 	movq   $0x0,0xc32c(%rip)        # ffffffff8000cb28 <bump_alloc_ptr>
ffffffff800007f8:	00 00 00 00 
            bump_allocated_instance = false;
ffffffff800007fc:	c6 05 1d c3 00 00 00 	movb   $0x0,0xc31d(%rip)        # ffffffff8000cb20 <bump_allocated_instance>
ffffffff80000803:	c3                   	ret    
ffffffff80000804:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80000808:	c3                   	ret    
ffffffff80000809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80000810 <plot_char.part.0>:
static void plot_char(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff80000810:	41 57                	push   %r15
    y = ctx->offset_y + y * ctx->glyph_height;
ffffffff80000812:	48 89 c8             	mov    %rcx,%rax
static void plot_char(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff80000815:	41 56                	push   %r14
ffffffff80000817:	41 55                	push   %r13
ffffffff80000819:	41 54                	push   %r12
ffffffff8000081b:	55                   	push   %rbp
ffffffff8000081c:	53                   	push   %rbx
ffffffff8000081d:	48 89 fb             	mov    %rdi,%rbx
ffffffff80000820:	48 83 ec 68          	sub    $0x68,%rsp
    bool *glyph = &ctx->font_bool[c->c * ctx->font_height * ctx->font_width];
ffffffff80000824:	4c 8b bb b0 01 00 00 	mov    0x1b0(%rbx),%r15
    y = ctx->offset_y + y * ctx->glyph_height;
ffffffff8000082b:	4c 8b b3 c8 01 00 00 	mov    0x1c8(%rbx),%r14
static void plot_char(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff80000832:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
ffffffff80000837:	48 89 f7             	mov    %rsi,%rdi
    bool *glyph = &ctx->font_bool[c->c * ctx->font_height * ctx->font_width];
ffffffff8000083a:	48 8b b3 b8 01 00 00 	mov    0x1b8(%rbx),%rsi
ffffffff80000841:	8b 0f                	mov    (%rdi),%ecx
ffffffff80000843:	4c 8b 8b 38 02 00 00 	mov    0x238(%rbx),%r9
    y = ctx->offset_y + y * ctx->glyph_height;
ffffffff8000084a:	49 0f af c6          	imul   %r14,%rax
ffffffff8000084e:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
    bool *glyph = &ctx->font_bool[c->c * ctx->font_height * ctx->font_width];
ffffffff80000853:	49 0f af f7          	imul   %r15,%rsi
ffffffff80000857:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
    uint32_t default_bg = ctx->default_bg;
ffffffff8000085c:	44 8b 9b 84 02 00 00 	mov    0x284(%rbx),%r11d
    x = ctx->offset_x + x * ctx->glyph_width;
ffffffff80000863:	48 0f af 93 c0 01 00 	imul   0x1c0(%rbx),%rdx
ffffffff8000086a:	00 
    bool *glyph = &ctx->font_bool[c->c * ctx->font_height * ctx->font_width];
ffffffff8000086b:	4c 89 4c 24 40       	mov    %r9,0x40(%rsp)
    x = ctx->offset_x + x * ctx->glyph_width;
ffffffff80000870:	48 03 93 e0 01 00 00 	add    0x1e0(%rbx),%rdx
    y = ctx->offset_y + y * ctx->glyph_height;
ffffffff80000877:	48 03 83 e8 01 00 00 	add    0x1e8(%rbx),%rax
    bool *glyph = &ctx->font_bool[c->c * ctx->font_height * ctx->font_width];
ffffffff8000087e:	48 0f af f1          	imul   %rcx,%rsi
ffffffff80000882:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
    for (size_t gy = 0; gy < ctx->glyph_height; gy++) {
ffffffff80000887:	4d 85 f6             	test   %r14,%r14
ffffffff8000088a:	0f 84 83 01 00 00    	je     ffffffff80000a13 <plot_char.part.0+0x203>
        uint8_t fy = gy / ctx->font_scale_y;
ffffffff80000890:	48 8b b3 d8 01 00 00 	mov    0x1d8(%rbx),%rsi
        uint32_t *canvas_line = ctx->canvas + x + (y + gy) * ctx->width;
ffffffff80000897:	48 8b 8b 00 02 00 00 	mov    0x200(%rbx),%rcx
ffffffff8000089e:	4d 01 f9             	add    %r15,%r9
    for (size_t gy = 0; gy < ctx->glyph_height; gy++) {
ffffffff800008a1:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff800008a8:	00 00 
        uint32_t *canvas_line = ctx->canvas + x + (y + gy) * ctx->width;
ffffffff800008aa:	4c 8b 93 98 02 00 00 	mov    0x298(%rbx),%r10
ffffffff800008b1:	4c 89 4c 24 60       	mov    %r9,0x60(%rsp)
        uint8_t fy = gy / ctx->font_scale_y;
ffffffff800008b6:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
        volatile uint32_t *fb_line = ctx->framebuffer + x + (y + gy) * (ctx->pitch / 4);
ffffffff800008bb:	48 8b b3 f0 01 00 00 	mov    0x1f0(%rbx),%rsi
ffffffff800008c2:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
ffffffff800008c7:	48 8b b3 f8 01 00 00 	mov    0x1f8(%rbx),%rsi
ffffffff800008ce:	48 c1 ee 02          	shr    $0x2,%rsi
ffffffff800008d2:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
ffffffff800008d7:	48 0f af f0          	imul   %rax,%rsi
ffffffff800008db:	48 0f af c1          	imul   %rcx,%rax
ffffffff800008df:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
ffffffff800008e3:	48 01 d0             	add    %rdx,%rax
ffffffff800008e6:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
ffffffff800008eb:	48 8d 1c 8d 00 00 00 	lea    0x0(,%rcx,4),%rbx
ffffffff800008f2:	00 
ffffffff800008f3:	49 8d 04 82          	lea    (%r10,%rax,4),%rax
ffffffff800008f7:	48 89 5c 24 38       	mov    %rbx,0x38(%rsp)
ffffffff800008fc:	48 89 04 24          	mov    %rax,(%rsp)
        uint8_t fy = gy / ctx->font_scale_y;
ffffffff80000900:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80000905:	31 d2                	xor    %edx,%edx
ffffffff80000907:	48 f7 74 24 28       	divq   0x28(%rsp)
        for (size_t fx = 0; fx < ctx->font_width; fx++) {
ffffffff8000090c:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
ffffffff80000912:	0f 84 d2 00 00 00    	je     ffffffff800009ea <plot_char.part.0+0x1da>
            bool draw = glyph[fy * ctx->font_width + fx];
ffffffff80000918:	44 0f b6 f8          	movzbl %al,%r15d
ffffffff8000091c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80000921:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff80000926:	31 ed                	xor    %ebp,%ebp
ffffffff80000928:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
            bool draw = glyph[fy * ctx->font_width + fx];
ffffffff8000092d:	49 0f af c7          	imul   %r15,%rax
ffffffff80000931:	4c 8d 3c 18          	lea    (%rax,%rbx,1),%r15
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff80000935:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
ffffffff8000093a:	4c 8b b0 d0 01 00 00 	mov    0x1d0(%rax),%r14
ffffffff80000941:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffffff80000946:	4a 8d 1c 38          	lea    (%rax,%r15,1),%rbx
ffffffff8000094a:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff8000094e:	4c 03 7c 24 60       	add    0x60(%rsp),%r15
ffffffff80000953:	4e 8d 2c b5 00 00 00 	lea    0x0(,%r14,4),%r13
ffffffff8000095a:	00 
ffffffff8000095b:	4d 8d 44 05 00       	lea    0x0(%r13,%rax,1),%r8
ffffffff80000960:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffffff80000965:	4c 8d 24 b0          	lea    (%rax,%rsi,4),%r12
ffffffff80000969:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            bool draw = glyph[fy * ctx->font_width + fx];
ffffffff80000970:	48 8b 04 24          	mov    (%rsp),%rax
ffffffff80000974:	44 0f b6 0b          	movzbl (%rbx),%r9d
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff80000978:	4c 89 e6             	mov    %r12,%rsi
ffffffff8000097b:	48 8d 0c a8          	lea    (%rax,%rbp,4),%rcx
ffffffff8000097f:	4d 85 f6             	test   %r14,%r14
ffffffff80000982:	75 33                	jne    ffffffff800009b7 <plot_char.part.0+0x1a7>
ffffffff80000984:	eb 52                	jmp    ffffffff800009d8 <plot_char.part.0+0x1c8>
ffffffff80000986:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8000098d:	00 00 00 
                    bg = c->bg == 0xffffffff ? canvas_line[gx] : c->bg;
ffffffff80000990:	83 fa ff             	cmp    $0xffffffff,%edx
ffffffff80000993:	75 02                	jne    ffffffff80000997 <plot_char.part.0+0x187>
ffffffff80000995:	8b 11                	mov    (%rcx),%edx
                    fg = c->fg == 0xffffffff ? canvas_line[gx] : c->fg;
ffffffff80000997:	8b 47 04             	mov    0x4(%rdi),%eax
ffffffff8000099a:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff8000099d:	75 02                	jne    ffffffff800009a1 <plot_char.part.0+0x191>
ffffffff8000099f:	8b 01                	mov    (%rcx),%eax
                fb_line[gx] = draw ? fg : bg;
ffffffff800009a1:	45 84 c9             	test   %r9b,%r9b
ffffffff800009a4:	0f 44 c2             	cmove  %edx,%eax
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff800009a7:	48 83 c1 04          	add    $0x4,%rcx
ffffffff800009ab:	48 83 c6 04          	add    $0x4,%rsi
                fb_line[gx] = draw ? fg : bg;
ffffffff800009af:	89 46 fc             	mov    %eax,-0x4(%rsi)
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff800009b2:	49 39 c8             	cmp    %rcx,%r8
ffffffff800009b5:	74 21                	je     ffffffff800009d8 <plot_char.part.0+0x1c8>
                    bg = c->bg == 0xffffffff ? canvas_line[gx] : c->bg;
ffffffff800009b7:	8b 57 08             	mov    0x8(%rdi),%edx
                if (ctx->canvas != NULL) {
ffffffff800009ba:	4d 85 d2             	test   %r10,%r10
ffffffff800009bd:	75 d1                	jne    ffffffff80000990 <plot_char.part.0+0x180>
                    fg = c->fg == 0xffffffff ? default_bg : c->fg;
ffffffff800009bf:	8b 47 04             	mov    0x4(%rdi),%eax
                    bg = c->bg == 0xffffffff ? default_bg : c->bg;
ffffffff800009c2:	83 fa ff             	cmp    $0xffffffff,%edx
ffffffff800009c5:	41 0f 44 d3          	cmove  %r11d,%edx
                    fg = c->fg == 0xffffffff ? default_bg : c->fg;
ffffffff800009c9:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff800009cc:	41 0f 44 c3          	cmove  %r11d,%eax
ffffffff800009d0:	eb cf                	jmp    ffffffff800009a1 <plot_char.part.0+0x191>
ffffffff800009d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        for (size_t fx = 0; fx < ctx->font_width; fx++) {
ffffffff800009d8:	48 83 c3 01          	add    $0x1,%rbx
ffffffff800009dc:	4d 01 e8             	add    %r13,%r8
ffffffff800009df:	4d 01 ec             	add    %r13,%r12
ffffffff800009e2:	4c 01 f5             	add    %r14,%rbp
ffffffff800009e5:	4c 39 fb             	cmp    %r15,%rbx
ffffffff800009e8:	75 86                	jne    ffffffff80000970 <plot_char.part.0+0x160>
    for (size_t gy = 0; gy < ctx->glyph_height; gy++) {
ffffffff800009ea:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
ffffffff800009ef:	48 83 44 24 08 01    	addq   $0x1,0x8(%rsp)
ffffffff800009f5:	48 01 74 24 18       	add    %rsi,0x18(%rsp)
ffffffff800009fa:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff800009ff:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
ffffffff80000a04:	48 01 34 24          	add    %rsi,(%rsp)
ffffffff80000a08:	48 39 44 24 20       	cmp    %rax,0x20(%rsp)
ffffffff80000a0d:	0f 85 ed fe ff ff    	jne    ffffffff80000900 <plot_char.part.0+0xf0>
}
ffffffff80000a13:	48 83 c4 68          	add    $0x68,%rsp
ffffffff80000a17:	5b                   	pop    %rbx
ffffffff80000a18:	5d                   	pop    %rbp
ffffffff80000a19:	41 5c                	pop    %r12
ffffffff80000a1b:	41 5d                	pop    %r13
ffffffff80000a1d:	41 5e                	pop    %r14
ffffffff80000a1f:	41 5f                	pop    %r15
ffffffff80000a21:	c3                   	ret    
ffffffff80000a22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000a29:	00 00 00 00 
ffffffff80000a2d:	0f 1f 00             	nopl   (%rax)

ffffffff80000a30 <draw_cursor>:
    if (ctx->cursor_x >= _ctx->cols || ctx->cursor_y >= _ctx->rows) {
ffffffff80000a30:	48 8b 97 e0 02 00 00 	mov    0x2e0(%rdi),%rdx
ffffffff80000a37:	48 8b 87 e8 00 00 00 	mov    0xe8(%rdi),%rax
ffffffff80000a3e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000a41:	0f 83 99 00 00 00    	jae    ffffffff80000ae0 <draw_cursor+0xb0>
static void draw_cursor(struct flanterm_context *_ctx) {
ffffffff80000a47:	41 55                	push   %r13
ffffffff80000a49:	41 54                	push   %r12
ffffffff80000a4b:	55                   	push   %rbp
ffffffff80000a4c:	48 89 fd             	mov    %rdi,%rbp
ffffffff80000a4f:	53                   	push   %rbx
ffffffff80000a50:	48 83 ec 10          	sub    $0x10,%rsp
    if (ctx->cursor_x >= _ctx->cols || ctx->cursor_y >= _ctx->rows) {
ffffffff80000a54:	48 8b 8f e8 02 00 00 	mov    0x2e8(%rdi),%rcx
ffffffff80000a5b:	48 3b 8f e0 00 00 00 	cmp    0xe0(%rdi),%rcx
ffffffff80000a62:	73 6c                	jae    ffffffff80000ad0 <draw_cursor+0xa0>
    size_t i = ctx->cursor_x + ctx->cursor_y * _ctx->cols;
ffffffff80000a64:	48 0f af c1          	imul   %rcx,%rax
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff80000a68:	48 8b b7 d0 02 00 00 	mov    0x2d0(%rdi),%rsi
    size_t i = ctx->cursor_x + ctx->cursor_y * _ctx->cols;
ffffffff80000a6f:	48 01 d0             	add    %rdx,%rax
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff80000a72:	4c 8d 2c c6          	lea    (%rsi,%rax,8),%r13
        ctx->grid[i] = q->c;
ffffffff80000a76:	48 8d 1c 40          	lea    (%rax,%rax,2),%rbx
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff80000a7a:	4d 8b 65 00          	mov    0x0(%r13),%r12
        ctx->grid[i] = q->c;
ffffffff80000a7e:	48 c1 e3 02          	shl    $0x2,%rbx
    if (q != NULL) {
ffffffff80000a82:	4d 85 e4             	test   %r12,%r12
ffffffff80000a85:	74 61                	je     ffffffff80000ae8 <draw_cursor+0xb8>
        c = q->c;
ffffffff80000a87:	49 8b 44 24 10       	mov    0x10(%r12),%rax
ffffffff80000a8c:	48 89 c6             	mov    %rax,%rsi
ffffffff80000a8f:	48 89 44 24 04       	mov    %rax,0x4(%rsp)
ffffffff80000a94:	41 8b 44 24 18       	mov    0x18(%r12),%eax
ffffffff80000a99:	48 c1 ee 20          	shr    $0x20,%rsi
    c.bg = tmp;
ffffffff80000a9d:	89 74 24 0c          	mov    %esi,0xc(%rsp)
ffffffff80000aa1:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    c.fg = c.bg;
ffffffff80000aa6:	89 44 24 08          	mov    %eax,0x8(%rsp)
    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff80000aaa:	e8 61 fd ff ff       	call   ffffffff80000810 <plot_char.part.0>
        ctx->grid[i] = q->c;
ffffffff80000aaf:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
ffffffff80000ab4:	48 8b 85 b8 02 00 00 	mov    0x2b8(%rbp),%rax
ffffffff80000abb:	48 89 14 18          	mov    %rdx,(%rax,%rbx,1)
ffffffff80000abf:	41 8b 54 24 18       	mov    0x18(%r12),%edx
ffffffff80000ac4:	89 54 18 08          	mov    %edx,0x8(%rax,%rbx,1)
        ctx->map[i] = NULL;
ffffffff80000ac8:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff80000acf:	00 
}
ffffffff80000ad0:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000ad4:	5b                   	pop    %rbx
ffffffff80000ad5:	5d                   	pop    %rbp
ffffffff80000ad6:	41 5c                	pop    %r12
ffffffff80000ad8:	41 5d                	pop    %r13
ffffffff80000ada:	c3                   	ret    
ffffffff80000adb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80000ae0:	c3                   	ret    
ffffffff80000ae1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        c = ctx->grid[i];
ffffffff80000ae8:	48 8b 87 b8 02 00 00 	mov    0x2b8(%rdi),%rax
ffffffff80000aef:	48 8b 34 18          	mov    (%rax,%rbx,1),%rsi
ffffffff80000af3:	8b 44 18 08          	mov    0x8(%rax,%rbx,1),%eax
ffffffff80000af7:	48 89 f7             	mov    %rsi,%rdi
ffffffff80000afa:	48 89 74 24 04       	mov    %rsi,0x4(%rsp)
ffffffff80000aff:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
ffffffff80000b04:	48 c1 ef 20          	shr    $0x20,%rdi
    c.fg = c.bg;
ffffffff80000b08:	89 44 24 08          	mov    %eax,0x8(%rsp)
    c.bg = tmp;
ffffffff80000b0c:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff80000b10:	48 89 ef             	mov    %rbp,%rdi
ffffffff80000b13:	e8 f8 fc ff ff       	call   ffffffff80000810 <plot_char.part.0>
}
ffffffff80000b18:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000b1c:	5b                   	pop    %rbx
ffffffff80000b1d:	5d                   	pop    %rbp
ffffffff80000b1e:	41 5c                	pop    %r12
ffffffff80000b20:	41 5d                	pop    %r13
ffffffff80000b22:	c3                   	ret    
ffffffff80000b23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80000b2a:	00 00 00 00 
ffffffff80000b2e:	66 90                	xchg   %ax,%ax

ffffffff80000b30 <flanterm_fb_double_buffer_flush>:
static void flanterm_fb_double_buffer_flush(struct flanterm_context *_ctx) {
ffffffff80000b30:	f3 0f 1e fa          	endbr64 
ffffffff80000b34:	41 57                	push   %r15
ffffffff80000b36:	41 56                	push   %r14
ffffffff80000b38:	41 55                	push   %r13
ffffffff80000b3a:	41 54                	push   %r12
ffffffff80000b3c:	49 89 fc             	mov    %rdi,%r12
ffffffff80000b3f:	55                   	push   %rbp
ffffffff80000b40:	53                   	push   %rbx
ffffffff80000b41:	48 83 ec 18          	sub    $0x18,%rsp
    if (_ctx->cursor_enabled) {
ffffffff80000b45:	0f b6 47 09          	movzbl 0x9(%rdi),%eax
ffffffff80000b49:	88 44 24 17          	mov    %al,0x17(%rsp)
ffffffff80000b4d:	84 c0                	test   %al,%al
ffffffff80000b4f:	0f 85 6b 01 00 00    	jne    ffffffff80000cc0 <flanterm_fb_double_buffer_flush+0x190>
    for (size_t i = 0; i < ctx->queue_i; i++) {
ffffffff80000b55:	4d 8b 84 24 c8 02 00 	mov    0x2c8(%r12),%r8
ffffffff80000b5c:	00 
ffffffff80000b5d:	4d 85 c0             	test   %r8,%r8
ffffffff80000b60:	0f 84 a3 00 00 00    	je     ffffffff80000c09 <flanterm_fb_double_buffer_flush+0xd9>
        if (ctx->old_cursor_x < _ctx->cols && ctx->old_cursor_y < _ctx->rows) {
ffffffff80000b66:	4d 8b bc 24 e8 00 00 	mov    0xe8(%r12),%r15
ffffffff80000b6d:	00 
        if (ctx->map[offset] == NULL) {
ffffffff80000b6e:	4d 8b 8c 24 d0 02 00 	mov    0x2d0(%r12),%r9
ffffffff80000b75:	00 
ffffffff80000b76:	45 31 ed             	xor    %r13d,%r13d
ffffffff80000b79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        struct flanterm_fb_queue_item *q = &ctx->queue[i];
ffffffff80000b80:	4c 89 eb             	mov    %r13,%rbx
ffffffff80000b83:	48 c1 e3 05          	shl    $0x5,%rbx
ffffffff80000b87:	49 03 9c 24 c0 02 00 	add    0x2c0(%r12),%rbx
ffffffff80000b8e:	00 
        size_t offset = q->y * _ctx->cols + q->x;
ffffffff80000b8f:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
ffffffff80000b93:	48 8b 13             	mov    (%rbx),%rdx
ffffffff80000b96:	48 89 cd             	mov    %rcx,%rbp
ffffffff80000b99:	49 0f af ef          	imul   %r15,%rbp
ffffffff80000b9d:	48 01 d5             	add    %rdx,%rbp
        if (ctx->map[offset] == NULL) {
ffffffff80000ba0:	4d 8d 34 e9          	lea    (%r9,%rbp,8),%r14
ffffffff80000ba4:	49 83 3e 00          	cmpq   $0x0,(%r14)
ffffffff80000ba8:	74 52                	je     ffffffff80000bfc <flanterm_fb_double_buffer_flush+0xcc>
    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff80000baa:	4c 39 fa             	cmp    %r15,%rdx
ffffffff80000bad:	73 28                	jae    ffffffff80000bd7 <flanterm_fb_double_buffer_flush+0xa7>
ffffffff80000baf:	49 3b 8c 24 e0 00 00 	cmp    0xe0(%r12),%rcx
ffffffff80000bb6:	00 
ffffffff80000bb7:	73 1e                	jae    ffffffff80000bd7 <flanterm_fb_double_buffer_flush+0xa7>
            plot_char(_ctx, &q->c, q->x, q->y);
ffffffff80000bb9:	48 8d 73 10          	lea    0x10(%rbx),%rsi
ffffffff80000bbd:	4c 89 e7             	mov    %r12,%rdi
ffffffff80000bc0:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
ffffffff80000bc5:	4c 89 04 24          	mov    %r8,(%rsp)
ffffffff80000bc9:	e8 42 fc ff ff       	call   ffffffff80000810 <plot_char.part.0>
ffffffff80000bce:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff80000bd3:	4c 8b 04 24          	mov    (%rsp),%r8
        ctx->grid[offset] = q->c;
ffffffff80000bd7:	49 8b 94 24 b8 02 00 	mov    0x2b8(%r12),%rdx
ffffffff80000bde:	00 
ffffffff80000bdf:	48 8d 44 6d 00       	lea    0x0(%rbp,%rbp,2),%rax
ffffffff80000be4:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
ffffffff80000be8:	48 8b 53 10          	mov    0x10(%rbx),%rdx
ffffffff80000bec:	48 89 10             	mov    %rdx,(%rax)
ffffffff80000bef:	8b 53 18             	mov    0x18(%rbx),%edx
ffffffff80000bf2:	89 50 08             	mov    %edx,0x8(%rax)
        ctx->map[offset] = NULL;
ffffffff80000bf5:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
    for (size_t i = 0; i < ctx->queue_i; i++) {
ffffffff80000bfc:	49 83 c5 01          	add    $0x1,%r13
ffffffff80000c00:	4d 39 c5             	cmp    %r8,%r13
ffffffff80000c03:	0f 85 77 ff ff ff    	jne    ffffffff80000b80 <flanterm_fb_double_buffer_flush+0x50>
    if ((ctx->old_cursor_x != ctx->cursor_x || ctx->old_cursor_y != ctx->cursor_y) || _ctx->cursor_enabled == false) {
ffffffff80000c09:	49 8b 94 24 08 03 00 	mov    0x308(%r12),%rdx
ffffffff80000c10:	00 
ffffffff80000c11:	49 8b 9c 24 e0 02 00 	mov    0x2e0(%r12),%rbx
ffffffff80000c18:	00 
ffffffff80000c19:	48 39 da             	cmp    %rbx,%rdx
ffffffff80000c1c:	74 7a                	je     ffffffff80000c98 <flanterm_fb_double_buffer_flush+0x168>
        if (ctx->old_cursor_x < _ctx->cols && ctx->old_cursor_y < _ctx->rows) {
ffffffff80000c1e:	49 8b 84 24 e8 00 00 	mov    0xe8(%r12),%rax
ffffffff80000c25:	00 
ffffffff80000c26:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000c29:	72 35                	jb     ffffffff80000c60 <flanterm_fb_double_buffer_flush+0x130>
    if ((ctx->old_cursor_x != ctx->cursor_x || ctx->old_cursor_y != ctx->cursor_y) || _ctx->cursor_enabled == false) {
ffffffff80000c2b:	49 8b 84 24 e8 02 00 	mov    0x2e8(%r12),%rax
ffffffff80000c32:	00 
    ctx->old_cursor_x = ctx->cursor_x;
ffffffff80000c33:	49 89 9c 24 08 03 00 	mov    %rbx,0x308(%r12)
ffffffff80000c3a:	00 
    ctx->old_cursor_y = ctx->cursor_y;
ffffffff80000c3b:	49 89 84 24 10 03 00 	mov    %rax,0x310(%r12)
ffffffff80000c42:	00 
    ctx->queue_i = 0;
ffffffff80000c43:	49 c7 84 24 c8 02 00 	movq   $0x0,0x2c8(%r12)
ffffffff80000c4a:	00 00 00 00 00 
}
ffffffff80000c4f:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80000c53:	5b                   	pop    %rbx
ffffffff80000c54:	5d                   	pop    %rbp
ffffffff80000c55:	41 5c                	pop    %r12
ffffffff80000c57:	41 5d                	pop    %r13
ffffffff80000c59:	41 5e                	pop    %r14
ffffffff80000c5b:	41 5f                	pop    %r15
ffffffff80000c5d:	c3                   	ret    
ffffffff80000c5e:	66 90                	xchg   %ax,%ax
        if (ctx->old_cursor_x < _ctx->cols && ctx->old_cursor_y < _ctx->rows) {
ffffffff80000c60:	49 8b 8c 24 10 03 00 	mov    0x310(%r12),%rcx
ffffffff80000c67:	00 
ffffffff80000c68:	49 3b 8c 24 e0 00 00 	cmp    0xe0(%r12),%rcx
ffffffff80000c6f:	00 
ffffffff80000c70:	73 b9                	jae    ffffffff80000c2b <flanterm_fb_double_buffer_flush+0xfb>
            plot_char(_ctx, &ctx->grid[ctx->old_cursor_x + ctx->old_cursor_y * _ctx->cols], ctx->old_cursor_x, ctx->old_cursor_y);
ffffffff80000c72:	48 0f af c1          	imul   %rcx,%rax
ffffffff80000c76:	4c 89 e7             	mov    %r12,%rdi
ffffffff80000c79:	48 01 d0             	add    %rdx,%rax
ffffffff80000c7c:	48 8d 34 40          	lea    (%rax,%rax,2),%rsi
ffffffff80000c80:	49 8b 84 24 b8 02 00 	mov    0x2b8(%r12),%rax
ffffffff80000c87:	00 
ffffffff80000c88:	48 8d 34 b0          	lea    (%rax,%rsi,4),%rsi
ffffffff80000c8c:	e8 7f fb ff ff       	call   ffffffff80000810 <plot_char.part.0>
ffffffff80000c91:	eb 98                	jmp    ffffffff80000c2b <flanterm_fb_double_buffer_flush+0xfb>
ffffffff80000c93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    if ((ctx->old_cursor_x != ctx->cursor_x || ctx->old_cursor_y != ctx->cursor_y) || _ctx->cursor_enabled == false) {
ffffffff80000c98:	49 8b 84 24 e8 02 00 	mov    0x2e8(%r12),%rax
ffffffff80000c9f:	00 
ffffffff80000ca0:	49 39 84 24 10 03 00 	cmp    %rax,0x310(%r12)
ffffffff80000ca7:	00 
ffffffff80000ca8:	0f 85 70 ff ff ff    	jne    ffffffff80000c1e <flanterm_fb_double_buffer_flush+0xee>
ffffffff80000cae:	80 7c 24 17 00       	cmpb   $0x0,0x17(%rsp)
ffffffff80000cb3:	0f 84 65 ff ff ff    	je     ffffffff80000c1e <flanterm_fb_double_buffer_flush+0xee>
ffffffff80000cb9:	e9 75 ff ff ff       	jmp    ffffffff80000c33 <flanterm_fb_double_buffer_flush+0x103>
ffffffff80000cbe:	66 90                	xchg   %ax,%ax
        draw_cursor(_ctx);
ffffffff80000cc0:	e8 6b fd ff ff       	call   ffffffff80000a30 <draw_cursor>
ffffffff80000cc5:	e9 8b fe ff ff       	jmp    ffffffff80000b55 <flanterm_fb_double_buffer_flush+0x25>
ffffffff80000cca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80000cd0 <flanterm_fb_full_refresh>:
static void flanterm_fb_full_refresh(struct flanterm_context *_ctx) {
ffffffff80000cd0:	f3 0f 1e fa          	endbr64 
ffffffff80000cd4:	41 57                	push   %r15
ffffffff80000cd6:	41 56                	push   %r14
ffffffff80000cd8:	41 55                	push   %r13
ffffffff80000cda:	41 54                	push   %r12
ffffffff80000cdc:	55                   	push   %rbp
ffffffff80000cdd:	48 89 fd             	mov    %rdi,%rbp
ffffffff80000ce0:	53                   	push   %rbx
    for (size_t y = 0; y < ctx->height; y++) {
ffffffff80000ce1:	4c 8b a7 08 02 00 00 	mov    0x208(%rdi),%r12
    uint32_t default_bg = ctx->default_bg;
ffffffff80000ce8:	8b 9f 84 02 00 00    	mov    0x284(%rdi),%ebx
    for (size_t y = 0; y < ctx->height; y++) {
ffffffff80000cee:	4d 85 e4             	test   %r12,%r12
ffffffff80000cf1:	0f 84 7c 00 00 00    	je     ffffffff80000d73 <flanterm_fb_full_refresh+0xa3>
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000cf7:	4c 8b 87 00 02 00 00 	mov    0x200(%rdi),%r8
ffffffff80000cfe:	45 31 db             	xor    %r11d,%r11d
    for (size_t y = 0; y < ctx->height; y++) {
ffffffff80000d01:	45 31 d2             	xor    %r10d,%r10d
ffffffff80000d04:	4e 8d 2c 85 00 00 00 	lea    0x0(,%r8,4),%r13
ffffffff80000d0b:	00 
ffffffff80000d0c:	0f 1f 40 00          	nopl   0x0(%rax)
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000d10:	4d 85 c0             	test   %r8,%r8
ffffffff80000d13:	74 52                	je     ffffffff80000d67 <flanterm_fb_full_refresh+0x97>
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = ctx->canvas[y * ctx->width + x];
ffffffff80000d15:	48 8b 8d f8 01 00 00 	mov    0x1f8(%rbp),%rcx
            if (ctx->canvas != NULL) {
ffffffff80000d1c:	48 8b bd 98 02 00 00 	mov    0x298(%rbp),%rdi
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000d23:	31 c0                	xor    %eax,%eax
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = ctx->canvas[y * ctx->width + x];
ffffffff80000d25:	4c 8b 8d f0 01 00 00 	mov    0x1f0(%rbp),%r9
ffffffff80000d2c:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff80000d30:	4e 8d 34 1f          	lea    (%rdi,%r11,1),%r14
ffffffff80000d34:	49 0f af ca          	imul   %r10,%rcx
ffffffff80000d38:	eb 15                	jmp    ffffffff80000d4f <flanterm_fb_full_refresh+0x7f>
ffffffff80000d3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80000d40:	41 8b 34 86          	mov    (%r14,%rax,4),%esi
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000d44:	48 83 c0 01          	add    $0x1,%rax
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = ctx->canvas[y * ctx->width + x];
ffffffff80000d48:	89 32                	mov    %esi,(%rdx)
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000d4a:	4c 39 c0             	cmp    %r8,%rax
ffffffff80000d4d:	74 18                	je     ffffffff80000d67 <flanterm_fb_full_refresh+0x97>
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = ctx->canvas[y * ctx->width + x];
ffffffff80000d4f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff80000d53:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
            if (ctx->canvas != NULL) {
ffffffff80000d57:	48 85 ff             	test   %rdi,%rdi
ffffffff80000d5a:	75 e4                	jne    ffffffff80000d40 <flanterm_fb_full_refresh+0x70>
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000d5c:	48 83 c0 01          	add    $0x1,%rax
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = default_bg;
ffffffff80000d60:	89 1a                	mov    %ebx,(%rdx)
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff80000d62:	4c 39 c0             	cmp    %r8,%rax
ffffffff80000d65:	75 e8                	jne    ffffffff80000d4f <flanterm_fb_full_refresh+0x7f>
    for (size_t y = 0; y < ctx->height; y++) {
ffffffff80000d67:	49 83 c2 01          	add    $0x1,%r10
ffffffff80000d6b:	4d 01 eb             	add    %r13,%r11
ffffffff80000d6e:	4d 39 e2             	cmp    %r12,%r10
ffffffff80000d71:	75 9d                	jne    ffffffff80000d10 <flanterm_fb_full_refresh+0x40>
    for (size_t i = 0; i < (size_t)_ctx->rows * _ctx->cols; i++) {
ffffffff80000d73:	4c 8b b5 e0 00 00 00 	mov    0xe0(%rbp),%r14
ffffffff80000d7a:	4c 8b ad e8 00 00 00 	mov    0xe8(%rbp),%r13
ffffffff80000d81:	4d 89 f7             	mov    %r14,%r15
ffffffff80000d84:	4d 0f af fd          	imul   %r13,%r15
ffffffff80000d88:	4d 85 ff             	test   %r15,%r15
ffffffff80000d8b:	74 3b                	je     ffffffff80000dc8 <flanterm_fb_full_refresh+0xf8>
ffffffff80000d8d:	4c 8b a5 b8 02 00 00 	mov    0x2b8(%rbp),%r12
ffffffff80000d94:	31 db                	xor    %ebx,%ebx
ffffffff80000d96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80000d9d:	00 00 00 
        size_t y = i / _ctx->cols;
ffffffff80000da0:	48 89 d8             	mov    %rbx,%rax
ffffffff80000da3:	31 d2                	xor    %edx,%edx
ffffffff80000da5:	49 f7 f5             	div    %r13
    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff80000da8:	4c 39 f0             	cmp    %r14,%rax
ffffffff80000dab:	73 0e                	jae    ffffffff80000dbb <flanterm_fb_full_refresh+0xeb>
ffffffff80000dad:	48 89 c1             	mov    %rax,%rcx
ffffffff80000db0:	4c 89 e6             	mov    %r12,%rsi
ffffffff80000db3:	48 89 ef             	mov    %rbp,%rdi
ffffffff80000db6:	e8 55 fa ff ff       	call   ffffffff80000810 <plot_char.part.0>
    for (size_t i = 0; i < (size_t)_ctx->rows * _ctx->cols; i++) {
ffffffff80000dbb:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80000dbf:	49 83 c4 0c          	add    $0xc,%r12
ffffffff80000dc3:	4c 39 fb             	cmp    %r15,%rbx
ffffffff80000dc6:	75 d8                	jne    ffffffff80000da0 <flanterm_fb_full_refresh+0xd0>
    if (_ctx->cursor_enabled) {
ffffffff80000dc8:	80 7d 09 00          	cmpb   $0x0,0x9(%rbp)
ffffffff80000dcc:	75 0b                	jne    ffffffff80000dd9 <flanterm_fb_full_refresh+0x109>
}
ffffffff80000dce:	5b                   	pop    %rbx
ffffffff80000dcf:	5d                   	pop    %rbp
ffffffff80000dd0:	41 5c                	pop    %r12
ffffffff80000dd2:	41 5d                	pop    %r13
ffffffff80000dd4:	41 5e                	pop    %r14
ffffffff80000dd6:	41 5f                	pop    %r15
ffffffff80000dd8:	c3                   	ret    
ffffffff80000dd9:	5b                   	pop    %rbx
        draw_cursor(_ctx);
ffffffff80000dda:	48 89 ef             	mov    %rbp,%rdi
}
ffffffff80000ddd:	5d                   	pop    %rbp
ffffffff80000dde:	41 5c                	pop    %r12
ffffffff80000de0:	41 5d                	pop    %r13
ffffffff80000de2:	41 5e                	pop    %r14
ffffffff80000de4:	41 5f                	pop    %r15
        draw_cursor(_ctx);
ffffffff80000de6:	e9 45 fc ff ff       	jmp    ffffffff80000a30 <draw_cursor>
ffffffff80000deb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80000df0 <flanterm_fb_init>:
    uint32_t *default_bg, uint32_t *default_fg,
    uint32_t *default_bg_bright, uint32_t *default_fg_bright,
    void *font, size_t font_width, size_t font_height, size_t font_spacing,
    size_t font_scale_x, size_t font_scale_y,
    size_t margin
) {
ffffffff80000df0:	f3 0f 1e fa          	endbr64 
ffffffff80000df4:	41 57                	push   %r15
ffffffff80000df6:	41 56                	push   %r14
ffffffff80000df8:	49 89 ce             	mov    %rcx,%r14
ffffffff80000dfb:	41 55                	push   %r13
ffffffff80000dfd:	4d 89 c5             	mov    %r8,%r13
ffffffff80000e00:	41 54                	push   %r12
ffffffff80000e02:	55                   	push   %rbp
ffffffff80000e03:	53                   	push   %rbx
ffffffff80000e04:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80000e08:	8b 84 24 88 00 00 00 	mov    0x88(%rsp),%eax
ffffffff80000e0f:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    if (font_scale_x == 0 || font_scale_y == 0) {
ffffffff80000e14:	48 83 bc 24 08 01 00 	cmpq   $0x0,0x108(%rsp)
ffffffff80000e1b:	00 00 
) {
ffffffff80000e1d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffffff80000e22:	89 44 24 34          	mov    %eax,0x34(%rsp)
ffffffff80000e26:	8b 84 24 90 00 00 00 	mov    0x90(%rsp),%eax
ffffffff80000e2d:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
ffffffff80000e32:	8b ac 24 80 00 00 00 	mov    0x80(%rsp),%ebp
ffffffff80000e39:	89 44 24 30          	mov    %eax,0x30(%rsp)
ffffffff80000e3d:	8b 84 24 98 00 00 00 	mov    0x98(%rsp),%eax
ffffffff80000e44:	4c 89 4c 24 28       	mov    %r9,0x28(%rsp)
ffffffff80000e49:	44 8b bc 24 a0 00 00 	mov    0xa0(%rsp),%r15d
ffffffff80000e50:	00 
ffffffff80000e51:	89 44 24 38          	mov    %eax,0x38(%rsp)
ffffffff80000e55:	8b 84 24 a8 00 00 00 	mov    0xa8(%rsp),%eax
ffffffff80000e5c:	48 8b 9c 24 f8 00 00 	mov    0xf8(%rsp),%rbx
ffffffff80000e63:	00 
ffffffff80000e64:	89 44 24 3c          	mov    %eax,0x3c(%rsp)
    if (font_scale_x == 0 || font_scale_y == 0) {
ffffffff80000e68:	0f 84 2f 08 00 00    	je     ffffffff8000169d <flanterm_fb_init+0x8ad>
ffffffff80000e6e:	48 83 bc 24 10 01 00 	cmpq   $0x0,0x110(%rsp)
ffffffff80000e75:	00 00 
ffffffff80000e77:	0f 84 20 08 00 00    	je     ffffffff8000169d <flanterm_fb_init+0x8ad>
            font_scale_x = 4;
            font_scale_y = 4;
        }
    }

    if (red_mask_size < 8 || red_mask_size != green_mask_size || red_mask_size != blue_mask_size) {
ffffffff80000e7d:	40 80 fd 07          	cmp    $0x7,%bpl
ffffffff80000e81:	0f 96 c0             	setbe  %al
ffffffff80000e84:	40 3a 6c 24 30       	cmp    0x30(%rsp),%bpl
ffffffff80000e89:	0f 95 c2             	setne  %dl
ffffffff80000e8c:	09 d0                	or     %edx,%eax
ffffffff80000e8e:	44 38 fd             	cmp    %r15b,%bpl
ffffffff80000e91:	0f 95 c2             	setne  %dl
ffffffff80000e94:	08 d0                	or     %dl,%al
ffffffff80000e96:	0f 85 ec 07 00 00    	jne    ffffffff80001688 <flanterm_fb_init+0x898>
        return NULL;
    }

    if (_malloc == NULL) {
ffffffff80000e9c:	48 83 7c 24 08 00    	cmpq   $0x0,0x8(%rsp)
ffffffff80000ea2:	0f 84 2d 09 00 00    	je     ffffffff800017d5 <flanterm_fb_init+0x9e5>
        return NULL;
#endif
    }

    struct flanterm_fb_context *ctx = NULL;
    ctx = _malloc(sizeof(struct flanterm_fb_context));
ffffffff80000ea8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80000ead:	bf 18 03 00 00       	mov    $0x318,%edi
ffffffff80000eb2:	ff d0                	call   *%rax
ffffffff80000eb4:	49 89 c4             	mov    %rax,%r12
    if (ctx == NULL) {
ffffffff80000eb7:	48 8d 05 42 f1 ff ff 	lea    -0xebe(%rip),%rax        # ffffffff80000000 <bump_alloc>
ffffffff80000ebe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff80000ec3:	4d 85 e4             	test   %r12,%r12
ffffffff80000ec6:	0f 84 31 08 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
        goto fail;
    }

    struct flanterm_context *_ctx = (void *)ctx;
    memset(ctx, 0, sizeof(struct flanterm_fb_context));
ffffffff80000ecc:	ba 18 03 00 00       	mov    $0x318,%edx
ffffffff80000ed1:	31 f6                	xor    %esi,%esi
ffffffff80000ed3:	4c 89 e7             	mov    %r12,%rdi
ffffffff80000ed6:	e8 35 37 00 00       	call   ffffffff80004610 <memset>

    ctx->red_mask_size = red_mask_size;
    ctx->red_mask_shift = red_mask_shift + (red_mask_size - 8);
ffffffff80000edb:	0f b6 44 24 34       	movzbl 0x34(%rsp),%eax
    ctx->green_mask_size = green_mask_size;
    ctx->green_mask_shift = green_mask_shift + (green_mask_size - 8);
ffffffff80000ee0:	0f b6 7c 24 38       	movzbl 0x38(%rsp),%edi
    ctx->red_mask_size = red_mask_size;
ffffffff80000ee5:	41 88 ac 24 18 02 00 	mov    %bpl,0x218(%r12)
ffffffff80000eec:	00 
    ctx->blue_mask_size = blue_mask_size;
    ctx->blue_mask_shift = blue_mask_shift + (blue_mask_size - 8);

    if (ansi_colours != NULL) {
ffffffff80000eed:	48 83 bc 24 b8 00 00 	cmpq   $0x0,0xb8(%rsp)
ffffffff80000ef4:	00 00 
    ctx->blue_mask_size = blue_mask_size;
ffffffff80000ef6:	45 88 bc 24 1c 02 00 	mov    %r15b,0x21c(%r12)
ffffffff80000efd:	00 
    ctx->red_mask_shift = red_mask_shift + (red_mask_size - 8);
ffffffff80000efe:	8d 6c 28 f8          	lea    -0x8(%rax,%rbp,1),%ebp
    ctx->green_mask_size = green_mask_size;
ffffffff80000f02:	8b 44 24 30          	mov    0x30(%rsp),%eax
    ctx->red_mask_shift = red_mask_shift + (red_mask_size - 8);
ffffffff80000f06:	41 88 ac 24 19 02 00 	mov    %bpl,0x219(%r12)
ffffffff80000f0d:	00 
    ctx->green_mask_size = green_mask_size;
ffffffff80000f0e:	41 88 84 24 1a 02 00 	mov    %al,0x21a(%r12)
ffffffff80000f15:	00 
    ctx->green_mask_shift = green_mask_shift + (green_mask_size - 8);
ffffffff80000f16:	8d 44 07 f8          	lea    -0x8(%rdi,%rax,1),%eax
    ctx->blue_mask_shift = blue_mask_shift + (blue_mask_size - 8);
ffffffff80000f1a:	0f b6 7c 24 3c       	movzbl 0x3c(%rsp),%edi
    ctx->green_mask_shift = green_mask_shift + (green_mask_size - 8);
ffffffff80000f1f:	41 88 84 24 1b 02 00 	mov    %al,0x21b(%r12)
ffffffff80000f26:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000f27:	44 0f b6 d8          	movzbl %al,%r11d
    ctx->blue_mask_shift = blue_mask_shift + (blue_mask_size - 8);
ffffffff80000f2b:	42 8d 54 3f f8       	lea    -0x8(%rdi,%r15,1),%edx
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000f30:	44 0f b6 fd          	movzbl %bpl,%r15d
    ctx->blue_mask_shift = blue_mask_shift + (blue_mask_size - 8);
ffffffff80000f34:	41 88 94 24 1d 02 00 	mov    %dl,0x21d(%r12)
ffffffff80000f3b:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000f3c:	44 0f b6 d2          	movzbl %dl,%r10d
    if (ansi_colours != NULL) {
ffffffff80000f40:	0f 84 0f 0a 00 00    	je     ffffffff80001955 <flanterm_fb_init+0xb65>
        for (size_t i = 0; i < 8; i++) {
ffffffff80000f46:	45 31 c0             	xor    %r8d,%r8d
            ctx->ansi_colours[i] = convert_colour(_ctx, ansi_colours[i]);
ffffffff80000f49:	48 8b bc 24 b8 00 00 	mov    0xb8(%rsp),%rdi
ffffffff80000f50:	00 
ffffffff80000f51:	42 8b 3c 87          	mov    (%rdi,%r8,4),%edi
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000f55:	89 f9                	mov    %edi,%ecx
ffffffff80000f57:	0f b6 f5             	movzbl %ch,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000f5a:	44 89 d9             	mov    %r11d,%ecx
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000f5d:	41 89 f1             	mov    %esi,%r9d
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000f60:	89 fe                	mov    %edi,%esi
    uint32_t b =  colour & 0xff;
ffffffff80000f62:	40 0f b6 ff          	movzbl %dil,%edi
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000f66:	c1 ee 10             	shr    $0x10,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000f69:	41 d3 e1             	shl    %cl,%r9d
ffffffff80000f6c:	44 89 f9             	mov    %r15d,%ecx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000f6f:	40 0f b6 f6          	movzbl %sil,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000f73:	d3 e6                	shl    %cl,%esi
ffffffff80000f75:	44 89 d1             	mov    %r10d,%ecx
ffffffff80000f78:	44 09 ce             	or     %r9d,%esi
ffffffff80000f7b:	d3 e7                	shl    %cl,%edi
ffffffff80000f7d:	09 fe                	or     %edi,%esi
ffffffff80000f7f:	43 89 b4 84 40 02 00 	mov    %esi,0x240(%r12,%r8,4)
ffffffff80000f86:	00 
        for (size_t i = 0; i < 8; i++) {
ffffffff80000f87:	49 83 c0 01          	add    $0x1,%r8
ffffffff80000f8b:	49 83 f8 08          	cmp    $0x8,%r8
ffffffff80000f8f:	75 b8                	jne    ffffffff80000f49 <flanterm_fb_init+0x159>
        ctx->ansi_colours[5] = convert_colour(_ctx, 0x00aa00aa); // magenta
        ctx->ansi_colours[6] = convert_colour(_ctx, 0x0000aaaa); // cyan
        ctx->ansi_colours[7] = convert_colour(_ctx, 0x00aaaaaa); // grey
    }

    if (ansi_bright_colours != NULL) {
ffffffff80000f91:	48 83 bc 24 c0 00 00 	cmpq   $0x0,0xc0(%rsp)
ffffffff80000f98:	00 00 
ffffffff80000f9a:	0f 84 02 09 00 00    	je     ffffffff800018a2 <flanterm_fb_init+0xab2>
        for (size_t i = 0; i < 8; i++) {
ffffffff80000fa0:	45 31 c0             	xor    %r8d,%r8d
            ctx->ansi_bright_colours[i] = convert_colour(_ctx, ansi_bright_colours[i]);
ffffffff80000fa3:	48 8b bc 24 c0 00 00 	mov    0xc0(%rsp),%rdi
ffffffff80000faa:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000fab:	44 89 f9             	mov    %r15d,%ecx
            ctx->ansi_bright_colours[i] = convert_colour(_ctx, ansi_bright_colours[i]);
ffffffff80000fae:	42 8b 3c 87          	mov    (%rdi,%r8,4),%edi
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000fb2:	41 89 f9             	mov    %edi,%r9d
ffffffff80000fb5:	41 c1 e9 10          	shr    $0x10,%r9d
ffffffff80000fb9:	45 0f b6 c9          	movzbl %r9b,%r9d
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000fbd:	41 d3 e1             	shl    %cl,%r9d
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000fc0:	89 f9                	mov    %edi,%ecx
    uint32_t b =  colour & 0xff;
ffffffff80000fc2:	40 0f b6 ff          	movzbl %dil,%edi
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000fc6:	0f b6 f5             	movzbl %ch,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000fc9:	44 89 d9             	mov    %r11d,%ecx
ffffffff80000fcc:	d3 e6                	shl    %cl,%esi
ffffffff80000fce:	44 89 d1             	mov    %r10d,%ecx
ffffffff80000fd1:	44 09 ce             	or     %r9d,%esi
ffffffff80000fd4:	d3 e7                	shl    %cl,%edi
ffffffff80000fd6:	09 fe                	or     %edi,%esi
ffffffff80000fd8:	43 89 b4 84 60 02 00 	mov    %esi,0x260(%r12,%r8,4)
ffffffff80000fdf:	00 
        for (size_t i = 0; i < 8; i++) {
ffffffff80000fe0:	49 83 c0 01          	add    $0x1,%r8
ffffffff80000fe4:	49 83 f8 08          	cmp    $0x8,%r8
ffffffff80000fe8:	75 b9                	jne    ffffffff80000fa3 <flanterm_fb_init+0x1b3>
    }

    if (default_bg != NULL) {
        ctx->default_bg = convert_colour(_ctx, *default_bg);
    } else {
        ctx->default_bg = 0x00000000; // background (black)
ffffffff80000fea:	31 ff                	xor    %edi,%edi
    if (default_bg != NULL) {
ffffffff80000fec:	48 83 bc 24 c8 00 00 	cmpq   $0x0,0xc8(%rsp)
ffffffff80000ff3:	00 00 
ffffffff80000ff5:	74 2f                	je     ffffffff80001026 <flanterm_fb_init+0x236>
        ctx->default_bg = convert_colour(_ctx, *default_bg);
ffffffff80000ff7:	48 8b bc 24 c8 00 00 	mov    0xc8(%rsp),%rdi
ffffffff80000ffe:	00 
ffffffff80000fff:	8b 37                	mov    (%rdi),%esi
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001001:	89 f1                	mov    %esi,%ecx
ffffffff80001003:	0f b6 fd             	movzbl %ch,%edi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001006:	89 c1                	mov    %eax,%ecx
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001008:	41 89 f8             	mov    %edi,%r8d
    uint32_t b =  colour & 0xff;
ffffffff8000100b:	40 0f b6 fe          	movzbl %sil,%edi
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000100f:	c1 ee 10             	shr    $0x10,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001012:	41 d3 e0             	shl    %cl,%r8d
ffffffff80001015:	89 d1                	mov    %edx,%ecx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001017:	40 0f b6 f6          	movzbl %sil,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff8000101b:	d3 e7                	shl    %cl,%edi
ffffffff8000101d:	89 e9                	mov    %ebp,%ecx
ffffffff8000101f:	44 09 c7             	or     %r8d,%edi
ffffffff80001022:	d3 e6                	shl    %cl,%esi
ffffffff80001024:	09 f7                	or     %esi,%edi
    }

    if (default_fg != NULL) {
ffffffff80001026:	48 83 bc 24 d0 00 00 	cmpq   $0x0,0xd0(%rsp)
ffffffff8000102d:	00 00 
ffffffff8000102f:	41 89 bc 24 84 02 00 	mov    %edi,0x284(%r12)
ffffffff80001036:	00 
ffffffff80001037:	0f 84 b2 09 00 00    	je     ffffffff800019ef <flanterm_fb_init+0xbff>
        ctx->default_fg = convert_colour(_ctx, *default_fg);
ffffffff8000103d:	48 8b bc 24 d0 00 00 	mov    0xd0(%rsp),%rdi
ffffffff80001044:	00 
ffffffff80001045:	8b 37                	mov    (%rdi),%esi
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001047:	89 f1                	mov    %esi,%ecx
ffffffff80001049:	0f b6 fd             	movzbl %ch,%edi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff8000104c:	89 c1                	mov    %eax,%ecx
    uint32_t g = (colour >> 8) & 0xff;
ffffffff8000104e:	41 89 f8             	mov    %edi,%r8d
    uint32_t b =  colour & 0xff;
ffffffff80001051:	40 0f b6 fe          	movzbl %sil,%edi
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001055:	c1 ee 10             	shr    $0x10,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001058:	41 d3 e0             	shl    %cl,%r8d
ffffffff8000105b:	89 d1                	mov    %edx,%ecx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000105d:	40 0f b6 f6          	movzbl %sil,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001061:	d3 e7                	shl    %cl,%edi
ffffffff80001063:	89 e9                	mov    %ebp,%ecx
ffffffff80001065:	44 09 c7             	or     %r8d,%edi
ffffffff80001068:	d3 e6                	shl    %cl,%esi
ffffffff8000106a:	09 f7                	or     %esi,%edi
ffffffff8000106c:	41 89 f9             	mov    %edi,%r9d
    } else {
        ctx->default_fg = convert_colour(_ctx, 0x00aaaaaa); // foreground (grey)
    }

    if (default_bg_bright != NULL) {
ffffffff8000106f:	48 83 bc 24 d8 00 00 	cmpq   $0x0,0xd8(%rsp)
ffffffff80001076:	00 00 
ffffffff80001078:	45 89 8c 24 80 02 00 	mov    %r9d,0x280(%r12)
ffffffff8000107f:	00 
ffffffff80001080:	0f 84 48 09 00 00    	je     ffffffff800019ce <flanterm_fb_init+0xbde>
        ctx->default_bg_bright = convert_colour(_ctx, *default_bg_bright);
ffffffff80001086:	48 8b bc 24 d8 00 00 	mov    0xd8(%rsp),%rdi
ffffffff8000108d:	00 
ffffffff8000108e:	8b 3f                	mov    (%rdi),%edi
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001090:	89 f9                	mov    %edi,%ecx
ffffffff80001092:	0f b6 f5             	movzbl %ch,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001095:	89 c1                	mov    %eax,%ecx
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001097:	41 89 f0             	mov    %esi,%r8d
    uint32_t b =  colour & 0xff;
ffffffff8000109a:	40 0f b6 f7          	movzbl %dil,%esi
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000109e:	c1 ef 10             	shr    $0x10,%edi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800010a1:	41 d3 e0             	shl    %cl,%r8d
ffffffff800010a4:	89 d1                	mov    %edx,%ecx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800010a6:	40 0f b6 ff          	movzbl %dil,%edi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800010aa:	d3 e6                	shl    %cl,%esi
ffffffff800010ac:	89 e9                	mov    %ebp,%ecx
ffffffff800010ae:	44 09 c6             	or     %r8d,%esi
ffffffff800010b1:	d3 e7                	shl    %cl,%edi
ffffffff800010b3:	09 fe                	or     %edi,%esi
    } else {
        ctx->default_bg_bright = convert_colour(_ctx, 0x00555555); // background (black)
    }

    if (default_fg_bright != NULL) {
ffffffff800010b5:	48 83 bc 24 e0 00 00 	cmpq   $0x0,0xe0(%rsp)
ffffffff800010bc:	00 00 
ffffffff800010be:	41 89 b4 24 8c 02 00 	mov    %esi,0x28c(%r12)
ffffffff800010c5:	00 
ffffffff800010c6:	0f 84 47 09 00 00    	je     ffffffff80001a13 <flanterm_fb_init+0xc23>
        ctx->default_fg_bright = convert_colour(_ctx, *default_fg_bright);
ffffffff800010cc:	48 8b bc 24 e0 00 00 	mov    0xe0(%rsp),%rdi
ffffffff800010d3:	00 
ffffffff800010d4:	8b 37                	mov    (%rdi),%esi
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800010d6:	89 f1                	mov    %esi,%ecx
ffffffff800010d8:	0f b6 fd             	movzbl %ch,%edi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800010db:	89 c1                	mov    %eax,%ecx
    uint32_t b =  colour & 0xff;
ffffffff800010dd:	40 0f b6 c6          	movzbl %sil,%eax
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800010e1:	c1 ee 10             	shr    $0x10,%esi
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800010e4:	d3 e7                	shl    %cl,%edi
ffffffff800010e6:	89 d1                	mov    %edx,%ecx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800010e8:	40 0f b6 d6          	movzbl %sil,%edx
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800010ec:	d3 e0                	shl    %cl,%eax
ffffffff800010ee:	89 e9                	mov    %ebp,%ecx
ffffffff800010f0:	09 f8                	or     %edi,%eax
ffffffff800010f2:	d3 e2                	shl    %cl,%edx
ffffffff800010f4:	09 d0                	or     %edx,%eax
ffffffff800010f6:	41 89 84 24 88 02 00 	mov    %eax,0x288(%r12)
ffffffff800010fd:	00 
    }

    ctx->text_fg = ctx->default_fg;
    ctx->text_bg = 0xffffffff;

    ctx->framebuffer = (void *)framebuffer;
ffffffff800010fe:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
    ctx->height = height;
    ctx->pitch = pitch;

#define FONT_BYTES ((font_width * font_height * FLANTERM_FB_FONT_GLYPHS) / 8)

    if (font != NULL) {
ffffffff80001103:	48 83 bc 24 e8 00 00 	cmpq   $0x0,0xe8(%rsp)
ffffffff8000110a:	00 00 
    ctx->text_fg = ctx->default_fg;
ffffffff8000110c:	45 89 8c 24 d8 02 00 	mov    %r9d,0x2d8(%r12)
ffffffff80001113:	00 
    ctx->framebuffer = (void *)framebuffer;
ffffffff80001114:	49 89 84 24 f0 01 00 	mov    %rax,0x1f0(%r12)
ffffffff8000111b:	00 
    ctx->pitch = pitch;
ffffffff8000111c:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    ctx->text_bg = 0xffffffff;
ffffffff80001121:	41 c7 84 24 dc 02 00 	movl   $0xffffffff,0x2dc(%r12)
ffffffff80001128:	00 ff ff ff ff 
    ctx->width = width;
ffffffff8000112d:	4d 89 b4 24 00 02 00 	mov    %r14,0x200(%r12)
ffffffff80001134:	00 
    ctx->height = height;
ffffffff80001135:	4d 89 ac 24 08 02 00 	mov    %r13,0x208(%r12)
ffffffff8000113c:	00 
    ctx->pitch = pitch;
ffffffff8000113d:	49 89 84 24 f8 01 00 	mov    %rax,0x1f8(%r12)
ffffffff80001144:	00 
    if (font != NULL) {
ffffffff80001145:	0f 84 e9 06 00 00    	je     ffffffff80001834 <flanterm_fb_init+0xa44>
        ctx->font_width = font_width;
ffffffff8000114b:	48 8b 84 24 f0 00 00 	mov    0xf0(%rsp),%rax
ffffffff80001152:	00 
        ctx->font_height = font_height;
        ctx->font_bits_size = FONT_BYTES;
ffffffff80001153:	48 89 df             	mov    %rbx,%rdi
        ctx->font_height = font_height;
ffffffff80001156:	49 89 9c 24 b8 01 00 	mov    %rbx,0x1b8(%r12)
ffffffff8000115d:	00 
        ctx->font_bits_size = FONT_BYTES;
ffffffff8000115e:	48 0f af f8          	imul   %rax,%rdi
        ctx->font_width = font_width;
ffffffff80001162:	49 89 84 24 b0 01 00 	mov    %rax,0x1b0(%r12)
ffffffff80001169:	00 
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff8000116a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        ctx->font_bits_size = FONT_BYTES;
ffffffff8000116f:	48 c1 e7 08          	shl    $0x8,%rdi
ffffffff80001173:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff80001177:	49 89 bc 24 20 02 00 	mov    %rdi,0x220(%r12)
ffffffff8000117e:	00 
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff8000117f:	ff d0                	call   *%rax
ffffffff80001181:	49 89 84 24 28 02 00 	mov    %rax,0x228(%r12)
ffffffff80001188:	00 
ffffffff80001189:	48 89 c7             	mov    %rax,%rdi
        if (ctx->font_bits == NULL) {
ffffffff8000118c:	48 85 c0             	test   %rax,%rax
ffffffff8000118f:	0f 84 68 05 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
            goto fail;
        }
        memcpy(ctx->font_bits, font, ctx->font_bits_size);
ffffffff80001195:	49 8b 94 24 20 02 00 	mov    0x220(%r12),%rdx
ffffffff8000119c:	00 
ffffffff8000119d:	48 8b b4 24 e8 00 00 	mov    0xe8(%rsp),%rsi
ffffffff800011a4:	00 
ffffffff800011a5:	e8 36 34 00 00       	call   ffffffff800045e0 <memcpy>
        memcpy(ctx->font_bits, builtin_font, ctx->font_bits_size);
    }

#undef FONT_BYTES

    ctx->font_width += font_spacing;
ffffffff800011aa:	48 8b 84 24 00 01 00 	mov    0x100(%rsp),%rax
ffffffff800011b1:	00 
ffffffff800011b2:	49 03 84 24 b0 01 00 	add    0x1b0(%r12),%rax
ffffffff800011b9:	00 
ffffffff800011ba:	49 89 84 24 b0 01 00 	mov    %rax,0x1b0(%r12)
ffffffff800011c1:	00 

    ctx->font_bool_size = FLANTERM_FB_FONT_GLYPHS * font_height * ctx->font_width * sizeof(bool);
ffffffff800011c2:	48 0f af c3          	imul   %rbx,%rax
ffffffff800011c6:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff800011ca:	49 89 84 24 30 02 00 	mov    %rax,0x230(%r12)
ffffffff800011d1:	00 
ffffffff800011d2:	48 89 c7             	mov    %rax,%rdi
    ctx->font_bool = _malloc(ctx->font_bool_size);
ffffffff800011d5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff800011da:	ff d0                	call   *%rax
ffffffff800011dc:	49 89 84 24 38 02 00 	mov    %rax,0x238(%r12)
ffffffff800011e3:	00 
ffffffff800011e4:	48 89 c5             	mov    %rax,%rbp
    if (ctx->font_bool == NULL) {
ffffffff800011e7:	48 85 c0             	test   %rax,%rax
ffffffff800011ea:	0f 84 0d 05 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
    }

    ctx->font_scale_x = font_scale_x;
    ctx->font_scale_y = font_scale_y;

    ctx->glyph_width = ctx->font_width * font_scale_x;
ffffffff800011f0:	4d 8b 94 24 b0 01 00 	mov    0x1b0(%r12),%r10
ffffffff800011f7:	00 
ffffffff800011f8:	48 89 d8             	mov    %rbx,%rax
                if ((glyph[y] & (0x80 >> x))) {
ffffffff800011fb:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
    ctx->glyph_width = ctx->font_width * font_scale_x;
ffffffff80001200:	45 31 ed             	xor    %r13d,%r13d
ffffffff80001203:	4d 8b b4 24 28 02 00 	mov    0x228(%r12),%r14
ffffffff8000120a:	00 
ffffffff8000120b:	49 c7 c0 40 ff ff ff 	mov    $0xffffffffffffff40,%r8
                if ((glyph[y] & (0x80 >> x))) {
ffffffff80001212:	41 b9 80 00 00 00    	mov    $0x80,%r9d
ffffffff80001218:	49 0f af c2          	imul   %r10,%rax
ffffffff8000121c:	4e 8d 1c 33          	lea    (%rbx,%r14,1),%r11
ffffffff80001220:	49 89 c4             	mov    %rax,%r12
ffffffff80001223:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        for (size_t y = 0; y < font_height; y++) {
ffffffff80001228:	4a 8d 7c 15 00       	lea    0x0(%rbp,%r10,1),%rdi
ffffffff8000122d:	4b 8d 44 35 00       	lea    0x0(%r13,%r14,1),%rax
ffffffff80001232:	48 89 ee             	mov    %rbp,%rsi
ffffffff80001235:	48 85 db             	test   %rbx,%rbx
ffffffff80001238:	74 5e                	je     ffffffff80001298 <flanterm_fb_init+0x4a8>
ffffffff8000123a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            for (size_t x = 0; x < 8; x++) {
ffffffff80001240:	31 c9                	xor    %ecx,%ecx
ffffffff80001242:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                if ((glyph[y] & (0x80 >> x))) {
ffffffff80001248:	0f b6 10             	movzbl (%rax),%edx
ffffffff8000124b:	45 89 cf             	mov    %r9d,%r15d
ffffffff8000124e:	41 d3 ff             	sar    %cl,%r15d
ffffffff80001251:	44 85 fa             	test   %r15d,%edx
                    ctx->font_bool[offset] = true;
ffffffff80001254:	0f 95 04 0e          	setne  (%rsi,%rcx,1)
            for (size_t x = 0; x < 8; x++) {
ffffffff80001258:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000125c:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff80001260:	75 e6                	jne    ffffffff80001248 <flanterm_fb_init+0x458>
            for (size_t x = 8; x < ctx->font_width; x++) {
ffffffff80001262:	48 8d 56 08          	lea    0x8(%rsi),%rdx
ffffffff80001266:	49 83 fa 08          	cmp    $0x8,%r10
ffffffff8000126a:	76 1d                	jbe    ffffffff80001289 <flanterm_fb_init+0x499>
ffffffff8000126c:	0f 1f 40 00          	nopl   0x0(%rax)
                if (i >= 0xc0 && i <= 0xdf) {
ffffffff80001270:	31 c9                	xor    %ecx,%ecx
ffffffff80001272:	49 83 f8 1f          	cmp    $0x1f,%r8
ffffffff80001276:	77 06                	ja     ffffffff8000127e <flanterm_fb_init+0x48e>
                    ctx->font_bool[offset] = (glyph[y] & 1);
ffffffff80001278:	0f b6 08             	movzbl (%rax),%ecx
ffffffff8000127b:	83 e1 01             	and    $0x1,%ecx
ffffffff8000127e:	88 0a                	mov    %cl,(%rdx)
            for (size_t x = 8; x < ctx->font_width; x++) {
ffffffff80001280:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001284:	48 39 d7             	cmp    %rdx,%rdi
ffffffff80001287:	75 e7                	jne    ffffffff80001270 <flanterm_fb_init+0x480>
        for (size_t y = 0; y < font_height; y++) {
ffffffff80001289:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000128d:	4c 01 d7             	add    %r10,%rdi
ffffffff80001290:	4c 01 d6             	add    %r10,%rsi
ffffffff80001293:	49 39 c3             	cmp    %rax,%r11
ffffffff80001296:	75 a8                	jne    ffffffff80001240 <flanterm_fb_init+0x450>
    for (size_t i = 0; i < FLANTERM_FB_FONT_GLYPHS; i++) {
ffffffff80001298:	49 83 c0 01          	add    $0x1,%r8
ffffffff8000129c:	49 01 db             	add    %rbx,%r11
ffffffff8000129f:	4c 01 e5             	add    %r12,%rbp
ffffffff800012a2:	49 01 dd             	add    %rbx,%r13
ffffffff800012a5:	49 83 f8 40          	cmp    $0x40,%r8
ffffffff800012a9:	0f 85 79 ff ff ff    	jne    ffffffff80001228 <flanterm_fb_init+0x438>
ffffffff800012af:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
    ctx->font_scale_x = font_scale_x;
ffffffff800012b4:	48 8b 84 24 08 01 00 	mov    0x108(%rsp),%rax
ffffffff800012bb:	00 
ffffffff800012bc:	31 d2                	xor    %edx,%edx
    ctx->glyph_width = ctx->font_width * font_scale_x;
ffffffff800012be:	4c 0f af 94 24 08 01 	imul   0x108(%rsp),%r10
ffffffff800012c5:	00 00 
    ctx->font_scale_x = font_scale_x;
ffffffff800012c7:	49 89 84 24 d0 01 00 	mov    %rax,0x1d0(%r12)
ffffffff800012ce:	00 
    ctx->font_scale_y = font_scale_y;
ffffffff800012cf:	48 8b 84 24 10 01 00 	mov    0x110(%rsp),%rax
ffffffff800012d6:	00 
    ctx->glyph_height = font_height * font_scale_y;
ffffffff800012d7:	48 0f af d8          	imul   %rax,%rbx
    ctx->font_scale_y = font_scale_y;
ffffffff800012db:	49 89 84 24 d8 01 00 	mov    %rax,0x1d8(%r12)
ffffffff800012e2:	00 

    _ctx->cols = (ctx->width - margin * 2) / ctx->glyph_width;
ffffffff800012e3:	48 8b 84 24 18 01 00 	mov    0x118(%rsp),%rax
ffffffff800012ea:	00 
    ctx->glyph_width = ctx->font_width * font_scale_x;
ffffffff800012eb:	4d 89 94 24 c0 01 00 	mov    %r10,0x1c0(%r12)
ffffffff800012f2:	00 
    _ctx->cols = (ctx->width - margin * 2) / ctx->glyph_width;
ffffffff800012f3:	48 8d 3c 00          	lea    (%rax,%rax,1),%rdi
ffffffff800012f7:	49 8b 84 24 00 02 00 	mov    0x200(%r12),%rax
ffffffff800012fe:	00 
    ctx->glyph_height = font_height * font_scale_y;
ffffffff800012ff:	49 89 9c 24 c8 01 00 	mov    %rbx,0x1c8(%r12)
ffffffff80001306:	00 
    _ctx->cols = (ctx->width - margin * 2) / ctx->glyph_width;
ffffffff80001307:	48 29 f8             	sub    %rdi,%rax
ffffffff8000130a:	49 f7 f2             	div    %r10
ffffffff8000130d:	49 89 84 24 e8 00 00 	mov    %rax,0xe8(%r12)
ffffffff80001314:	00 
    _ctx->rows = (ctx->height - margin * 2) / ctx->glyph_height;
ffffffff80001315:	48 89 c1             	mov    %rax,%rcx
ffffffff80001318:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000131b:	31 d2                	xor    %edx,%edx
ffffffff8000131d:	49 8b 84 24 08 02 00 	mov    0x208(%r12),%rax
ffffffff80001324:	00 

    ctx->offset_x = margin + ((ctx->width - margin * 2) % ctx->glyph_width) / 2;
ffffffff80001325:	48 d1 ee             	shr    %rsi
ffffffff80001328:	48 03 b4 24 18 01 00 	add    0x118(%rsp),%rsi
ffffffff8000132f:	00 
ffffffff80001330:	49 89 b4 24 e0 01 00 	mov    %rsi,0x1e0(%r12)
ffffffff80001337:	00 
    _ctx->rows = (ctx->height - margin * 2) / ctx->glyph_height;
ffffffff80001338:	48 29 f8             	sub    %rdi,%rax
ffffffff8000133b:	48 f7 f3             	div    %rbx
    ctx->offset_y = margin + ((ctx->height - margin * 2) % ctx->glyph_height) / 2;

    ctx->grid_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_char);
ffffffff8000133e:	48 0f af c8          	imul   %rax,%rcx
    ctx->offset_y = margin + ((ctx->height - margin * 2) % ctx->glyph_height) / 2;
ffffffff80001342:	48 d1 ea             	shr    %rdx
ffffffff80001345:	48 03 94 24 18 01 00 	add    0x118(%rsp),%rdx
ffffffff8000134c:	00 
    _ctx->rows = (ctx->height - margin * 2) / ctx->glyph_height;
ffffffff8000134d:	49 89 84 24 e0 00 00 	mov    %rax,0xe0(%r12)
ffffffff80001354:	00 
    ctx->offset_y = margin + ((ctx->height - margin * 2) % ctx->glyph_height) / 2;
ffffffff80001355:	49 89 94 24 e8 01 00 	mov    %rdx,0x1e8(%r12)
ffffffff8000135c:	00 
    ctx->grid = _malloc(ctx->grid_size);
ffffffff8000135d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    ctx->grid_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_char);
ffffffff80001362:	48 8d 3c 49          	lea    (%rcx,%rcx,2),%rdi
ffffffff80001366:	48 c1 e7 02          	shl    $0x2,%rdi
ffffffff8000136a:	49 89 bc 24 a0 02 00 	mov    %rdi,0x2a0(%r12)
ffffffff80001371:	00 
    ctx->grid = _malloc(ctx->grid_size);
ffffffff80001372:	ff d0                	call   *%rax
ffffffff80001374:	49 89 84 24 b8 02 00 	mov    %rax,0x2b8(%r12)
ffffffff8000137b:	00 
    if (ctx->grid == NULL) {
ffffffff8000137c:	48 85 c0             	test   %rax,%rax
ffffffff8000137f:	0f 84 78 03 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
        goto fail;
    }
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff80001385:	49 8b bc 24 e0 00 00 	mov    0xe0(%r12),%rdi
ffffffff8000138c:	00 
ffffffff8000138d:	49 0f af bc 24 e8 00 	imul   0xe8(%r12),%rdi
ffffffff80001394:	00 00 
ffffffff80001396:	48 85 ff             	test   %rdi,%rdi
ffffffff80001399:	74 31                	je     ffffffff800013cc <flanterm_fb_init+0x5dc>
ffffffff8000139b:	48 8d 14 7f          	lea    (%rdi,%rdi,2),%rdx
        ctx->grid[i].c = ' ';
        ctx->grid[i].fg = ctx->text_fg;
ffffffff8000139f:	41 8b b4 24 d8 02 00 	mov    0x2d8(%r12),%esi
ffffffff800013a6:	00 
        ctx->grid[i].bg = ctx->text_bg;
ffffffff800013a7:	41 8b 8c 24 dc 02 00 	mov    0x2dc(%r12),%ecx
ffffffff800013ae:	00 
ffffffff800013af:	48 8d 14 90          	lea    (%rax,%rdx,4),%rdx
        ctx->grid[i].c = ' ';
ffffffff800013b3:	c7 00 20 00 00 00    	movl   $0x20,(%rax)
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff800013b9:	48 83 c0 0c          	add    $0xc,%rax
        ctx->grid[i].fg = ctx->text_fg;
ffffffff800013bd:	89 70 f8             	mov    %esi,-0x8(%rax)
        ctx->grid[i].bg = ctx->text_bg;
ffffffff800013c0:	89 48 fc             	mov    %ecx,-0x4(%rax)
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff800013c3:	48 39 c2             	cmp    %rax,%rdx
ffffffff800013c6:	75 eb                	jne    ffffffff800013b3 <flanterm_fb_init+0x5c3>
    }

    ctx->queue_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_queue_item);
ffffffff800013c8:	48 c1 e7 05          	shl    $0x5,%rdi
ffffffff800013cc:	49 89 bc 24 a8 02 00 	mov    %rdi,0x2a8(%r12)
ffffffff800013d3:	00 
    ctx->queue = _malloc(ctx->queue_size);
ffffffff800013d4:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
ffffffff800013d9:	ff d3                	call   *%rbx
ffffffff800013db:	49 89 84 24 c0 02 00 	mov    %rax,0x2c0(%r12)
ffffffff800013e2:	00 
ffffffff800013e3:	48 89 c7             	mov    %rax,%rdi
    if (ctx->queue == NULL) {
ffffffff800013e6:	48 85 c0             	test   %rax,%rax
ffffffff800013e9:	0f 84 0e 03 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
        goto fail;
    }
    ctx->queue_i = 0;
ffffffff800013ef:	49 c7 84 24 c8 02 00 	movq   $0x0,0x2c8(%r12)
ffffffff800013f6:	00 00 00 00 00 
    memset(ctx->queue, 0, ctx->queue_size);
ffffffff800013fb:	49 8b 94 24 a8 02 00 	mov    0x2a8(%r12),%rdx
ffffffff80001402:	00 
ffffffff80001403:	31 f6                	xor    %esi,%esi
ffffffff80001405:	e8 06 32 00 00       	call   ffffffff80004610 <memset>

    ctx->map_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_queue_item *);
ffffffff8000140a:	49 8b bc 24 e0 00 00 	mov    0xe0(%r12),%rdi
ffffffff80001411:	00 
ffffffff80001412:	49 0f af bc 24 e8 00 	imul   0xe8(%r12),%rdi
ffffffff80001419:	00 00 
ffffffff8000141b:	48 c1 e7 03          	shl    $0x3,%rdi
ffffffff8000141f:	49 89 bc 24 b0 02 00 	mov    %rdi,0x2b0(%r12)
ffffffff80001426:	00 
    ctx->map = _malloc(ctx->map_size);
ffffffff80001427:	ff d3                	call   *%rbx
ffffffff80001429:	49 89 84 24 d0 02 00 	mov    %rax,0x2d0(%r12)
ffffffff80001430:	00 
ffffffff80001431:	48 89 c7             	mov    %rax,%rdi
    if (ctx->map == NULL) {
ffffffff80001434:	48 85 c0             	test   %rax,%rax
ffffffff80001437:	0f 84 c0 02 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
        goto fail;
    }
    memset(ctx->map, 0, ctx->map_size);
ffffffff8000143d:	49 8b 94 24 b0 02 00 	mov    0x2b0(%r12),%rdx
ffffffff80001444:	00 
ffffffff80001445:	31 f6                	xor    %esi,%esi
ffffffff80001447:	e8 c4 31 00 00       	call   ffffffff80004610 <memset>

    if (canvas != NULL) {
ffffffff8000144c:	48 83 bc 24 b0 00 00 	cmpq   $0x0,0xb0(%rsp)
ffffffff80001453:	00 00 
ffffffff80001455:	0f 84 a4 00 00 00    	je     ffffffff800014ff <flanterm_fb_init+0x70f>
        ctx->canvas_size = ctx->width * ctx->height * sizeof(uint32_t);
ffffffff8000145b:	49 8b bc 24 00 02 00 	mov    0x200(%r12),%rdi
ffffffff80001462:	00 
        ctx->canvas = _malloc(ctx->canvas_size);
ffffffff80001463:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        ctx->canvas_size = ctx->width * ctx->height * sizeof(uint32_t);
ffffffff80001468:	49 0f af bc 24 08 02 	imul   0x208(%r12),%rdi
ffffffff8000146f:	00 00 
ffffffff80001471:	48 c1 e7 02          	shl    $0x2,%rdi
ffffffff80001475:	49 89 bc 24 90 02 00 	mov    %rdi,0x290(%r12)
ffffffff8000147c:	00 
        ctx->canvas = _malloc(ctx->canvas_size);
ffffffff8000147d:	ff d0                	call   *%rax
ffffffff8000147f:	49 89 84 24 98 02 00 	mov    %rax,0x298(%r12)
ffffffff80001486:	00 
ffffffff80001487:	48 89 c6             	mov    %rax,%rsi
        if (ctx->canvas == NULL) {
ffffffff8000148a:	48 85 c0             	test   %rax,%rax
ffffffff8000148d:	0f 84 6a 02 00 00    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
            goto fail;
        }
        for (size_t i = 0; i < ctx->width * ctx->height; i++) {
ffffffff80001493:	49 8b bc 24 00 02 00 	mov    0x200(%r12),%rdi
ffffffff8000149a:	00 
ffffffff8000149b:	49 0f af bc 24 08 02 	imul   0x208(%r12),%rdi
ffffffff800014a2:	00 00 
ffffffff800014a4:	48 85 ff             	test   %rdi,%rdi
ffffffff800014a7:	74 56                	je     ffffffff800014ff <flanterm_fb_init+0x70f>
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800014a9:	45 0f b6 94 24 19 02 	movzbl 0x219(%r12),%r10d
ffffffff800014b0:	00 00 
        for (size_t i = 0; i < ctx->width * ctx->height; i++) {
ffffffff800014b2:	4c 8b 9c 24 b0 00 00 	mov    0xb0(%rsp),%r11
ffffffff800014b9:	00 
ffffffff800014ba:	31 d2                	xor    %edx,%edx
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800014bc:	45 0f b6 8c 24 1b 02 	movzbl 0x21b(%r12),%r9d
ffffffff800014c3:	00 00 
ffffffff800014c5:	45 0f b6 84 24 1d 02 	movzbl 0x21d(%r12),%r8d
ffffffff800014cc:	00 00 
            ctx->canvas[i] = convert_colour(_ctx, canvas[i]);
ffffffff800014ce:	41 8b 1c 93          	mov    (%r11,%rdx,4),%ebx
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800014d2:	44 89 d1             	mov    %r10d,%ecx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800014d5:	89 d8                	mov    %ebx,%eax
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800014d7:	0f b6 ef             	movzbl %bh,%ebp
    uint32_t b =  colour & 0xff;
ffffffff800014da:	0f b6 db             	movzbl %bl,%ebx
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800014dd:	c1 e8 10             	shr    $0x10,%eax
ffffffff800014e0:	0f b6 c0             	movzbl %al,%eax
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800014e3:	d3 e0                	shl    %cl,%eax
ffffffff800014e5:	44 89 c9             	mov    %r9d,%ecx
ffffffff800014e8:	d3 e5                	shl    %cl,%ebp
ffffffff800014ea:	44 89 c1             	mov    %r8d,%ecx
ffffffff800014ed:	09 e8                	or     %ebp,%eax
ffffffff800014ef:	d3 e3                	shl    %cl,%ebx
ffffffff800014f1:	09 d8                	or     %ebx,%eax
ffffffff800014f3:	89 04 96             	mov    %eax,(%rsi,%rdx,4)
        for (size_t i = 0; i < ctx->width * ctx->height; i++) {
ffffffff800014f6:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800014fa:	48 39 d7             	cmp    %rdx,%rdi
ffffffff800014fd:	75 cf                	jne    ffffffff800014ce <flanterm_fb_init+0x6de>
        }
    }

    _ctx->raw_putchar = flanterm_fb_raw_putchar;
ffffffff800014ff:	48 8d 05 6a f1 ff ff 	lea    -0xe96(%rip),%rax        # ffffffff80000670 <flanterm_fb_raw_putchar>
    _ctx->restore_state = flanterm_fb_restore_state;
    _ctx->double_buffer_flush = flanterm_fb_double_buffer_flush;
    _ctx->full_refresh = flanterm_fb_full_refresh;
    _ctx->deinit = flanterm_fb_deinit;

    flanterm_context_reinit(_ctx);
ffffffff80001506:	4c 89 e7             	mov    %r12,%rdi
    _ctx->raw_putchar = flanterm_fb_raw_putchar;
ffffffff80001509:	49 89 84 24 f0 00 00 	mov    %rax,0xf0(%r12)
ffffffff80001510:	00 
    _ctx->clear = flanterm_fb_clear;
ffffffff80001511:	48 8d 05 38 ee ff ff 	lea    -0x11c8(%rip),%rax        # ffffffff80000350 <flanterm_fb_clear>
ffffffff80001518:	49 89 84 24 f8 00 00 	mov    %rax,0xf8(%r12)
ffffffff8000151f:	00 
    _ctx->set_cursor_pos = flanterm_fb_set_cursor_pos;
ffffffff80001520:	48 8d 05 c9 ee ff ff 	lea    -0x1137(%rip),%rax        # ffffffff800003f0 <flanterm_fb_set_cursor_pos>
ffffffff80001527:	49 89 84 24 00 01 00 	mov    %rax,0x100(%r12)
ffffffff8000152e:	00 
    _ctx->get_cursor_pos = flanterm_fb_get_cursor_pos;
ffffffff8000152f:	48 8d 05 0a ef ff ff 	lea    -0x10f6(%rip),%rax        # ffffffff80000440 <flanterm_fb_get_cursor_pos>
ffffffff80001536:	49 89 84 24 08 01 00 	mov    %rax,0x108(%r12)
ffffffff8000153d:	00 
    _ctx->set_text_fg = flanterm_fb_set_text_fg;
ffffffff8000153e:	48 8d 05 bb ef ff ff 	lea    -0x1045(%rip),%rax        # ffffffff80000500 <flanterm_fb_set_text_fg>
ffffffff80001545:	49 89 84 24 10 01 00 	mov    %rax,0x110(%r12)
ffffffff8000154c:	00 
    _ctx->set_text_bg = flanterm_fb_set_text_bg;
ffffffff8000154d:	48 8d 05 cc ef ff ff 	lea    -0x1034(%rip),%rax        # ffffffff80000520 <flanterm_fb_set_text_bg>
ffffffff80001554:	49 89 84 24 18 01 00 	mov    %rax,0x118(%r12)
ffffffff8000155b:	00 
    _ctx->set_text_fg_bright = flanterm_fb_set_text_fg_bright;
ffffffff8000155c:	48 8d 05 dd ef ff ff 	lea    -0x1023(%rip),%rax        # ffffffff80000540 <flanterm_fb_set_text_fg_bright>
ffffffff80001563:	49 89 84 24 20 01 00 	mov    %rax,0x120(%r12)
ffffffff8000156a:	00 
    _ctx->set_text_bg_bright = flanterm_fb_set_text_bg_bright;
ffffffff8000156b:	48 8d 05 ee ef ff ff 	lea    -0x1012(%rip),%rax        # ffffffff80000560 <flanterm_fb_set_text_bg_bright>
ffffffff80001572:	49 89 84 24 28 01 00 	mov    %rax,0x128(%r12)
ffffffff80001579:	00 
    _ctx->set_text_fg_rgb = flanterm_fb_set_text_fg_rgb;
ffffffff8000157a:	48 8d 05 ff ef ff ff 	lea    -0x1001(%rip),%rax        # ffffffff80000580 <flanterm_fb_set_text_fg_rgb>
ffffffff80001581:	49 89 84 24 30 01 00 	mov    %rax,0x130(%r12)
ffffffff80001588:	00 
    _ctx->set_text_bg_rgb = flanterm_fb_set_text_bg_rgb;
ffffffff80001589:	48 8d 05 30 f0 ff ff 	lea    -0xfd0(%rip),%rax        # ffffffff800005c0 <flanterm_fb_set_text_bg_rgb>
ffffffff80001590:	49 89 84 24 38 01 00 	mov    %rax,0x138(%r12)
ffffffff80001597:	00 
    _ctx->set_text_fg_default = flanterm_fb_set_text_fg_default;
ffffffff80001598:	48 8d 05 61 f0 ff ff 	lea    -0xf9f(%rip),%rax        # ffffffff80000600 <flanterm_fb_set_text_fg_default>
ffffffff8000159f:	49 89 84 24 40 01 00 	mov    %rax,0x140(%r12)
ffffffff800015a6:	00 
    _ctx->set_text_bg_default = flanterm_fb_set_text_bg_default;
ffffffff800015a7:	48 8d 05 72 f0 ff ff 	lea    -0xf8e(%rip),%rax        # ffffffff80000620 <flanterm_fb_set_text_bg_default>
ffffffff800015ae:	49 89 84 24 48 01 00 	mov    %rax,0x148(%r12)
ffffffff800015b5:	00 
    _ctx->set_text_fg_default_bright = flanterm_fb_set_text_fg_default_bright;
ffffffff800015b6:	48 8d 05 73 f0 ff ff 	lea    -0xf8d(%rip),%rax        # ffffffff80000630 <flanterm_fb_set_text_fg_default_bright>
ffffffff800015bd:	49 89 84 24 50 01 00 	mov    %rax,0x150(%r12)
ffffffff800015c4:	00 
    _ctx->set_text_bg_default_bright = flanterm_fb_set_text_bg_default_bright;
ffffffff800015c5:	48 8d 05 84 f0 ff ff 	lea    -0xf7c(%rip),%rax        # ffffffff80000650 <flanterm_fb_set_text_bg_default_bright>
ffffffff800015cc:	49 89 84 24 58 01 00 	mov    %rax,0x158(%r12)
ffffffff800015d3:	00 
    _ctx->move_character = flanterm_fb_move_character;
ffffffff800015d4:	48 8d 05 a5 ee ff ff 	lea    -0x115b(%rip),%rax        # ffffffff80000480 <flanterm_fb_move_character>
ffffffff800015db:	49 89 84 24 60 01 00 	mov    %rax,0x160(%r12)
ffffffff800015e2:	00 
    _ctx->scroll = flanterm_fb_scroll;
ffffffff800015e3:	48 8d 05 76 ec ff ff 	lea    -0x138a(%rip),%rax        # ffffffff80000260 <flanterm_fb_scroll>
ffffffff800015ea:	49 89 84 24 68 01 00 	mov    %rax,0x168(%r12)
ffffffff800015f1:	00 
    _ctx->revscroll = flanterm_fb_revscroll;
ffffffff800015f2:	48 8d 05 87 eb ff ff 	lea    -0x1479(%rip),%rax        # ffffffff80000180 <flanterm_fb_revscroll>
ffffffff800015f9:	49 89 84 24 70 01 00 	mov    %rax,0x170(%r12)
ffffffff80001600:	00 
    _ctx->swap_palette = flanterm_fb_swap_palette;
ffffffff80001601:	48 8d 05 98 ea ff ff 	lea    -0x1568(%rip),%rax        # ffffffff800000a0 <flanterm_fb_swap_palette>
ffffffff80001608:	49 89 84 24 78 01 00 	mov    %rax,0x178(%r12)
ffffffff8000160f:	00 
    _ctx->save_state = flanterm_fb_save_state;
ffffffff80001610:	48 8d 05 29 ea ff ff 	lea    -0x15d7(%rip),%rax        # ffffffff80000040 <flanterm_fb_save_state>
ffffffff80001617:	49 89 84 24 80 01 00 	mov    %rax,0x180(%r12)
ffffffff8000161e:	00 
    _ctx->restore_state = flanterm_fb_restore_state;
ffffffff8000161f:	48 8d 05 4a ea ff ff 	lea    -0x15b6(%rip),%rax        # ffffffff80000070 <flanterm_fb_restore_state>
ffffffff80001626:	49 89 84 24 88 01 00 	mov    %rax,0x188(%r12)
ffffffff8000162d:	00 
    _ctx->double_buffer_flush = flanterm_fb_double_buffer_flush;
ffffffff8000162e:	48 8d 05 fb f4 ff ff 	lea    -0xb05(%rip),%rax        # ffffffff80000b30 <flanterm_fb_double_buffer_flush>
ffffffff80001635:	49 89 84 24 90 01 00 	mov    %rax,0x190(%r12)
ffffffff8000163c:	00 
    _ctx->full_refresh = flanterm_fb_full_refresh;
ffffffff8000163d:	48 8d 05 8c f6 ff ff 	lea    -0x974(%rip),%rax        # ffffffff80000cd0 <flanterm_fb_full_refresh>
ffffffff80001644:	49 89 84 24 98 01 00 	mov    %rax,0x198(%r12)
ffffffff8000164b:	00 
    _ctx->deinit = flanterm_fb_deinit;
ffffffff8000164c:	48 8d 05 fd f0 ff ff 	lea    -0xf03(%rip),%rax        # ffffffff80000750 <flanterm_fb_deinit>
ffffffff80001653:	49 89 84 24 a0 01 00 	mov    %rax,0x1a0(%r12)
ffffffff8000165a:	00 
    flanterm_context_reinit(_ctx);
ffffffff8000165b:	e8 30 04 00 00       	call   ffffffff80001a90 <flanterm_context_reinit>
    flanterm_fb_full_refresh(_ctx);
ffffffff80001660:	4c 89 e7             	mov    %r12,%rdi
ffffffff80001663:	e8 68 f6 ff ff       	call   ffffffff80000cd0 <flanterm_fb_full_refresh>

#ifndef FLANTERM_FB_DISABLE_BUMP_ALLOC
    if (_malloc == bump_alloc) {
ffffffff80001668:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
ffffffff8000166d:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
ffffffff80001672:	75 17                	jne    ffffffff8000168b <flanterm_fb_init+0x89b>
        bump_allocated_instance = true;
ffffffff80001674:	c6 05 a5 b4 00 00 01 	movb   $0x1,0xb4a5(%rip)        # ffffffff8000cb20 <bump_allocated_instance>
ffffffff8000167b:	eb 0e                	jmp    ffffffff8000168b <flanterm_fb_init+0x89b>
    return _ctx;

fail:
#ifndef FLANTERM_FB_DISABLE_BUMP_ALLOC
    if (_malloc == bump_alloc) {
        bump_alloc_ptr = 0;
ffffffff8000167d:	48 c7 05 a0 b4 00 00 	movq   $0x0,0xb4a0(%rip)        # ffffffff8000cb28 <bump_alloc_ptr>
ffffffff80001684:	00 00 00 00 
        return NULL;
ffffffff80001688:	45 31 e4             	xor    %r12d,%r12d
    if (ctx != NULL) {
        _free(ctx, sizeof(struct flanterm_fb_context));
    }

    return NULL;
}
ffffffff8000168b:	48 83 c4 48          	add    $0x48,%rsp
ffffffff8000168f:	4c 89 e0             	mov    %r12,%rax
ffffffff80001692:	5b                   	pop    %rbx
ffffffff80001693:	5d                   	pop    %rbp
ffffffff80001694:	41 5c                	pop    %r12
ffffffff80001696:	41 5d                	pop    %r13
ffffffff80001698:	41 5e                	pop    %r14
ffffffff8000169a:	41 5f                	pop    %r15
ffffffff8000169c:	c3                   	ret    
        if (width >= (3840 + 3840 / 3) && height >= (2160 + 2160 / 3)) {
ffffffff8000169d:	49 81 fe ff 13 00 00 	cmp    $0x13ff,%r14
ffffffff800016a4:	76 25                	jbe    ffffffff800016cb <flanterm_fb_init+0x8db>
            font_scale_y = 4;
ffffffff800016a6:	48 c7 84 24 10 01 00 	movq   $0x4,0x110(%rsp)
ffffffff800016ad:	00 04 00 00 00 
            font_scale_x = 4;
ffffffff800016b2:	48 c7 84 24 08 01 00 	movq   $0x4,0x108(%rsp)
ffffffff800016b9:	00 04 00 00 00 
        if (width >= (3840 + 3840 / 3) && height >= (2160 + 2160 / 3)) {
ffffffff800016be:	49 81 fd 3f 0b 00 00 	cmp    $0xb3f,%r13
ffffffff800016c5:	0f 87 b2 f7 ff ff    	ja     ffffffff80000e7d <flanterm_fb_init+0x8d>
        if (width >= (1920 + 1920 / 3) && height >= (1080 + 1080 / 3)) {
ffffffff800016cb:	49 81 fe ff 09 00 00 	cmp    $0x9ff,%r14
ffffffff800016d2:	0f 97 c2             	seta   %dl
ffffffff800016d5:	31 c0                	xor    %eax,%eax
ffffffff800016d7:	49 81 fd 9f 05 00 00 	cmp    $0x59f,%r13
ffffffff800016de:	0f 97 c0             	seta   %al
ffffffff800016e1:	48 21 d0             	and    %rdx,%rax
ffffffff800016e4:	48 83 c0 01          	add    $0x1,%rax
ffffffff800016e8:	48 89 84 24 08 01 00 	mov    %rax,0x108(%rsp)
ffffffff800016ef:	00 
ffffffff800016f0:	48 89 84 24 10 01 00 	mov    %rax,0x110(%rsp)
ffffffff800016f7:	00 
ffffffff800016f8:	e9 80 f7 ff ff       	jmp    ffffffff80000e7d <flanterm_fb_init+0x8d>
    if (_malloc == bump_alloc) {
ffffffff800016fd:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
ffffffff80001702:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
ffffffff80001707:	0f 84 70 ff ff ff    	je     ffffffff8000167d <flanterm_fb_init+0x88d>
    if (_free == NULL) {
ffffffff8000170d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80001712:	48 85 c0             	test   %rax,%rax
ffffffff80001715:	0f 84 6d ff ff ff    	je     ffffffff80001688 <flanterm_fb_init+0x898>
    if (ctx->canvas != NULL) {
ffffffff8000171b:	49 8b bc 24 98 02 00 	mov    0x298(%r12),%rdi
ffffffff80001722:	00 
ffffffff80001723:	48 85 ff             	test   %rdi,%rdi
ffffffff80001726:	74 0a                	je     ffffffff80001732 <flanterm_fb_init+0x942>
        _free(ctx->canvas, ctx->canvas_size);
ffffffff80001728:	49 8b b4 24 90 02 00 	mov    0x290(%r12),%rsi
ffffffff8000172f:	00 
ffffffff80001730:	ff d0                	call   *%rax
    if (ctx->map != NULL) {
ffffffff80001732:	49 8b bc 24 d0 02 00 	mov    0x2d0(%r12),%rdi
ffffffff80001739:	00 
ffffffff8000173a:	48 85 ff             	test   %rdi,%rdi
ffffffff8000173d:	74 0f                	je     ffffffff8000174e <flanterm_fb_init+0x95e>
        _free(ctx->map, ctx->map_size);
ffffffff8000173f:	49 8b b4 24 b0 02 00 	mov    0x2b0(%r12),%rsi
ffffffff80001746:	00 
ffffffff80001747:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff8000174c:	ff d0                	call   *%rax
    if (ctx->queue != NULL) {
ffffffff8000174e:	49 8b bc 24 c0 02 00 	mov    0x2c0(%r12),%rdi
ffffffff80001755:	00 
ffffffff80001756:	48 85 ff             	test   %rdi,%rdi
ffffffff80001759:	74 0f                	je     ffffffff8000176a <flanterm_fb_init+0x97a>
        _free(ctx->queue, ctx->queue_size);
ffffffff8000175b:	49 8b b4 24 a8 02 00 	mov    0x2a8(%r12),%rsi
ffffffff80001762:	00 
ffffffff80001763:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80001768:	ff d0                	call   *%rax
    if (ctx->grid != NULL) {
ffffffff8000176a:	49 8b bc 24 b8 02 00 	mov    0x2b8(%r12),%rdi
ffffffff80001771:	00 
ffffffff80001772:	48 85 ff             	test   %rdi,%rdi
ffffffff80001775:	74 0f                	je     ffffffff80001786 <flanterm_fb_init+0x996>
        _free(ctx->grid, ctx->grid_size);
ffffffff80001777:	49 8b b4 24 a0 02 00 	mov    0x2a0(%r12),%rsi
ffffffff8000177e:	00 
ffffffff8000177f:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80001784:	ff d0                	call   *%rax
    if (ctx->font_bool != NULL) {
ffffffff80001786:	49 8b bc 24 38 02 00 	mov    0x238(%r12),%rdi
ffffffff8000178d:	00 
ffffffff8000178e:	48 85 ff             	test   %rdi,%rdi
ffffffff80001791:	74 0f                	je     ffffffff800017a2 <flanterm_fb_init+0x9b2>
        _free(ctx->font_bool, ctx->font_bool_size);
ffffffff80001793:	49 8b b4 24 30 02 00 	mov    0x230(%r12),%rsi
ffffffff8000179a:	00 
ffffffff8000179b:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff800017a0:	ff d0                	call   *%rax
    if (ctx->font_bits != NULL) {
ffffffff800017a2:	49 8b bc 24 28 02 00 	mov    0x228(%r12),%rdi
ffffffff800017a9:	00 
ffffffff800017aa:	48 85 ff             	test   %rdi,%rdi
ffffffff800017ad:	74 0f                	je     ffffffff800017be <flanterm_fb_init+0x9ce>
        _free(ctx->font_bits, ctx->font_bits_size);
ffffffff800017af:	49 8b b4 24 20 02 00 	mov    0x220(%r12),%rsi
ffffffff800017b6:	00 
ffffffff800017b7:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff800017bc:	ff d0                	call   *%rax
        _free(ctx, sizeof(struct flanterm_fb_context));
ffffffff800017be:	4c 89 e7             	mov    %r12,%rdi
ffffffff800017c1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff800017c6:	be 18 03 00 00       	mov    $0x318,%esi
    return NULL;
ffffffff800017cb:	45 31 e4             	xor    %r12d,%r12d
        _free(ctx, sizeof(struct flanterm_fb_context));
ffffffff800017ce:	ff d0                	call   *%rax
    return NULL;
ffffffff800017d0:	e9 b6 fe ff ff       	jmp    ffffffff8000168b <flanterm_fb_init+0x89b>
        if (bump_allocated_instance == true) {
ffffffff800017d5:	80 3d 44 b3 00 00 00 	cmpb   $0x0,0xb344(%rip)        # ffffffff8000cb20 <bump_allocated_instance>
ffffffff800017dc:	0f 85 a6 fe ff ff    	jne    ffffffff80001688 <flanterm_fb_init+0x898>
        if (width > FLANTERM_FB_WIDTH_LIMIT || height > FLANTERM_FB_HEIGHT_LIMIT) {
ffffffff800017e2:	49 81 fe 80 07 00 00 	cmp    $0x780,%r14
ffffffff800017e9:	0f 87 44 02 00 00    	ja     ffffffff80001a33 <flanterm_fb_init+0xc43>
ffffffff800017ef:	49 81 fd b0 04 00 00 	cmp    $0x4b0,%r13
ffffffff800017f6:	0f 87 37 02 00 00    	ja     ffffffff80001a33 <flanterm_fb_init+0xc43>
    ctx = _malloc(sizeof(struct flanterm_fb_context));
ffffffff800017fc:	bf 18 03 00 00       	mov    $0x318,%edi
ffffffff80001801:	e8 fa e7 ff ff       	call   ffffffff80000000 <bump_alloc>
ffffffff80001806:	49 89 c4             	mov    %rax,%r12
    if (ctx == NULL) {
ffffffff80001809:	48 85 c0             	test   %rax,%rax
ffffffff8000180c:	0f 84 6b fe ff ff    	je     ffffffff8000167d <flanterm_fb_init+0x88d>
ffffffff80001812:	48 8d 05 e7 e7 ff ff 	lea    -0x1819(%rip),%rax        # ffffffff80000000 <bump_alloc>
ffffffff80001819:	48 c7 84 24 b0 00 00 	movq   $0x0,0xb0(%rsp)
ffffffff80001820:	00 00 00 00 00 
ffffffff80001825:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffffff8000182a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8000182f:	e9 98 f6 ff ff       	jmp    ffffffff80000ecc <flanterm_fb_init+0xdc>
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff80001834:	bf 00 10 00 00       	mov    $0x1000,%edi
        ctx->font_width = font_width = 8;
ffffffff80001839:	49 c7 84 24 b0 01 00 	movq   $0x8,0x1b0(%r12)
ffffffff80001840:	00 08 00 00 00 
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff80001845:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
        ctx->font_height = font_height = 16;
ffffffff8000184a:	49 c7 84 24 b8 01 00 	movq   $0x10,0x1b8(%r12)
ffffffff80001851:	00 10 00 00 00 
        ctx->font_bits_size = FONT_BYTES;
ffffffff80001856:	49 c7 84 24 20 02 00 	movq   $0x1000,0x220(%r12)
ffffffff8000185d:	00 00 10 00 00 
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff80001862:	ff d0                	call   *%rax
ffffffff80001864:	49 89 84 24 28 02 00 	mov    %rax,0x228(%r12)
ffffffff8000186b:	00 
ffffffff8000186c:	48 89 c7             	mov    %rax,%rdi
        if (ctx->font_bits == NULL) {
ffffffff8000186f:	48 85 c0             	test   %rax,%rax
ffffffff80001872:	0f 84 85 fe ff ff    	je     ffffffff800016fd <flanterm_fb_init+0x90d>
        memcpy(ctx->font_bits, builtin_font, ctx->font_bits_size);
ffffffff80001878:	49 8b 94 24 20 02 00 	mov    0x220(%r12),%rdx
ffffffff8000187f:	00 
ffffffff80001880:	48 8d 35 79 47 00 00 	lea    0x4779(%rip),%rsi        # ffffffff80006000 <builtin_font>
        ctx->font_height = font_height = 16;
ffffffff80001887:	bb 10 00 00 00       	mov    $0x10,%ebx
        memcpy(ctx->font_bits, builtin_font, ctx->font_bits_size);
ffffffff8000188c:	e8 4f 2d 00 00       	call   ffffffff800045e0 <memcpy>
        font_spacing = 1;
ffffffff80001891:	48 c7 84 24 00 01 00 	movq   $0x1,0x100(%rsp)
ffffffff80001898:	00 01 00 00 00 
ffffffff8000189d:	e9 08 f9 ff ff       	jmp    ffffffff800011aa <flanterm_fb_init+0x3ba>
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800018a2:	be 55 00 00 00       	mov    $0x55,%esi
ffffffff800018a7:	89 e9                	mov    %ebp,%ecx
ffffffff800018a9:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
ffffffff800018af:	41 89 f2             	mov    %esi,%r10d
ffffffff800018b2:	89 f7                	mov    %esi,%edi
ffffffff800018b4:	45 89 c1             	mov    %r8d,%r9d
ffffffff800018b7:	41 d3 e2             	shl    %cl,%r10d
ffffffff800018ba:	89 c1                	mov    %eax,%ecx
ffffffff800018bc:	d3 e7                	shl    %cl,%edi
ffffffff800018be:	45 89 d3             	mov    %r10d,%r11d
ffffffff800018c1:	89 d1                	mov    %edx,%ecx
ffffffff800018c3:	41 09 fb             	or     %edi,%r11d
ffffffff800018c6:	d3 e6                	shl    %cl,%esi
ffffffff800018c8:	44 89 d9             	mov    %r11d,%ecx
ffffffff800018cb:	09 f1                	or     %esi,%ecx
ffffffff800018cd:	41 89 8c 24 60 02 00 	mov    %ecx,0x260(%r12)
ffffffff800018d4:	00 
ffffffff800018d5:	89 e9                	mov    %ebp,%ecx
ffffffff800018d7:	41 d3 e1             	shl    %cl,%r9d
ffffffff800018da:	44 09 cf             	or     %r9d,%edi
ffffffff800018dd:	89 f9                	mov    %edi,%ecx
ffffffff800018df:	41 89 ff             	mov    %edi,%r15d
ffffffff800018e2:	44 89 c7             	mov    %r8d,%edi
ffffffff800018e5:	09 f1                	or     %esi,%ecx
ffffffff800018e7:	41 89 8c 24 64 02 00 	mov    %ecx,0x264(%r12)
ffffffff800018ee:	00 
ffffffff800018ef:	89 c1                	mov    %eax,%ecx
ffffffff800018f1:	d3 e7                	shl    %cl,%edi
ffffffff800018f3:	41 09 fa             	or     %edi,%r10d
ffffffff800018f6:	89 f9                	mov    %edi,%ecx
ffffffff800018f8:	44 89 d7             	mov    %r10d,%edi
ffffffff800018fb:	09 f7                	or     %esi,%edi
ffffffff800018fd:	41 89 bc 24 68 02 00 	mov    %edi,0x268(%r12)
ffffffff80001904:	00 
ffffffff80001905:	89 cf                	mov    %ecx,%edi
ffffffff80001907:	89 d1                	mov    %edx,%ecx
ffffffff80001909:	44 09 cf             	or     %r9d,%edi
ffffffff8000190c:	41 d3 e0             	shl    %cl,%r8d
ffffffff8000190f:	09 fe                	or     %edi,%esi
ffffffff80001911:	44 89 c1             	mov    %r8d,%ecx
ffffffff80001914:	41 89 b4 24 6c 02 00 	mov    %esi,0x26c(%r12)
ffffffff8000191b:	00 
ffffffff8000191c:	44 89 de             	mov    %r11d,%esi
ffffffff8000191f:	09 f9                	or     %edi,%ecx
ffffffff80001921:	44 09 c6             	or     %r8d,%esi
ffffffff80001924:	41 89 8c 24 7c 02 00 	mov    %ecx,0x27c(%r12)
ffffffff8000192b:	00 
ffffffff8000192c:	41 89 b4 24 70 02 00 	mov    %esi,0x270(%r12)
ffffffff80001933:	00 
ffffffff80001934:	44 89 fe             	mov    %r15d,%esi
ffffffff80001937:	44 09 c6             	or     %r8d,%esi
ffffffff8000193a:	41 89 b4 24 74 02 00 	mov    %esi,0x274(%r12)
ffffffff80001941:	00 
ffffffff80001942:	44 89 d6             	mov    %r10d,%esi
ffffffff80001945:	44 09 c6             	or     %r8d,%esi
ffffffff80001948:	41 89 b4 24 78 02 00 	mov    %esi,0x278(%r12)
ffffffff8000194f:	00 
ffffffff80001950:	e9 95 f6 ff ff       	jmp    ffffffff80000fea <flanterm_fb_init+0x1fa>
ffffffff80001955:	be aa 00 00 00       	mov    $0xaa,%esi
ffffffff8000195a:	89 e9                	mov    %ebp,%ecx
ffffffff8000195c:	bf 55 00 00 00       	mov    $0x55,%edi
        ctx->ansi_colours[0] = convert_colour(_ctx, 0x00000000); // black
ffffffff80001961:	41 c7 84 24 40 02 00 	movl   $0x0,0x240(%r12)
ffffffff80001968:	00 00 00 00 00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff8000196d:	41 89 f0             	mov    %esi,%r8d
ffffffff80001970:	41 89 f1             	mov    %esi,%r9d
ffffffff80001973:	41 d3 e0             	shl    %cl,%r8d
ffffffff80001976:	89 c1                	mov    %eax,%ecx
ffffffff80001978:	d3 e7                	shl    %cl,%edi
ffffffff8000197a:	41 d3 e1             	shl    %cl,%r9d
        ctx->ansi_colours[1] = convert_colour(_ctx, 0x00aa0000); // red
ffffffff8000197d:	45 89 84 24 44 02 00 	mov    %r8d,0x244(%r12)
ffffffff80001984:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001985:	89 f9                	mov    %edi,%ecx
        ctx->ansi_colours[2] = convert_colour(_ctx, 0x0000aa00); // green
ffffffff80001987:	45 89 8c 24 48 02 00 	mov    %r9d,0x248(%r12)
ffffffff8000198e:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff8000198f:	44 09 c1             	or     %r8d,%ecx
ffffffff80001992:	41 89 8c 24 4c 02 00 	mov    %ecx,0x24c(%r12)
ffffffff80001999:	00 
ffffffff8000199a:	89 d1                	mov    %edx,%ecx
ffffffff8000199c:	d3 e6                	shl    %cl,%esi
ffffffff8000199e:	89 f1                	mov    %esi,%ecx
        ctx->ansi_colours[4] = convert_colour(_ctx, 0x000000aa); // blue
ffffffff800019a0:	41 89 b4 24 50 02 00 	mov    %esi,0x250(%r12)
ffffffff800019a7:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800019a8:	44 09 ce             	or     %r9d,%esi
        ctx->ansi_colours[6] = convert_colour(_ctx, 0x0000aaaa); // cyan
ffffffff800019ab:	41 89 b4 24 58 02 00 	mov    %esi,0x258(%r12)
ffffffff800019b2:	00 
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800019b3:	44 09 c1             	or     %r8d,%ecx
ffffffff800019b6:	44 09 c6             	or     %r8d,%esi
ffffffff800019b9:	41 89 8c 24 54 02 00 	mov    %ecx,0x254(%r12)
ffffffff800019c0:	00 
ffffffff800019c1:	41 89 b4 24 5c 02 00 	mov    %esi,0x25c(%r12)
ffffffff800019c8:	00 
ffffffff800019c9:	e9 c3 f5 ff ff       	jmp    ffffffff80000f91 <flanterm_fb_init+0x1a1>
ffffffff800019ce:	bf 55 00 00 00       	mov    $0x55,%edi
ffffffff800019d3:	89 c1                	mov    %eax,%ecx
ffffffff800019d5:	41 89 f8             	mov    %edi,%r8d
ffffffff800019d8:	89 fe                	mov    %edi,%esi
ffffffff800019da:	41 d3 e0             	shl    %cl,%r8d
ffffffff800019dd:	89 d1                	mov    %edx,%ecx
ffffffff800019df:	d3 e6                	shl    %cl,%esi
ffffffff800019e1:	89 e9                	mov    %ebp,%ecx
ffffffff800019e3:	44 09 c6             	or     %r8d,%esi
ffffffff800019e6:	d3 e7                	shl    %cl,%edi
ffffffff800019e8:	09 fe                	or     %edi,%esi
ffffffff800019ea:	e9 c6 f6 ff ff       	jmp    ffffffff800010b5 <flanterm_fb_init+0x2c5>
ffffffff800019ef:	be aa 00 00 00       	mov    $0xaa,%esi
ffffffff800019f4:	89 c1                	mov    %eax,%ecx
ffffffff800019f6:	41 89 f0             	mov    %esi,%r8d
ffffffff800019f9:	89 f7                	mov    %esi,%edi
ffffffff800019fb:	41 d3 e0             	shl    %cl,%r8d
ffffffff800019fe:	89 d1                	mov    %edx,%ecx
ffffffff80001a00:	d3 e7                	shl    %cl,%edi
ffffffff80001a02:	89 e9                	mov    %ebp,%ecx
ffffffff80001a04:	44 09 c7             	or     %r8d,%edi
ffffffff80001a07:	d3 e6                	shl    %cl,%esi
ffffffff80001a09:	09 f7                	or     %esi,%edi
ffffffff80001a0b:	41 89 f9             	mov    %edi,%r9d
ffffffff80001a0e:	e9 5c f6 ff ff       	jmp    ffffffff8000106f <flanterm_fb_init+0x27f>
ffffffff80001a13:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80001a18:	89 c1                	mov    %eax,%ecx
ffffffff80001a1a:	89 f7                	mov    %esi,%edi
ffffffff80001a1c:	d3 e7                	shl    %cl,%edi
ffffffff80001a1e:	89 d1                	mov    %edx,%ecx
ffffffff80001a20:	89 f8                	mov    %edi,%eax
ffffffff80001a22:	89 f7                	mov    %esi,%edi
ffffffff80001a24:	d3 e7                	shl    %cl,%edi
ffffffff80001a26:	89 e9                	mov    %ebp,%ecx
ffffffff80001a28:	09 f8                	or     %edi,%eax
ffffffff80001a2a:	d3 e6                	shl    %cl,%esi
ffffffff80001a2c:	09 f0                	or     %esi,%eax
ffffffff80001a2e:	e9 c3 f6 ff ff       	jmp    ffffffff800010f6 <flanterm_fb_init+0x306>
            size_t width_limit = width > FLANTERM_FB_WIDTH_LIMIT ? FLANTERM_FB_WIDTH_LIMIT : width;
ffffffff80001a33:	ba 80 07 00 00       	mov    $0x780,%edx
            size_t height_limit = height > FLANTERM_FB_HEIGHT_LIMIT ? FLANTERM_FB_HEIGHT_LIMIT : height;
ffffffff80001a38:	b9 b0 04 00 00       	mov    $0x4b0,%ecx
            framebuffer = (uint32_t *)((uintptr_t)framebuffer + ((((height / 2) - (height_limit / 2)) * pitch) + (((width / 2) - (width_limit / 2)) * 4)));
ffffffff80001a3d:	4c 89 e8             	mov    %r13,%rax
            size_t width_limit = width > FLANTERM_FB_WIDTH_LIMIT ? FLANTERM_FB_WIDTH_LIMIT : width;
ffffffff80001a40:	49 39 d6             	cmp    %rdx,%r14
ffffffff80001a43:	49 0f 46 d6          	cmovbe %r14,%rdx
            size_t height_limit = height > FLANTERM_FB_HEIGHT_LIMIT ? FLANTERM_FB_HEIGHT_LIMIT : height;
ffffffff80001a47:	49 39 cd             	cmp    %rcx,%r13
ffffffff80001a4a:	49 0f 46 cd          	cmovbe %r13,%rcx
            framebuffer = (uint32_t *)((uintptr_t)framebuffer + ((((height / 2) - (height_limit / 2)) * pitch) + (((width / 2) - (width_limit / 2)) * 4)));
ffffffff80001a4e:	48 d1 e8             	shr    %rax
ffffffff80001a51:	48 89 d7             	mov    %rdx,%rdi
ffffffff80001a54:	48 89 ce             	mov    %rcx,%rsi
ffffffff80001a57:	48 d1 ef             	shr    %rdi
            height = height_limit;
ffffffff80001a5a:	49 89 cd             	mov    %rcx,%r13
            framebuffer = (uint32_t *)((uintptr_t)framebuffer + ((((height / 2) - (height_limit / 2)) * pitch) + (((width / 2) - (width_limit / 2)) * 4)));
ffffffff80001a5d:	48 d1 ee             	shr    %rsi
ffffffff80001a60:	48 29 f0             	sub    %rsi,%rax
ffffffff80001a63:	48 0f af 44 24 28    	imul   0x28(%rsp),%rax
ffffffff80001a69:	4c 89 f6             	mov    %r14,%rsi
ffffffff80001a6c:	48 03 44 24 20       	add    0x20(%rsp),%rax
ffffffff80001a71:	48 d1 ee             	shr    %rsi
            width = width_limit;
ffffffff80001a74:	49 89 d6             	mov    %rdx,%r14
            framebuffer = (uint32_t *)((uintptr_t)framebuffer + ((((height / 2) - (height_limit / 2)) * pitch) + (((width / 2) - (width_limit / 2)) * 4)));
ffffffff80001a77:	48 29 fe             	sub    %rdi,%rsi
ffffffff80001a7a:	48 8d 04 b0          	lea    (%rax,%rsi,4),%rax
ffffffff80001a7e:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
            height = height_limit;
ffffffff80001a83:	e9 74 fd ff ff       	jmp    ffffffff800017fc <flanterm_fb_init+0xa0c>
ffffffff80001a88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001a8f:	00 

ffffffff80001a90 <flanterm_context_reinit>:
};

#define CHARSET_DEFAULT 0
#define CHARSET_DEC_SPECIAL 1

void flanterm_context_reinit(struct flanterm_context *ctx) {
ffffffff80001a90:	f3 0f 1e fa          	endbr64 
    ctx->rrr = false;
    ctx->discard_next = false;
    ctx->bold = false;
    ctx->bg_bold = false;
    ctx->reverse_video = false;
    ctx->dec_private = false;
ffffffff80001a94:	31 c0                	xor    %eax,%eax
    ctx->insert_mode = false;
    ctx->unicode_remaining = 0;
    ctx->g_select = 0;
ffffffff80001a96:	31 d2                	xor    %edx,%edx
    ctx->tab_size = 8;
ffffffff80001a98:	48 c7 07 08 00 00 00 	movq   $0x8,(%rdi)
    ctx->dec_private = false;
ffffffff80001a9f:	66 89 47 14          	mov    %ax,0x14(%rdi)
    ctx->saved_cursor_x = 0;
    ctx->saved_cursor_y = 0;
    ctx->current_primary = (size_t)-1;
    ctx->current_bg = (size_t)-1;
    ctx->scroll_top_margin = 0;
    ctx->scroll_bottom_margin = ctx->rows;
ffffffff80001aa3:	48 8b 87 e0 00 00 00 	mov    0xe0(%rdi),%rax
    ctx->autoflush = true;
ffffffff80001aaa:	48 c7 47 08 01 01 01 	movq   $0x10101,0x8(%rdi)
ffffffff80001ab1:	00 
    ctx->discard_next = false;
ffffffff80001ab2:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%rdi)
    ctx->unicode_remaining = 0;
ffffffff80001ab9:	48 c7 47 20 00 00 00 	movq   $0x0,0x20(%rdi)
ffffffff80001ac0:	00 
    ctx->g_select = 0;
ffffffff80001ac1:	66 89 57 28          	mov    %dx,0x28(%rdi)
    ctx->charsets[1] = CHARSET_DEC_SPECIAL;
ffffffff80001ac5:	c6 47 2a 01          	movb   $0x1,0x2a(%rdi)
    ctx->current_charset = 0;
ffffffff80001ac9:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
ffffffff80001ad0:	00 
    ctx->escape_offset = 0;
ffffffff80001ad1:	48 c7 47 38 00 00 00 	movq   $0x0,0x38(%rdi)
ffffffff80001ad8:	00 
    ctx->esc_values_i = 0;
ffffffff80001ad9:	48 c7 47 40 00 00 00 	movq   $0x0,0x40(%rdi)
ffffffff80001ae0:	00 
    ctx->saved_cursor_x = 0;
ffffffff80001ae1:	48 c7 47 48 00 00 00 	movq   $0x0,0x48(%rdi)
ffffffff80001ae8:	00 
    ctx->saved_cursor_y = 0;
ffffffff80001ae9:	48 c7 47 50 00 00 00 	movq   $0x0,0x50(%rdi)
ffffffff80001af0:	00 
    ctx->current_primary = (size_t)-1;
ffffffff80001af1:	48 c7 47 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%rdi)
ffffffff80001af8:	ff 
    ctx->current_bg = (size_t)-1;
ffffffff80001af9:	48 c7 47 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rdi)
ffffffff80001b00:	ff 
    ctx->scroll_top_margin = 0;
ffffffff80001b01:	48 c7 47 68 00 00 00 	movq   $0x0,0x68(%rdi)
ffffffff80001b08:	00 
    ctx->scroll_bottom_margin = ctx->rows;
ffffffff80001b09:	48 89 47 70          	mov    %rax,0x70(%rdi)
    ctx->oob_output = FLANTERM_OOB_OUTPUT_ONLCR;
ffffffff80001b0d:	48 c7 87 b8 00 00 00 	movq   $0x10,0xb8(%rdi)
ffffffff80001b14:	10 00 00 00 
}
ffffffff80001b18:	c3                   	ret    
ffffffff80001b19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80001b20 <mk_wcwidth>:
  }

  return 0;
}

int mk_wcwidth(uint32_t ucs) {
ffffffff80001b20:	f3 0f 1e fa          	endbr64 
ffffffff80001b24:	89 f8                	mov    %edi,%eax
    { 0xE0100, 0xE01EF }
  };

  /* test for 8-bit control characters */
  if (ucs == 0)
    return 0;
ffffffff80001b26:	45 31 c0             	xor    %r8d,%r8d
  if (ucs == 0)
ffffffff80001b29:	85 ff                	test   %edi,%edi
ffffffff80001b2b:	74 40                	je     ffffffff80001b6d <mk_wcwidth+0x4d>
  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))
ffffffff80001b2d:	8d 57 81             	lea    -0x7f(%rdi),%edx
ffffffff80001b30:	83 fa 20             	cmp    $0x20,%edx
ffffffff80001b33:	76 43                	jbe    ffffffff80001b78 <mk_wcwidth+0x58>
ffffffff80001b35:	83 ff 1f             	cmp    $0x1f,%edi
ffffffff80001b38:	76 3e                	jbe    ffffffff80001b78 <mk_wcwidth+0x58>
  if (ucs < table[0].first || ucs > table[max].last)
ffffffff80001b3a:	8d 97 00 fd ff ff    	lea    -0x300(%rdi),%edx
ffffffff80001b40:	81 fa ef fe 0d 00    	cmp    $0xdfeef,%edx
ffffffff80001b46:	76 40                	jbe    ffffffff80001b88 <mk_wcwidth+0x68>
	       sizeof(combining) / sizeof(struct interval) - 1))
    return 0;

  /* if we arrive here, ucs is not a combining or C0/C1 control character */

  return 1 +
ffffffff80001b48:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    (ucs >= 0x1100 &&
ffffffff80001b4e:	3d ff 10 00 00       	cmp    $0x10ff,%eax
ffffffff80001b53:	76 18                	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
     (ucs <= 0x115f ||                    /* Hangul Jamo init. consonants */
      ucs == 0x2329 || ucs == 0x232a ||
ffffffff80001b55:	8d 90 d7 dc ff ff    	lea    -0x2329(%rax),%edx
ffffffff80001b5b:	83 fa 01             	cmp    $0x1,%edx
ffffffff80001b5e:	76 07                	jbe    ffffffff80001b67 <mk_wcwidth+0x47>
ffffffff80001b60:	3d 5f 11 00 00       	cmp    $0x115f,%eax
ffffffff80001b65:	77 61                	ja     ffffffff80001bc8 <mk_wcwidth+0xa8>
ffffffff80001b67:	41 b8 02 00 00 00    	mov    $0x2,%r8d
      (ucs >= 0xfe30 && ucs <= 0xfe6f) || /* CJK Compatibility Forms */
      (ucs >= 0xff00 && ucs <= 0xff60) || /* Fullwidth Forms */
      (ucs >= 0xffe0 && ucs <= 0xffe6) ||
      (ucs >= 0x20000 && ucs <= 0x2fffd) ||
      (ucs >= 0x30000 && ucs <= 0x3fffd)));
}
ffffffff80001b6d:	44 89 c0             	mov    %r8d,%eax
ffffffff80001b70:	c3                   	ret    
ffffffff80001b71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    return 1;
ffffffff80001b78:	41 b8 01 00 00 00    	mov    $0x1,%r8d
}
ffffffff80001b7e:	44 89 c0             	mov    %r8d,%eax
ffffffff80001b81:	c3                   	ret    
ffffffff80001b82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  int min = 0;
ffffffff80001b88:	31 c9                	xor    %ecx,%ecx
ffffffff80001b8a:	be 8d 00 00 00       	mov    $0x8d,%esi
ffffffff80001b8f:	4c 8d 05 0a 65 00 00 	lea    0x650a(%rip),%r8        # ffffffff800080a0 <combining.0>
ffffffff80001b96:	eb 0f                	jmp    ffffffff80001ba7 <mk_wcwidth+0x87>
ffffffff80001b98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001b9f:	00 
      min = mid + 1;
ffffffff80001ba0:	8d 4a 01             	lea    0x1(%rdx),%ecx
  while (max >= min) {
ffffffff80001ba3:	39 f1                	cmp    %esi,%ecx
ffffffff80001ba5:	7f a1                	jg     ffffffff80001b48 <mk_wcwidth+0x28>
    mid = (min + max) / 2;
ffffffff80001ba7:	8d 14 0e             	lea    (%rsi,%rcx,1),%edx
ffffffff80001baa:	d1 fa                	sar    %edx
    if (ucs > table[mid].last)
ffffffff80001bac:	48 63 fa             	movslq %edx,%rdi
ffffffff80001baf:	49 8d 3c f8          	lea    (%r8,%rdi,8),%rdi
ffffffff80001bb3:	3b 47 04             	cmp    0x4(%rdi),%eax
ffffffff80001bb6:	77 e8                	ja     ffffffff80001ba0 <mk_wcwidth+0x80>
    else if (ucs < table[mid].first)
ffffffff80001bb8:	3b 07                	cmp    (%rdi),%eax
ffffffff80001bba:	0f 83 b0 00 00 00    	jae    ffffffff80001c70 <mk_wcwidth+0x150>
      max = mid - 1;
ffffffff80001bc0:	8d 72 ff             	lea    -0x1(%rdx),%esi
ffffffff80001bc3:	eb de                	jmp    ffffffff80001ba3 <mk_wcwidth+0x83>
ffffffff80001bc5:	0f 1f 00             	nopl   (%rax)
      (ucs >= 0x2e80 && ucs <= 0xa4cf &&
ffffffff80001bc8:	8d 90 80 d1 ff ff    	lea    -0x2e80(%rax),%edx
      ucs == 0x2329 || ucs == 0x232a ||
ffffffff80001bce:	81 fa 4f 76 00 00    	cmp    $0x764f,%edx
ffffffff80001bd4:	77 0d                	ja     ffffffff80001be3 <mk_wcwidth+0xc3>
ffffffff80001bd6:	41 b8 02 00 00 00    	mov    $0x2,%r8d
ffffffff80001bdc:	3d 3f 30 00 00       	cmp    $0x303f,%eax
ffffffff80001be1:	75 8a                	jne    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xac00 && ucs <= 0xd7a3) || /* Hangul Syllables */
ffffffff80001be3:	8d 90 00 54 ff ff    	lea    -0xac00(%rax),%edx
ffffffff80001be9:	41 b8 02 00 00 00    	mov    $0x2,%r8d
       ucs != 0x303f) ||                  /* CJK ... Yi */
ffffffff80001bef:	81 fa a3 2b 00 00    	cmp    $0x2ba3,%edx
ffffffff80001bf5:	0f 86 72 ff ff ff    	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xf900 && ucs <= 0xfaff) || /* CJK Compatibility Ideographs */
ffffffff80001bfb:	8d 90 00 07 ff ff    	lea    -0xf900(%rax),%edx
      (ucs >= 0xac00 && ucs <= 0xd7a3) || /* Hangul Syllables */
ffffffff80001c01:	81 fa ff 01 00 00    	cmp    $0x1ff,%edx
ffffffff80001c07:	0f 86 60 ff ff ff    	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xfe10 && ucs <= 0xfe19) || /* Vertical forms */
ffffffff80001c0d:	8d 90 f0 01 ff ff    	lea    -0xfe10(%rax),%edx
      (ucs >= 0xf900 && ucs <= 0xfaff) || /* CJK Compatibility Ideographs */
ffffffff80001c13:	83 fa 09             	cmp    $0x9,%edx
ffffffff80001c16:	0f 86 51 ff ff ff    	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xfe30 && ucs <= 0xfe6f) || /* CJK Compatibility Forms */
ffffffff80001c1c:	8d 90 d0 01 ff ff    	lea    -0xfe30(%rax),%edx
      (ucs >= 0xfe10 && ucs <= 0xfe19) || /* Vertical forms */
ffffffff80001c22:	83 fa 3f             	cmp    $0x3f,%edx
ffffffff80001c25:	0f 86 42 ff ff ff    	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xff00 && ucs <= 0xff60) || /* Fullwidth Forms */
ffffffff80001c2b:	8d 90 00 01 ff ff    	lea    -0xff00(%rax),%edx
      (ucs >= 0xfe30 && ucs <= 0xfe6f) || /* CJK Compatibility Forms */
ffffffff80001c31:	83 fa 60             	cmp    $0x60,%edx
ffffffff80001c34:	0f 86 33 ff ff ff    	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xffe0 && ucs <= 0xffe6) ||
ffffffff80001c3a:	8d 90 20 00 ff ff    	lea    -0xffe0(%rax),%edx
      (ucs >= 0xff00 && ucs <= 0xff60) || /* Fullwidth Forms */
ffffffff80001c40:	83 fa 06             	cmp    $0x6,%edx
ffffffff80001c43:	0f 86 24 ff ff ff    	jbe    ffffffff80001b6d <mk_wcwidth+0x4d>
      (ucs >= 0xffe0 && ucs <= 0xffe6) ||
ffffffff80001c49:	25 ff ff fe ff       	and    $0xfffeffff,%eax
ffffffff80001c4e:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001c51:	2d 00 00 02 00       	sub    $0x20000,%eax
ffffffff80001c56:	3d fd ff 00 00       	cmp    $0xfffd,%eax
ffffffff80001c5b:	41 0f 96 c0          	setbe  %r8b
  return 1 +
ffffffff80001c5f:	41 83 c0 01          	add    $0x1,%r8d
ffffffff80001c63:	e9 05 ff ff ff       	jmp    ffffffff80001b6d <mk_wcwidth+0x4d>
ffffffff80001c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001c6f:	00 
    return 0;
ffffffff80001c70:	45 31 c0             	xor    %r8d,%r8d
ffffffff80001c73:	e9 f5 fe ff ff       	jmp    ffffffff80001b6d <mk_wcwidth+0x4d>
ffffffff80001c78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001c7f:	00 

ffffffff80001c80 <flanterm_write>:
void flanterm_write(struct flanterm_context *ctx, const char *buf, size_t count) {
ffffffff80001c80:	f3 0f 1e fa          	endbr64 
ffffffff80001c84:	41 57                	push   %r15
ffffffff80001c86:	41 56                	push   %r14
ffffffff80001c88:	49 89 f6             	mov    %rsi,%r14
ffffffff80001c8b:	41 55                	push   %r13
ffffffff80001c8d:	49 89 fd             	mov    %rdi,%r13
ffffffff80001c90:	41 54                	push   %r12
ffffffff80001c92:	4c 8d 25 43 5f 00 00 	lea    0x5f43(%rip),%r12        # ffffffff80007bdc <builtin_font+0x1bdc>
ffffffff80001c99:	55                   	push   %rbp
ffffffff80001c9a:	48 8d 2d 5f 53 00 00 	lea    0x535f(%rip),%rbp        # ffffffff80007000 <builtin_font+0x1000>
ffffffff80001ca1:	53                   	push   %rbx
ffffffff80001ca2:	48 8d 1c 16          	lea    (%rsi,%rdx,1),%rbx
ffffffff80001ca6:	48 83 ec 38          	sub    $0x38,%rsp
    for (size_t i = 0; i < count; i++) {
ffffffff80001caa:	48 85 d2             	test   %rdx,%rdx
ffffffff80001cad:	0f 84 c4 00 00 00    	je     ffffffff80001d77 <flanterm_write+0xf7>
ffffffff80001cb3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

    return -1;
}

static void flanterm_putchar(struct flanterm_context *ctx, uint8_t c) {
    if (ctx->discard_next || (c == 0x18 || c == 0x1a)) {
ffffffff80001cb8:	41 80 7d 10 00       	cmpb   $0x0,0x10(%r13)
        flanterm_putchar(ctx, buf[i]);
ffffffff80001cbd:	45 0f b6 3e          	movzbl (%r14),%r15d
    if (ctx->discard_next || (c == 0x18 || c == 0x1a)) {
ffffffff80001cc1:	0f 85 89 00 00 00    	jne    ffffffff80001d50 <flanterm_write+0xd0>
ffffffff80001cc7:	44 89 f8             	mov    %r15d,%eax
ffffffff80001cca:	83 e0 fd             	and    $0xfffffffd,%eax
ffffffff80001ccd:	3c 18                	cmp    $0x18,%al
ffffffff80001ccf:	74 7f                	je     ffffffff80001d50 <flanterm_write+0xd0>
        ctx->osc_escape = false;
        ctx->g_select = 0;
        return;
    }

    if (ctx->unicode_remaining != 0) {
ffffffff80001cd1:	49 8b 45 20          	mov    0x20(%r13),%rax
ffffffff80001cd5:	48 85 c0             	test   %rax,%rax
ffffffff80001cd8:	74 17                	je     ffffffff80001cf1 <flanterm_write+0x71>
        if ((c & 0xc0) != 0x80) {
ffffffff80001cda:	44 89 fa             	mov    %r15d,%edx
ffffffff80001cdd:	83 e2 c0             	and    $0xffffffc0,%edx
ffffffff80001ce0:	80 fa 80             	cmp    $0x80,%dl
ffffffff80001ce3:	0f 84 7f 01 00 00    	je     ffffffff80001e68 <flanterm_write+0x1e8>
            ctx->unicode_remaining = 0;
ffffffff80001ce9:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
ffffffff80001cf0:	00 
        }
        return;
    }

unicode_error:
    if (c >= 0xc0 && c <= 0xf7) {
ffffffff80001cf1:	41 8d 47 40          	lea    0x40(%r15),%eax
ffffffff80001cf5:	3c 37                	cmp    $0x37,%al
ffffffff80001cf7:	0f 86 23 01 00 00    	jbe    ffffffff80001e20 <flanterm_write+0x1a0>
            ctx->code_point = (uint64_t)(c & 0x07) << (6 * 3);
        }
        return;
    }

    if (ctx->escape == true) {
ffffffff80001cfd:	41 80 7d 0c 00       	cmpb   $0x0,0xc(%r13)
ffffffff80001d02:	0f 85 98 04 00 00    	jne    ffffffff800021a0 <flanterm_write+0x520>
        escape_parse(ctx, c);
        return;
    }

    if (ctx->g_select) {
ffffffff80001d08:	41 0f b6 45 28       	movzbl 0x28(%r13),%eax
ffffffff80001d0d:	84 c0                	test   %al,%al
ffffffff80001d0f:	0f 85 1b 02 00 00    	jne    ffffffff80001f30 <flanterm_write+0x2b0>
        ctx->g_select = 0;
        return;
    }

    size_t x, y;
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80001d15:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
ffffffff80001d1a:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff80001d1f:	4c 89 ef             	mov    %r13,%rdi
ffffffff80001d22:	41 ff 95 08 01 00 00 	call   *0x108(%r13)

    switch (c) {
ffffffff80001d29:	41 80 ff 1b          	cmp    $0x1b,%r15b
ffffffff80001d2d:	7f 71                	jg     ffffffff80001da0 <flanterm_write+0x120>
ffffffff80001d2f:	45 84 ff             	test   %r15b,%r15b
ffffffff80001d32:	78 72                	js     ffffffff80001da6 <flanterm_write+0x126>
ffffffff80001d34:	41 80 ff 1b          	cmp    $0x1b,%r15b
ffffffff80001d38:	77 6c                	ja     ffffffff80001da6 <flanterm_write+0x126>
ffffffff80001d3a:	41 0f b6 c7          	movzbl %r15b,%eax
ffffffff80001d3e:	48 63 44 85 00       	movslq 0x0(%rbp,%rax,4),%rax
ffffffff80001d43:	48 01 e8             	add    %rbp,%rax
ffffffff80001d46:	3e ff e0             	notrack jmp *%rax
ffffffff80001d49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        ctx->discard_next = false;
ffffffff80001d50:	41 c6 45 10 00       	movb   $0x0,0x10(%r13)
        ctx->unicode_remaining = 0;
ffffffff80001d55:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
ffffffff80001d5c:	00 
        ctx->control_sequence = false;
ffffffff80001d5d:	41 c7 45 0b 00 00 00 	movl   $0x0,0xb(%r13)
ffffffff80001d64:	00 
        ctx->g_select = 0;
ffffffff80001d65:	41 c6 45 28 00       	movb   $0x0,0x28(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff80001d6a:	49 83 c6 01          	add    $0x1,%r14
ffffffff80001d6e:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80001d71:	0f 85 41 ff ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
    if (ctx->autoflush) {
ffffffff80001d77:	41 80 7d 08 00       	cmpb   $0x0,0x8(%r13)
ffffffff80001d7c:	0f 84 66 01 00 00    	je     ffffffff80001ee8 <flanterm_write+0x268>
        ctx->double_buffer_flush(ctx);
ffffffff80001d82:	49 8b 85 90 01 00 00 	mov    0x190(%r13),%rax
}
ffffffff80001d89:	48 83 c4 38          	add    $0x38,%rsp
        ctx->double_buffer_flush(ctx);
ffffffff80001d8d:	4c 89 ef             	mov    %r13,%rdi
}
ffffffff80001d90:	5b                   	pop    %rbx
ffffffff80001d91:	5d                   	pop    %rbp
ffffffff80001d92:	41 5c                	pop    %r12
ffffffff80001d94:	41 5d                	pop    %r13
ffffffff80001d96:	41 5e                	pop    %r14
ffffffff80001d98:	41 5f                	pop    %r15
        ctx->double_buffer_flush(ctx);
ffffffff80001d9a:	ff e0                	jmp    *%rax
ffffffff80001d9c:	0f 1f 40 00          	nopl   0x0(%rax)
    switch (c) {
ffffffff80001da0:	41 80 ff 7f          	cmp    $0x7f,%r15b
ffffffff80001da4:	74 c4                	je     ffffffff80001d6a <flanterm_write+0xea>
            // Move to G0 set
            ctx->current_charset = 0;
            return;
    }

    if (ctx->insert_mode == true) {
ffffffff80001da6:	41 80 7d 15 00       	cmpb   $0x0,0x15(%r13)
ffffffff80001dab:	74 39                	je     ffffffff80001de6 <flanterm_write+0x166>
        for (size_t i = ctx->cols - 1; ; i--) {
ffffffff80001dad:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff80001db4:	0f 1f 40 00          	nopl   0x0(%rax)
            ctx->move_character(ctx, i + 1, y, i, y);
ffffffff80001db8:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
        for (size_t i = ctx->cols - 1; ; i--) {
ffffffff80001dbd:	48 83 e8 01          	sub    $0x1,%rax
            ctx->move_character(ctx, i + 1, y, i, y);
ffffffff80001dc1:	4c 89 ef             	mov    %r13,%rdi
ffffffff80001dc4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80001dc9:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff80001dcd:	48 89 c1             	mov    %rax,%rcx
ffffffff80001dd0:	49 89 d0             	mov    %rdx,%r8
ffffffff80001dd3:	41 ff 95 60 01 00 00 	call   *0x160(%r13)
            if (i == x) {
ffffffff80001dda:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80001ddf:	48 3b 44 24 20       	cmp    0x20(%rsp),%rax
ffffffff80001de4:	75 d2                	jne    ffffffff80001db8 <flanterm_write+0x138>
            }
        }
    }

    // Translate character set
    switch (ctx->charsets[ctx->current_charset]) {
ffffffff80001de6:	49 8b 55 30          	mov    0x30(%r13),%rdx
        case '`': FLANTERM_DEC_SPCL_PRN(0x04)
ffffffff80001dea:	49 8b 85 f0 00 00 00 	mov    0xf0(%r13),%rax
    switch (ctx->charsets[ctx->current_charset]) {
ffffffff80001df1:	41 80 7c 15 29 01    	cmpb   $0x1,0x29(%r13,%rdx,1)
ffffffff80001df7:	0f 84 8b 10 00 00    	je     ffffffff80002e88 <flanterm_write+0x1208>
                return;
            }
            break;
    }

    if (c >= 0x20 && c <= 0x7e) {
ffffffff80001dfd:	41 8d 57 e0          	lea    -0x20(%r15),%edx
ffffffff80001e01:	80 fa 5e             	cmp    $0x5e,%dl
ffffffff80001e04:	0f 87 3f 06 00 00    	ja     ffffffff80002449 <flanterm_write+0x7c9>
        flanterm_putchar(ctx, buf[i]);
ffffffff80001e0a:	41 0f b6 f7          	movzbl %r15b,%esi
        ctx->raw_putchar(ctx, c);
ffffffff80001e0e:	4c 89 ef             	mov    %r13,%rdi
ffffffff80001e11:	ff d0                	call   *%rax
ffffffff80001e13:	e9 52 ff ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
ffffffff80001e18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001e1f:	00 
            ctx->code_point = (uint64_t)(c & 0x1f) << 6;
ffffffff80001e20:	41 0f b6 d7          	movzbl %r15b,%edx
        if (c >= 0xc0 && c <= 0xdf) {
ffffffff80001e24:	3c 1f                	cmp    $0x1f,%al
ffffffff80001e26:	0f 86 d4 00 00 00    	jbe    ffffffff80001f00 <flanterm_write+0x280>
        } else if (c >= 0xe0 && c <= 0xef) {
ffffffff80001e2c:	41 83 c7 20          	add    $0x20,%r15d
ffffffff80001e30:	41 80 ff 0f          	cmp    $0xf,%r15b
ffffffff80001e34:	0f 87 be 03 00 00    	ja     ffffffff800021f8 <flanterm_write+0x578>
            ctx->code_point = (uint64_t)(c & 0x0f) << (6 * 2);
ffffffff80001e3a:	48 c1 e2 0c          	shl    $0xc,%rdx
    for (size_t i = 0; i < count; i++) {
ffffffff80001e3e:	49 83 c6 01          	add    $0x1,%r14
            ctx->unicode_remaining = 2;
ffffffff80001e42:	49 c7 45 20 02 00 00 	movq   $0x2,0x20(%r13)
ffffffff80001e49:	00 
            ctx->code_point = (uint64_t)(c & 0x0f) << (6 * 2);
ffffffff80001e4a:	81 e2 ff ff 00 00    	and    $0xffff,%edx
ffffffff80001e50:	49 89 55 18          	mov    %rdx,0x18(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff80001e54:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80001e57:	0f 85 5b fe ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
ffffffff80001e5d:	e9 15 ff ff ff       	jmp    ffffffff80001d77 <flanterm_write+0xf7>
ffffffff80001e62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        ctx->unicode_remaining--;
ffffffff80001e68:	48 83 e8 01          	sub    $0x1,%rax
        ctx->code_point |= (uint64_t)(c & 0x3f) << (6 * ctx->unicode_remaining);
ffffffff80001e6c:	41 83 e7 3f          	and    $0x3f,%r15d
ffffffff80001e70:	8d 0c 40             	lea    (%rax,%rax,2),%ecx
        ctx->unicode_remaining--;
ffffffff80001e73:	49 89 45 20          	mov    %rax,0x20(%r13)
        ctx->code_point |= (uint64_t)(c & 0x3f) << (6 * ctx->unicode_remaining);
ffffffff80001e77:	01 c9                	add    %ecx,%ecx
ffffffff80001e79:	49 d3 e7             	shl    %cl,%r15
ffffffff80001e7c:	4d 0b 7d 18          	or     0x18(%r13),%r15
ffffffff80001e80:	4d 89 7d 18          	mov    %r15,0x18(%r13)
        if (ctx->unicode_remaining != 0) {
ffffffff80001e84:	48 85 c0             	test   %rax,%rax
ffffffff80001e87:	0f 85 dd fe ff ff    	jne    ffffffff80001d6a <flanterm_write+0xea>
    switch (code_point) {
ffffffff80001e8d:	49 81 ff 48 22 00 00 	cmp    $0x2248,%r15
ffffffff80001e94:	0f 87 6e 01 00 00    	ja     ffffffff80002008 <flanterm_write+0x388>
ffffffff80001e9a:	49 81 ff 18 22 00 00 	cmp    $0x2218,%r15
ffffffff80001ea1:	0f 87 40 01 00 00    	ja     ffffffff80001fe7 <flanterm_write+0x367>
ffffffff80001ea7:	49 81 ff 92 01 00 00 	cmp    $0x192,%r15
ffffffff80001eae:	0f 87 b4 00 00 00    	ja     ffffffff80001f68 <flanterm_write+0x2e8>
ffffffff80001eb4:	49 81 ff a0 00 00 00 	cmp    $0xa0,%r15
ffffffff80001ebb:	0f 86 c7 00 00 00    	jbe    ffffffff80001f88 <flanterm_write+0x308>
ffffffff80001ec1:	49 8d 87 5f ff ff ff 	lea    -0xa1(%r15),%rax
ffffffff80001ec8:	48 3d f1 00 00 00    	cmp    $0xf1,%rax
ffffffff80001ece:	0f 87 b4 00 00 00    	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff80001ed4:	48 8d 15 95 51 00 00 	lea    0x5195(%rip),%rdx        # ffffffff80007070 <builtin_font+0x1070>
ffffffff80001edb:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
ffffffff80001edf:	48 01 d0             	add    %rdx,%rax
ffffffff80001ee2:	3e ff e0             	notrack jmp *%rax
ffffffff80001ee5:	0f 1f 00             	nopl   (%rax)
}
ffffffff80001ee8:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80001eec:	5b                   	pop    %rbx
ffffffff80001eed:	5d                   	pop    %rbp
ffffffff80001eee:	41 5c                	pop    %r12
ffffffff80001ef0:	41 5d                	pop    %r13
ffffffff80001ef2:	41 5e                	pop    %r14
ffffffff80001ef4:	41 5f                	pop    %r15
ffffffff80001ef6:	c3                   	ret    
ffffffff80001ef7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80001efe:	00 00 
            ctx->code_point = (uint64_t)(c & 0x1f) << 6;
ffffffff80001f00:	48 c1 e2 06          	shl    $0x6,%rdx
    for (size_t i = 0; i < count; i++) {
ffffffff80001f04:	49 83 c6 01          	add    $0x1,%r14
            ctx->unicode_remaining = 1;
ffffffff80001f08:	49 c7 45 20 01 00 00 	movq   $0x1,0x20(%r13)
ffffffff80001f0f:	00 
            ctx->code_point = (uint64_t)(c & 0x1f) << 6;
ffffffff80001f10:	81 e2 c0 07 00 00    	and    $0x7c0,%edx
ffffffff80001f16:	49 89 55 18          	mov    %rdx,0x18(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff80001f1a:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80001f1d:	0f 85 95 fd ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
ffffffff80001f23:	e9 4f fe ff ff       	jmp    ffffffff80001d77 <flanterm_write+0xf7>
ffffffff80001f28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80001f2f:	00 
        ctx->g_select--;
ffffffff80001f30:	83 e8 01             	sub    $0x1,%eax
        switch (c) {
ffffffff80001f33:	41 80 ff 30          	cmp    $0x30,%r15b
ffffffff80001f37:	0f 84 43 04 00 00    	je     ffffffff80002380 <flanterm_write+0x700>
ffffffff80001f3d:	41 80 ff 42          	cmp    $0x42,%r15b
ffffffff80001f41:	75 09                	jne    ffffffff80001f4c <flanterm_write+0x2cc>
                ctx->charsets[ctx->g_select] = CHARSET_DEFAULT; break;
ffffffff80001f43:	0f b6 c0             	movzbl %al,%eax
ffffffff80001f46:	41 c6 44 05 29 00    	movb   $0x0,0x29(%r13,%rax,1)
        ctx->g_select = 0;
ffffffff80001f4c:	41 c6 45 28 00       	movb   $0x0,0x28(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff80001f51:	49 83 c6 01          	add    $0x1,%r14
ffffffff80001f55:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80001f58:	0f 85 5a fd ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
ffffffff80001f5e:	e9 14 fe ff ff       	jmp    ffffffff80001d77 <flanterm_write+0xf7>
ffffffff80001f63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    switch (code_point) {
ffffffff80001f68:	49 81 ff c6 03 00 00 	cmp    $0x3c6,%r15
ffffffff80001f6f:	0f 87 03 01 00 00    	ja     ffffffff80002078 <flanterm_write+0x3f8>
ffffffff80001f75:	49 81 ff 92 03 00 00 	cmp    $0x392,%r15
ffffffff80001f7c:	0f 87 ce 00 00 00    	ja     ffffffff80002050 <flanterm_write+0x3d0>
ffffffff80001f82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            size_t replacement_width = (size_t)mk_wcwidth(ctx->code_point);
ffffffff80001f88:	44 89 ff             	mov    %r15d,%edi
ffffffff80001f8b:	e8 90 fb ff ff       	call   ffffffff80001b20 <mk_wcwidth>
ffffffff80001f90:	48 98                	cltq   
ffffffff80001f92:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
            if (replacement_width > 0) {
ffffffff80001f97:	48 85 c0             	test   %rax,%rax
ffffffff80001f9a:	0f 84 ca fd ff ff    	je     ffffffff80001d6a <flanterm_write+0xea>
                ctx->raw_putchar(ctx, 0xfe);
ffffffff80001fa0:	be fe 00 00 00       	mov    $0xfe,%esi
ffffffff80001fa5:	4c 89 ef             	mov    %r13,%rdi
ffffffff80001fa8:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
            for (size_t i = 1; i < replacement_width; i++) {
ffffffff80001faf:	48 83 7c 24 08 01    	cmpq   $0x1,0x8(%rsp)
ffffffff80001fb5:	0f 84 af fd ff ff    	je     ffffffff80001d6a <flanterm_write+0xea>
ffffffff80001fbb:	41 bf 01 00 00 00    	mov    $0x1,%r15d
ffffffff80001fc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                ctx->raw_putchar(ctx, ' ');
ffffffff80001fc8:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80001fcd:	4c 89 ef             	mov    %r13,%rdi
            for (size_t i = 1; i < replacement_width; i++) {
ffffffff80001fd0:	49 83 c7 01          	add    $0x1,%r15
                ctx->raw_putchar(ctx, ' ');
ffffffff80001fd4:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
            for (size_t i = 1; i < replacement_width; i++) {
ffffffff80001fdb:	4c 39 7c 24 08       	cmp    %r15,0x8(%rsp)
ffffffff80001fe0:	75 e6                	jne    ffffffff80001fc8 <flanterm_write+0x348>
ffffffff80001fe2:	e9 83 fd ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
    switch (code_point) {
ffffffff80001fe7:	49 8d 87 e7 dd ff ff 	lea    -0x2219(%r15),%rax
ffffffff80001fee:	48 83 f8 2f          	cmp    $0x2f,%rax
ffffffff80001ff2:	77 94                	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff80001ff4:	48 8d 15 3d 54 00 00 	lea    0x543d(%rip),%rdx        # ffffffff80007438 <builtin_font+0x1438>
ffffffff80001ffb:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
ffffffff80001fff:	48 01 d0             	add    %rdx,%rax
ffffffff80002002:	3e ff e0             	notrack jmp *%rax
ffffffff80002005:	0f 1f 00             	nopl   (%rax)
ffffffff80002008:	49 81 ff 6b 26 00 00 	cmp    $0x266b,%r15
ffffffff8000200f:	0f 87 73 ff ff ff    	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff80002015:	49 81 ff ff 24 00 00 	cmp    $0x24ff,%r15
ffffffff8000201c:	0f 86 8e 00 00 00    	jbe    ffffffff800020b0 <flanterm_write+0x430>
ffffffff80002022:	49 8d 87 00 db ff ff 	lea    -0x2500(%r15),%rax
ffffffff80002029:	48 3d 6b 01 00 00    	cmp    $0x16b,%rax
ffffffff8000202f:	0f 87 53 ff ff ff    	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff80002035:	48 8d 15 bc 54 00 00 	lea    0x54bc(%rip),%rdx        # ffffffff800074f8 <builtin_font+0x14f8>
ffffffff8000203c:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
ffffffff80002040:	48 01 d0             	add    %rdx,%rax
ffffffff80002043:	3e ff e0             	notrack jmp *%rax
ffffffff80002046:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8000204d:	00 00 00 
ffffffff80002050:	49 8d 87 6d fc ff ff 	lea    -0x393(%r15),%rax
ffffffff80002057:	48 83 f8 33          	cmp    $0x33,%rax
ffffffff8000205b:	0f 87 27 ff ff ff    	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff80002061:	48 8d 15 40 5a 00 00 	lea    0x5a40(%rip),%rdx        # ffffffff80007aa8 <builtin_font+0x1aa8>
ffffffff80002068:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
ffffffff8000206c:	48 01 d0             	add    %rdx,%rax
ffffffff8000206f:	3e ff e0             	notrack jmp *%rax
ffffffff80002072:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002078:	49 81 ff a8 21 00 00 	cmp    $0x21a8,%r15
ffffffff8000207f:	0f 87 03 ff ff ff    	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff80002085:	49 81 ff 8f 21 00 00 	cmp    $0x218f,%r15
ffffffff8000208c:	76 72                	jbe    ffffffff80002100 <flanterm_write+0x480>
ffffffff8000208e:	49 8d 87 70 de ff ff 	lea    -0x2190(%r15),%rax
ffffffff80002095:	48 83 f8 18          	cmp    $0x18,%rax
ffffffff80002099:	0f 87 e9 fe ff ff    	ja     ffffffff80001f88 <flanterm_write+0x308>
ffffffff8000209f:	48 8d 15 d2 5a 00 00 	lea    0x5ad2(%rip),%rdx        # ffffffff80007b78 <builtin_font+0x1b78>
ffffffff800020a6:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
ffffffff800020aa:	48 01 d0             	add    %rdx,%rax
ffffffff800020ad:	3e ff e0             	notrack jmp *%rax
ffffffff800020b0:	49 81 ff 02 23 00 00 	cmp    $0x2302,%r15
ffffffff800020b7:	0f 84 42 03 00 00    	je     ffffffff800023ff <flanterm_write+0x77f>
ffffffff800020bd:	76 7d                	jbe    ffffffff8000213c <flanterm_write+0x4bc>
ffffffff800020bf:	49 81 ff 20 23 00 00 	cmp    $0x2320,%r15
ffffffff800020c6:	0f 84 cc 02 00 00    	je     ffffffff80002398 <flanterm_write+0x718>
ffffffff800020cc:	49 81 ff 21 23 00 00 	cmp    $0x2321,%r15
ffffffff800020d3:	75 53                	jne    ffffffff80002128 <flanterm_write+0x4a8>
        case 0x2321: return 245;
ffffffff800020d5:	be f5 00 00 00       	mov    $0xf5,%esi
ffffffff800020da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (size_t i = 0; i < count; i++) {
ffffffff800020e0:	49 83 c6 01          	add    $0x1,%r14
            ctx->raw_putchar(ctx, cc);
ffffffff800020e4:	4c 89 ef             	mov    %r13,%rdi
ffffffff800020e7:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff800020ee:	4c 39 f3             	cmp    %r14,%rbx
ffffffff800020f1:	0f 85 c1 fb ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
ffffffff800020f7:	e9 7b fc ff ff       	jmp    ffffffff80001d77 <flanterm_write+0xf7>
ffffffff800020fc:	0f 1f 40 00          	nopl   0x0(%rax)
    switch (code_point) {
ffffffff80002100:	49 81 ff 7f 20 00 00 	cmp    $0x207f,%r15
ffffffff80002107:	0f 84 ab 02 00 00    	je     ffffffff800023b8 <flanterm_write+0x738>
ffffffff8000210d:	76 4a                	jbe    ffffffff80002159 <flanterm_write+0x4d9>
        case 0x20a7: return 158;
ffffffff8000210f:	be 9e 00 00 00       	mov    $0x9e,%esi
    switch (code_point) {
ffffffff80002114:	49 81 ff a7 20 00 00 	cmp    $0x20a7,%r15
ffffffff8000211b:	74 c3                	je     ffffffff800020e0 <flanterm_write+0x460>
ffffffff8000211d:	e9 66 fe ff ff       	jmp    ffffffff80001f88 <flanterm_write+0x308>
ffffffff80002122:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80002128:	49 81 ff 10 23 00 00 	cmp    $0x2310,%r15
ffffffff8000212f:	0f 85 53 fe ff ff    	jne    ffffffff80001f88 <flanterm_write+0x308>
        case 0x2310: return 169;
ffffffff80002135:	be a9 00 00 00       	mov    $0xa9,%esi
ffffffff8000213a:	eb a4                	jmp    ffffffff800020e0 <flanterm_write+0x460>
    switch (code_point) {
ffffffff8000213c:	49 81 ff 64 22 00 00 	cmp    $0x2264,%r15
ffffffff80002143:	0f 84 5f 02 00 00    	je     ffffffff800023a8 <flanterm_write+0x728>
ffffffff80002149:	49 81 ff 65 22 00 00 	cmp    $0x2265,%r15
ffffffff80002150:	75 1a                	jne    ffffffff8000216c <flanterm_write+0x4ec>
        case 0x2265: return 242;
ffffffff80002152:	be f2 00 00 00       	mov    $0xf2,%esi
ffffffff80002157:	eb 87                	jmp    ffffffff800020e0 <flanterm_write+0x460>
    switch (code_point) {
ffffffff80002159:	49 81 ff 22 20 00 00 	cmp    $0x2022,%r15
ffffffff80002160:	75 26                	jne    ffffffff80002188 <flanterm_write+0x508>
        case 0x2022: return 7;
ffffffff80002162:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff80002167:	e9 74 ff ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
    switch (code_point) {
ffffffff8000216c:	49 81 ff 61 22 00 00 	cmp    $0x2261,%r15
ffffffff80002173:	0f 85 0f fe ff ff    	jne    ffffffff80001f88 <flanterm_write+0x308>
        case 0x2261: return 240;
ffffffff80002179:	be f0 00 00 00       	mov    $0xf0,%esi
ffffffff8000217e:	e9 5d ff ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
ffffffff80002183:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    switch (code_point) {
ffffffff80002188:	49 81 ff 3c 20 00 00 	cmp    $0x203c,%r15
ffffffff8000218f:	0f 85 f3 fd ff ff    	jne    ffffffff80001f88 <flanterm_write+0x308>
        case 0x203c: return 19;
ffffffff80002195:	be 13 00 00 00       	mov    $0x13,%esi
ffffffff8000219a:	e9 41 ff ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
ffffffff8000219f:	90                   	nop
    ctx->escape_offset++;
ffffffff800021a0:	49 8b 45 38          	mov    0x38(%r13),%rax
ffffffff800021a4:	48 83 c0 01          	add    $0x1,%rax
    if (ctx->osc == true) {
ffffffff800021a8:	41 80 7d 0d 00       	cmpb   $0x0,0xd(%r13)
    ctx->escape_offset++;
ffffffff800021ad:	49 89 45 38          	mov    %rax,0x38(%r13)
    if (ctx->osc == true) {
ffffffff800021b1:	0f 85 0b 02 00 00    	jne    ffffffff800023c2 <flanterm_write+0x742>
    if (ctx->control_sequence == true) {
ffffffff800021b7:	41 0f b6 4d 0b       	movzbl 0xb(%r13),%ecx
ffffffff800021bc:	84 c9                	test   %cl,%cl
ffffffff800021be:	0f 85 45 02 00 00    	jne    ffffffff80002409 <flanterm_write+0x789>
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff800021c4:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
ffffffff800021c9:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
ffffffff800021ce:	4c 89 ef             	mov    %r13,%rdi
ffffffff800021d1:	41 ff 95 08 01 00 00 	call   *0x108(%r13)
    switch (c) {
ffffffff800021d8:	41 8d 47 d8          	lea    -0x28(%r15),%eax
ffffffff800021dc:	3c 3b                	cmp    $0x3b,%al
ffffffff800021de:	0f 87 bc 00 00 00    	ja     ffffffff800022a0 <flanterm_write+0x620>
ffffffff800021e4:	0f b6 c0             	movzbl %al,%eax
ffffffff800021e7:	49 63 04 84          	movslq (%r12,%rax,4),%rax
ffffffff800021eb:	4c 01 e0             	add    %r12,%rax
ffffffff800021ee:	3e ff e0             	notrack jmp *%rax
ffffffff800021f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            ctx->code_point = (uint64_t)(c & 0x07) << (6 * 3);
ffffffff800021f8:	48 c1 e2 12          	shl    $0x12,%rdx
    for (size_t i = 0; i < count; i++) {
ffffffff800021fc:	49 83 c6 01          	add    $0x1,%r14
            ctx->unicode_remaining = 3;
ffffffff80002200:	49 c7 45 20 03 00 00 	movq   $0x3,0x20(%r13)
ffffffff80002207:	00 
            ctx->code_point = (uint64_t)(c & 0x07) << (6 * 3);
ffffffff80002208:	81 e2 00 00 1c 00    	and    $0x1c0000,%edx
ffffffff8000220e:	49 89 55 18          	mov    %rdx,0x18(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff80002212:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80002215:	0f 85 9d fa ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
ffffffff8000221b:	e9 57 fb ff ff       	jmp    ffffffff80001d77 <flanterm_write+0xf7>
            if (y == ctx->scroll_bottom_margin - 1) {
ffffffff80002220:	49 8b 45 70          	mov    0x70(%r13),%rax
ffffffff80002224:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002229:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000222d:	48 39 d0             	cmp    %rdx,%rax
ffffffff80002230:	0f 84 ea 09 00 00    	je     ffffffff80002c20 <flanterm_write+0xfa0>
                ctx->set_cursor_pos(ctx, (ctx->oob_output & FLANTERM_OOB_OUTPUT_ONLCR) ? 0 : x, y + 1);
ffffffff80002236:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000223a:	31 f6                	xor    %esi,%esi
ffffffff8000223c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000223f:	41 f6 85 b8 00 00 00 	testb  $0x10,0xb8(%r13)
ffffffff80002246:	10 
ffffffff80002247:	48 0f 44 74 24 20    	cmove  0x20(%rsp),%rsi
ffffffff8000224d:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff80002254:	e9 11 fb ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
    ctx->save_state(ctx);
ffffffff80002259:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000225c:	41 ff 95 80 01 00 00 	call   *0x180(%r13)
    ctx->saved_state_reverse_video = ctx->reverse_video;
ffffffff80002263:	41 0f b6 45 13       	movzbl 0x13(%r13),%eax
    ctx->saved_state_bold = ctx->bold;
ffffffff80002268:	41 0f b7 55 11       	movzwl 0x11(%r13),%edx
    ctx->saved_state_reverse_video = ctx->reverse_video;
ffffffff8000226d:	41 88 85 c2 00 00 00 	mov    %al,0xc2(%r13)
    ctx->saved_state_current_charset = ctx->current_charset;
ffffffff80002274:	49 8b 45 30          	mov    0x30(%r13),%rax
    ctx->saved_state_bold = ctx->bold;
ffffffff80002278:	66 41 89 95 c0 00 00 	mov    %dx,0xc0(%r13)
ffffffff8000227f:	00 
    ctx->saved_state_current_charset = ctx->current_charset;
ffffffff80002280:	49 89 85 c8 00 00 00 	mov    %rax,0xc8(%r13)
    ctx->saved_state_current_primary = ctx->current_primary;
ffffffff80002287:	49 8b 45 58          	mov    0x58(%r13),%rax
ffffffff8000228b:	49 89 85 d0 00 00 00 	mov    %rax,0xd0(%r13)
    ctx->saved_state_current_bg = ctx->current_bg;
ffffffff80002292:	49 8b 45 60          	mov    0x60(%r13),%rax
ffffffff80002296:	49 89 85 d8 00 00 00 	mov    %rax,0xd8(%r13)
ffffffff8000229d:	0f 1f 00             	nopl   (%rax)
    for (size_t i = 0; i < count; i++) {
ffffffff800022a0:	49 83 c6 01          	add    $0x1,%r14
    ctx->escape = false;
ffffffff800022a4:	41 c6 45 0c 00       	movb   $0x0,0xc(%r13)
    for (size_t i = 0; i < count; i++) {
ffffffff800022a9:	4c 39 f3             	cmp    %r14,%rbx
ffffffff800022ac:	0f 85 06 fa ff ff    	jne    ffffffff80001cb8 <flanterm_write+0x38>
ffffffff800022b2:	e9 c0 fa ff ff       	jmp    ffffffff80001d77 <flanterm_write+0xf7>
            if ((x / ctx->tab_size + 1) >= ctx->cols) {
ffffffff800022b7:	49 8b 75 00          	mov    0x0(%r13),%rsi
ffffffff800022bb:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff800022c0:	31 d2                	xor    %edx,%edx
                ctx->set_cursor_pos(ctx, ctx->cols - 1, y);
ffffffff800022c2:	49 8b 8d 00 01 00 00 	mov    0x100(%r13),%rcx
ffffffff800022c9:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
            if ((x / ctx->tab_size + 1) >= ctx->cols) {
ffffffff800022ce:	48 f7 f6             	div    %rsi
ffffffff800022d1:	49 8b 95 e8 00 00 00 	mov    0xe8(%r13),%rdx
ffffffff800022d8:	48 83 c0 01          	add    $0x1,%rax
ffffffff800022dc:	48 39 d0             	cmp    %rdx,%rax
ffffffff800022df:	0f 83 69 09 00 00    	jae    ffffffff80002c4e <flanterm_write+0xfce>
            ctx->set_cursor_pos(ctx, (x / ctx->tab_size + 1) * ctx->tab_size, y);
ffffffff800022e5:	48 0f af f0          	imul   %rax,%rsi
ffffffff800022e9:	4c 89 c2             	mov    %r8,%rdx
ffffffff800022ec:	4c 89 ef             	mov    %r13,%rdi
ffffffff800022ef:	ff d1                	call   *%rcx
            return;
ffffffff800022f1:	e9 74 fa ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            if (ctx->callback != NULL) {
ffffffff800022f6:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff800022fd:	48 85 c0             	test   %rax,%rax
ffffffff80002300:	0f 84 64 fa ff ff    	je     ffffffff80001d6a <flanterm_write+0xea>
                ctx->callback(ctx, FLANTERM_CB_BELL, 0, 0, 0);
ffffffff80002306:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002309:	31 c9                	xor    %ecx,%ecx
ffffffff8000230b:	31 d2                	xor    %edx,%edx
ffffffff8000230d:	be 14 00 00 00       	mov    $0x14,%esi
ffffffff80002312:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002315:	ff d0                	call   *%rax
ffffffff80002317:	e9 4e fa ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            ctx->set_cursor_pos(ctx, x - 1, y);
ffffffff8000231c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff80002321:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002326:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002329:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff8000232d:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            return;
ffffffff80002334:	e9 31 fa ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            ctx->current_charset = 0;
ffffffff80002339:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
ffffffff80002340:	00 
            return;
ffffffff80002341:	e9 24 fa ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            ctx->escape_offset = 0;
ffffffff80002346:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
ffffffff8000234d:	00 
            ctx->escape = true;
ffffffff8000234e:	41 c6 45 0c 01       	movb   $0x1,0xc(%r13)
            return;
ffffffff80002353:	e9 12 fa ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            ctx->set_cursor_pos(ctx, 0, y);
ffffffff80002358:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff8000235d:	31 f6                	xor    %esi,%esi
ffffffff8000235f:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002362:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            return;
ffffffff80002369:	e9 fc f9 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            ctx->current_charset = 1;
ffffffff8000236e:	49 c7 45 30 01 00 00 	movq   $0x1,0x30(%r13)
ffffffff80002375:	00 
            return;
ffffffff80002376:	e9 ef f9 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
ffffffff8000237b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                ctx->charsets[ctx->g_select] = CHARSET_DEC_SPECIAL; break;
ffffffff80002380:	0f b6 c0             	movzbl %al,%eax
ffffffff80002383:	41 c6 44 05 29 01    	movb   $0x1,0x29(%r13,%rax,1)
        ctx->g_select = 0;
ffffffff80002389:	41 c6 45 28 00       	movb   $0x0,0x28(%r13)
        return;
ffffffff8000238e:	e9 be fb ff ff       	jmp    ffffffff80001f51 <flanterm_write+0x2d1>
ffffffff80002393:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        case 0x2320: return 244;
ffffffff80002398:	be f4 00 00 00       	mov    $0xf4,%esi
ffffffff8000239d:	e9 3e fd ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
ffffffff800023a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        case 0x2264: return 243;
ffffffff800023a8:	be f3 00 00 00       	mov    $0xf3,%esi
ffffffff800023ad:	e9 2e fd ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
ffffffff800023b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        case 0x207f: return 252;
ffffffff800023b8:	be fc 00 00 00       	mov    $0xfc,%esi
ffffffff800023bd:	e9 1e fd ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
    if (ctx->osc_escape && c == '\\') {
ffffffff800023c2:	41 80 ff 5c          	cmp    $0x5c,%r15b
ffffffff800023c6:	75 18                	jne    ffffffff800023e0 <flanterm_write+0x760>
ffffffff800023c8:	41 80 7d 0e 00       	cmpb   $0x0,0xe(%r13)
ffffffff800023cd:	74 11                	je     ffffffff800023e0 <flanterm_write+0x760>
    ctx->escape = false;
ffffffff800023cf:	31 ff                	xor    %edi,%edi
    ctx->osc_escape = false;
ffffffff800023d1:	41 c6 45 0e 00       	movb   $0x0,0xe(%r13)
    ctx->escape = false;
ffffffff800023d6:	66 41 89 7d 0c       	mov    %di,0xc(%r13)
ffffffff800023db:	e9 8a f9 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
    ctx->osc_escape = false;
ffffffff800023e0:	41 c6 45 0e 00       	movb   $0x0,0xe(%r13)
    switch (c) {
ffffffff800023e5:	41 80 ff 07          	cmp    $0x7,%r15b
ffffffff800023e9:	74 e4                	je     ffffffff800023cf <flanterm_write+0x74f>
ffffffff800023eb:	41 80 ff 1b          	cmp    $0x1b,%r15b
ffffffff800023ef:	0f 85 75 f9 ff ff    	jne    ffffffff80001d6a <flanterm_write+0xea>
            ctx->osc_escape = true;
ffffffff800023f5:	41 c6 45 0e 01       	movb   $0x1,0xe(%r13)
            break;
ffffffff800023fa:	e9 6b f9 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 0x2302: return 127;
ffffffff800023ff:	be 7f 00 00 00       	mov    $0x7f,%esi
ffffffff80002404:	e9 d7 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
    if (ctx->escape_offset == 2) {
ffffffff80002409:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8000240d:	74 49                	je     ffffffff80002458 <flanterm_write+0x7d8>
    if (c >= '0' && c <= '9') {
ffffffff8000240f:	41 8d 47 d0          	lea    -0x30(%r15),%eax
        if (ctx->esc_values_i == FLANTERM_MAX_ESC_VALUES) {
ffffffff80002413:	49 8b 55 40          	mov    0x40(%r13),%rdx
    if (c >= '0' && c <= '9') {
ffffffff80002417:	3c 09                	cmp    $0x9,%al
ffffffff80002419:	0f 87 40 08 00 00    	ja     ffffffff80002c5f <flanterm_write+0xfdf>
        if (ctx->esc_values_i == FLANTERM_MAX_ESC_VALUES) {
ffffffff8000241f:	48 83 fa 10          	cmp    $0x10,%rdx
ffffffff80002423:	0f 84 41 f9 ff ff    	je     ffffffff80001d6a <flanterm_write+0xea>
        ctx->esc_values[ctx->esc_values_i] += c - '0';
ffffffff80002429:	48 83 c2 1c          	add    $0x1c,%rdx
        ctx->rrr = true;
ffffffff8000242d:	41 c6 45 0f 01       	movb   $0x1,0xf(%r13)
        ctx->esc_values[ctx->esc_values_i] *= 10;
ffffffff80002432:	41 8b 44 95 08       	mov    0x8(%r13,%rdx,4),%eax
ffffffff80002437:	8d 04 80             	lea    (%rax,%rax,4),%eax
        ctx->esc_values[ctx->esc_values_i] += c - '0';
ffffffff8000243a:	41 8d 44 47 d0       	lea    -0x30(%r15,%rax,2),%eax
ffffffff8000243f:	41 89 44 95 08       	mov    %eax,0x8(%r13,%rdx,4)
        return;
ffffffff80002444:	e9 21 f9 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
    } else {
        ctx->raw_putchar(ctx, 0xfe);
ffffffff80002449:	be fe 00 00 00       	mov    $0xfe,%esi
ffffffff8000244e:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002451:	ff d0                	call   *%rax
ffffffff80002453:	e9 12 f9 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        switch (c) {
ffffffff80002458:	41 80 ff 3f          	cmp    $0x3f,%r15b
ffffffff8000245c:	0f 84 e3 0a 00 00    	je     ffffffff80002f45 <flanterm_write+0x12c5>
ffffffff80002462:	41 80 ff 5b          	cmp    $0x5b,%r15b
ffffffff80002466:	75 a7                	jne    ffffffff8000240f <flanterm_write+0x78f>
                ctx->discard_next = true;
ffffffff80002468:	41 c6 45 10 01       	movb   $0x1,0x10(%r13)
    ctx->control_sequence = false;
ffffffff8000246d:	31 f6                	xor    %esi,%esi
ffffffff8000246f:	66 41 89 75 0b       	mov    %si,0xb(%r13)
ffffffff80002474:	e9 f1 f8 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 0x21a8: return 23;
ffffffff80002479:	be 17 00 00 00       	mov    $0x17,%esi
ffffffff8000247e:	e9 5d fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2195: return 18;
ffffffff80002483:	be 12 00 00 00       	mov    $0x12,%esi
ffffffff80002488:	e9 53 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2194: return 29;
ffffffff8000248d:	be 1d 00 00 00       	mov    $0x1d,%esi
ffffffff80002492:	e9 49 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2192: return 26;
ffffffff80002497:	be 1a 00 00 00       	mov    $0x1a,%esi
ffffffff8000249c:	e9 3f fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2193: return 25;
ffffffff800024a1:	be 19 00 00 00       	mov    $0x19,%esi
ffffffff800024a6:	e9 35 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2190: return 27;
ffffffff800024ab:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff800024b0:	e9 2b fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2191: return 24;
ffffffff800024b5:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff800024ba:	e9 21 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x221e: return 236;
ffffffff800024bf:	be ec 00 00 00       	mov    $0xec,%esi
ffffffff800024c4:	e9 17 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x221f: return 28;
ffffffff800024c9:	be 1c 00 00 00       	mov    $0x1c,%esi
ffffffff800024ce:	e9 0d fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2248: return 247;
ffffffff800024d3:	be f7 00 00 00       	mov    $0xf7,%esi
ffffffff800024d8:	e9 03 fc ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2229: return 239;
ffffffff800024dd:	be ef 00 00 00       	mov    $0xef,%esi
ffffffff800024e2:	e9 f9 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x221a: return 251;
ffffffff800024e7:	be fb 00 00 00       	mov    $0xfb,%esi
ffffffff800024ec:	e9 ef fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2219: return 249;
ffffffff800024f1:	be f9 00 00 00       	mov    $0xf9,%esi
ffffffff800024f6:	e9 e5 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x0393: return 226;
ffffffff800024fb:	be e2 00 00 00       	mov    $0xe2,%esi
ffffffff80002500:	e9 db fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03b1: return 224;
ffffffff80002505:	be e0 00 00 00       	mov    $0xe0,%esi
ffffffff8000250a:	e9 d1 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03c0: return 227;
ffffffff8000250f:	be e3 00 00 00       	mov    $0xe3,%esi
ffffffff80002514:	e9 c7 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03b4: return 235;
ffffffff80002519:	be eb 00 00 00       	mov    $0xeb,%esi
ffffffff8000251e:	e9 bd fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x0398: return 233;
ffffffff80002523:	be e9 00 00 00       	mov    $0xe9,%esi
ffffffff80002528:	e9 b3 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03a3: return 228;
ffffffff8000252d:	be e4 00 00 00       	mov    $0xe4,%esi
ffffffff80002532:	e9 a9 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03a6: return 232;
ffffffff80002537:	be e8 00 00 00       	mov    $0xe8,%esi
ffffffff8000253c:	e9 9f fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03a9: return 234;
ffffffff80002541:	be ea 00 00 00       	mov    $0xea,%esi
ffffffff80002546:	e9 95 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03c3: return 229;
ffffffff8000254b:	be e5 00 00 00       	mov    $0xe5,%esi
ffffffff80002550:	e9 8b fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03c4: return 231;
ffffffff80002555:	be e7 00 00 00       	mov    $0xe7,%esi
ffffffff8000255a:	e9 81 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03c6: return 237;
ffffffff8000255f:	be ed 00 00 00       	mov    $0xed,%esi
ffffffff80002564:	e9 77 fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x03b5: return 238;
ffffffff80002569:	be ee 00 00 00       	mov    $0xee,%esi
ffffffff8000256e:	e9 6d fb ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
            ctx->g_select = c - '\'';
ffffffff80002573:	41 83 ef 27          	sub    $0x27,%r15d
ffffffff80002577:	45 88 7d 28          	mov    %r15b,0x28(%r13)
            break;
ffffffff8000257b:	e9 20 fd ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
            if (y == ctx->scroll_bottom_margin - 1) {
ffffffff80002580:	49 8b 45 70          	mov    0x70(%r13),%rax
ffffffff80002584:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002589:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000258d:	48 39 d0             	cmp    %rdx,%rax
ffffffff80002590:	0f 84 6c 09 00 00    	je     ffffffff80002f02 <flanterm_write+0x1282>
                ctx->set_cursor_pos(ctx, x, y + 1);
ffffffff80002596:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff8000259b:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000259f:	4c 89 ef             	mov    %r13,%rdi
ffffffff800025a2:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff800025a9:	e9 f2 fc ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
    ctx->bold = ctx->saved_state_bold;
ffffffff800025ae:	41 0f b6 85 c0 00 00 	movzbl 0xc0(%r13),%eax
ffffffff800025b5:	00 
    ctx->restore_state(ctx);
ffffffff800025b6:	4c 89 ef             	mov    %r13,%rdi
    ctx->bold = ctx->saved_state_bold;
ffffffff800025b9:	41 88 45 11          	mov    %al,0x11(%r13)
    ctx->bg_bold = ctx->saved_state_bg_bold;
ffffffff800025bd:	41 0f b7 85 c1 00 00 	movzwl 0xc1(%r13),%eax
ffffffff800025c4:	00 
ffffffff800025c5:	66 41 89 45 12       	mov    %ax,0x12(%r13)
    ctx->current_charset = ctx->saved_state_current_charset;
ffffffff800025ca:	49 8b 85 c8 00 00 00 	mov    0xc8(%r13),%rax
ffffffff800025d1:	49 89 45 30          	mov    %rax,0x30(%r13)
    ctx->current_primary = ctx->saved_state_current_primary;
ffffffff800025d5:	49 8b 85 d0 00 00 00 	mov    0xd0(%r13),%rax
ffffffff800025dc:	49 89 45 58          	mov    %rax,0x58(%r13)
    ctx->current_bg = ctx->saved_state_current_bg;
ffffffff800025e0:	49 8b 85 d8 00 00 00 	mov    0xd8(%r13),%rax
ffffffff800025e7:	49 89 45 60          	mov    %rax,0x60(%r13)
    ctx->restore_state(ctx);
ffffffff800025eb:	41 ff 95 88 01 00 00 	call   *0x188(%r13)
}
ffffffff800025f2:	e9 a9 fc ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
ffffffff800025f7:	49 8d 45 78          	lea    0x78(%r13),%rax
ffffffff800025fb:	49 8d 95 b8 00 00 00 	lea    0xb8(%r13),%rdx
ffffffff80002602:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                ctx->esc_values[i] = 0;
ffffffff80002608:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
            for (size_t i = 0; i < FLANTERM_MAX_ESC_VALUES; i++)
ffffffff8000260e:	48 83 c0 04          	add    $0x4,%rax
ffffffff80002612:	48 39 d0             	cmp    %rdx,%rax
ffffffff80002615:	75 f1                	jne    ffffffff80002608 <flanterm_write+0x988>
            ctx->esc_values_i = 0;
ffffffff80002617:	49 c7 45 40 00 00 00 	movq   $0x0,0x40(%r13)
ffffffff8000261e:	00 
            ctx->rrr = false;
ffffffff8000261f:	41 c6 45 0f 00       	movb   $0x0,0xf(%r13)
            ctx->control_sequence = true;
ffffffff80002624:	41 c6 45 0b 01       	movb   $0x1,0xb(%r13)
            return;
ffffffff80002629:	e9 3c f7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            if (ctx->callback != NULL) {
ffffffff8000262e:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff80002635:	48 85 c0             	test   %rax,%rax
ffffffff80002638:	0f 84 62 fc ff ff    	je     ffffffff800022a0 <flanterm_write+0x620>
                ctx->callback(ctx, FLANTERM_CB_PRIVATE_ID, 0, 0, 0);
ffffffff8000263e:	45 31 c0             	xor    %r8d,%r8d
ffffffff80002641:	31 c9                	xor    %ecx,%ecx
ffffffff80002643:	31 d2                	xor    %edx,%edx
ffffffff80002645:	be 1e 00 00 00       	mov    $0x1e,%esi
ffffffff8000264a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000264d:	ff d0                	call   *%rax
ffffffff8000264f:	e9 4c fc ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
            if (y == ctx->scroll_top_margin) {
ffffffff80002654:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80002659:	49 39 45 68          	cmp    %rax,0x68(%r13)
ffffffff8000265d:	0f 84 c2 08 00 00    	je     ffffffff80002f25 <flanterm_write+0x12a5>
                ctx->set_cursor_pos(ctx, 0, y - 1);
ffffffff80002663:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80002667:	31 f6                	xor    %esi,%esi
ffffffff80002669:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000266c:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff80002673:	e9 28 fc ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
            if (y == ctx->scroll_bottom_margin - 1) {
ffffffff80002678:	49 8b 45 70          	mov    0x70(%r13),%rax
ffffffff8000267c:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002681:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80002685:	48 39 d0             	cmp    %rdx,%rax
ffffffff80002688:	0f 84 54 08 00 00    	je     ffffffff80002ee2 <flanterm_write+0x1262>
                ctx->set_cursor_pos(ctx, 0, y + 1);
ffffffff8000268e:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002692:	31 f6                	xor    %esi,%esi
ffffffff80002694:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002697:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff8000269e:	e9 fd fb ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
    ctx->dec_private = false;
ffffffff800026a3:	31 c0                	xor    %eax,%eax
    ctx->g_select = 0;
ffffffff800026a5:	31 d2                	xor    %edx,%edx
    ctx->tab_size = 8;
ffffffff800026a7:	49 c7 45 00 08 00 00 	movq   $0x8,0x0(%r13)
ffffffff800026ae:	00 
            ctx->clear(ctx, true);
ffffffff800026af:	4c 89 ef             	mov    %r13,%rdi
    ctx->dec_private = false;
ffffffff800026b2:	66 41 89 45 14       	mov    %ax,0x14(%r13)
    ctx->scroll_bottom_margin = ctx->rows;
ffffffff800026b7:	49 8b 85 e0 00 00 00 	mov    0xe0(%r13),%rax
            ctx->clear(ctx, true);
ffffffff800026be:	be 01 00 00 00       	mov    $0x1,%esi
    ctx->autoflush = true;
ffffffff800026c3:	49 c7 45 08 01 01 01 	movq   $0x10101,0x8(%r13)
ffffffff800026ca:	00 
    ctx->discard_next = false;
ffffffff800026cb:	41 c7 45 10 00 00 00 	movl   $0x0,0x10(%r13)
ffffffff800026d2:	00 
    ctx->unicode_remaining = 0;
ffffffff800026d3:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
ffffffff800026da:	00 
    ctx->g_select = 0;
ffffffff800026db:	66 41 89 55 28       	mov    %dx,0x28(%r13)
    ctx->charsets[1] = CHARSET_DEC_SPECIAL;
ffffffff800026e0:	41 c6 45 2a 01       	movb   $0x1,0x2a(%r13)
    ctx->current_charset = 0;
ffffffff800026e5:	49 c7 45 30 00 00 00 	movq   $0x0,0x30(%r13)
ffffffff800026ec:	00 
    ctx->escape_offset = 0;
ffffffff800026ed:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
ffffffff800026f4:	00 
    ctx->esc_values_i = 0;
ffffffff800026f5:	49 c7 45 40 00 00 00 	movq   $0x0,0x40(%r13)
ffffffff800026fc:	00 
    ctx->saved_cursor_x = 0;
ffffffff800026fd:	49 c7 45 48 00 00 00 	movq   $0x0,0x48(%r13)
ffffffff80002704:	00 
    ctx->saved_cursor_y = 0;
ffffffff80002705:	49 c7 45 50 00 00 00 	movq   $0x0,0x50(%r13)
ffffffff8000270c:	00 
    ctx->current_primary = (size_t)-1;
ffffffff8000270d:	49 c7 45 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%r13)
ffffffff80002714:	ff 
    ctx->current_bg = (size_t)-1;
ffffffff80002715:	49 c7 45 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%r13)
ffffffff8000271c:	ff 
    ctx->scroll_top_margin = 0;
ffffffff8000271d:	49 c7 45 68 00 00 00 	movq   $0x0,0x68(%r13)
ffffffff80002724:	00 
    ctx->scroll_bottom_margin = ctx->rows;
ffffffff80002725:	49 89 45 70          	mov    %rax,0x70(%r13)
    ctx->oob_output = FLANTERM_OOB_OUTPUT_ONLCR;
ffffffff80002729:	49 c7 85 b8 00 00 00 	movq   $0x10,0xb8(%r13)
ffffffff80002730:	10 00 00 00 
            ctx->clear(ctx, true);
ffffffff80002734:	41 ff 95 f8 00 00 00 	call   *0xf8(%r13)
            break;
ffffffff8000273b:	e9 60 fb ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
            ctx->osc = true;
ffffffff80002740:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80002745:	66 41 89 4d 0d       	mov    %cx,0xd(%r13)
            return;
ffffffff8000274a:	e9 1b f6 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 0x00e4: return 132;
ffffffff8000274f:	be 84 00 00 00       	mov    $0x84,%esi
ffffffff80002754:	e9 87 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f7: return 246;
ffffffff80002759:	be f6 00 00 00       	mov    $0xf6,%esi
ffffffff8000275e:	e9 7d f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f9: return 151;
ffffffff80002763:	be 97 00 00 00       	mov    $0x97,%esi
ffffffff80002768:	e9 73 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00fa: return 163;
ffffffff8000276d:	be a3 00 00 00       	mov    $0xa3,%esi
ffffffff80002772:	e9 69 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00fb: return 150;
ffffffff80002777:	be 96 00 00 00       	mov    $0x96,%esi
ffffffff8000277c:	e9 5f f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x0192: return 159;
ffffffff80002781:	be 9f 00 00 00       	mov    $0x9f,%esi
ffffffff80002786:	e9 55 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00fc: return 129;
ffffffff8000278b:	be 81 00 00 00       	mov    $0x81,%esi
ffffffff80002790:	e9 4b f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ff: return 152;
ffffffff80002795:	be 98 00 00 00       	mov    $0x98,%esi
ffffffff8000279a:	e9 41 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00bb: return 175;
ffffffff8000279f:	be af 00 00 00       	mov    $0xaf,%esi
ffffffff800027a4:	e9 37 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00bc: return 172;
ffffffff800027a9:	be ac 00 00 00       	mov    $0xac,%esi
ffffffff800027ae:	e9 2d f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00bd: return 171;
ffffffff800027b3:	be ab 00 00 00       	mov    $0xab,%esi
ffffffff800027b8:	e9 23 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00bf: return 168;
ffffffff800027bd:	be a8 00 00 00       	mov    $0xa8,%esi
ffffffff800027c2:	e9 19 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00c4: return 142;
ffffffff800027c7:	be 8e 00 00 00       	mov    $0x8e,%esi
ffffffff800027cc:	e9 0f f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00c5: return 143;
ffffffff800027d1:	be 8f 00 00 00       	mov    $0x8f,%esi
ffffffff800027d6:	e9 05 f9 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00c6: return 146;
ffffffff800027db:	be 92 00 00 00       	mov    $0x92,%esi
ffffffff800027e0:	e9 fb f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00c7: return 128;
ffffffff800027e5:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff800027ea:	e9 f1 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00c9: return 144;
ffffffff800027ef:	be 90 00 00 00       	mov    $0x90,%esi
ffffffff800027f4:	e9 e7 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00d1: return 165;
ffffffff800027f9:	be a5 00 00 00       	mov    $0xa5,%esi
ffffffff800027fe:	e9 dd f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00d6: return 153;
ffffffff80002803:	be 99 00 00 00       	mov    $0x99,%esi
ffffffff80002808:	e9 d3 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00dc: return 154;
ffffffff8000280d:	be 9a 00 00 00       	mov    $0x9a,%esi
ffffffff80002812:	e9 c9 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00df: return 225;
ffffffff80002817:	be e1 00 00 00       	mov    $0xe1,%esi
ffffffff8000281c:	e9 bf f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e0: return 133;
ffffffff80002821:	be 85 00 00 00       	mov    $0x85,%esi
ffffffff80002826:	e9 b5 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e1: return 160;
ffffffff8000282b:	be a0 00 00 00       	mov    $0xa0,%esi
ffffffff80002830:	e9 ab f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e2: return 131;
ffffffff80002835:	be 83 00 00 00       	mov    $0x83,%esi
ffffffff8000283a:	e9 a1 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e5: return 134;
ffffffff8000283f:	be 86 00 00 00       	mov    $0x86,%esi
ffffffff80002844:	e9 97 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e6: return 145;
ffffffff80002849:	be 91 00 00 00       	mov    $0x91,%esi
ffffffff8000284e:	e9 8d f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e7: return 135;
ffffffff80002853:	be 87 00 00 00       	mov    $0x87,%esi
ffffffff80002858:	e9 83 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e8: return 138;
ffffffff8000285d:	be 8a 00 00 00       	mov    $0x8a,%esi
ffffffff80002862:	e9 79 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00e9: return 130;
ffffffff80002867:	be 82 00 00 00       	mov    $0x82,%esi
ffffffff8000286c:	e9 6f f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ea: return 136;
ffffffff80002871:	be 88 00 00 00       	mov    $0x88,%esi
ffffffff80002876:	e9 65 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00eb: return 137;
ffffffff8000287b:	be 89 00 00 00       	mov    $0x89,%esi
ffffffff80002880:	e9 5b f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ec: return 141;
ffffffff80002885:	be 8d 00 00 00       	mov    $0x8d,%esi
ffffffff8000288a:	e9 51 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ed: return 161;
ffffffff8000288f:	be a1 00 00 00       	mov    $0xa1,%esi
ffffffff80002894:	e9 47 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ee: return 140;
ffffffff80002899:	be 8c 00 00 00       	mov    $0x8c,%esi
ffffffff8000289e:	e9 3d f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ef: return 139;
ffffffff800028a3:	be 8b 00 00 00       	mov    $0x8b,%esi
ffffffff800028a8:	e9 33 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f1: return 164;
ffffffff800028ad:	be a4 00 00 00       	mov    $0xa4,%esi
ffffffff800028b2:	e9 29 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f2: return 149;
ffffffff800028b7:	be 95 00 00 00       	mov    $0x95,%esi
ffffffff800028bc:	e9 1f f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f3: return 162;
ffffffff800028c1:	be a2 00 00 00       	mov    $0xa2,%esi
ffffffff800028c6:	e9 15 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f4: return 147;
ffffffff800028cb:	be 93 00 00 00       	mov    $0x93,%esi
ffffffff800028d0:	e9 0b f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00f6: return 148;
ffffffff800028d5:	be 94 00 00 00       	mov    $0x94,%esi
ffffffff800028da:	e9 01 f8 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00a1: return 173;
ffffffff800028df:	be ad 00 00 00       	mov    $0xad,%esi
ffffffff800028e4:	e9 f7 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00a2: return 155;
ffffffff800028e9:	be 9b 00 00 00       	mov    $0x9b,%esi
ffffffff800028ee:	e9 ed f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00a3: return 156;
ffffffff800028f3:	be 9c 00 00 00       	mov    $0x9c,%esi
ffffffff800028f8:	e9 e3 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00a5: return 157;
ffffffff800028fd:	be 9d 00 00 00       	mov    $0x9d,%esi
ffffffff80002902:	e9 d9 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00a7: return 21;
ffffffff80002907:	be 15 00 00 00       	mov    $0x15,%esi
ffffffff8000290c:	e9 cf f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00aa: return 166;
ffffffff80002911:	be a6 00 00 00       	mov    $0xa6,%esi
ffffffff80002916:	e9 c5 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ab: return 174;
ffffffff8000291b:	be ae 00 00 00       	mov    $0xae,%esi
ffffffff80002920:	e9 bb f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ac: return 170;
ffffffff80002925:	be aa 00 00 00       	mov    $0xaa,%esi
ffffffff8000292a:	e9 b1 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00b0: return 248;
ffffffff8000292f:	be f8 00 00 00       	mov    $0xf8,%esi
ffffffff80002934:	e9 a7 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00b1: return 241;
ffffffff80002939:	be f1 00 00 00       	mov    $0xf1,%esi
ffffffff8000293e:	e9 9d f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00b2: return 253;
ffffffff80002943:	be fd 00 00 00       	mov    $0xfd,%esi
ffffffff80002948:	e9 93 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00b5: return 230;
ffffffff8000294d:	be e6 00 00 00       	mov    $0xe6,%esi
ffffffff80002952:	e9 89 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00b7: return 250;
ffffffff80002957:	be fa 00 00 00       	mov    $0xfa,%esi
ffffffff8000295c:	e9 7f f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00ba: return 167;
ffffffff80002961:	be a7 00 00 00       	mov    $0xa7,%esi
ffffffff80002966:	e9 75 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x00b6: return 20;
ffffffff8000296b:	be 14 00 00 00       	mov    $0x14,%esi
ffffffff80002970:	e9 6b f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2500: return 196;
ffffffff80002975:	be c4 00 00 00       	mov    $0xc4,%esi
ffffffff8000297a:	e9 61 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x255e: return 198;
ffffffff8000297f:	be c6 00 00 00       	mov    $0xc6,%esi
ffffffff80002984:	e9 57 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x255f: return 199;
ffffffff80002989:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8000298e:	e9 4d f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2560: return 204;
ffffffff80002993:	be cc 00 00 00       	mov    $0xcc,%esi
ffffffff80002998:	e9 43 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2561: return 181;
ffffffff8000299d:	be b5 00 00 00       	mov    $0xb5,%esi
ffffffff800029a2:	e9 39 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2562: return 182;
ffffffff800029a7:	be b6 00 00 00       	mov    $0xb6,%esi
ffffffff800029ac:	e9 2f f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2563: return 185;
ffffffff800029b1:	be b9 00 00 00       	mov    $0xb9,%esi
ffffffff800029b6:	e9 25 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2564: return 209;
ffffffff800029bb:	be d1 00 00 00       	mov    $0xd1,%esi
ffffffff800029c0:	e9 1b f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2565: return 210;
ffffffff800029c5:	be d2 00 00 00       	mov    $0xd2,%esi
ffffffff800029ca:	e9 11 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2566: return 203;
ffffffff800029cf:	be cb 00 00 00       	mov    $0xcb,%esi
ffffffff800029d4:	e9 07 f7 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2567: return 207;
ffffffff800029d9:	be cf 00 00 00       	mov    $0xcf,%esi
ffffffff800029de:	e9 fd f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2568: return 208;
ffffffff800029e3:	be d0 00 00 00       	mov    $0xd0,%esi
ffffffff800029e8:	e9 f3 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2569: return 202;
ffffffff800029ed:	be ca 00 00 00       	mov    $0xca,%esi
ffffffff800029f2:	e9 e9 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x256a: return 216;
ffffffff800029f7:	be d8 00 00 00       	mov    $0xd8,%esi
ffffffff800029fc:	e9 df f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x256b: return 215;
ffffffff80002a01:	be d7 00 00 00       	mov    $0xd7,%esi
ffffffff80002a06:	e9 d5 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x256c: return 206;
ffffffff80002a0b:	be ce 00 00 00       	mov    $0xce,%esi
ffffffff80002a10:	e9 cb f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2580: return 223;
ffffffff80002a15:	be df 00 00 00       	mov    $0xdf,%esi
ffffffff80002a1a:	e9 c1 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2584: return 220;
ffffffff80002a1f:	be dc 00 00 00       	mov    $0xdc,%esi
ffffffff80002a24:	e9 b7 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2588: return 219;
ffffffff80002a29:	be db 00 00 00       	mov    $0xdb,%esi
ffffffff80002a2e:	e9 ad f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x258c: return 221;
ffffffff80002a33:	be dd 00 00 00       	mov    $0xdd,%esi
ffffffff80002a38:	e9 a3 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2590: return 222;
ffffffff80002a3d:	be de 00 00 00       	mov    $0xde,%esi
ffffffff80002a42:	e9 99 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2591: return 176;
ffffffff80002a47:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff80002a4c:	e9 8f f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2592: return 177;
ffffffff80002a51:	be b1 00 00 00       	mov    $0xb1,%esi
ffffffff80002a56:	e9 85 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2593: return 178;
ffffffff80002a5b:	be b2 00 00 00       	mov    $0xb2,%esi
ffffffff80002a60:	e9 7b f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25a0: return 254;
ffffffff80002a65:	be fe 00 00 00       	mov    $0xfe,%esi
ffffffff80002a6a:	e9 71 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25ac: return 22;
ffffffff80002a6f:	be 16 00 00 00       	mov    $0x16,%esi
ffffffff80002a74:	e9 67 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25b2: return 30;
ffffffff80002a79:	be 1e 00 00 00       	mov    $0x1e,%esi
ffffffff80002a7e:	e9 5d f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25ba: return 16;
ffffffff80002a83:	be 10 00 00 00       	mov    $0x10,%esi
ffffffff80002a88:	e9 53 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25bc: return 31;
ffffffff80002a8d:	be 1f 00 00 00       	mov    $0x1f,%esi
ffffffff80002a92:	e9 49 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25c4: return 17;
ffffffff80002a97:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80002a9c:	e9 3f f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25cb: return 9;
ffffffff80002aa1:	be 09 00 00 00       	mov    $0x9,%esi
ffffffff80002aa6:	e9 35 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25d8: return 8;
ffffffff80002aab:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff80002ab0:	e9 2b f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x25d9: return 10;
ffffffff80002ab5:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80002aba:	e9 21 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2534: return 193;
ffffffff80002abf:	be c1 00 00 00       	mov    $0xc1,%esi
ffffffff80002ac4:	e9 17 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x253c: return 197;
ffffffff80002ac9:	be c5 00 00 00       	mov    $0xc5,%esi
ffffffff80002ace:	e9 0d f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2550: return 205;
ffffffff80002ad3:	be cd 00 00 00       	mov    $0xcd,%esi
ffffffff80002ad8:	e9 03 f6 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2551: return 186;
ffffffff80002add:	be ba 00 00 00       	mov    $0xba,%esi
ffffffff80002ae2:	e9 f9 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2552: return 213;
ffffffff80002ae7:	be d5 00 00 00       	mov    $0xd5,%esi
ffffffff80002aec:	e9 ef f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2553: return 214;
ffffffff80002af1:	be d6 00 00 00       	mov    $0xd6,%esi
ffffffff80002af6:	e9 e5 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2554: return 201;
ffffffff80002afb:	be c9 00 00 00       	mov    $0xc9,%esi
ffffffff80002b00:	e9 db f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2555: return 184;
ffffffff80002b05:	be b8 00 00 00       	mov    $0xb8,%esi
ffffffff80002b0a:	e9 d1 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2556: return 183;
ffffffff80002b0f:	be b7 00 00 00       	mov    $0xb7,%esi
ffffffff80002b14:	e9 c7 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2557: return 187;
ffffffff80002b19:	be bb 00 00 00       	mov    $0xbb,%esi
ffffffff80002b1e:	e9 bd f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2558: return 212;
ffffffff80002b23:	be d4 00 00 00       	mov    $0xd4,%esi
ffffffff80002b28:	e9 b3 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2559: return 211;
ffffffff80002b2d:	be d3 00 00 00       	mov    $0xd3,%esi
ffffffff80002b32:	e9 a9 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x255a: return 200;
ffffffff80002b37:	be c8 00 00 00       	mov    $0xc8,%esi
ffffffff80002b3c:	e9 9f f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x255b: return 190;
ffffffff80002b41:	be be 00 00 00       	mov    $0xbe,%esi
ffffffff80002b46:	e9 95 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x255c: return 189;
ffffffff80002b4b:	be bd 00 00 00       	mov    $0xbd,%esi
ffffffff80002b50:	e9 8b f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x255d: return 188;
ffffffff80002b55:	be bc 00 00 00       	mov    $0xbc,%esi
ffffffff80002b5a:	e9 81 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2502: return 179;
ffffffff80002b5f:	be b3 00 00 00       	mov    $0xb3,%esi
ffffffff80002b64:	e9 77 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x250c: return 218;
ffffffff80002b69:	be da 00 00 00       	mov    $0xda,%esi
ffffffff80002b6e:	e9 6d f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2510: return 191;
ffffffff80002b73:	be bf 00 00 00       	mov    $0xbf,%esi
ffffffff80002b78:	e9 63 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2514: return 192;
ffffffff80002b7d:	be c0 00 00 00       	mov    $0xc0,%esi
ffffffff80002b82:	e9 59 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2518: return 217;
ffffffff80002b87:	be d9 00 00 00       	mov    $0xd9,%esi
ffffffff80002b8c:	e9 4f f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x251c: return 195;
ffffffff80002b91:	be c3 00 00 00       	mov    $0xc3,%esi
ffffffff80002b96:	e9 45 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2524: return 180;
ffffffff80002b9b:	be b4 00 00 00       	mov    $0xb4,%esi
ffffffff80002ba0:	e9 3b f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x252c: return 194;
ffffffff80002ba5:	be c2 00 00 00       	mov    $0xc2,%esi
ffffffff80002baa:	e9 31 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x266b: return 14;
ffffffff80002baf:	be 0e 00 00 00       	mov    $0xe,%esi
ffffffff80002bb4:	e9 27 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x263b: return 2;
ffffffff80002bb9:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80002bbe:	e9 1d f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x263c: return 15;
ffffffff80002bc3:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80002bc8:	e9 13 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2640: return 12;
ffffffff80002bcd:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff80002bd2:	e9 09 f5 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2642: return 11;
ffffffff80002bd7:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80002bdc:	e9 ff f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2660: return 6;
ffffffff80002be1:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff80002be6:	e9 f5 f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2663: return 5;
ffffffff80002beb:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80002bf0:	e9 eb f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2666: return 4;
ffffffff80002bf5:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80002bfa:	e9 e1 f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x266a: return 13;
ffffffff80002bff:	be 0d 00 00 00       	mov    $0xd,%esi
ffffffff80002c04:	e9 d7 f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
        case 0x2665: return 3;
ffffffff80002c09:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80002c0e:	e9 cd f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
    switch (code_point) {
ffffffff80002c13:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80002c18:	e9 c3 f4 ff ff       	jmp    ffffffff800020e0 <flanterm_write+0x460>
ffffffff80002c1d:	0f 1f 00             	nopl   (%rax)
                ctx->scroll(ctx);
ffffffff80002c20:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002c23:	41 ff 95 68 01 00 00 	call   *0x168(%r13)
                ctx->set_cursor_pos(ctx, (ctx->oob_output & FLANTERM_OOB_OUTPUT_ONLCR) ? 0 : x, y);
ffffffff80002c2a:	31 f6                	xor    %esi,%esi
ffffffff80002c2c:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002c31:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002c34:	41 f6 85 b8 00 00 00 	testb  $0x10,0xb8(%r13)
ffffffff80002c3b:	10 
ffffffff80002c3c:	48 0f 44 74 24 20    	cmove  0x20(%rsp),%rsi
ffffffff80002c42:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff80002c49:	e9 1c f1 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
                ctx->set_cursor_pos(ctx, ctx->cols - 1, y);
ffffffff80002c4e:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
ffffffff80002c52:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002c55:	4c 89 c2             	mov    %r8,%rdx
ffffffff80002c58:	ff d1                	call   *%rcx
                return;
ffffffff80002c5a:	e9 0b f1 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
    if (ctx->rrr == true) {
ffffffff80002c5f:	41 80 7d 0f 00       	cmpb   $0x0,0xf(%r13)
ffffffff80002c64:	0f 84 4e 02 00 00    	je     ffffffff80002eb8 <flanterm_write+0x1238>
        ctx->esc_values_i++;
ffffffff80002c6a:	48 83 c2 01          	add    $0x1,%rdx
        ctx->rrr = false;
ffffffff80002c6e:	41 c6 45 0f 00       	movb   $0x0,0xf(%r13)
        ctx->esc_values_i++;
ffffffff80002c73:	49 89 55 40          	mov    %rdx,0x40(%r13)
        if (c == ';')
ffffffff80002c77:	41 80 ff 3b          	cmp    $0x3b,%r15b
ffffffff80002c7b:	0f 84 e9 f0 ff ff    	je     ffffffff80001d6a <flanterm_write+0xea>
    switch (c) {
ffffffff80002c81:	41 80 ff 4b          	cmp    $0x4b,%r15b
ffffffff80002c85:	0f 8f 1e 02 00 00    	jg     ffffffff80002ea9 <flanterm_write+0x1229>
ffffffff80002c8b:	31 f6                	xor    %esi,%esi
ffffffff80002c8d:	41 80 ff 49          	cmp    $0x49,%r15b
ffffffff80002c91:	40 0f 9e c6          	setle  %sil
    for (size_t i = ctx->esc_values_i; i < FLANTERM_MAX_ESC_VALUES; i++) {
ffffffff80002c95:	48 83 fa 0f          	cmp    $0xf,%rdx
ffffffff80002c99:	77 20                	ja     ffffffff80002cbb <flanterm_write+0x103b>
ffffffff80002c9b:	49 8d 44 95 78       	lea    0x78(%r13,%rdx,4),%rax
ffffffff80002ca0:	49 8d bd b8 00 00 00 	lea    0xb8(%r13),%rdi
ffffffff80002ca7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80002cae:	00 00 
        ctx->esc_values[i] = esc_default;
ffffffff80002cb0:	89 30                	mov    %esi,(%rax)
    for (size_t i = ctx->esc_values_i; i < FLANTERM_MAX_ESC_VALUES; i++) {
ffffffff80002cb2:	48 83 c0 04          	add    $0x4,%rax
ffffffff80002cb6:	48 39 f8             	cmp    %rdi,%rax
ffffffff80002cb9:	75 f5                	jne    ffffffff80002cb0 <flanterm_write+0x1030>
    if (ctx->dec_private == true) {
ffffffff80002cbb:	41 80 7d 14 00       	cmpb   $0x0,0x14(%r13)
ffffffff80002cc0:	0f 85 89 02 00 00    	jne    ffffffff80002f4f <flanterm_write+0x12cf>
    bool r = ctx->scroll_enabled;
ffffffff80002cc6:	41 0f b6 45 0a       	movzbl 0xa(%r13),%eax
ffffffff80002ccb:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80002ccf:	48 8d 54 24 28       	lea    0x28(%rsp),%rdx
ffffffff80002cd4:	4c 89 ef             	mov    %r13,%rdi
    ctx->scroll_enabled = false;
ffffffff80002cd7:	41 c6 45 0a 00       	movb   $0x0,0xa(%r13)
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80002cdc:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    bool r = ctx->scroll_enabled;
ffffffff80002ce1:	88 44 24 08          	mov    %al,0x8(%rsp)
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80002ce5:	41 ff 95 08 01 00 00 	call   *0x108(%r13)
    switch (c) {
ffffffff80002cec:	41 8d 47 c0          	lea    -0x40(%r15),%eax
ffffffff80002cf0:	3c 35                	cmp    $0x35,%al
ffffffff80002cf2:	77 6f                	ja     ffffffff80002d63 <flanterm_write+0x10e3>
ffffffff80002cf4:	48 8d 0d d1 4f 00 00 	lea    0x4fd1(%rip),%rcx        # ffffffff80007ccc <builtin_font+0x1ccc>
ffffffff80002cfb:	0f b6 c0             	movzbl %al,%eax
ffffffff80002cfe:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
ffffffff80002d02:	48 01 c8             	add    %rcx,%rax
ffffffff80002d05:	0f b6 4c 24 10       	movzbl 0x10(%rsp),%ecx
ffffffff80002d0a:	3e ff e0             	notrack jmp *%rax
            if (ctx->esc_values[0] != 0) {
ffffffff80002d0d:	41 8b 45 78          	mov    0x78(%r13),%eax
ffffffff80002d11:	85 c0                	test   %eax,%eax
ffffffff80002d13:	74 07                	je     ffffffff80002d1c <flanterm_write+0x109c>
                ctx->esc_values[0]--;
ffffffff80002d15:	83 e8 01             	sub    $0x1,%eax
ffffffff80002d18:	41 89 45 78          	mov    %eax,0x78(%r13)
            if (ctx->esc_values[1] != 0) {
ffffffff80002d1c:	41 8b 45 7c          	mov    0x7c(%r13),%eax
ffffffff80002d20:	85 c0                	test   %eax,%eax
ffffffff80002d22:	74 07                	je     ffffffff80002d2b <flanterm_write+0x10ab>
                ctx->esc_values[1]--;
ffffffff80002d24:	83 e8 01             	sub    $0x1,%eax
ffffffff80002d27:	41 89 45 7c          	mov    %eax,0x7c(%r13)
            if (ctx->esc_values[1] >= ctx->cols)
ffffffff80002d2b:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff80002d32:	41 8b 75 7c          	mov    0x7c(%r13),%esi
ffffffff80002d36:	48 39 c6             	cmp    %rax,%rsi
ffffffff80002d39:	72 07                	jb     ffffffff80002d42 <flanterm_write+0x10c2>
                ctx->esc_values[1] = ctx->cols - 1;
ffffffff80002d3b:	8d 70 ff             	lea    -0x1(%rax),%esi
ffffffff80002d3e:	41 89 75 7c          	mov    %esi,0x7c(%r13)
            if (ctx->esc_values[0] >= ctx->rows)
ffffffff80002d42:	49 8b 85 e0 00 00 00 	mov    0xe0(%r13),%rax
ffffffff80002d49:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff80002d4d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80002d50:	72 07                	jb     ffffffff80002d59 <flanterm_write+0x10d9>
                ctx->esc_values[0] = ctx->rows - 1;
ffffffff80002d52:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002d55:	41 89 55 78          	mov    %edx,0x78(%r13)
            ctx->set_cursor_pos(ctx, x, ctx->esc_values[0]);
ffffffff80002d59:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002d5c:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
    ctx->scroll_enabled = r;
ffffffff80002d63:	0f b6 44 24 08       	movzbl 0x8(%rsp),%eax
ffffffff80002d68:	41 88 45 0a          	mov    %al,0xa(%r13)
ffffffff80002d6c:	e9 fc f6 ff ff       	jmp    ffffffff8000246d <flanterm_write+0x7ed>
    if (ctx->esc_values_i == 0) {
ffffffff80002d71:	49 8b 55 40          	mov    0x40(%r13),%rdx
ffffffff80002d75:	48 85 d2             	test   %rdx,%rdx
ffffffff80002d78:	74 e9                	je     ffffffff80002d63 <flanterm_write+0x10e3>
    switch (c) {
ffffffff80002d7a:	41 80 ff 68          	cmp    $0x68,%r15b
ffffffff80002d7e:	74 08                	je     ffffffff80002d88 <flanterm_write+0x1108>
ffffffff80002d80:	41 80 ff 6c          	cmp    $0x6c,%r15b
ffffffff80002d84:	75 dd                	jne    ffffffff80002d63 <flanterm_write+0x10e3>
            set = false; break;
ffffffff80002d86:	31 c9                	xor    %ecx,%ecx
    switch (ctx->esc_values[0]) {
ffffffff80002d88:	41 83 7d 78 04       	cmpl   $0x4,0x78(%r13)
ffffffff80002d8d:	0f 84 4f 0a 00 00    	je     ffffffff800037e2 <flanterm_write+0x1b62>
    if (ctx->callback != NULL) {
ffffffff80002d93:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff80002d9a:	48 85 c0             	test   %rax,%rax
ffffffff80002d9d:	74 c4                	je     ffffffff80002d63 <flanterm_write+0x10e3>
        ctx->callback(ctx, FLANTERM_CB_MODE, ctx->esc_values_i, (uintptr_t)ctx->esc_values, c);
ffffffff80002d9f:	49 8d 4d 78          	lea    0x78(%r13),%rcx
ffffffff80002da3:	45 0f b6 c7          	movzbl %r15b,%r8d
ffffffff80002da7:	be 46 00 00 00       	mov    $0x46,%esi
ffffffff80002dac:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002daf:	ff d0                	call   *%rax
ffffffff80002db1:	eb b0                	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            ctx->esc_values[0] -= 1;
ffffffff80002db3:	41 8b 45 78          	mov    0x78(%r13),%eax
            if (ctx->esc_values[0] >= ctx->cols)
ffffffff80002db7:	49 8b 95 e8 00 00 00 	mov    0xe8(%r13),%rdx
            ctx->esc_values[0] -= 1;
ffffffff80002dbe:	83 e8 01             	sub    $0x1,%eax
ffffffff80002dc1:	41 89 45 78          	mov    %eax,0x78(%r13)
            if (ctx->esc_values[0] >= ctx->cols)
ffffffff80002dc5:	48 39 d0             	cmp    %rdx,%rax
ffffffff80002dc8:	72 07                	jb     ffffffff80002dd1 <flanterm_write+0x1151>
                ctx->esc_values[0] = ctx->cols - 1;
ffffffff80002dca:	83 ea 01             	sub    $0x1,%edx
ffffffff80002dcd:	41 89 55 78          	mov    %edx,0x78(%r13)
            ctx->set_cursor_pos(ctx, ctx->esc_values[0], y);
ffffffff80002dd1:	41 8b 75 78          	mov    0x78(%r13),%esi
ffffffff80002dd5:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002dda:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002ddd:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff80002de4:	e9 7a ff ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            if (x + ctx->esc_values[0] > ctx->cols - 1)
ffffffff80002de9:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff80002dee:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff80002df5:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff80002df9:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff80002dfd:	48 8d 3c 0a          	lea    (%rdx,%rcx,1),%rdi
ffffffff80002e01:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80002e04:	76 09                	jbe    ffffffff80002e0f <flanterm_write+0x118f>
                ctx->esc_values[0] = (ctx->cols - 1) - x;
ffffffff80002e06:	29 c8                	sub    %ecx,%eax
ffffffff80002e08:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002e0b:	41 89 55 78          	mov    %edx,0x78(%r13)
            ctx->set_cursor_pos(ctx, x + ctx->esc_values[0], y);
ffffffff80002e0f:	48 8d 34 0a          	lea    (%rdx,%rcx,1),%rsi
ffffffff80002e13:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002e16:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002e1b:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff80002e22:	e9 3c ff ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            x = 0;
ffffffff80002e27:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
ffffffff80002e2e:	00 00 
            if (y + ctx->esc_values[0] > ctx->rows - 1)
ffffffff80002e30:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff80002e35:	49 8b 85 e0 00 00 00 	mov    0xe0(%r13),%rax
ffffffff80002e3c:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff80002e40:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff80002e44:	48 8d 3c 0a          	lea    (%rdx,%rcx,1),%rdi
ffffffff80002e48:	48 39 f7             	cmp    %rsi,%rdi
ffffffff80002e4b:	76 09                	jbe    ffffffff80002e56 <flanterm_write+0x11d6>
                ctx->esc_values[0] = (ctx->rows - 1) - y;
ffffffff80002e4d:	29 c8                	sub    %ecx,%eax
ffffffff80002e4f:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80002e52:	41 89 55 78          	mov    %edx,0x78(%r13)
            if ((ctx->scroll_top_margin >= orig_y && ctx->scroll_top_margin <= dest_y)
ffffffff80002e56:	49 8b 75 68          	mov    0x68(%r13),%rsi
            size_t dest_y = y + ctx->esc_values[0];
ffffffff80002e5a:	48 01 ca             	add    %rcx,%rdx
             || (ctx->scroll_bottom_margin >= dest_y && ctx->scroll_bottom_margin <= orig_y)) {
ffffffff80002e5d:	49 8b 45 70          	mov    0x70(%r13),%rax
            if ((ctx->scroll_top_margin >= orig_y && ctx->scroll_top_margin <= dest_y)
ffffffff80002e61:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80002e64:	72 05                	jb     ffffffff80002e6b <flanterm_write+0x11eb>
ffffffff80002e66:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80002e69:	76 05                	jbe    ffffffff80002e70 <flanterm_write+0x11f0>
             || (ctx->scroll_bottom_margin >= orig_y && ctx->scroll_bottom_margin <= dest_y)) {
ffffffff80002e6b:	48 39 c1             	cmp    %rax,%rcx
ffffffff80002e6e:	77 09                	ja     ffffffff80002e79 <flanterm_write+0x11f9>
            if (will_be_in_scroll_region && dest_y >= ctx->scroll_bottom_margin) {
ffffffff80002e70:	48 39 c2             	cmp    %rax,%rdx
ffffffff80002e73:	0f 83 b8 08 00 00    	jae    ffffffff80003731 <flanterm_write+0x1ab1>
            ctx->set_cursor_pos(ctx, x, ctx->esc_values[0]);
ffffffff80002e79:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80002e7e:	e9 d6 fe ff ff       	jmp    ffffffff80002d59 <flanterm_write+0x10d9>
ffffffff80002e83:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    switch (c) {
ffffffff80002e88:	41 8d 57 d5          	lea    -0x2b(%r15),%edx
ffffffff80002e8c:	80 fa 53             	cmp    $0x53,%dl
ffffffff80002e8f:	0f 87 68 ef ff ff    	ja     ffffffff80001dfd <flanterm_write+0x17d>
ffffffff80002e95:	48 8d 0d 08 4f 00 00 	lea    0x4f08(%rip),%rcx        # ffffffff80007da4 <builtin_font+0x1da4>
ffffffff80002e9c:	0f b6 d2             	movzbl %dl,%edx
ffffffff80002e9f:	48 63 14 91          	movslq (%rcx,%rdx,4),%rdx
ffffffff80002ea3:	48 01 ca             	add    %rcx,%rdx
ffffffff80002ea6:	3e ff e2             	notrack jmp *%rdx
    switch (c) {
ffffffff80002ea9:	31 f6                	xor    %esi,%esi
ffffffff80002eab:	41 80 ff 71          	cmp    $0x71,%r15b
ffffffff80002eaf:	40 0f 95 c6          	setne  %sil
ffffffff80002eb3:	e9 dd fd ff ff       	jmp    ffffffff80002c95 <flanterm_write+0x1015>
    } else if (c == ';') {
ffffffff80002eb8:	41 80 ff 3b          	cmp    $0x3b,%r15b
ffffffff80002ebc:	0f 85 bf fd ff ff    	jne    ffffffff80002c81 <flanterm_write+0x1001>
        if (ctx->esc_values_i == FLANTERM_MAX_ESC_VALUES) {
ffffffff80002ec2:	48 83 fa 10          	cmp    $0x10,%rdx
ffffffff80002ec6:	0f 84 9e ee ff ff    	je     ffffffff80001d6a <flanterm_write+0xea>
        ctx->esc_values[ctx->esc_values_i] = 0;
ffffffff80002ecc:	41 c7 44 95 78 00 00 	movl   $0x0,0x78(%r13,%rdx,4)
ffffffff80002ed3:	00 00 
        ctx->esc_values_i++;
ffffffff80002ed5:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80002ed9:	49 89 55 40          	mov    %rdx,0x40(%r13)
        return;
ffffffff80002edd:	e9 88 ee ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
                ctx->scroll(ctx);
ffffffff80002ee2:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002ee5:	41 ff 95 68 01 00 00 	call   *0x168(%r13)
                ctx->set_cursor_pos(ctx, 0, y);
ffffffff80002eec:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002ef1:	31 f6                	xor    %esi,%esi
ffffffff80002ef3:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002ef6:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff80002efd:	e9 9e f3 ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
                ctx->scroll(ctx);
ffffffff80002f02:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002f05:	41 ff 95 68 01 00 00 	call   *0x168(%r13)
                ctx->set_cursor_pos(ctx, x, y);
ffffffff80002f0c:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002f11:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80002f16:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002f19:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff80002f20:	e9 7b f3 ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
                ctx->revscroll(ctx);
ffffffff80002f25:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002f28:	41 ff 95 70 01 00 00 	call   *0x170(%r13)
                ctx->set_cursor_pos(ctx, 0, y);
ffffffff80002f2f:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80002f34:	31 f6                	xor    %esi,%esi
ffffffff80002f36:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002f39:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
ffffffff80002f40:	e9 5b f3 ff ff       	jmp    ffffffff800022a0 <flanterm_write+0x620>
                ctx->dec_private = true;
ffffffff80002f45:	41 c6 45 14 01       	movb   $0x1,0x14(%r13)
                return;
ffffffff80002f4a:	e9 1b ee ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
    ctx->dec_private = false;
ffffffff80002f4f:	41 c6 45 14 00       	movb   $0x0,0x14(%r13)
    if (ctx->esc_values_i == 0) {
ffffffff80002f54:	48 85 d2             	test   %rdx,%rdx
ffffffff80002f57:	0f 84 10 f5 ff ff    	je     ffffffff8000246d <flanterm_write+0x7ed>
    switch (c) {
ffffffff80002f5d:	41 80 ff 68          	cmp    $0x68,%r15b
ffffffff80002f61:	0f 84 9a 00 00 00    	je     ffffffff80003001 <flanterm_write+0x1381>
ffffffff80002f67:	41 80 ff 6c          	cmp    $0x6c,%r15b
ffffffff80002f6b:	0f 85 fc f4 ff ff    	jne    ffffffff8000246d <flanterm_write+0x7ed>
    switch (ctx->esc_values[0]) {
ffffffff80002f71:	41 83 7d 78 19       	cmpl   $0x19,0x78(%r13)
ffffffff80002f76:	0f 84 fb 08 00 00    	je     ffffffff80003877 <flanterm_write+0x1bf7>
    if (ctx->callback != NULL) {
ffffffff80002f7c:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff80002f83:	48 85 c0             	test   %rax,%rax
ffffffff80002f86:	0f 84 e1 f4 ff ff    	je     ffffffff8000246d <flanterm_write+0x7ed>
        ctx->callback(ctx, FLANTERM_CB_DEC, ctx->esc_values_i, (uintptr_t)ctx->esc_values, c);
ffffffff80002f8c:	49 8d 4d 78          	lea    0x78(%r13),%rcx
ffffffff80002f90:	45 0f b6 c7          	movzbl %r15b,%r8d
ffffffff80002f94:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80002f99:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002f9c:	ff d0                	call   *%rax
ffffffff80002f9e:	e9 ca f4 ff ff       	jmp    ffffffff8000246d <flanterm_write+0x7ed>
            x = 0;
ffffffff80002fa3:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
ffffffff80002faa:	00 00 
            if (ctx->esc_values[0] > y)
ffffffff80002fac:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
ffffffff80002fb1:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff80002fb5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80002fb8:	76 06                	jbe    ffffffff80002fc0 <flanterm_write+0x1340>
                ctx->esc_values[0] = y;
ffffffff80002fba:	41 89 45 78          	mov    %eax,0x78(%r13)
ffffffff80002fbe:	89 c2                	mov    %eax,%edx
            size_t dest_y = y - ctx->esc_values[0];
ffffffff80002fc0:	49 89 c0             	mov    %rax,%r8
ffffffff80002fc3:	49 29 d0             	sub    %rdx,%r8
            if ((ctx->scroll_top_margin >= dest_y && ctx->scroll_top_margin <= orig_y)
ffffffff80002fc6:	49 8b 55 68          	mov    0x68(%r13),%rdx
ffffffff80002fca:	49 39 d0             	cmp    %rdx,%r8
ffffffff80002fcd:	77 09                	ja     ffffffff80002fd8 <flanterm_write+0x1358>
ffffffff80002fcf:	48 39 d0             	cmp    %rdx,%rax
ffffffff80002fd2:	0f 83 93 08 00 00    	jae    ffffffff8000386b <flanterm_write+0x1beb>
             || (ctx->scroll_bottom_margin >= dest_y && ctx->scroll_bottom_margin <= orig_y)) {
ffffffff80002fd8:	49 8b 4d 70          	mov    0x70(%r13),%rcx
ffffffff80002fdc:	48 39 c8             	cmp    %rcx,%rax
ffffffff80002fdf:	72 09                	jb     ffffffff80002fea <flanterm_write+0x136a>
ffffffff80002fe1:	49 39 c8             	cmp    %rcx,%r8
ffffffff80002fe4:	0f 86 81 08 00 00    	jbe    ffffffff8000386b <flanterm_write+0x1beb>
            ctx->set_cursor_pos(ctx, x, dest_y);
ffffffff80002fea:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80002fef:	4c 89 c2             	mov    %r8,%rdx
ffffffff80002ff2:	4c 89 ef             	mov    %r13,%rdi
ffffffff80002ff5:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff80002ffc:	e9 62 fd ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
    switch (ctx->esc_values[0]) {
ffffffff80003001:	41 83 7d 78 19       	cmpl   $0x19,0x78(%r13)
ffffffff80003006:	0f 85 70 ff ff ff    	jne    ffffffff80002f7c <flanterm_write+0x12fc>
                ctx->cursor_enabled = true;
ffffffff8000300c:	41 c6 45 09 01       	movb   $0x1,0x9(%r13)
ffffffff80003011:	e9 57 f4 ff ff       	jmp    ffffffff8000246d <flanterm_write+0x7ed>
            for (size_t i = ctx->cols - 1; ; i--) {
ffffffff80003016:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff8000301d:	4c 8d 78 ff          	lea    -0x1(%rax),%r15
ffffffff80003021:	eb 04                	jmp    ffffffff80003027 <flanterm_write+0x13a7>
ffffffff80003023:	49 83 ef 01          	sub    $0x1,%r15
                ctx->move_character(ctx, i + ctx->esc_values[0], y, i, y);
ffffffff80003027:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff8000302c:	41 8b 75 78          	mov    0x78(%r13),%esi
ffffffff80003030:	4c 89 f9             	mov    %r15,%rcx
ffffffff80003033:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003036:	4c 01 fe             	add    %r15,%rsi
ffffffff80003039:	49 89 d0             	mov    %rdx,%r8
ffffffff8000303c:	41 ff 95 60 01 00 00 	call   *0x160(%r13)
                ctx->set_cursor_pos(ctx, i, y);
ffffffff80003043:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003046:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003049:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff8000304e:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
                ctx->raw_putchar(ctx, ' ');
ffffffff80003055:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000305a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000305d:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
                if (i == x) {
ffffffff80003064:	4c 3b 7c 24 20       	cmp    0x20(%rsp),%r15
ffffffff80003069:	75 b8                	jne    ffffffff80003023 <flanterm_write+0x13a3>
            ctx->set_cursor_pos(ctx, x, y);
ffffffff8000306b:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80003070:	4c 89 fe             	mov    %r15,%rsi
ffffffff80003073:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003076:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff8000307d:	e9 e1 fc ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            if (ctx->esc_values[0] > x)
ffffffff80003082:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffffff80003087:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff8000308b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000308e:	76 06                	jbe    ffffffff80003096 <flanterm_write+0x1416>
                ctx->esc_values[0] = x;
ffffffff80003090:	41 89 45 78          	mov    %eax,0x78(%r13)
ffffffff80003094:	89 c2                	mov    %eax,%edx
            ctx->set_cursor_pos(ctx, x - ctx->esc_values[0], y);
ffffffff80003096:	48 29 d0             	sub    %rdx,%rax
ffffffff80003099:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000309c:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff800030a1:	48 89 c6             	mov    %rax,%rsi
ffffffff800030a4:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff800030ab:	e9 b3 fc ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
        case '~': FLANTERM_DEC_SPCL_PRN(0xfa)
ffffffff800030b0:	be fa 00 00 00       	mov    $0xfa,%esi
ffffffff800030b5:	4c 89 ef             	mov    %r13,%rdi
ffffffff800030b8:	ff d0                	call   *%rax
ffffffff800030ba:	e9 ab ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '}': FLANTERM_DEC_SPCL_PRN(0x9c)
ffffffff800030bf:	be 9c 00 00 00       	mov    $0x9c,%esi
ffffffff800030c4:	4c 89 ef             	mov    %r13,%rdi
ffffffff800030c7:	ff d0                	call   *%rax
ffffffff800030c9:	e9 9c ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '{': FLANTERM_DEC_SPCL_PRN(0xe3)
ffffffff800030ce:	be e3 00 00 00       	mov    $0xe3,%esi
ffffffff800030d3:	4c 89 ef             	mov    %r13,%rdi
ffffffff800030d6:	ff d0                	call   *%rax
ffffffff800030d8:	e9 8d ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'z': FLANTERM_DEC_SPCL_PRN(0xf2)
ffffffff800030dd:	be f2 00 00 00       	mov    $0xf2,%esi
ffffffff800030e2:	4c 89 ef             	mov    %r13,%rdi
ffffffff800030e5:	ff d0                	call   *%rax
ffffffff800030e7:	e9 7e ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'y': FLANTERM_DEC_SPCL_PRN(0xf3)
ffffffff800030ec:	be f3 00 00 00       	mov    $0xf3,%esi
ffffffff800030f1:	4c 89 ef             	mov    %r13,%rdi
ffffffff800030f4:	ff d0                	call   *%rax
ffffffff800030f6:	e9 6f ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'x': FLANTERM_DEC_SPCL_PRN(0xb3)
ffffffff800030fb:	be b3 00 00 00       	mov    $0xb3,%esi
ffffffff80003100:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003103:	ff d0                	call   *%rax
ffffffff80003105:	e9 60 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'w': FLANTERM_DEC_SPCL_PRN(0xc2)
ffffffff8000310a:	be c2 00 00 00       	mov    $0xc2,%esi
ffffffff8000310f:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003112:	ff d0                	call   *%rax
ffffffff80003114:	e9 51 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'v': FLANTERM_DEC_SPCL_PRN(0xc1)
ffffffff80003119:	be c1 00 00 00       	mov    $0xc1,%esi
ffffffff8000311e:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003121:	ff d0                	call   *%rax
ffffffff80003123:	e9 42 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'u': FLANTERM_DEC_SPCL_PRN(0xb4)
ffffffff80003128:	be b4 00 00 00       	mov    $0xb4,%esi
ffffffff8000312d:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003130:	ff d0                	call   *%rax
ffffffff80003132:	e9 33 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 't': FLANTERM_DEC_SPCL_PRN(0xc3)
ffffffff80003137:	be c3 00 00 00       	mov    $0xc3,%esi
ffffffff8000313c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000313f:	ff d0                	call   *%rax
ffffffff80003141:	e9 24 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 's': FLANTERM_DEC_SPCL_PRN(0x5f)
ffffffff80003146:	be 5f 00 00 00       	mov    $0x5f,%esi
ffffffff8000314b:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000314e:	ff d0                	call   *%rax
ffffffff80003150:	e9 15 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'q': FLANTERM_DEC_SPCL_PRN(0xc4)
ffffffff80003155:	be c4 00 00 00       	mov    $0xc4,%esi
ffffffff8000315a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000315d:	ff d0                	call   *%rax
ffffffff8000315f:	e9 06 ec ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            ctx->set_cursor_pos(ctx, ctx->saved_cursor_x, ctx->saved_cursor_y);
ffffffff80003164:	49 8b 55 50          	mov    0x50(%r13),%rdx
ffffffff80003168:	49 8b 75 48          	mov    0x48(%r13),%rsi
ffffffff8000316c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000316f:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff80003176:	e9 e8 fb ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
    if (!ctx->esc_values_i)
ffffffff8000317b:	4d 8b 7d 40          	mov    0x40(%r13),%r15
ffffffff8000317f:	4d 85 ff             	test   %r15,%r15
ffffffff80003182:	0f 84 1e 05 00 00    	je     ffffffff800036a6 <flanterm_write+0x1a26>
    size_t i = 0;
ffffffff80003188:	45 31 ff             	xor    %r15d,%r15d
    for (; i < ctx->esc_values_i; i++) {
ffffffff8000318b:	49 8b 4d 40          	mov    0x40(%r13),%rcx
ffffffff8000318f:	49 39 cf             	cmp    %rcx,%r15
ffffffff80003192:	0f 83 cb fb ff ff    	jae    ffffffff80002d63 <flanterm_write+0x10e3>
        if (ctx->esc_values[i] == 0) {
ffffffff80003198:	4b 8d 54 bd 00       	lea    0x0(%r13,%r15,4),%rdx
ffffffff8000319d:	8b 42 78             	mov    0x78(%rdx),%eax
ffffffff800031a0:	85 c0                	test   %eax,%eax
ffffffff800031a2:	0f 84 fe 04 00 00    	je     ffffffff800036a6 <flanterm_write+0x1a26>
        else if (ctx->esc_values[i] == 1) {
ffffffff800031a8:	8d 70 ff             	lea    -0x1(%rax),%esi
ffffffff800031ab:	83 fe 6a             	cmp    $0x6a,%esi
ffffffff800031ae:	0f 87 c3 04 00 00    	ja     ffffffff80003677 <flanterm_write+0x19f7>
ffffffff800031b4:	48 8d 3d 39 4d 00 00 	lea    0x4d39(%rip),%rdi        # ffffffff80007ef4 <builtin_font+0x1ef4>
ffffffff800031bb:	48 63 34 b7          	movslq (%rdi,%rsi,4),%rsi
ffffffff800031bf:	48 01 fe             	add    %rdi,%rsi
ffffffff800031c2:	3e ff e6             	notrack jmp *%rsi
            ctx->esc_values[0] -= 1;
ffffffff800031c5:	41 8b 45 78          	mov    0x78(%r13),%eax
            if (ctx->esc_values[0] >= ctx->rows)
ffffffff800031c9:	49 8b 95 e0 00 00 00 	mov    0xe0(%r13),%rdx
            ctx->esc_values[0] -= 1;
ffffffff800031d0:	83 e8 01             	sub    $0x1,%eax
ffffffff800031d3:	41 89 45 78          	mov    %eax,0x78(%r13)
            if (ctx->esc_values[0] >= ctx->rows)
ffffffff800031d7:	48 39 d0             	cmp    %rdx,%rax
ffffffff800031da:	72 07                	jb     ffffffff800031e3 <flanterm_write+0x1563>
                ctx->esc_values[0] = ctx->rows - 1;
ffffffff800031dc:	83 ea 01             	sub    $0x1,%edx
ffffffff800031df:	41 89 55 78          	mov    %edx,0x78(%r13)
            ctx->set_cursor_pos(ctx, x, ctx->esc_values[0]);
ffffffff800031e3:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff800031e7:	e9 8d fc ff ff       	jmp    ffffffff80002e79 <flanterm_write+0x11f9>
            ctx->get_cursor_pos(ctx, &ctx->saved_cursor_x, &ctx->saved_cursor_y);
ffffffff800031ec:	49 8d 55 50          	lea    0x50(%r13),%rdx
ffffffff800031f0:	49 8d 75 48          	lea    0x48(%r13),%rsi
ffffffff800031f4:	4c 89 ef             	mov    %r13,%rdi
ffffffff800031f7:	41 ff 95 08 01 00 00 	call   *0x108(%r13)
            break;
ffffffff800031fe:	e9 60 fb ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            if (ctx->esc_values[0] == 0) {
ffffffff80003203:	41 83 7d 78 00       	cmpl   $0x0,0x78(%r13)
ffffffff80003208:	75 08                	jne    ffffffff80003212 <flanterm_write+0x1592>
                ctx->esc_values[0] = 1;
ffffffff8000320a:	41 c7 45 78 01 00 00 	movl   $0x1,0x78(%r13)
ffffffff80003211:	00 
            if (ctx->esc_values[1] == 0) {
ffffffff80003212:	41 83 7d 7c 00       	cmpl   $0x0,0x7c(%r13)
ffffffff80003217:	75 08                	jne    ffffffff80003221 <flanterm_write+0x15a1>
                ctx->esc_values[1] = 1;
ffffffff80003219:	41 c7 45 7c 01 00 00 	movl   $0x1,0x7c(%r13)
ffffffff80003220:	00 
            ctx->scroll_bottom_margin = ctx->rows;
ffffffff80003221:	49 8b 95 e0 00 00 00 	mov    0xe0(%r13),%rdx
            if (ctx->esc_values_i > 0) {
ffffffff80003228:	49 8b 45 40          	mov    0x40(%r13),%rax
            ctx->scroll_top_margin = 0;
ffffffff8000322c:	49 c7 45 68 00 00 00 	movq   $0x0,0x68(%r13)
ffffffff80003233:	00 
            ctx->scroll_bottom_margin = ctx->rows;
ffffffff80003234:	49 89 55 70          	mov    %rdx,0x70(%r13)
            if (ctx->esc_values_i > 0) {
ffffffff80003238:	48 85 c0             	test   %rax,%rax
ffffffff8000323b:	0f 85 40 06 00 00    	jne    ffffffff80003881 <flanterm_write+0x1c01>
            if (ctx->scroll_top_margin >= ctx->rows
ffffffff80003241:	49 8b 4d 68          	mov    0x68(%r13),%rcx
ffffffff80003245:	48 89 d0             	mov    %rdx,%rax
ffffffff80003248:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8000324b:	0f 86 5b 06 00 00    	jbe    ffffffff800038ac <flanterm_write+0x1c2c>
             || ctx->scroll_top_margin >= (ctx->scroll_bottom_margin - 1)) {
ffffffff80003251:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80003255:	48 39 c8             	cmp    %rcx,%rax
ffffffff80003258:	0f 86 4e 06 00 00    	jbe    ffffffff800038ac <flanterm_write+0x1c2c>
            ctx->set_cursor_pos(ctx, 0, 0);
ffffffff8000325e:	31 d2                	xor    %edx,%edx
ffffffff80003260:	31 f6                	xor    %esi,%esi
ffffffff80003262:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003265:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            break;
ffffffff8000326c:	e9 f2 fa ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            if (ctx->callback != NULL) {
ffffffff80003271:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff80003278:	48 85 c0             	test   %rax,%rax
ffffffff8000327b:	0f 84 e2 fa ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
                ctx->callback(ctx, FLANTERM_CB_KBD_LEDS, ctx->esc_values[0], 0, 0);
ffffffff80003281:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff80003285:	45 31 c0             	xor    %r8d,%r8d
ffffffff80003288:	31 c9                	xor    %ecx,%ecx
ffffffff8000328a:	be 3c 00 00 00       	mov    $0x3c,%esi
ffffffff8000328f:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003292:	ff d0                	call   *%rax
ffffffff80003294:	e9 ca fa ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            switch (ctx->esc_values[0]) {
ffffffff80003299:	41 8b 45 78          	mov    0x78(%r13),%eax
ffffffff8000329d:	83 f8 05             	cmp    $0x5,%eax
ffffffff800032a0:	0f 84 16 05 00 00    	je     ffffffff800037bc <flanterm_write+0x1b3c>
ffffffff800032a6:	83 f8 06             	cmp    $0x6,%eax
ffffffff800032a9:	0f 85 b4 fa ff ff    	jne    ffffffff80002d63 <flanterm_write+0x10e3>
                    if (ctx->callback != NULL) {
ffffffff800032af:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff800032b6:	48 85 c0             	test   %rax,%rax
ffffffff800032b9:	0f 84 a4 fa ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
                        ctx->callback(ctx, FLANTERM_CB_POS_REPORT, x + 1, y + 1, 0);
ffffffff800032bf:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
ffffffff800032c4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff800032c9:	45 31 c0             	xor    %r8d,%r8d
ffffffff800032cc:	be 32 00 00 00       	mov    $0x32,%esi
ffffffff800032d1:	48 8d 57 01          	lea    0x1(%rdi),%rdx
ffffffff800032d5:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800032d9:	4c 89 ef             	mov    %r13,%rdi
ffffffff800032dc:	ff d0                	call   *%rax
ffffffff800032de:	e9 80 fa ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
    if (ctx->esc_values_i == 0) {
ffffffff800032e3:	49 8b 55 40          	mov    0x40(%r13),%rdx
ffffffff800032e7:	48 85 d2             	test   %rdx,%rdx
ffffffff800032ea:	0f 84 73 fa ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
    if (ctx->callback != NULL) {
ffffffff800032f0:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff800032f7:	48 85 c0             	test   %rax,%rax
ffffffff800032fa:	0f 84 63 fa ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
        ctx->callback(ctx, FLANTERM_CB_LINUX, ctx->esc_values_i, (uintptr_t)ctx->esc_values, 0);
ffffffff80003300:	49 8d 4d 78          	lea    0x78(%r13),%rcx
ffffffff80003304:	45 31 c0             	xor    %r8d,%r8d
ffffffff80003307:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff8000330c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000330f:	ff d0                	call   *%rax
ffffffff80003311:	e9 4d fa ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            ctx->scroll_top_margin = y;
ffffffff80003316:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
            size_t count = ctx->esc_values[0] > ctx->rows ? ctx->rows : ctx->esc_values[0];
ffffffff8000331b:	45 8b 7d 78          	mov    0x78(%r13),%r15d
            size_t old_scroll_top_margin = ctx->scroll_top_margin;
ffffffff8000331f:	49 8b 55 68          	mov    0x68(%r13),%rdx
            ctx->scroll_top_margin = y;
ffffffff80003323:	49 89 45 68          	mov    %rax,0x68(%r13)
            size_t count = ctx->esc_values[0] > ctx->rows ? ctx->rows : ctx->esc_values[0];
ffffffff80003327:	49 8b 85 e0 00 00 00 	mov    0xe0(%r13),%rax
ffffffff8000332e:	49 39 c7             	cmp    %rax,%r15
ffffffff80003331:	4c 0f 47 f8          	cmova  %rax,%r15
            for (size_t i = 0; i < count; i++) {
ffffffff80003335:	31 c0                	xor    %eax,%eax
ffffffff80003337:	4d 85 ff             	test   %r15,%r15
ffffffff8000333a:	74 27                	je     ffffffff80003363 <flanterm_write+0x16e3>
ffffffff8000333c:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
                ctx->revscroll(ctx);
ffffffff80003341:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003344:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff80003349:	41 ff 95 70 01 00 00 	call   *0x170(%r13)
            for (size_t i = 0; i < count; i++) {
ffffffff80003350:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff80003355:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff8000335a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000335e:	49 39 c7             	cmp    %rax,%r15
ffffffff80003361:	75 d9                	jne    ffffffff8000333c <flanterm_write+0x16bc>
            ctx->scroll_top_margin = old_scroll_top_margin;
ffffffff80003363:	49 89 55 68          	mov    %rdx,0x68(%r13)
            break;
ffffffff80003367:	e9 f7 f9 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            switch (ctx->esc_values[0]) {
ffffffff8000336c:	41 8b 45 78          	mov    0x78(%r13),%eax
ffffffff80003370:	83 f8 01             	cmp    $0x1,%eax
ffffffff80003373:	0f 84 04 04 00 00    	je     ffffffff8000377d <flanterm_write+0x1afd>
ffffffff80003379:	83 f8 02             	cmp    $0x2,%eax
ffffffff8000337c:	0f 84 b8 03 00 00    	je     ffffffff8000373a <flanterm_write+0x1aba>
ffffffff80003382:	85 c0                	test   %eax,%eax
ffffffff80003384:	0f 85 d9 f9 ff ff    	jne    ffffffff80002d63 <flanterm_write+0x10e3>
                    for (size_t i = x; i < ctx->cols; i++)
ffffffff8000338a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff8000338f:	49 89 f7             	mov    %rsi,%r15
ffffffff80003392:	49 3b b5 e8 00 00 00 	cmp    0xe8(%r13),%rsi
ffffffff80003399:	73 21                	jae    ffffffff800033bc <flanterm_write+0x173c>
                        ctx->raw_putchar(ctx, ' ');
ffffffff8000339b:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800033a0:	4c 89 ef             	mov    %r13,%rdi
                    for (size_t i = x; i < ctx->cols; i++)
ffffffff800033a3:	49 83 c7 01          	add    $0x1,%r15
                        ctx->raw_putchar(ctx, ' ');
ffffffff800033a7:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
                    for (size_t i = x; i < ctx->cols; i++)
ffffffff800033ae:	4d 3b bd e8 00 00 00 	cmp    0xe8(%r13),%r15
ffffffff800033b5:	72 e4                	jb     ffffffff8000339b <flanterm_write+0x171b>
ffffffff800033b7:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
                    ctx->set_cursor_pos(ctx, x, y);
ffffffff800033bc:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff800033c1:	4c 89 ef             	mov    %r13,%rdi
ffffffff800033c4:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
                    break;
ffffffff800033cb:	e9 93 f9 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            for (size_t i = x + ctx->esc_values[0]; i < ctx->cols; i++)
ffffffff800033d0:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff800033d4:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
ffffffff800033d9:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff800033e0:	49 01 d7             	add    %rdx,%r15
ffffffff800033e3:	49 39 c7             	cmp    %rax,%r15
ffffffff800033e6:	73 2f                	jae    ffffffff80003417 <flanterm_write+0x1797>
                ctx->move_character(ctx, i - ctx->esc_values[0], y, i, y);
ffffffff800033e8:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff800033ed:	4c 89 fe             	mov    %r15,%rsi
ffffffff800033f0:	4c 89 f9             	mov    %r15,%rcx
ffffffff800033f3:	4c 89 ef             	mov    %r13,%rdi
ffffffff800033f6:	48 29 d6             	sub    %rdx,%rsi
            for (size_t i = x + ctx->esc_values[0]; i < ctx->cols; i++)
ffffffff800033f9:	49 83 c7 01          	add    $0x1,%r15
                ctx->move_character(ctx, i - ctx->esc_values[0], y, i, y);
ffffffff800033fd:	4c 89 c2             	mov    %r8,%rdx
ffffffff80003400:	41 ff 95 60 01 00 00 	call   *0x160(%r13)
            for (size_t i = x + ctx->esc_values[0]; i < ctx->cols; i++)
ffffffff80003407:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff8000340e:	41 8b 55 78          	mov    0x78(%r13),%edx
ffffffff80003412:	49 39 c7             	cmp    %rax,%r15
ffffffff80003415:	72 d1                	jb     ffffffff800033e8 <flanterm_write+0x1768>
            ctx->set_cursor_pos(ctx, ctx->cols - ctx->esc_values[0], y);
ffffffff80003417:	48 29 d0             	sub    %rdx,%rax
ffffffff8000341a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000341d:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80003422:	48 89 c6             	mov    %rax,%rsi
ffffffff80003425:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
            size_t count = ctx->esc_values[0] > ctx->cols ? ctx->cols : ctx->esc_values[0];
ffffffff8000342c:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
ffffffff80003433:	45 8b 7d 78          	mov    0x78(%r13),%r15d
ffffffff80003437:	49 39 c7             	cmp    %rax,%r15
ffffffff8000343a:	4c 0f 47 f8          	cmova  %rax,%r15
            for (size_t i = 0; i < count; i++)
ffffffff8000343e:	31 c0                	xor    %eax,%eax
ffffffff80003440:	4d 85 ff             	test   %r15,%r15
ffffffff80003443:	74 22                	je     ffffffff80003467 <flanterm_write+0x17e7>
ffffffff80003445:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                ctx->raw_putchar(ctx, ' ');
ffffffff8000344a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000344f:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003452:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
            for (size_t i = 0; i < count; i++)
ffffffff80003459:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff8000345e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80003462:	49 39 c7             	cmp    %rax,%r15
ffffffff80003465:	75 de                	jne    ffffffff80003445 <flanterm_write+0x17c5>
                    ctx->set_cursor_pos(ctx, x, y);
ffffffff80003467:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff8000346c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80003471:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003474:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
                    break;
ffffffff8000347b:	e9 e3 f8 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            size_t count = ctx->esc_values[0] > ctx->rows ? ctx->rows : ctx->esc_values[0];
ffffffff80003480:	45 8b 7d 78          	mov    0x78(%r13),%r15d
ffffffff80003484:	49 8b 85 e0 00 00 00 	mov    0xe0(%r13),%rax
ffffffff8000348b:	49 39 c7             	cmp    %rax,%r15
ffffffff8000348e:	4c 0f 47 f8          	cmova  %rax,%r15
            for (size_t i = 0; i < count; i++) {
ffffffff80003492:	4d 85 ff             	test   %r15,%r15
ffffffff80003495:	0f 84 c8 f8 ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
ffffffff8000349b:	31 c0                	xor    %eax,%eax
ffffffff8000349d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
                ctx->scroll(ctx);
ffffffff800034a2:	4c 89 ef             	mov    %r13,%rdi
ffffffff800034a5:	41 ff 95 68 01 00 00 	call   *0x168(%r13)
            for (size_t i = 0; i < count; i++) {
ffffffff800034ac:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffffff800034b1:	48 83 c0 01          	add    $0x1,%rax
ffffffff800034b5:	49 39 c7             	cmp    %rax,%r15
ffffffff800034b8:	75 e3                	jne    ffffffff8000349d <flanterm_write+0x181d>
ffffffff800034ba:	e9 a4 f8 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            switch (ctx->esc_values[0]) {
ffffffff800034bf:	41 8b 45 78          	mov    0x78(%r13),%eax
ffffffff800034c3:	83 f8 01             	cmp    $0x1,%eax
ffffffff800034c6:	0f 84 1f 03 00 00    	je     ffffffff800037eb <flanterm_write+0x1b6b>
ffffffff800034cc:	77 52                	ja     ffffffff80003520 <flanterm_write+0x18a0>
                    size_t cols_diff = ctx->cols - (x + 1);
ffffffff800034ce:	49 8b 85 e8 00 00 00 	mov    0xe8(%r13),%rax
                    size_t rows_remaining = ctx->rows - (y + 1);
ffffffff800034d5:	4d 8b bd e0 00 00 00 	mov    0xe0(%r13),%r15
                    for (size_t i = 0; i < to_clear; i++) {
ffffffff800034dc:	31 d2                	xor    %edx,%edx
                    size_t rows_remaining = ctx->rows - (y + 1);
ffffffff800034de:	4c 2b 7c 24 28       	sub    0x28(%rsp),%r15
ffffffff800034e3:	49 83 ef 01          	sub    $0x1,%r15
                    size_t to_clear = rows_remaining * ctx->cols + cols_diff + 1;
ffffffff800034e7:	4c 0f af f8          	imul   %rax,%r15
ffffffff800034eb:	48 2b 44 24 20       	sub    0x20(%rsp),%rax
                    for (size_t i = 0; i < to_clear; i++) {
ffffffff800034f0:	49 01 c7             	add    %rax,%r15
ffffffff800034f3:	0f 84 6e ff ff ff    	je     ffffffff80003467 <flanterm_write+0x17e7>
ffffffff800034f9:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
                        ctx->raw_putchar(ctx, ' ');
ffffffff800034fe:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80003503:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003506:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
                    for (size_t i = 0; i < to_clear; i++) {
ffffffff8000350d:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
ffffffff80003512:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80003516:	49 39 d7             	cmp    %rdx,%r15
ffffffff80003519:	75 de                	jne    ffffffff800034f9 <flanterm_write+0x1879>
ffffffff8000351b:	e9 47 ff ff ff       	jmp    ffffffff80003467 <flanterm_write+0x17e7>
ffffffff80003520:	83 e8 02             	sub    $0x2,%eax
ffffffff80003523:	83 f8 01             	cmp    $0x1,%eax
ffffffff80003526:	0f 87 37 f8 ff ff    	ja     ffffffff80002d63 <flanterm_write+0x10e3>
                    ctx->clear(ctx, false);
ffffffff8000352c:	31 f6                	xor    %esi,%esi
ffffffff8000352e:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003531:	41 ff 95 f8 00 00 00 	call   *0xf8(%r13)
                    break;
ffffffff80003538:	e9 26 f8 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
        case 'n': FLANTERM_DEC_SPCL_PRN(0xc5)
ffffffff8000353d:	be c5 00 00 00       	mov    $0xc5,%esi
ffffffff80003542:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003545:	ff d0                	call   *%rax
ffffffff80003547:	e9 1e e8 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'm': FLANTERM_DEC_SPCL_PRN(0xc0)
ffffffff8000354c:	be c0 00 00 00       	mov    $0xc0,%esi
ffffffff80003551:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003554:	ff d0                	call   *%rax
ffffffff80003556:	e9 0f e8 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'l': FLANTERM_DEC_SPCL_PRN(0xda)
ffffffff8000355b:	be da 00 00 00       	mov    $0xda,%esi
ffffffff80003560:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003563:	ff d0                	call   *%rax
ffffffff80003565:	e9 00 e8 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'k': FLANTERM_DEC_SPCL_PRN(0xbf)
ffffffff8000356a:	be bf 00 00 00       	mov    $0xbf,%esi
ffffffff8000356f:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003572:	ff d0                	call   *%rax
ffffffff80003574:	e9 f1 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'j': FLANTERM_DEC_SPCL_PRN(0xd9)
ffffffff80003579:	be d9 00 00 00       	mov    $0xd9,%esi
ffffffff8000357e:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003581:	ff d0                	call   *%rax
ffffffff80003583:	e9 e2 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'h': FLANTERM_DEC_SPCL_PRN(0xb0)
ffffffff80003588:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff8000358d:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003590:	ff d0                	call   *%rax
ffffffff80003592:	e9 d3 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'g': FLANTERM_DEC_SPCL_PRN(0xf1)
ffffffff80003597:	be f1 00 00 00       	mov    $0xf1,%esi
ffffffff8000359c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000359f:	ff d0                	call   *%rax
ffffffff800035a1:	e9 c4 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'f': FLANTERM_DEC_SPCL_PRN(0xf8)
ffffffff800035a6:	be f8 00 00 00       	mov    $0xf8,%esi
ffffffff800035ab:	4c 89 ef             	mov    %r13,%rdi
ffffffff800035ae:	ff d0                	call   *%rax
ffffffff800035b0:	e9 b5 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case 'a': FLANTERM_DEC_SPCL_PRN(0xb1)
ffffffff800035b5:	be b1 00 00 00       	mov    $0xb1,%esi
ffffffff800035ba:	4c 89 ef             	mov    %r13,%rdi
ffffffff800035bd:	ff d0                	call   *%rax
ffffffff800035bf:	e9 a6 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '`': FLANTERM_DEC_SPCL_PRN(0x04)
ffffffff800035c4:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff800035c9:	4c 89 ef             	mov    %r13,%rdi
ffffffff800035cc:	ff d0                	call   *%rax
ffffffff800035ce:	e9 97 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '_': FLANTERM_DEC_SPCL_PRN(0xff)
ffffffff800035d3:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff800035d8:	4c 89 ef             	mov    %r13,%rdi
ffffffff800035db:	ff d0                	call   *%rax
ffffffff800035dd:	e9 88 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '0': FLANTERM_DEC_SPCL_PRN(0xdb)
ffffffff800035e2:	be db 00 00 00       	mov    $0xdb,%esi
ffffffff800035e7:	4c 89 ef             	mov    %r13,%rdi
ffffffff800035ea:	ff d0                	call   *%rax
ffffffff800035ec:	e9 79 e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '.': FLANTERM_DEC_SPCL_PRN(0x19)
ffffffff800035f1:	be 19 00 00 00       	mov    $0x19,%esi
ffffffff800035f6:	4c 89 ef             	mov    %r13,%rdi
ffffffff800035f9:	ff d0                	call   *%rax
ffffffff800035fb:	e9 6a e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '-': FLANTERM_DEC_SPCL_PRN(0x18)
ffffffff80003600:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80003605:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003608:	ff d0                	call   *%rax
ffffffff8000360a:	e9 5b e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case ',': FLANTERM_DEC_SPCL_PRN(0x1b)
ffffffff8000360f:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff80003614:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003617:	ff d0                	call   *%rax
ffffffff80003619:	e9 4c e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
        case '+': FLANTERM_DEC_SPCL_PRN(0x1a)
ffffffff8000361e:	be 1a 00 00 00       	mov    $0x1a,%esi
ffffffff80003623:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003626:	ff d0                	call   *%rax
ffffffff80003628:	e9 3d e7 ff ff       	jmp    ffffffff80001d6a <flanterm_write+0xea>
            if (ctx->callback != NULL) {
ffffffff8000362d:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff80003634:	48 85 c0             	test   %rax,%rax
ffffffff80003637:	0f 84 26 f7 ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
                ctx->callback(ctx, FLANTERM_CB_PRIVATE_ID, 0, 0, 0);
ffffffff8000363d:	45 31 c0             	xor    %r8d,%r8d
ffffffff80003640:	31 c9                	xor    %ecx,%ecx
ffffffff80003642:	31 d2                	xor    %edx,%edx
ffffffff80003644:	be 1e 00 00 00       	mov    $0x1e,%esi
ffffffff80003649:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000364c:	ff d0                	call   *%rax
ffffffff8000364e:	e9 10 f7 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            ctx->current_bg = ctx->esc_values[i] - offset;
ffffffff80003653:	48 8d 50 9c          	lea    -0x64(%rax),%rdx
            if (ctx->reverse_video) {
ffffffff80003657:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
            ctx->current_bg = ctx->esc_values[i] - offset;
ffffffff8000365c:	49 89 55 60          	mov    %rdx,0x60(%r13)
            offset = 100;
ffffffff80003660:	ba 64 00 00 00       	mov    $0x64,%edx
            if (ctx->reverse_video) {
ffffffff80003665:	75 2d                	jne    ffffffff80003694 <flanterm_write+0x1a14>
                ctx->set_text_bg_bright(ctx, ctx->esc_values[i] - offset);
ffffffff80003667:	48 29 d0             	sub    %rdx,%rax
ffffffff8000366a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000366d:	48 89 c6             	mov    %rax,%rsi
ffffffff80003670:	41 ff 95 28 01 00 00 	call   *0x128(%r13)
    for (; i < ctx->esc_values_i; i++) {
ffffffff80003677:	49 83 c7 01          	add    $0x1,%r15
ffffffff8000367b:	e9 0b fb ff ff       	jmp    ffffffff8000318b <flanterm_write+0x150b>
            ctx->current_primary = ctx->esc_values[i] - offset;
ffffffff80003680:	48 8d 50 a6          	lea    -0x5a(%rax),%rdx
            if (ctx->reverse_video) {
ffffffff80003684:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
            ctx->current_primary = ctx->esc_values[i] - offset;
ffffffff80003689:	49 89 55 58          	mov    %rdx,0x58(%r13)
            offset = 90;
ffffffff8000368d:	ba 5a 00 00 00       	mov    $0x5a,%edx
            if (ctx->reverse_video) {
ffffffff80003692:	75 d3                	jne    ffffffff80003667 <flanterm_write+0x19e7>
                ctx->set_text_fg_bright(ctx, ctx->esc_values[i] - offset);
ffffffff80003694:	48 29 d0             	sub    %rdx,%rax
ffffffff80003697:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000369a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000369d:	41 ff 95 20 01 00 00 	call   *0x120(%r13)
ffffffff800036a4:	eb d1                	jmp    ffffffff80003677 <flanterm_write+0x19f7>
            if (ctx->reverse_video) {
ffffffff800036a6:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
ffffffff800036ab:	74 0f                	je     ffffffff800036bc <flanterm_write+0x1a3c>
                ctx->reverse_video = false;
ffffffff800036ad:	41 c6 45 13 00       	movb   $0x0,0x13(%r13)
                ctx->swap_palette(ctx);
ffffffff800036b2:	4c 89 ef             	mov    %r13,%rdi
ffffffff800036b5:	41 ff 95 78 01 00 00 	call   *0x178(%r13)
            ctx->set_text_bg_default(ctx);
ffffffff800036bc:	4c 89 ef             	mov    %r13,%rdi
            ctx->bold = false;
ffffffff800036bf:	66 41 c7 45 11 00 00 	movw   $0x0,0x11(%r13)
            ctx->current_primary = (size_t)-1;
ffffffff800036c6:	49 c7 45 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%r13)
ffffffff800036cd:	ff 
            ctx->current_bg = (size_t)-1;
ffffffff800036ce:	49 c7 45 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%r13)
ffffffff800036d5:	ff 
            ctx->set_text_bg_default(ctx);
ffffffff800036d6:	41 ff 95 48 01 00 00 	call   *0x148(%r13)
            ctx->set_text_fg_default(ctx);
ffffffff800036dd:	4c 89 ef             	mov    %r13,%rdi
ffffffff800036e0:	41 ff 95 40 01 00 00 	call   *0x140(%r13)
            continue;
ffffffff800036e7:	eb 8e                	jmp    ffffffff80003677 <flanterm_write+0x19f7>
            if (ctx->reverse_video) {
ffffffff800036e9:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
            ctx->current_bg = (size_t)-1;
ffffffff800036ee:	49 c7 45 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%r13)
ffffffff800036f5:	ff 
            if (ctx->reverse_video) {
ffffffff800036f6:	74 0a                	je     ffffffff80003702 <flanterm_write+0x1a82>
                ctx->swap_palette(ctx);
ffffffff800036f8:	4c 89 ef             	mov    %r13,%rdi
ffffffff800036fb:	41 ff 95 78 01 00 00 	call   *0x178(%r13)
            if (!ctx->bg_bold) {
ffffffff80003702:	41 80 7d 12 00       	cmpb   $0x0,0x12(%r13)
                ctx->set_text_bg_default(ctx);
ffffffff80003707:	4c 89 ef             	mov    %r13,%rdi
            if (!ctx->bg_bold) {
ffffffff8000370a:	0f 85 4f 01 00 00    	jne    ffffffff8000385f <flanterm_write+0x1bdf>
                ctx->set_text_bg_default(ctx);
ffffffff80003710:	41 ff 95 48 01 00 00 	call   *0x148(%r13)
            if (ctx->reverse_video) {
ffffffff80003717:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
ffffffff8000371c:	0f 84 55 ff ff ff    	je     ffffffff80003677 <flanterm_write+0x19f7>
                ctx->swap_palette(ctx);
ffffffff80003722:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003725:	41 ff 95 78 01 00 00 	call   *0x178(%r13)
ffffffff8000372c:	e9 46 ff ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                dest_y = ctx->scroll_bottom_margin - 1;
ffffffff80003731:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
            ctx->set_cursor_pos(ctx, x, dest_y);
ffffffff80003735:	e9 3f f7 ff ff       	jmp    ffffffff80002e79 <flanterm_write+0x11f9>
                    ctx->set_cursor_pos(ctx, 0, y);
ffffffff8000373a:	31 f6                	xor    %esi,%esi
ffffffff8000373c:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80003741:	4c 89 ef             	mov    %r13,%rdi
                    for (size_t i = 0; i < ctx->cols; i++)
ffffffff80003744:	45 31 ff             	xor    %r15d,%r15d
                    ctx->set_cursor_pos(ctx, 0, y);
ffffffff80003747:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
                    for (size_t i = 0; i < ctx->cols; i++)
ffffffff8000374e:	49 83 bd e8 00 00 00 	cmpq   $0x0,0xe8(%r13)
ffffffff80003755:	00 
ffffffff80003756:	0f 84 0b fd ff ff    	je     ffffffff80003467 <flanterm_write+0x17e7>
                        ctx->raw_putchar(ctx, ' ');
ffffffff8000375c:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80003761:	4c 89 ef             	mov    %r13,%rdi
                    for (size_t i = 0; i < ctx->cols; i++)
ffffffff80003764:	49 83 c7 01          	add    $0x1,%r15
                        ctx->raw_putchar(ctx, ' ');
ffffffff80003768:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
                    for (size_t i = 0; i < ctx->cols; i++)
ffffffff8000376f:	4d 3b bd e8 00 00 00 	cmp    0xe8(%r13),%r15
ffffffff80003776:	72 e4                	jb     ffffffff8000375c <flanterm_write+0x1adc>
ffffffff80003778:	e9 ea fc ff ff       	jmp    ffffffff80003467 <flanterm_write+0x17e7>
                    ctx->set_cursor_pos(ctx, 0, y);
ffffffff8000377d:	31 f6                	xor    %esi,%esi
ffffffff8000377f:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffffff80003784:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003787:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
                    for (size_t i = 0; i < x; i++)
ffffffff8000378e:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
ffffffff80003794:	0f 84 c9 f5 ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
ffffffff8000379a:	45 31 ff             	xor    %r15d,%r15d
                        ctx->raw_putchar(ctx, ' ');
ffffffff8000379d:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800037a2:	4c 89 ef             	mov    %r13,%rdi
                    for (size_t i = 0; i < x; i++)
ffffffff800037a5:	49 83 c7 01          	add    $0x1,%r15
                        ctx->raw_putchar(ctx, ' ');
ffffffff800037a9:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
                    for (size_t i = 0; i < x; i++)
ffffffff800037b0:	4c 3b 7c 24 20       	cmp    0x20(%rsp),%r15
ffffffff800037b5:	72 e6                	jb     ffffffff8000379d <flanterm_write+0x1b1d>
ffffffff800037b7:	e9 a7 f5 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
                    if (ctx->callback != NULL) {
ffffffff800037bc:	49 8b 85 a8 01 00 00 	mov    0x1a8(%r13),%rax
ffffffff800037c3:	48 85 c0             	test   %rax,%rax
ffffffff800037c6:	0f 84 97 f5 ff ff    	je     ffffffff80002d63 <flanterm_write+0x10e3>
                        ctx->callback(ctx, FLANTERM_CB_STATUS_REPORT, 0, 0, 0);
ffffffff800037cc:	45 31 c0             	xor    %r8d,%r8d
ffffffff800037cf:	31 c9                	xor    %ecx,%ecx
ffffffff800037d1:	31 d2                	xor    %edx,%edx
ffffffff800037d3:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff800037d8:	4c 89 ef             	mov    %r13,%rdi
ffffffff800037db:	ff d0                	call   *%rax
ffffffff800037dd:	e9 81 f5 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
            ctx->insert_mode = set; return;
ffffffff800037e2:	41 88 4d 15          	mov    %cl,0x15(%r13)
ffffffff800037e6:	e9 78 f5 ff ff       	jmp    ffffffff80002d63 <flanterm_write+0x10e3>
                    ctx->set_cursor_pos(ctx, 0, 0);
ffffffff800037eb:	31 d2                	xor    %edx,%edx
ffffffff800037ed:	31 f6                	xor    %esi,%esi
ffffffff800037ef:	4c 89 ef             	mov    %r13,%rdi
ffffffff800037f2:	41 ff 95 00 01 00 00 	call   *0x100(%r13)
                    for (size_t yc = 0; yc < ctx->rows; yc++) {
ffffffff800037f9:	31 d2                	xor    %edx,%edx
ffffffff800037fb:	49 3b 95 e0 00 00 00 	cmp    0xe0(%r13),%rdx
ffffffff80003802:	0f 83 5b f5 ff ff    	jae    ffffffff80002d63 <flanterm_write+0x10e3>
                        for (size_t xc = 0; xc < ctx->cols; xc++) {
ffffffff80003808:	45 31 ff             	xor    %r15d,%r15d
ffffffff8000380b:	49 83 bd e8 00 00 00 	cmpq   $0x0,0xe8(%r13)
ffffffff80003812:	00 
ffffffff80003813:	75 18                	jne    ffffffff8000382d <flanterm_write+0x1bad>
ffffffff80003815:	eb 42                	jmp    ffffffff80003859 <flanterm_write+0x1bd9>
ffffffff80003817:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000381e:	00 00 
ffffffff80003820:	49 83 c7 01          	add    $0x1,%r15
ffffffff80003824:	4d 3b bd e8 00 00 00 	cmp    0xe8(%r13),%r15
ffffffff8000382b:	73 2c                	jae    ffffffff80003859 <flanterm_write+0x1bd9>
ffffffff8000382d:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
                            ctx->raw_putchar(ctx, ' ');
ffffffff80003832:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80003837:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000383a:	41 ff 95 f0 00 00 00 	call   *0xf0(%r13)
                            if (xc == x && yc == y) {
ffffffff80003841:	4c 3b 7c 24 20       	cmp    0x20(%rsp),%r15
ffffffff80003846:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
ffffffff8000384b:	75 d3                	jne    ffffffff80003820 <flanterm_write+0x1ba0>
ffffffff8000384d:	48 39 54 24 28       	cmp    %rdx,0x28(%rsp)
ffffffff80003852:	75 cc                	jne    ffffffff80003820 <flanterm_write+0x1ba0>
ffffffff80003854:	e9 17 f8 ff ff       	jmp    ffffffff80003070 <flanterm_write+0x13f0>
                    for (size_t yc = 0; yc < ctx->rows; yc++) {
ffffffff80003859:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000385d:	eb 9c                	jmp    ffffffff800037fb <flanterm_write+0x1b7b>
                ctx->set_text_bg_default_bright(ctx);
ffffffff8000385f:	41 ff 95 58 01 00 00 	call   *0x158(%r13)
ffffffff80003866:	e9 ac fe ff ff       	jmp    ffffffff80003717 <flanterm_write+0x1a97>
            if (will_be_in_scroll_region && dest_y < ctx->scroll_top_margin) {
ffffffff8000386b:	49 39 d0             	cmp    %rdx,%r8
ffffffff8000386e:	4c 0f 42 c2          	cmovb  %rdx,%r8
ffffffff80003872:	e9 73 f7 ff ff       	jmp    ffffffff80002fea <flanterm_write+0x136a>
                ctx->cursor_enabled = false;
ffffffff80003877:	41 c6 45 09 00       	movb   $0x0,0x9(%r13)
ffffffff8000387c:	e9 ec eb ff ff       	jmp    ffffffff8000246d <flanterm_write+0x7ed>
                ctx->scroll_top_margin = ctx->esc_values[0] - 1;
ffffffff80003881:	41 8b 4d 78          	mov    0x78(%r13),%ecx
ffffffff80003885:	83 e9 01             	sub    $0x1,%ecx
            if (ctx->esc_values_i > 1) {
ffffffff80003888:	48 83 e8 01          	sub    $0x1,%rax
                ctx->scroll_top_margin = ctx->esc_values[0] - 1;
ffffffff8000388c:	49 89 4d 68          	mov    %rcx,0x68(%r13)
            if (ctx->esc_values_i > 1) {
ffffffff80003890:	0f 84 ab f9 ff ff    	je     ffffffff80003241 <flanterm_write+0x15c1>
                ctx->scroll_bottom_margin = ctx->esc_values[1];
ffffffff80003896:	41 8b 45 7c          	mov    0x7c(%r13),%eax
ffffffff8000389a:	49 89 45 70          	mov    %rax,0x70(%r13)
            if (ctx->scroll_top_margin >= ctx->rows
ffffffff8000389e:	48 39 ca             	cmp    %rcx,%rdx
ffffffff800038a1:	76 09                	jbe    ffffffff800038ac <flanterm_write+0x1c2c>
             || ctx->scroll_bottom_margin > ctx->rows
ffffffff800038a3:	48 39 c2             	cmp    %rax,%rdx
ffffffff800038a6:	0f 83 a5 f9 ff ff    	jae    ffffffff80003251 <flanterm_write+0x15d1>
                ctx->scroll_top_margin = 0;
ffffffff800038ac:	49 c7 45 68 00 00 00 	movq   $0x0,0x68(%r13)
ffffffff800038b3:	00 
                ctx->scroll_bottom_margin = ctx->rows;
ffffffff800038b4:	49 89 55 70          	mov    %rdx,0x70(%r13)
ffffffff800038b8:	e9 a1 f9 ff ff       	jmp    ffffffff8000325e <flanterm_write+0x15de>
            ctx->current_bg = ctx->esc_values[i] - offset;
ffffffff800038bd:	48 8d 50 d8          	lea    -0x28(%rax),%rdx
            if (ctx->reverse_video) {
ffffffff800038c1:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
            ctx->current_bg = ctx->esc_values[i] - offset;
ffffffff800038c6:	49 89 55 60          	mov    %rdx,0x60(%r13)
            if (ctx->reverse_video) {
ffffffff800038ca:	75 54                	jne    ffffffff80003920 <flanterm_write+0x1ca0>
             || (ctx->bg_bold && !ctx->reverse_video)) {
ffffffff800038cc:	41 80 7d 12 00       	cmpb   $0x0,0x12(%r13)
            offset = 40;
ffffffff800038d1:	ba 28 00 00 00       	mov    $0x28,%edx
             || (ctx->bg_bold && !ctx->reverse_video)) {
ffffffff800038d6:	0f 85 8b fd ff ff    	jne    ffffffff80003667 <flanterm_write+0x19e7>
                ctx->set_text_bg(ctx, ctx->esc_values[i] - offset);
ffffffff800038dc:	48 29 d0             	sub    %rdx,%rax
ffffffff800038df:	4c 89 ef             	mov    %r13,%rdi
ffffffff800038e2:	48 89 c6             	mov    %rax,%rsi
ffffffff800038e5:	41 ff 95 18 01 00 00 	call   *0x118(%r13)
ffffffff800038ec:	e9 86 fd ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
            if (ctx->reverse_video) {
ffffffff800038f1:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
            ctx->current_primary = (size_t)-1;
ffffffff800038f6:	49 c7 45 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%r13)
ffffffff800038fd:	ff 
            if (ctx->reverse_video) {
ffffffff800038fe:	74 0a                	je     ffffffff8000390a <flanterm_write+0x1c8a>
                ctx->swap_palette(ctx);
ffffffff80003900:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003903:	41 ff 95 78 01 00 00 	call   *0x178(%r13)
            if (!ctx->bold) {
ffffffff8000390a:	41 80 7d 11 00       	cmpb   $0x0,0x11(%r13)
                ctx->set_text_fg_default(ctx);
ffffffff8000390f:	4c 89 ef             	mov    %r13,%rdi
            if (!ctx->bold) {
ffffffff80003912:	75 31                	jne    ffffffff80003945 <flanterm_write+0x1cc5>
                ctx->set_text_fg_default(ctx);
ffffffff80003914:	41 ff 95 40 01 00 00 	call   *0x140(%r13)
ffffffff8000391b:	e9 f7 fd ff ff       	jmp    ffffffff80003717 <flanterm_write+0x1a97>
             || (ctx->bg_bold && ctx->reverse_video)) {
ffffffff80003920:	41 80 7d 12 00       	cmpb   $0x0,0x12(%r13)
            offset = 40;
ffffffff80003925:	ba 28 00 00 00       	mov    $0x28,%edx
             || (ctx->bg_bold && ctx->reverse_video)) {
ffffffff8000392a:	0f 85 64 fd ff ff    	jne    ffffffff80003694 <flanterm_write+0x1a14>
                ctx->set_text_fg(ctx, ctx->esc_values[i] - offset);
ffffffff80003930:	48 29 d0             	sub    %rdx,%rax
ffffffff80003933:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003936:	48 89 c6             	mov    %rax,%rsi
ffffffff80003939:	41 ff 95 10 01 00 00 	call   *0x110(%r13)
ffffffff80003940:	e9 32 fd ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                ctx->set_text_fg_default_bright(ctx);
ffffffff80003945:	41 ff 95 50 01 00 00 	call   *0x150(%r13)
            if (ctx->reverse_video) {
ffffffff8000394c:	e9 c6 fd ff ff       	jmp    ffffffff80003717 <flanterm_write+0x1a97>
            i++;
ffffffff80003951:	49 8d 77 01          	lea    0x1(%r15),%rsi
            if (i >= ctx->esc_values_i) {
ffffffff80003955:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80003958:	0f 86 05 f4 ff ff    	jbe    ffffffff80002d63 <flanterm_write+0x10e3>
            switch (ctx->esc_values[i]) {
ffffffff8000395e:	8b 7a 7c             	mov    0x7c(%rdx),%edi
ffffffff80003961:	83 ff 02             	cmp    $0x2,%edi
ffffffff80003964:	0f 84 e1 00 00 00    	je     ffffffff80003a4b <flanterm_write+0x1dcb>
ffffffff8000396a:	83 ff 05             	cmp    $0x5,%edi
ffffffff8000396d:	0f 85 d0 00 00 00    	jne    ffffffff80003a43 <flanterm_write+0x1dc3>
                    if (i + 1 >= ctx->esc_values_i) {
ffffffff80003973:	49 83 c7 02          	add    $0x2,%r15
ffffffff80003977:	4c 39 f9             	cmp    %r15,%rcx
ffffffff8000397a:	0f 86 e3 f3 ff ff    	jbe    ffffffff80002d63 <flanterm_write+0x10e3>
                    uint32_t col = ctx->esc_values[i + 1];
ffffffff80003980:	8b 92 80 00 00 00    	mov    0x80(%rdx),%edx
                    if (col < 8) {
ffffffff80003986:	83 fa 07             	cmp    $0x7,%edx
ffffffff80003989:	77 47                	ja     ffffffff800039d2 <flanterm_write+0x1d52>
                        (fg ? ctx->set_text_fg : ctx->set_text_bg)(ctx, col);
ffffffff8000398b:	49 8b 8d 18 01 00 00 	mov    0x118(%r13),%rcx
ffffffff80003992:	83 f8 26             	cmp    $0x26,%eax
ffffffff80003995:	89 d6                	mov    %edx,%esi
ffffffff80003997:	4c 89 ef             	mov    %r13,%rdi
ffffffff8000399a:	48 89 c8             	mov    %rcx,%rax
ffffffff8000399d:	49 0f 44 85 10 01 00 	cmove  0x110(%r13),%rax
ffffffff800039a4:	00 
ffffffff800039a5:	ff d0                	call   *%rax
ffffffff800039a7:	e9 cb fc ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
            ctx->current_primary = ctx->esc_values[i] - offset;
ffffffff800039ac:	48 8d 50 e2          	lea    -0x1e(%rax),%rdx
            if (ctx->reverse_video) {
ffffffff800039b0:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
            ctx->current_primary = ctx->esc_values[i] - offset;
ffffffff800039b5:	49 89 55 58          	mov    %rdx,0x58(%r13)
            if ((ctx->bold && ctx->reverse_video)
ffffffff800039b9:	41 0f b6 55 11       	movzbl 0x11(%r13),%edx
            if (ctx->reverse_video) {
ffffffff800039be:	75 39                	jne    ffffffff800039f9 <flanterm_write+0x1d79>
            if ((ctx->bold && !ctx->reverse_video)
ffffffff800039c0:	84 d2                	test   %dl,%dl
            offset = 30;
ffffffff800039c2:	ba 1e 00 00 00       	mov    $0x1e,%edx
            if ((ctx->bold && !ctx->reverse_video)
ffffffff800039c7:	0f 84 63 ff ff ff    	je     ffffffff80003930 <flanterm_write+0x1cb0>
ffffffff800039cd:	e9 c2 fc ff ff       	jmp    ffffffff80003694 <flanterm_write+0x1a14>
                    } else if (col < 16) {
ffffffff800039d2:	83 fa 0f             	cmp    $0xf,%edx
ffffffff800039d5:	77 34                	ja     ffffffff80003a0b <flanterm_write+0x1d8b>
                        (fg ? ctx->set_text_fg_bright : ctx->set_text_bg_bright)(ctx, col - 8);
ffffffff800039d7:	49 8b 8d 28 01 00 00 	mov    0x128(%r13),%rcx
ffffffff800039de:	83 f8 26             	cmp    $0x26,%eax
ffffffff800039e1:	8d 72 f8             	lea    -0x8(%rdx),%esi
ffffffff800039e4:	4c 89 ef             	mov    %r13,%rdi
ffffffff800039e7:	48 89 c8             	mov    %rcx,%rax
ffffffff800039ea:	49 0f 44 85 20 01 00 	cmove  0x120(%r13),%rax
ffffffff800039f1:	00 
ffffffff800039f2:	ff d0                	call   *%rax
ffffffff800039f4:	e9 7e fc ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
            if ((ctx->bold && ctx->reverse_video)
ffffffff800039f9:	84 d2                	test   %dl,%dl
            offset = 30;
ffffffff800039fb:	ba 1e 00 00 00       	mov    $0x1e,%edx
            if ((ctx->bold && ctx->reverse_video)
ffffffff80003a00:	0f 84 d6 fe ff ff    	je     ffffffff800038dc <flanterm_write+0x1c5c>
ffffffff80003a06:	e9 5c fc ff ff       	jmp    ffffffff80003667 <flanterm_write+0x19e7>
                    } else if (col < 256) {
ffffffff80003a0b:	81 fa ff 00 00 00    	cmp    $0xff,%edx
ffffffff80003a11:	0f 87 60 fc ff ff    	ja     ffffffff80003677 <flanterm_write+0x19f7>
                        uint32_t rgb_value = col256[col - 16];
ffffffff80003a17:	8d 4a f0             	lea    -0x10(%rdx),%ecx
ffffffff80003a1a:	48 8d 15 ff 4a 00 00 	lea    0x4aff(%rip),%rdx        # ffffffff80008520 <col256>
ffffffff80003a21:	8b 34 8a             	mov    (%rdx,%rcx,4),%esi
                        (fg ? ctx->set_text_fg_rgb : ctx->set_text_bg_rgb)(ctx, rgb_value);
ffffffff80003a24:	49 8b 95 38 01 00 00 	mov    0x138(%r13),%rdx
ffffffff80003a2b:	83 f8 26             	cmp    $0x26,%eax
ffffffff80003a2e:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003a31:	48 89 d0             	mov    %rdx,%rax
ffffffff80003a34:	49 0f 44 85 30 01 00 	cmove  0x130(%r13),%rax
ffffffff80003a3b:	00 
ffffffff80003a3c:	ff d0                	call   *%rax
ffffffff80003a3e:	e9 34 fc ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
            switch (ctx->esc_values[i]) {
ffffffff80003a43:	49 89 f7             	mov    %rsi,%r15
ffffffff80003a46:	e9 2c fc ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                    if (i + 3 >= ctx->esc_values_i) {
ffffffff80003a4b:	49 83 c7 04          	add    $0x4,%r15
ffffffff80003a4f:	4c 39 f9             	cmp    %r15,%rcx
ffffffff80003a52:	0f 86 0b f3 ff ff    	jbe    ffffffff80002d63 <flanterm_write+0x10e3>
                    rgb_value |= ctx->esc_values[i + 1] << 16;
ffffffff80003a58:	8b b2 80 00 00 00    	mov    0x80(%rdx),%esi
                    rgb_value |= ctx->esc_values[i + 2] << 8;
ffffffff80003a5e:	8b 8a 84 00 00 00    	mov    0x84(%rdx),%ecx
                    rgb_value |= ctx->esc_values[i + 1] << 16;
ffffffff80003a64:	c1 e6 10             	shl    $0x10,%esi
                    rgb_value |= ctx->esc_values[i + 2] << 8;
ffffffff80003a67:	c1 e1 08             	shl    $0x8,%ecx
ffffffff80003a6a:	09 ce                	or     %ecx,%esi
                    rgb_value |= ctx->esc_values[i + 3];
ffffffff80003a6c:	0b b2 88 00 00 00    	or     0x88(%rdx),%esi
                    (fg ? ctx->set_text_fg_rgb : ctx->set_text_bg_rgb)(ctx, rgb_value);
ffffffff80003a72:	eb b0                	jmp    ffffffff80003a24 <flanterm_write+0x1da4>
            if (ctx->reverse_video) {
ffffffff80003a74:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
ffffffff80003a79:	0f 84 f8 fb ff ff    	je     ffffffff80003677 <flanterm_write+0x19f7>
                ctx->reverse_video = false;
ffffffff80003a7f:	41 c6 45 13 00       	movb   $0x0,0x13(%r13)
ffffffff80003a84:	e9 99 fc ff ff       	jmp    ffffffff80003722 <flanterm_write+0x1aa2>
            if (ctx->current_bg != (size_t)-1) {
ffffffff80003a89:	49 8b 75 60          	mov    0x60(%r13),%rsi
                if (!ctx->reverse_video) {
ffffffff80003a8d:	41 0f b6 45 13       	movzbl 0x13(%r13),%eax
            ctx->bg_bold = false;
ffffffff80003a92:	41 c6 45 12 00       	movb   $0x0,0x12(%r13)
                    ctx->set_text_bg(ctx, ctx->current_bg);
ffffffff80003a97:	4c 89 ef             	mov    %r13,%rdi
            if (ctx->current_bg != (size_t)-1) {
ffffffff80003a9a:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
ffffffff80003a9e:	0f 84 9c 00 00 00    	je     ffffffff80003b40 <flanterm_write+0x1ec0>
                if (!ctx->reverse_video) {
ffffffff80003aa4:	84 c0                	test   %al,%al
ffffffff80003aa6:	0f 85 8d fe ff ff    	jne    ffffffff80003939 <flanterm_write+0x1cb9>
ffffffff80003aac:	e9 34 fe ff ff       	jmp    ffffffff800038e5 <flanterm_write+0x1c65>
            if (ctx->current_bg != (size_t)-1) {
ffffffff80003ab1:	49 8b 75 60          	mov    0x60(%r13),%rsi
                if (!ctx->reverse_video) {
ffffffff80003ab5:	41 0f b6 45 13       	movzbl 0x13(%r13),%eax
            ctx->bg_bold = true;
ffffffff80003aba:	41 c6 45 12 01       	movb   $0x1,0x12(%r13)
                    ctx->set_text_bg_bright(ctx, ctx->current_bg);
ffffffff80003abf:	4c 89 ef             	mov    %r13,%rdi
            if (ctx->current_bg != (size_t)-1) {
ffffffff80003ac2:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
ffffffff80003ac6:	0f 84 94 00 00 00    	je     ffffffff80003b60 <flanterm_write+0x1ee0>
                if (!ctx->reverse_video) {
ffffffff80003acc:	84 c0                	test   %al,%al
ffffffff80003ace:	0f 85 c9 fb ff ff    	jne    ffffffff8000369d <flanterm_write+0x1a1d>
ffffffff80003ad4:	e9 97 fb ff ff       	jmp    ffffffff80003670 <flanterm_write+0x19f0>
            if (ctx->current_primary != (size_t)-1) {
ffffffff80003ad9:	49 8b 75 58          	mov    0x58(%r13),%rsi
                if (!ctx->reverse_video) {
ffffffff80003add:	41 0f b6 45 13       	movzbl 0x13(%r13),%eax
            ctx->bold = false;
ffffffff80003ae2:	41 c6 45 11 00       	movb   $0x0,0x11(%r13)
                    ctx->set_text_fg(ctx, ctx->current_primary);
ffffffff80003ae7:	4c 89 ef             	mov    %r13,%rdi
            if (ctx->current_primary != (size_t)-1) {
ffffffff80003aea:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
ffffffff80003aee:	74 60                	je     ffffffff80003b50 <flanterm_write+0x1ed0>
                if (!ctx->reverse_video) {
ffffffff80003af0:	84 c0                	test   %al,%al
ffffffff80003af2:	0f 85 ed fd ff ff    	jne    ffffffff800038e5 <flanterm_write+0x1c65>
ffffffff80003af8:	e9 3c fe ff ff       	jmp    ffffffff80003939 <flanterm_write+0x1cb9>
            if (ctx->current_primary != (size_t)-1) {
ffffffff80003afd:	49 8b 75 58          	mov    0x58(%r13),%rsi
                if (!ctx->reverse_video) {
ffffffff80003b01:	41 0f b6 45 13       	movzbl 0x13(%r13),%eax
            ctx->bold = true;
ffffffff80003b06:	41 c6 45 11 01       	movb   $0x1,0x11(%r13)
                    ctx->set_text_fg_bright(ctx, ctx->current_primary);
ffffffff80003b0b:	4c 89 ef             	mov    %r13,%rdi
            if (ctx->current_primary != (size_t)-1) {
ffffffff80003b0e:	48 83 fe ff          	cmp    $0xffffffffffffffff,%rsi
ffffffff80003b12:	74 5c                	je     ffffffff80003b70 <flanterm_write+0x1ef0>
                if (!ctx->reverse_video) {
ffffffff80003b14:	84 c0                	test   %al,%al
ffffffff80003b16:	0f 85 54 fb ff ff    	jne    ffffffff80003670 <flanterm_write+0x19f0>
ffffffff80003b1c:	e9 7c fb ff ff       	jmp    ffffffff8000369d <flanterm_write+0x1a1d>
            if (!ctx->reverse_video) {
ffffffff80003b21:	41 80 7d 13 00       	cmpb   $0x0,0x13(%r13)
ffffffff80003b26:	0f 85 4b fb ff ff    	jne    ffffffff80003677 <flanterm_write+0x19f7>
                ctx->reverse_video = true;
ffffffff80003b2c:	41 c6 45 13 01       	movb   $0x1,0x13(%r13)
                ctx->swap_palette(ctx);
ffffffff80003b31:	4c 89 ef             	mov    %r13,%rdi
ffffffff80003b34:	41 ff 95 78 01 00 00 	call   *0x178(%r13)
ffffffff80003b3b:	e9 37 fb ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                if (!ctx->reverse_video) {
ffffffff80003b40:	84 c0                	test   %al,%al
ffffffff80003b42:	75 10                	jne    ffffffff80003b54 <flanterm_write+0x1ed4>
                    ctx->set_text_bg_default(ctx);
ffffffff80003b44:	41 ff 95 48 01 00 00 	call   *0x148(%r13)
ffffffff80003b4b:	e9 27 fb ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                if (!ctx->reverse_video) {
ffffffff80003b50:	84 c0                	test   %al,%al
ffffffff80003b52:	75 f0                	jne    ffffffff80003b44 <flanterm_write+0x1ec4>
                    ctx->set_text_fg_default(ctx);
ffffffff80003b54:	41 ff 95 40 01 00 00 	call   *0x140(%r13)
ffffffff80003b5b:	e9 17 fb ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                if (!ctx->reverse_video) {
ffffffff80003b60:	84 c0                	test   %al,%al
ffffffff80003b62:	75 10                	jne    ffffffff80003b74 <flanterm_write+0x1ef4>
                    ctx->set_text_bg_default_bright(ctx);
ffffffff80003b64:	41 ff 95 58 01 00 00 	call   *0x158(%r13)
ffffffff80003b6b:	e9 07 fb ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>
                if (!ctx->reverse_video) {
ffffffff80003b70:	84 c0                	test   %al,%al
ffffffff80003b72:	75 f0                	jne    ffffffff80003b64 <flanterm_write+0x1ee4>
                    ctx->set_text_fg_default_bright(ctx);
ffffffff80003b74:	41 ff 95 50 01 00 00 	call   *0x150(%r13)
ffffffff80003b7b:	e9 f7 fa ff ff       	jmp    ffffffff80003677 <flanterm_write+0x19f7>

ffffffff80003b80 <load_gdt>:
	ent->limit_low = limit &    0x0000FFFF;
	ent->limit_upper = limit & (0x000F0000) >> 16;
}

void load_gdt()
{
ffffffff80003b80:	f3 0f 1e fa          	endbr64 
	
	gentries[0] = 0x0000000000000000; // NULL.

	gentries[1] = 0x00af9b000000ffff; // CODE.
ffffffff80003b84:	48 b8 ff ff 00 00 00 	movabs $0xaf9b000000ffff,%rax
ffffffff80003b8b:	9b af 00 
	gentries[0] = 0x0000000000000000; // NULL.
ffffffff80003b8e:	48 c7 05 e7 e1 0d 00 	movq   $0x0,0xde1e7(%rip)        # ffffffff800e1d80 <gentries>
ffffffff80003b95:	00 00 00 00 
	gentries[1] = 0x00af9b000000ffff; // CODE.
ffffffff80003b99:	48 89 05 e8 e1 0d 00 	mov    %rax,0xde1e8(%rip)        # ffffffff800e1d88 <gentries+0x8>
    
	gentries[2] = 0x00af93000000ffff; // DATA.
ffffffff80003ba0:	48 b8 ff ff 00 00 00 	movabs $0xaf93000000ffff,%rax
ffffffff80003ba7:	93 af 00 
ffffffff80003baa:	48 89 05 df e1 0d 00 	mov    %rax,0xde1df(%rip)        # ffffffff800e1d90 <gentries+0x10>

	gpointer.addr = (uint64_t)(uintptr_t)gentries;
ffffffff80003bb1:	48 8d 05 c8 e1 0d 00 	lea    0xde1c8(%rip),%rax        # ffffffff800e1d80 <gentries>
ffffffff80003bb8:	48 89 05 b3 e1 0d 00 	mov    %rax,0xde1b3(%rip)        # ffffffff800e1d72 <gpointer+0x2>
	gpointer.size = sizeof(gentries) - 1;
ffffffff80003bbf:	b8 17 00 00 00       	mov    $0x17,%eax
ffffffff80003bc4:	66 89 05 a5 e1 0d 00 	mov    %ax,0xde1a5(%rip)        # ffffffff800e1d70 <gpointer>
	__asm__ volatile("lgdt %0\n"
ffffffff80003bcb:	0f 01 15 9e e1 0d 00 	lgdt   0xde19e(%rip)        # ffffffff800e1d70 <gpointer>
	__asm__ volatile ("call reloadSegments\n");
ffffffff80003bd2:	e8 d9 17 00 00       	call   ffffffff800053b0 <reloadSegments>
	gdt_install();
ffffffff80003bd7:	c3                   	ret    
ffffffff80003bd8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80003bdf:	00 

ffffffff80003be0 <putpixel>:

uint32_t line_counter = 0;
uint32_t last_finish_x = 0;

void putpixel(volatile uint32_t *fb, uint32_t pitch, uint32_t x, uint32_t y, uint32_t color) 
{
ffffffff80003be0:	f3 0f 1e fa          	endbr64 
    fb[y * (pitch / 4) + x] = color;
ffffffff80003be4:	c1 ee 02             	shr    $0x2,%esi
ffffffff80003be7:	0f af f1             	imul   %ecx,%esi
ffffffff80003bea:	8d 04 16             	lea    (%rsi,%rdx,1),%eax
ffffffff80003bed:	48 8d 04 87          	lea    (%rdi,%rax,4),%rax
ffffffff80003bf1:	44 89 00             	mov    %r8d,(%rax)
}
ffffffff80003bf4:	c3                   	ret    
ffffffff80003bf5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80003bfc:	00 00 00 00 

ffffffff80003c00 <draw_char>:


void draw_char(volatile uint32_t *fb, uint32_t pitch, uint8_t font[][8], uint32_t x, uint32_t y, char c, uint32_t color, uint32_t scale) 
{
ffffffff80003c00:	f3 0f 1e fa          	endbr64 
ffffffff80003c04:	41 57                	push   %r15
ffffffff80003c06:	41 89 f2             	mov    %esi,%r10d
    const uint8_t *glyph = font[(uint8_t)c];
ffffffff80003c09:	41 0f b6 c1          	movzbl %r9b,%eax
{
ffffffff80003c0d:	41 56                	push   %r14
    fb[y * (pitch / 4) + x] = color;
ffffffff80003c0f:	41 c1 ea 02          	shr    $0x2,%r10d
    const uint8_t *glyph = font[(uint8_t)c];
ffffffff80003c13:	48 c1 e0 03          	shl    $0x3,%rax
{
ffffffff80003c17:	41 55                	push   %r13
ffffffff80003c19:	45 0f af c2          	imul   %r10d,%r8d
ffffffff80003c1d:	4c 8d 74 02 08       	lea    0x8(%rdx,%rax,1),%r14
ffffffff80003c22:	41 54                	push   %r12
ffffffff80003c24:	4c 8d 24 02          	lea    (%rdx,%rax,1),%r12
ffffffff80003c28:	55                   	push   %rbp
ffffffff80003c29:	53                   	push   %rbx
ffffffff80003c2a:	8b 5c 24 40          	mov    0x40(%rsp),%ebx
ffffffff80003c2e:	45 8d 2c 08          	lea    (%r8,%rcx,1),%r13d
ffffffff80003c32:	8b 74 24 38          	mov    0x38(%rsp),%esi
ffffffff80003c36:	41 89 df             	mov    %ebx,%r15d
ffffffff80003c39:	45 0f af fa          	imul   %r10d,%r15d
ffffffff80003c3d:	45 89 e8             	mov    %r13d,%r8d
ffffffff80003c40:	41 bb 07 00 00 00    	mov    $0x7,%r11d
ffffffff80003c46:	eb 15                	jmp    ffffffff80003c5d <draw_char+0x5d>
ffffffff80003c48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80003c4f:	00 
    for (uint32_t i = 0; i < 8; i++) {
        for (uint32_t j = 0; j < 8; j++) {
ffffffff80003c50:	41 83 eb 01          	sub    $0x1,%r11d
ffffffff80003c54:	41 89 e8             	mov    %ebp,%r8d
ffffffff80003c57:	41 83 fb ff          	cmp    $0xffffffff,%r11d
ffffffff80003c5b:	74 4e                	je     ffffffff80003cab <draw_char+0xab>
            // If the j-th bit of the i-th byte is set, draw a pixel
            if (glyph[i] & (1 << (7 - j))) {
ffffffff80003c5d:	41 0f b6 04 24       	movzbl (%r12),%eax
ffffffff80003c62:	42 8d 2c 03          	lea    (%rbx,%r8,1),%ebp
ffffffff80003c66:	44 0f a3 d8          	bt     %r11d,%eax
ffffffff80003c6a:	73 e4                	jae    ffffffff80003c50 <draw_char+0x50>
                // Scale the pixel
                for (uint32_t dy = 0; dy < scale; dy++) {
ffffffff80003c6c:	89 e9                	mov    %ebp,%ecx
ffffffff80003c6e:	45 31 c9             	xor    %r9d,%r9d
ffffffff80003c71:	85 db                	test   %ebx,%ebx
ffffffff80003c73:	74 4d                	je     ffffffff80003cc2 <draw_char+0xc2>
ffffffff80003c75:	0f 1f 00             	nopl   (%rax)
{
ffffffff80003c78:	44 89 c0             	mov    %r8d,%eax
ffffffff80003c7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    fb[y * (pitch / 4) + x] = color;
ffffffff80003c80:	89 c2                	mov    %eax,%edx
                    for (uint32_t dx = 0; dx < scale; dx++) {
ffffffff80003c82:	83 c0 01             	add    $0x1,%eax
    fb[y * (pitch / 4) + x] = color;
ffffffff80003c85:	48 8d 14 97          	lea    (%rdi,%rdx,4),%rdx
ffffffff80003c89:	89 32                	mov    %esi,(%rdx)
                    for (uint32_t dx = 0; dx < scale; dx++) {
ffffffff80003c8b:	39 c1                	cmp    %eax,%ecx
ffffffff80003c8d:	75 f1                	jne    ffffffff80003c80 <draw_char+0x80>
                for (uint32_t dy = 0; dy < scale; dy++) {
ffffffff80003c8f:	41 83 c1 01          	add    $0x1,%r9d
ffffffff80003c93:	45 01 d0             	add    %r10d,%r8d
ffffffff80003c96:	44 01 d1             	add    %r10d,%ecx
ffffffff80003c99:	44 39 cb             	cmp    %r9d,%ebx
ffffffff80003c9c:	75 da                	jne    ffffffff80003c78 <draw_char+0x78>
        for (uint32_t j = 0; j < 8; j++) {
ffffffff80003c9e:	41 83 eb 01          	sub    $0x1,%r11d
ffffffff80003ca2:	41 89 e8             	mov    %ebp,%r8d
ffffffff80003ca5:	41 83 fb ff          	cmp    $0xffffffff,%r11d
ffffffff80003ca9:	75 b2                	jne    ffffffff80003c5d <draw_char+0x5d>
    for (uint32_t i = 0; i < 8; i++) {
ffffffff80003cab:	49 83 c4 01          	add    $0x1,%r12
ffffffff80003caf:	45 01 fd             	add    %r15d,%r13d
ffffffff80003cb2:	4d 39 f4             	cmp    %r14,%r12
ffffffff80003cb5:	75 86                	jne    ffffffff80003c3d <draw_char+0x3d>
                    }
                }
            }
        }
    }
}
ffffffff80003cb7:	5b                   	pop    %rbx
ffffffff80003cb8:	5d                   	pop    %rbp
ffffffff80003cb9:	41 5c                	pop    %r12
ffffffff80003cbb:	41 5d                	pop    %r13
ffffffff80003cbd:	41 5e                	pop    %r14
ffffffff80003cbf:	41 5f                	pop    %r15
ffffffff80003cc1:	c3                   	ret    
ffffffff80003cc2:	44 89 c5             	mov    %r8d,%ebp
ffffffff80003cc5:	eb 89                	jmp    ffffffff80003c50 <draw_char+0x50>
ffffffff80003cc7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003cce:	00 00 

ffffffff80003cd0 <draw_str>:

void draw_str(volatile uint32_t *fb, uint32_t pitch, uint8_t font[][8], uint32_t x, uint32_t y, const char* str, uint32_t color, uint32_t scale)
{
ffffffff80003cd0:	f3 0f 1e fa          	endbr64 
ffffffff80003cd4:	41 57                	push   %r15
    int stx = x;

    int ex = x;
    int ey = y;

    int len = strlen(str);
ffffffff80003cd6:	31 c0                	xor    %eax,%eax
{
ffffffff80003cd8:	41 89 cf             	mov    %ecx,%r15d
ffffffff80003cdb:	41 56                	push   %r14
ffffffff80003cdd:	41 55                	push   %r13
ffffffff80003cdf:	41 89 f5             	mov    %esi,%r13d
ffffffff80003ce2:	41 54                	push   %r12
ffffffff80003ce4:	49 89 fc             	mov    %rdi,%r12
    int len = strlen(str);
ffffffff80003ce7:	4c 89 cf             	mov    %r9,%rdi
{
ffffffff80003cea:	55                   	push   %rbp
ffffffff80003ceb:	53                   	push   %rbx
ffffffff80003cec:	4c 89 cb             	mov    %r9,%rbx
ffffffff80003cef:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80003cf3:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
ffffffff80003cf7:	44 89 44 24 04       	mov    %r8d,0x4(%rsp)
    int len = strlen(str);
ffffffff80003cfc:	e8 af 07 00 00       	call   ffffffff800044b0 <strlen>

    for(int i = 0; i < len; i++)
ffffffff80003d01:	85 c0                	test   %eax,%eax
ffffffff80003d03:	0f 8e a0 00 00 00    	jle    ffffffff80003da9 <draw_str+0xd9>
            line_counter++;
            last_finish_x = 0;
            continue;
        }

        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff80003d09:	8b 4c 24 58          	mov    0x58(%rsp),%ecx
    int ex = x;
ffffffff80003d0d:	45 89 fe             	mov    %r15d,%r14d
ffffffff80003d10:	83 e8 01             	sub    $0x1,%eax
        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff80003d13:	4c 89 e7             	mov    %r12,%rdi
ffffffff80003d16:	48 8d 6c 03 01       	lea    0x1(%rbx,%rax,1),%rbp
ffffffff80003d1b:	45 89 f4             	mov    %r14d,%r12d
ffffffff80003d1e:	4c 8d 3d bb 4b 00 00 	lea    0x4bbb(%rip),%r15        # ffffffff800088e0 <font8>

        ex += scale*(3*scale);
ffffffff80003d25:	89 ca                	mov    %ecx,%edx
        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff80003d27:	8d 34 cd 04 00 00 00 	lea    0x4(,%rcx,8),%esi
        ex += scale*(3*scale);
ffffffff80003d2e:	0f af d1             	imul   %ecx,%edx
        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff80003d31:	89 74 24 08          	mov    %esi,0x8(%rsp)
        ex += scale*(3*scale);
ffffffff80003d35:	8d 0c 52             	lea    (%rdx,%rdx,2),%ecx
        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff80003d38:	41 89 ce             	mov    %ecx,%r14d
ffffffff80003d3b:	eb 36                	jmp    ffffffff80003d73 <draw_str+0xa3>
ffffffff80003d3d:	0f 1f 00             	nopl   (%rax)
ffffffff80003d40:	8b 44 24 58          	mov    0x58(%rsp),%eax
ffffffff80003d44:	0f af 54 24 08       	imul   0x8(%rsp),%edx
ffffffff80003d49:	44 89 e1             	mov    %r12d,%ecx
ffffffff80003d4c:	44 89 ee             	mov    %r13d,%esi
    for(int i = 0; i < len; i++)
ffffffff80003d4f:	48 83 c3 01          	add    $0x1,%rbx
        ex += scale*(3*scale);
ffffffff80003d53:	45 01 f4             	add    %r14d,%r12d
        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff80003d56:	50                   	push   %rax
ffffffff80003d57:	8b 44 24 58          	mov    0x58(%rsp),%eax
ffffffff80003d5b:	50                   	push   %rax
ffffffff80003d5c:	8b 44 24 14          	mov    0x14(%rsp),%eax
ffffffff80003d60:	44 8d 04 02          	lea    (%rdx,%rax,1),%r8d
ffffffff80003d64:	4c 89 fa             	mov    %r15,%rdx
ffffffff80003d67:	e8 94 fe ff ff       	call   ffffffff80003c00 <draw_char>
        ex += scale*(3*scale);
ffffffff80003d6c:	58                   	pop    %rax
ffffffff80003d6d:	5a                   	pop    %rdx
    for(int i = 0; i < len; i++)
ffffffff80003d6e:	48 39 eb             	cmp    %rbp,%rbx
ffffffff80003d71:	74 31                	je     ffffffff80003da4 <draw_str+0xd4>
        if (str[i] == '\n') {
ffffffff80003d73:	44 0f be 0b          	movsbl (%rbx),%r9d
            line_counter++;
ffffffff80003d77:	8b 15 1f e0 0d 00    	mov    0xde01f(%rip),%edx        # ffffffff800e1d9c <line_counter>
        if (str[i] == '\n') {
ffffffff80003d7d:	41 80 f9 0a          	cmp    $0xa,%r9b
ffffffff80003d81:	75 bd                	jne    ffffffff80003d40 <draw_str+0x70>
            line_counter++;
ffffffff80003d83:	83 c2 01             	add    $0x1,%edx
    for(int i = 0; i < len; i++)
ffffffff80003d86:	48 83 c3 01          	add    $0x1,%rbx
            ex = stx;
ffffffff80003d8a:	44 8b 64 24 0c       	mov    0xc(%rsp),%r12d
            last_finish_x = 0;
ffffffff80003d8f:	c7 05 ff df 0d 00 00 	movl   $0x0,0xddfff(%rip)        # ffffffff800e1d98 <last_finish_x>
ffffffff80003d96:	00 00 00 
            line_counter++;
ffffffff80003d99:	89 15 fd df 0d 00    	mov    %edx,0xddffd(%rip)        # ffffffff800e1d9c <line_counter>
    for(int i = 0; i < len; i++)
ffffffff80003d9f:	48 39 eb             	cmp    %rbp,%rbx
ffffffff80003da2:	75 cf                	jne    ffffffff80003d73 <draw_str+0xa3>
    }

    last_finish_x = ex;
ffffffff80003da4:	44 89 64 24 0c       	mov    %r12d,0xc(%rsp)
ffffffff80003da9:	8b 44 24 0c          	mov    0xc(%rsp),%eax
ffffffff80003dad:	89 05 e5 df 0d 00    	mov    %eax,0xddfe5(%rip)        # ffffffff800e1d98 <last_finish_x>
}
ffffffff80003db3:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80003db7:	5b                   	pop    %rbx
ffffffff80003db8:	5d                   	pop    %rbp
ffffffff80003db9:	41 5c                	pop    %r12
ffffffff80003dbb:	41 5d                	pop    %r13
ffffffff80003dbd:	41 5e                	pop    %r14
ffffffff80003dbf:	41 5f                	pop    %r15
ffffffff80003dc1:	c3                   	ret    
ffffffff80003dc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80003dc9:	00 00 00 00 
ffffffff80003dcd:	0f 1f 00             	nopl   (%rax)

ffffffff80003dd0 <create_color>:

uint32_t create_color(uint8_t red, uint8_t green, uint8_t blue) {
ffffffff80003dd0:	f3 0f 1e fa          	endbr64 
    return (red << 16) | (green << 8) | blue | (0xFF << 24); // The last 0xFF is the unused padding
ffffffff80003dd4:	40 0f b6 ff          	movzbl %dil,%edi
ffffffff80003dd8:	0f b6 d2             	movzbl %dl,%edx
ffffffff80003ddb:	40 0f b6 f6          	movzbl %sil,%esi
ffffffff80003ddf:	c1 e7 10             	shl    $0x10,%edi
ffffffff80003de2:	c1 e6 08             	shl    $0x8,%esi
ffffffff80003de5:	09 d7                	or     %edx,%edi
ffffffff80003de7:	09 f7                	or     %esi,%edi
ffffffff80003de9:	89 f8                	mov    %edi,%eax
ffffffff80003deb:	0d 00 00 00 ff       	or     $0xff000000,%eax
}
ffffffff80003df0:	c3                   	ret    
ffffffff80003df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80003df8:	00 00 00 00 
ffffffff80003dfc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80003e00 <calc_text_size>:

void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e00:	f3 0f 1e fa          	endbr64 
            }
            current_width = 0;
            *height += (8 * scale) + 4; // Character height + spacing
        } else {
            // Increase the width for each character
            current_width += scale*(3*scale); // Character width + spacing
ffffffff80003e04:	89 f0                	mov    %esi,%eax
void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e06:	41 57                	push   %r15
    for (size_t i = 0; i < strlen(str); i++) {
ffffffff80003e08:	45 31 ff             	xor    %r15d,%r15d
void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e0b:	41 56                	push   %r14
            current_width += scale*(3*scale); // Character width + spacing
ffffffff80003e0d:	0f af c6             	imul   %esi,%eax
void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e10:	49 89 fe             	mov    %rdi,%r14
ffffffff80003e13:	41 55                	push   %r13
    uint32_t current_width = 0;
ffffffff80003e15:	45 31 ed             	xor    %r13d,%r13d
void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e18:	41 54                	push   %r12
ffffffff80003e1a:	55                   	push   %rbp
            current_width += scale*(3*scale); // Character width + spacing
ffffffff80003e1b:	44 8d 24 40          	lea    (%rax,%rax,2),%r12d
ffffffff80003e1f:	8d 04 f5 04 00 00 00 	lea    0x4(,%rsi,8),%eax
    uint32_t max_width = 0;
ffffffff80003e26:	31 ed                	xor    %ebp,%ebp
void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e28:	53                   	push   %rbx
ffffffff80003e29:	48 89 cb             	mov    %rcx,%rbx
ffffffff80003e2c:	48 83 ec 18          	sub    $0x18,%rsp
    *width = 0;
ffffffff80003e30:	c7 02 00 00 00 00    	movl   $0x0,(%rdx)
void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80003e36:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    *height = 0;
ffffffff80003e3b:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
    for (size_t i = 0; i < strlen(str); i++) {
ffffffff80003e41:	89 44 24 04          	mov    %eax,0x4(%rsp)
ffffffff80003e45:	eb 10                	jmp    ffffffff80003e57 <calc_text_size+0x57>
ffffffff80003e47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80003e4e:	00 00 
            current_width += scale*(3*scale); // Character width + spacing
ffffffff80003e50:	45 01 e5             	add    %r12d,%r13d
    for (size_t i = 0; i < strlen(str); i++) {
ffffffff80003e53:	49 83 c7 01          	add    $0x1,%r15
ffffffff80003e57:	4c 89 f7             	mov    %r14,%rdi
ffffffff80003e5a:	31 c0                	xor    %eax,%eax
ffffffff80003e5c:	e8 4f 06 00 00       	call   ffffffff800044b0 <strlen>
ffffffff80003e61:	48 98                	cltq   
ffffffff80003e63:	4c 39 f8             	cmp    %r15,%rax
ffffffff80003e66:	76 20                	jbe    ffffffff80003e88 <calc_text_size+0x88>
        if (str[i] == '\n') {
ffffffff80003e68:	43 80 3c 3e 0a       	cmpb   $0xa,(%r14,%r15,1)
ffffffff80003e6d:	75 e1                	jne    ffffffff80003e50 <calc_text_size+0x50>
            if (current_width > max_width) {
ffffffff80003e6f:	44 39 ed             	cmp    %r13d,%ebp
            *height += (8 * scale) + 4; // Character height + spacing
ffffffff80003e72:	8b 44 24 04          	mov    0x4(%rsp),%eax
ffffffff80003e76:	41 0f 42 ed          	cmovb  %r13d,%ebp
ffffffff80003e7a:	01 03                	add    %eax,(%rbx)
            current_width = 0;
ffffffff80003e7c:	45 31 ed             	xor    %r13d,%r13d
ffffffff80003e7f:	eb d2                	jmp    ffffffff80003e53 <calc_text_size+0x53>
ffffffff80003e81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (current_width > max_width) {
        max_width = current_width;
    }

    // Set final width and height
    *width = max_width;
ffffffff80003e88:	41 39 ed             	cmp    %ebp,%r13d
ffffffff80003e8b:	89 ea                	mov    %ebp,%edx
ffffffff80003e8d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff80003e92:	41 0f 43 d5          	cmovae %r13d,%edx
ffffffff80003e96:	89 10                	mov    %edx,(%rax)
    *height += (8 * scale) + 4; // Add height for the last line
ffffffff80003e98:	8b 44 24 04          	mov    0x4(%rsp),%eax
ffffffff80003e9c:	01 03                	add    %eax,(%rbx)
ffffffff80003e9e:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80003ea2:	5b                   	pop    %rbx
ffffffff80003ea3:	5d                   	pop    %rbp
ffffffff80003ea4:	41 5c                	pop    %r12
ffffffff80003ea6:	41 5d                	pop    %r13
ffffffff80003ea8:	41 5e                	pop    %r14
ffffffff80003eaa:	41 5f                	pop    %r15
ffffffff80003eac:	c3                   	ret    
ffffffff80003ead:	0f 1f 00             	nopl   (%rax)

ffffffff80003eb0 <idt_setdesc>:
"Virtualization",
"Security Exception"
};

void idt_setdesc(uint64_t vec, void* isr, uint8_t flgs)
{
ffffffff80003eb0:	f3 0f 1e fa          	endbr64 
    idt_desc* desc = &entries[vec];

    desc->offset_1 = (uint64_t)isr & 0xFFFF;
ffffffff80003eb4:	48 8d 05 05 df 0d 00 	lea    0xddf05(%rip),%rax        # ffffffff800e1dc0 <entries>
ffffffff80003ebb:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff80003ebf:	48 01 c7             	add    %rax,%rdi
    desc->selector = 0x8;
ffffffff80003ec2:	b8 08 00 00 00       	mov    $0x8,%eax
ffffffff80003ec7:	66 89 47 02          	mov    %ax,0x2(%rdi)
    desc->ist = 0;
    desc->type_attributes = flgs;
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003ecb:	48 89 f0             	mov    %rsi,%rax
    desc->offset_1 = (uint64_t)isr & 0xFFFF;
ffffffff80003ece:	66 89 37             	mov    %si,(%rdi)
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003ed1:	48 c1 e8 10          	shr    $0x10,%rax
    desc->offset_3 =  ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003ed5:	48 c1 ee 20          	shr    $0x20,%rsi
    desc->ist = 0;
ffffffff80003ed9:	c6 47 04 00          	movb   $0x0,0x4(%rdi)
    desc->type_attributes = flgs;
ffffffff80003edd:	88 57 05             	mov    %dl,0x5(%rdi)
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003ee0:	66 89 47 06          	mov    %ax,0x6(%rdi)
    desc->offset_3 =  ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003ee4:	89 77 08             	mov    %esi,0x8(%rdi)
    desc->zero = 0;
ffffffff80003ee7:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%rdi)
}
ffffffff80003eee:	c3                   	ret    
ffffffff80003eef:	90                   	nop

ffffffff80003ef0 <idt_init>:
//a//.

void idt_init()
{
ffffffff80003ef0:	f3 0f 1e fa          	endbr64 
    idtptr.size = (uint16_t)sizeof(entries)-1;
    idtptr.addr = (uintptr_t)&entries[0];
ffffffff80003ef4:	48 8d 05 c5 de 0d 00 	lea    0xddec5(%rip),%rax        # ffffffff800e1dc0 <entries>
{
ffffffff80003efb:	48 83 ec 08          	sub    $0x8,%rsp
    idtptr.size = (uint16_t)sizeof(entries)-1;
ffffffff80003eff:	bf ff 0f 00 00       	mov    $0xfff,%edi
    idtptr.addr = (uintptr_t)&entries[0];
ffffffff80003f04:	48 89 05 97 de 0d 00 	mov    %rax,0xdde97(%rip)        # ffffffff800e1da2 <idtptr+0x2>
ffffffff80003f0b:	48 8d 0d a2 81 00 00 	lea    0x81a2(%rip),%rcx        # ffffffff8000c0b4 <isr_stub_table>
    idtptr.size = (uint16_t)sizeof(entries)-1;
ffffffff80003f12:	66 89 3d 87 de 0d 00 	mov    %di,0xdde87(%rip)        # ffffffff800e1da0 <idtptr>

    for(uint64_t v = 0; v < 256; v++)
ffffffff80003f19:	48 8d b8 00 10 00 00 	lea    0x1000(%rax),%rdi
    {
        idt_setdesc(v, isr_stub_table[v], 0x8E);
ffffffff80003f20:	48 8b 11             	mov    (%rcx),%rdx
    desc->selector = 0x8;
ffffffff80003f23:	be 08 00 00 00       	mov    $0x8,%esi
    desc->ist = 0;
ffffffff80003f28:	c6 40 04 00          	movb   $0x0,0x4(%rax)
    for(uint64_t v = 0; v < 256; v++)
ffffffff80003f2c:	48 83 c0 10          	add    $0x10,%rax
    desc->selector = 0x8;
ffffffff80003f30:	66 89 70 f2          	mov    %si,-0xe(%rax)
    for(uint64_t v = 0; v < 256; v++)
ffffffff80003f34:	48 83 c1 08          	add    $0x8,%rcx
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003f38:	48 89 d6             	mov    %rdx,%rsi
    desc->offset_1 = (uint64_t)isr & 0xFFFF;
ffffffff80003f3b:	66 89 50 f0          	mov    %dx,-0x10(%rax)
    desc->offset_3 =  ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003f3f:	48 c1 ea 20          	shr    $0x20,%rdx
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003f43:	48 c1 ee 10          	shr    $0x10,%rsi
    desc->type_attributes = flgs;
ffffffff80003f47:	c6 40 f5 8e          	movb   $0x8e,-0xb(%rax)
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80003f4b:	66 89 70 f6          	mov    %si,-0xa(%rax)
    desc->offset_3 =  ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80003f4f:	89 50 f8             	mov    %edx,-0x8(%rax)
    desc->zero = 0;
ffffffff80003f52:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
    for(uint64_t v = 0; v < 256; v++)
ffffffff80003f59:	48 39 f8             	cmp    %rdi,%rax
ffffffff80003f5c:	75 c2                	jne    ffffffff80003f20 <idt_init+0x30>
    }
    
    __asm__ volatile ("lidt %0" :: "m"(idtptr));
ffffffff80003f5e:	0f 01 1d 3b de 0d 00 	lidt   0xdde3b(%rip)        # ffffffff800e1da0 <idtptr>
    
    __asm__ volatile ("sti");
ffffffff80003f65:	fb                   	sti    

    pic_init();
ffffffff80003f66:	31 c0                	xor    %eax,%eax
ffffffff80003f68:	e8 43 12 00 00       	call   ffffffff800051b0 <pic_init>
    pic_timer_setup();
ffffffff80003f6d:	31 c0                	xor    %eax,%eax
}
ffffffff80003f6f:	48 83 c4 08          	add    $0x8,%rsp
    pic_timer_setup();
ffffffff80003f73:	e9 78 13 00 00       	jmp    ffffffff800052f0 <pic_timer_setup>
ffffffff80003f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80003f7f:	00 

ffffffff80003f80 <inthandler>:



// EXCEPTION STUFF:
void inthandler(registers *regs)
{
ffffffff80003f80:	f3 0f 1e fa          	endbr64 
ffffffff80003f84:	48 83 ec 08          	sub    $0x8,%rsp
    if(regs->int_no < 0x20){
ffffffff80003f88:	48 8b 4f 78          	mov    0x78(%rdi),%rcx
ffffffff80003f8c:	48 83 f9 1f          	cmp    $0x1f,%rcx
ffffffff80003f90:	76 4e                	jbe    ffffffff80003fe0 <inthandler+0x60>
        printf("Exception Caught: RIP -> %x || %s - %d : %x", regs->rip, exception_str[regs->int_no], regs->int_no, regs->error_code);
        __asm__ volatile("cli; hlt");
    }
    else
    {
        switch(regs->int_no)
ffffffff80003f92:	48 83 f9 20          	cmp    $0x20,%rcx
ffffffff80003f96:	74 28                	je     ffffffff80003fc0 <inthandler+0x40>
ffffffff80003f98:	48 83 f9 27          	cmp    $0x27,%rcx
ffffffff80003f9c:	74 0a                	je     ffffffff80003fa8 <inthandler+0x28>
                pic_send_eoi(7);                
                break;
        }
    }
    
ffffffff80003f9e:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80003fa2:	c3                   	ret    
ffffffff80003fa3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
#include <stdint.h>
#include <stddef.h>

static inline void outb(uint16_t port, uint8_t val)
{
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80003fa8:	b8 0b 00 00 00       	mov    $0xb,%eax
ffffffff80003fad:	e6 20                	out    %al,$0x20
}
static inline uint8_t inb(uint16_t port)
{
    uint8_t ret;
    __asm__ volatile ( "inb %1, %0"
ffffffff80003faf:	e4 20                	in     $0x20,%al
                pic_send_eoi(7);                
ffffffff80003fb1:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff80003fb6:	48 83 c4 08          	add    $0x8,%rsp
                pic_send_eoi(7);                
ffffffff80003fba:	e9 11 13 00 00       	jmp    ffffffff800052d0 <pic_send_eoi>
ffffffff80003fbf:	90                   	nop
                timer_inc();
ffffffff80003fc0:	31 c0                	xor    %eax,%eax
ffffffff80003fc2:	e8 49 13 00 00       	call   ffffffff80005310 <timer_inc>
                if(timer_getct() == PIC_FREQ)
ffffffff80003fc7:	31 c0                	xor    %eax,%eax
ffffffff80003fc9:	e8 72 13 00 00       	call   ffffffff80005340 <timer_getct>
ffffffff80003fce:	83 f8 12             	cmp    $0x12,%eax
ffffffff80003fd1:	74 3d                	je     ffffffff80004010 <inthandler+0x90>
                pic_send_eoi(0); 
ffffffff80003fd3:	31 ff                	xor    %edi,%edi
ffffffff80003fd5:	48 83 c4 08          	add    $0x8,%rsp
                pic_send_eoi(0); 
ffffffff80003fd9:	e9 f2 12 00 00       	jmp    ffffffff800052d0 <pic_send_eoi>
ffffffff80003fde:	66 90                	xchg   %ax,%ax
        printf("Exception Caught: RIP -> %x || %s - %d : %x", regs->rip, exception_str[regs->int_no], regs->int_no, regs->error_code);
ffffffff80003fe0:	48 8d 05 19 80 00 00 	lea    0x8019(%rip),%rax        # ffffffff8000c000 <exception_str>
ffffffff80003fe7:	48 8b b7 88 00 00 00 	mov    0x88(%rdi),%rsi
ffffffff80003fee:	4c 8b 87 80 00 00 00 	mov    0x80(%rdi),%r8
ffffffff80003ff5:	48 8d 3d e4 4c 00 00 	lea    0x4ce4(%rip),%rdi        # ffffffff80008ce0 <font8+0x400>
ffffffff80003ffc:	48 8b 14 c8          	mov    (%rax,%rcx,8),%rdx
ffffffff80004000:	31 c0                	xor    %eax,%eax
ffffffff80004002:	e8 e9 01 00 00       	call   ffffffff800041f0 <printf>
        __asm__ volatile("cli; hlt");
ffffffff80004007:	fa                   	cli    
ffffffff80004008:	f4                   	hlt    
ffffffff80004009:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000400d:	c3                   	ret    
ffffffff8000400e:	66 90                	xchg   %ax,%ax
                    timer_secinc();
ffffffff80004010:	31 c0                	xor    %eax,%eax
ffffffff80004012:	e8 49 13 00 00       	call   ffffffff80005360 <timer_secinc>
                    timer_reset();
ffffffff80004017:	31 c0                	xor    %eax,%eax
ffffffff80004019:	e8 12 13 00 00       	call   ffffffff80005330 <timer_reset>
ffffffff8000401e:	eb b3                	jmp    ffffffff80003fd3 <inthandler+0x53>

ffffffff80004020 <print_hex_impl>:
#include <font8.h>

char buffer[4096];
int bufUsed = 0;

void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff80004020:	f3 0f 1e fa          	endbr64 
ffffffff80004024:	89 f1                	mov    %esi,%ecx
ffffffff80004026:	83 e9 01             	sub    $0x1,%ecx
ffffffff80004029:	78 4b                	js     ffffffff80004076 <print_hex_impl+0x56>
ffffffff8000402b:	48 63 15 8e ed 0d 00 	movslq 0xded8e(%rip),%rdx        # ffffffff800e2dc0 <bufUsed>
ffffffff80004032:	48 8d 05 a7 ed 0d 00 	lea    0xdeda7(%rip),%rax        # ffffffff800e2de0 <buffer>
ffffffff80004039:	c1 e1 02             	shl    $0x2,%ecx
ffffffff8000403c:	4c 8d 05 33 4e 00 00 	lea    0x4e33(%rip),%r8        # ffffffff80008e76 <font8+0x596>
ffffffff80004043:	49 89 d1             	mov    %rdx,%r9
ffffffff80004046:	48 01 c2             	add    %rax,%rdx
ffffffff80004049:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80004050:	48 89 f8             	mov    %rdi,%rax
ffffffff80004053:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80004057:	48 d3 e8             	shr    %cl,%rax
ffffffff8000405a:	83 e9 04             	sub    $0x4,%ecx
ffffffff8000405d:	83 e0 0f             	and    $0xf,%eax
#define print_hex(num) print_hex_impl((num), sizeof((num)) * 2)

void putch(char c)
{
    buffer[bufUsed++] = c;
ffffffff80004060:	41 0f b6 04 00       	movzbl (%r8,%rax,1),%eax
ffffffff80004065:	88 42 ff             	mov    %al,-0x1(%rdx)
void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff80004068:	83 f9 fc             	cmp    $0xfffffffc,%ecx
ffffffff8000406b:	75 e3                	jne    ffffffff80004050 <print_hex_impl+0x30>
    buffer[bufUsed++] = c;
ffffffff8000406d:	44 01 ce             	add    %r9d,%esi
ffffffff80004070:	89 35 4a ed 0d 00    	mov    %esi,0xded4a(%rip)        # ffffffff800e2dc0 <bufUsed>
void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff80004076:	c3                   	ret    
ffffffff80004077:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8000407e:	00 00 

ffffffff80004080 <putch>:
{
ffffffff80004080:	f3 0f 1e fa          	endbr64 
    buffer[bufUsed++] = c;
ffffffff80004084:	48 63 05 35 ed 0d 00 	movslq 0xded35(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
ffffffff8000408b:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff8000408e:	89 15 2c ed 0d 00    	mov    %edx,0xded2c(%rip)        # ffffffff800e2dc0 <bufUsed>
ffffffff80004094:	48 8d 15 45 ed 0d 00 	lea    0xded45(%rip),%rdx        # ffffffff800e2de0 <buffer>
ffffffff8000409b:	40 88 3c 02          	mov    %dil,(%rdx,%rax,1)
}
ffffffff8000409f:	c3                   	ret    

ffffffff800040a0 <flush>:

void flush()
{
ffffffff800040a0:	f3 0f 1e fa          	endbr64 
    buffer[0] = '\0';
ffffffff800040a4:	c6 05 35 ed 0d 00 00 	movb   $0x0,0xded35(%rip)        # ffffffff800e2de0 <buffer>
    bufUsed = 0;
ffffffff800040ab:	c7 05 0b ed 0d 00 00 	movl   $0x0,0xded0b(%rip)        # ffffffff800e2dc0 <bufUsed>
ffffffff800040b2:	00 00 00 
}
ffffffff800040b5:	c3                   	ret    
ffffffff800040b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff800040bd:	00 00 00 

ffffffff800040c0 <putd>:

void putd(int x)
{
ffffffff800040c0:	f3 0f 1e fa          	endbr64 
ffffffff800040c4:	41 54                	push   %r12
ffffffff800040c6:	89 fe                	mov    %edi,%esi
    buffer[bufUsed++] = c;
ffffffff800040c8:	4c 8d 25 11 ed 0d 00 	lea    0xded11(%rip),%r12        # ffffffff800e2de0 <buffer>
{
ffffffff800040cf:	55                   	push   %rbp
ffffffff800040d0:	53                   	push   %rbx
    char strdec[60];
    char* str = itoa(strdec, x);
    for(int i = 0; i < strlen(str); i++)
ffffffff800040d1:	31 db                	xor    %ebx,%ebx
{
ffffffff800040d3:	48 83 ec 40          	sub    $0x40,%rsp
    char* str = itoa(strdec, x);
ffffffff800040d7:	48 8d 7c 24 04       	lea    0x4(%rsp),%rdi
ffffffff800040dc:	e8 ff 03 00 00       	call   ffffffff800044e0 <itoa>
ffffffff800040e1:	48 89 c5             	mov    %rax,%rbp
    for(int i = 0; i < strlen(str); i++)
ffffffff800040e4:	eb 27                	jmp    ffffffff8000410d <putd+0x4d>
ffffffff800040e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff800040ed:	00 00 00 
    buffer[bufUsed++] = c;
ffffffff800040f0:	48 63 05 c9 ec 0d 00 	movslq 0xdecc9(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
    {
        putch(str[i]);
ffffffff800040f7:	0f b6 54 1d 00       	movzbl 0x0(%rbp,%rbx,1),%edx
    buffer[bufUsed++] = c;
ffffffff800040fc:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80004100:	8d 48 01             	lea    0x1(%rax),%ecx
ffffffff80004103:	41 88 14 04          	mov    %dl,(%r12,%rax,1)
ffffffff80004107:	89 0d b3 ec 0d 00    	mov    %ecx,0xdecb3(%rip)        # ffffffff800e2dc0 <bufUsed>
    for(int i = 0; i < strlen(str); i++)
ffffffff8000410d:	48 89 ef             	mov    %rbp,%rdi
ffffffff80004110:	e8 9b 03 00 00       	call   ffffffff800044b0 <strlen>
ffffffff80004115:	39 d8                	cmp    %ebx,%eax
ffffffff80004117:	77 d7                	ja     ffffffff800040f0 <putd+0x30>
    }
}
ffffffff80004119:	48 83 c4 40          	add    $0x40,%rsp
ffffffff8000411d:	5b                   	pop    %rbx
ffffffff8000411e:	5d                   	pop    %rbp
ffffffff8000411f:	41 5c                	pop    %r12
ffffffff80004121:	c3                   	ret    
ffffffff80004122:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80004129:	00 00 00 00 
ffffffff8000412d:	0f 1f 00             	nopl   (%rax)

ffffffff80004130 <puts>:

void puts(const char* str)
{
ffffffff80004130:	f3 0f 1e fa          	endbr64 
    if(TerminalMode == false)
ffffffff80004134:	80 3d 75 7f 00 00 00 	cmpb   $0x0,0x7f75(%rip)        # ffffffff8000c0b0 <TerminalMode>
ffffffff8000413b:	75 43                	jne    ffffffff80004180 <puts+0x50>
{
ffffffff8000413d:	48 83 ec 08          	sub    $0x8,%rsp
        draw_str((volatile uint32_t *)framebuffer->address, framebuffer->pitch, font8, last_finish_x+10, 40, str, 0xFFFFFFFF, 2);
ffffffff80004141:	48 8b 05 a8 fc 0d 00 	mov    0xdfca8(%rip),%rax        # ffffffff800e3df0 <framebuffer>
ffffffff80004148:	8b 15 4a dc 0d 00    	mov    0xddc4a(%rip),%edx        # ffffffff800e1d98 <last_finish_x>
ffffffff8000414e:	49 89 f9             	mov    %rdi,%r9
ffffffff80004151:	41 b8 28 00 00 00    	mov    $0x28,%r8d
ffffffff80004157:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff8000415b:	6a 02                	push   $0x2
ffffffff8000415d:	8d 4a 0a             	lea    0xa(%rdx),%ecx
ffffffff80004160:	48 8d 15 39 4d 00 00 	lea    0x4d39(%rip),%rdx        # ffffffff80008ea0 <font8>
ffffffff80004167:	6a ff                	push   $0xffffffffffffffff
ffffffff80004169:	48 8b 38             	mov    (%rax),%rdi
ffffffff8000416c:	e8 5f fb ff ff       	call   ffffffff80003cd0 <draw_str>
    else
        kwrite(str);
}
ffffffff80004171:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80004175:	c3                   	ret    
ffffffff80004176:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff8000417d:	00 00 00 
        kwrite(str);
ffffffff80004180:	e9 4b 05 00 00       	jmp    ffffffff800046d0 <kwrite>
ffffffff80004185:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000418c:	00 00 00 00 

ffffffff80004190 <pbuf>:

void pbuf()
{
ffffffff80004190:	f3 0f 1e fa          	endbr64 
    if(TerminalMode == false)
ffffffff80004194:	80 3d 15 7f 00 00 00 	cmpb   $0x0,0x7f15(%rip)        # ffffffff8000c0b0 <TerminalMode>
ffffffff8000419b:	75 43                	jne    ffffffff800041e0 <pbuf+0x50>
{
ffffffff8000419d:	48 83 ec 08          	sub    $0x8,%rsp
        draw_str((volatile uint32_t *)framebuffer->address, framebuffer->pitch, font8, last_finish_x+10, 40, str, 0xFFFFFFFF, 2);
ffffffff800041a1:	48 8b 05 48 fc 0d 00 	mov    0xdfc48(%rip),%rax        # ffffffff800e3df0 <framebuffer>
ffffffff800041a8:	8b 15 ea db 0d 00    	mov    0xddbea(%rip),%edx        # ffffffff800e1d98 <last_finish_x>
ffffffff800041ae:	4c 8d 0d 2b ec 0d 00 	lea    0xdec2b(%rip),%r9        # ffffffff800e2de0 <buffer>
ffffffff800041b5:	41 b8 28 00 00 00    	mov    $0x28,%r8d
ffffffff800041bb:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff800041bf:	6a 02                	push   $0x2
ffffffff800041c1:	8d 4a 0a             	lea    0xa(%rdx),%ecx
ffffffff800041c4:	48 8d 15 d5 4c 00 00 	lea    0x4cd5(%rip),%rdx        # ffffffff80008ea0 <font8>
ffffffff800041cb:	6a ff                	push   $0xffffffffffffffff
ffffffff800041cd:	48 8b 38             	mov    (%rax),%rdi
ffffffff800041d0:	e8 fb fa ff ff       	call   ffffffff80003cd0 <draw_str>
    puts(buffer);
}
ffffffff800041d5:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800041d9:	c3                   	ret    
ffffffff800041da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        kwrite(str);
ffffffff800041e0:	48 8d 3d f9 eb 0d 00 	lea    0xdebf9(%rip),%rdi        # ffffffff800e2de0 <buffer>
ffffffff800041e7:	e9 e4 04 00 00       	jmp    ffffffff800046d0 <kwrite>
ffffffff800041ec:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800041f0 <printf>:


int printf(const char* fmt, ...)
{
ffffffff800041f0:	f3 0f 1e fa          	endbr64 
ffffffff800041f4:	41 57                	push   %r15
ffffffff800041f6:	41 56                	push   %r14
ffffffff800041f8:	4c 8d 35 e1 eb 0d 00 	lea    0xdebe1(%rip),%r14        # ffffffff800e2de0 <buffer>
ffffffff800041ff:	41 55                	push   %r13
ffffffff80004201:	49 89 fd             	mov    %rdi,%r13
ffffffff80004204:	41 54                	push   %r12
ffffffff80004206:	55                   	push   %rbp
ffffffff80004207:	53                   	push   %rbx
ffffffff80004208:	48 83 ec 68          	sub    $0x68,%rsp
    va_list list;
    va_start(list, fmt);
ffffffff8000420c:	48 8d 84 24 a0 00 00 	lea    0xa0(%rsp),%rax
ffffffff80004213:	00 
{
ffffffff80004214:	48 89 74 24 38       	mov    %rsi,0x38(%rsp)
    va_start(list, fmt);
ffffffff80004219:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff8000421e:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
{
ffffffff80004223:	48 89 54 24 40       	mov    %rdx,0x40(%rsp)
ffffffff80004228:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
ffffffff8000422d:	4c 89 44 24 50       	mov    %r8,0x50(%rsp)
ffffffff80004232:	4c 89 4c 24 58       	mov    %r9,0x58(%rsp)
    va_start(list, fmt);
ffffffff80004237:	c7 44 24 18 08 00 00 	movl   $0x8,0x18(%rsp)
ffffffff8000423e:	00 
ffffffff8000423f:	48 89 44 24 28       	mov    %rax,0x28(%rsp)

    int len = strlen(fmt);
ffffffff80004244:	e8 67 02 00 00       	call   ffffffff800044b0 <strlen>

    for(int i = 0; i < len; i++)
ffffffff80004249:	85 c0                	test   %eax,%eax
ffffffff8000424b:	0f 8e 96 00 00 00    	jle    ffffffff800042e7 <printf+0xf7>
ffffffff80004251:	89 c5                	mov    %eax,%ebp
ffffffff80004253:	31 db                	xor    %ebx,%ebx
ffffffff80004255:	4c 8d 25 1a 4c 00 00 	lea    0x4c1a(%rip),%r12        # ffffffff80008e76 <font8+0x596>
ffffffff8000425c:	eb 1d                	jmp    ffffffff8000427b <printf+0x8b>
ffffffff8000425e:	66 90                	xchg   %ax,%ax
    buffer[bufUsed++] = c;
ffffffff80004260:	48 63 05 59 eb 0d 00 	movslq 0xdeb59(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
ffffffff80004267:	8d 48 01             	lea    0x1(%rax),%ecx
ffffffff8000426a:	41 88 14 06          	mov    %dl,(%r14,%rax,1)
ffffffff8000426e:	89 0d 4c eb 0d 00    	mov    %ecx,0xdeb4c(%rip)        # ffffffff800e2dc0 <bufUsed>
    for(int i = 0; i < len; i++)
ffffffff80004274:	83 c3 01             	add    $0x1,%ebx
ffffffff80004277:	39 dd                	cmp    %ebx,%ebp
ffffffff80004279:	7e 6c                	jle    ffffffff800042e7 <printf+0xf7>
    {
        if(fmt[i] == '%')
ffffffff8000427b:	48 63 c3             	movslq %ebx,%rax
ffffffff8000427e:	41 0f b6 54 05 00    	movzbl 0x0(%r13,%rax,1),%edx
ffffffff80004284:	80 fa 25             	cmp    $0x25,%dl
ffffffff80004287:	75 d7                	jne    ffffffff80004260 <printf+0x70>
        {
            switch(fmt[++i])
ffffffff80004289:	83 c3 01             	add    $0x1,%ebx
ffffffff8000428c:	48 63 c3             	movslq %ebx,%rax
ffffffff8000428f:	41 0f b6 44 05 00    	movzbl 0x0(%r13,%rax,1),%eax
ffffffff80004295:	3c 64                	cmp    $0x64,%al
ffffffff80004297:	0f 84 2b 01 00 00    	je     ffffffff800043c8 <printf+0x1d8>
ffffffff8000429d:	0f 8f 8d 00 00 00    	jg     ffffffff80004330 <printf+0x140>
ffffffff800042a3:	3c 25                	cmp    $0x25,%al
ffffffff800042a5:	0f 84 ad 01 00 00    	je     ffffffff80004458 <printf+0x268>
ffffffff800042ab:	3c 63                	cmp    $0x63,%al
ffffffff800042ad:	75 c5                	jne    ffffffff80004274 <printf+0x84>
            {
                case 'c':
                {
                    int c = va_arg(list, int);
ffffffff800042af:	8b 44 24 18          	mov    0x18(%rsp),%eax
ffffffff800042b3:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800042b6:	0f 87 f4 00 00 00    	ja     ffffffff800043b0 <printf+0x1c0>
ffffffff800042bc:	89 c2                	mov    %eax,%edx
ffffffff800042be:	83 c0 08             	add    $0x8,%eax
ffffffff800042c1:	48 03 54 24 28       	add    0x28(%rsp),%rdx
ffffffff800042c6:	89 44 24 18          	mov    %eax,0x18(%rsp)
    buffer[bufUsed++] = c;
ffffffff800042ca:	48 63 05 ef ea 0d 00 	movslq 0xdeaef(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
                    putch(c);
ffffffff800042d1:	8b 12                	mov    (%rdx),%edx
    for(int i = 0; i < len; i++)
ffffffff800042d3:	83 c3 01             	add    $0x1,%ebx
    buffer[bufUsed++] = c;
ffffffff800042d6:	8d 48 01             	lea    0x1(%rax),%ecx
ffffffff800042d9:	41 88 14 06          	mov    %dl,(%r14,%rax,1)
ffffffff800042dd:	89 0d dd ea 0d 00    	mov    %ecx,0xdeadd(%rip)        # ffffffff800e2dc0 <bufUsed>
    for(int i = 0; i < len; i++)
ffffffff800042e3:	39 dd                	cmp    %ebx,%ebp
ffffffff800042e5:	7f 94                	jg     ffffffff8000427b <printf+0x8b>
    buffer[bufUsed++] = c;
ffffffff800042e7:	48 63 05 d2 ea 0d 00 	movslq 0xdead2(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
        {
            putch(fmt[i]);
        }
    }
    putch('\0');
    puts(buffer);
ffffffff800042ee:	4c 89 f7             	mov    %r14,%rdi
    buffer[bufUsed++] = c;
ffffffff800042f1:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff800042f4:	41 c6 04 06 00       	movb   $0x0,(%r14,%rax,1)
ffffffff800042f9:	89 15 c1 ea 0d 00    	mov    %edx,0xdeac1(%rip)        # ffffffff800e2dc0 <bufUsed>
    puts(buffer);
ffffffff800042ff:	e8 2c fe ff ff       	call   ffffffff80004130 <puts>
    buffer[0] = '\0';
ffffffff80004304:	c6 05 d5 ea 0d 00 00 	movb   $0x0,0xdead5(%rip)        # ffffffff800e2de0 <buffer>
    flush();
    va_end(list);
    return 1;
}
ffffffff8000430b:	b8 01 00 00 00       	mov    $0x1,%eax
    bufUsed = 0;
ffffffff80004310:	c7 05 a6 ea 0d 00 00 	movl   $0x0,0xdeaa6(%rip)        # ffffffff800e2dc0 <bufUsed>
ffffffff80004317:	00 00 00 
}
ffffffff8000431a:	48 83 c4 68          	add    $0x68,%rsp
ffffffff8000431e:	5b                   	pop    %rbx
ffffffff8000431f:	5d                   	pop    %rbp
ffffffff80004320:	41 5c                	pop    %r12
ffffffff80004322:	41 5d                	pop    %r13
ffffffff80004324:	41 5e                	pop    %r14
ffffffff80004326:	41 5f                	pop    %r15
ffffffff80004328:	c3                   	ret    
ffffffff80004329:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            switch(fmt[++i])
ffffffff80004330:	3c 73                	cmp    $0x73,%al
ffffffff80004332:	0f 84 b8 00 00 00    	je     ffffffff800043f0 <printf+0x200>
ffffffff80004338:	3c 78                	cmp    $0x78,%al
ffffffff8000433a:	0f 85 34 ff ff ff    	jne    ffffffff80004274 <printf+0x84>
                    int hex = va_arg(list, int);
ffffffff80004340:	8b 44 24 18          	mov    0x18(%rsp),%eax
ffffffff80004344:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80004347:	77 57                	ja     ffffffff800043a0 <printf+0x1b0>
ffffffff80004349:	89 c2                	mov    %eax,%edx
ffffffff8000434b:	83 c0 08             	add    $0x8,%eax
ffffffff8000434e:	48 03 54 24 28       	add    0x28(%rsp),%rdx
ffffffff80004353:	89 44 24 18          	mov    %eax,0x18(%rsp)
                    print_hex(hex);
ffffffff80004357:	48 63 32             	movslq (%rdx),%rsi
void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff8000435a:	48 63 15 5f ea 0d 00 	movslq 0xdea5f(%rip),%rdx        # ffffffff800e2dc0 <bufUsed>
                    print_hex(hex);
ffffffff80004361:	b9 1c 00 00 00       	mov    $0x1c,%ecx
ffffffff80004366:	48 89 d7             	mov    %rdx,%rdi
ffffffff80004369:	4c 01 f2             	add    %r14,%rdx
ffffffff8000436c:	0f 1f 40 00          	nopl   0x0(%rax)
void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff80004370:	48 89 f0             	mov    %rsi,%rax
ffffffff80004373:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80004377:	48 d3 e8             	shr    %cl,%rax
ffffffff8000437a:	83 e9 04             	sub    $0x4,%ecx
ffffffff8000437d:	83 e0 0f             	and    $0xf,%eax
    buffer[bufUsed++] = c;
ffffffff80004380:	41 0f b6 04 04       	movzbl (%r12,%rax,1),%eax
ffffffff80004385:	88 42 ff             	mov    %al,-0x1(%rdx)
void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff80004388:	83 f9 fc             	cmp    $0xfffffffc,%ecx
ffffffff8000438b:	75 e3                	jne    ffffffff80004370 <printf+0x180>
    buffer[bufUsed++] = c;
ffffffff8000438d:	83 c7 08             	add    $0x8,%edi
ffffffff80004390:	89 3d 2a ea 0d 00    	mov    %edi,0xdea2a(%rip)        # ffffffff800e2dc0 <bufUsed>
ffffffff80004396:	e9 d9 fe ff ff       	jmp    ffffffff80004274 <printf+0x84>
ffffffff8000439b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    int hex = va_arg(list, int);
ffffffff800043a0:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff800043a5:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff800043a9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff800043ae:	eb a7                	jmp    ffffffff80004357 <printf+0x167>
                    int c = va_arg(list, int);
ffffffff800043b0:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff800043b5:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff800043b9:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff800043be:	e9 07 ff ff ff       	jmp    ffffffff800042ca <printf+0xda>
ffffffff800043c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    int dcm = va_arg(list, int);
ffffffff800043c8:	8b 44 24 18          	mov    0x18(%rsp),%eax
ffffffff800043cc:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800043cf:	0f 87 a3 00 00 00    	ja     ffffffff80004478 <printf+0x288>
ffffffff800043d5:	89 c2                	mov    %eax,%edx
ffffffff800043d7:	83 c0 08             	add    $0x8,%eax
ffffffff800043da:	48 03 54 24 28       	add    0x28(%rsp),%rdx
ffffffff800043df:	89 44 24 18          	mov    %eax,0x18(%rsp)
                    putd(dcm);
ffffffff800043e3:	8b 3a                	mov    (%rdx),%edi
ffffffff800043e5:	e8 d6 fc ff ff       	call   ffffffff800040c0 <putd>
                    break;
ffffffff800043ea:	e9 85 fe ff ff       	jmp    ffffffff80004274 <printf+0x84>
ffffffff800043ef:	90                   	nop
                    char* str = va_arg(list, char*);
ffffffff800043f0:	8b 44 24 18          	mov    0x18(%rsp),%eax
ffffffff800043f4:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800043f7:	0f 87 93 00 00 00    	ja     ffffffff80004490 <printf+0x2a0>
ffffffff800043fd:	89 c2                	mov    %eax,%edx
ffffffff800043ff:	83 c0 08             	add    $0x8,%eax
ffffffff80004402:	48 03 54 24 28       	add    0x28(%rsp),%rdx
ffffffff80004407:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff8000440b:	48 8b 12             	mov    (%rdx),%rdx
                    for(int i = 0; i < strlen(str); i++)
ffffffff8000440e:	45 31 ff             	xor    %r15d,%r15d
ffffffff80004411:	eb 22                	jmp    ffffffff80004435 <printf+0x245>
ffffffff80004413:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    buffer[bufUsed++] = c;
ffffffff80004418:	48 63 05 a1 e9 0d 00 	movslq 0xde9a1(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
                        putch(str[i]);
ffffffff8000441f:	42 0f b6 0c 3a       	movzbl (%rdx,%r15,1),%ecx
    buffer[bufUsed++] = c;
ffffffff80004424:	49 83 c7 01          	add    $0x1,%r15
ffffffff80004428:	8d 70 01             	lea    0x1(%rax),%esi
ffffffff8000442b:	41 88 0c 06          	mov    %cl,(%r14,%rax,1)
ffffffff8000442f:	89 35 8b e9 0d 00    	mov    %esi,0xde98b(%rip)        # ffffffff800e2dc0 <bufUsed>
                    for(int i = 0; i < strlen(str); i++)
ffffffff80004435:	48 89 d7             	mov    %rdx,%rdi
ffffffff80004438:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff8000443d:	e8 6e 00 00 00       	call   ffffffff800044b0 <strlen>
ffffffff80004442:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff80004447:	44 39 f8             	cmp    %r15d,%eax
ffffffff8000444a:	77 cc                	ja     ffffffff80004418 <printf+0x228>
ffffffff8000444c:	e9 23 fe ff ff       	jmp    ffffffff80004274 <printf+0x84>
ffffffff80004451:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    buffer[bufUsed++] = c;
ffffffff80004458:	48 63 05 61 e9 0d 00 	movslq 0xde961(%rip),%rax        # ffffffff800e2dc0 <bufUsed>
ffffffff8000445f:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff80004462:	41 c6 04 06 25       	movb   $0x25,(%r14,%rax,1)
ffffffff80004467:	89 15 53 e9 0d 00    	mov    %edx,0xde953(%rip)        # ffffffff800e2dc0 <bufUsed>
}
ffffffff8000446d:	e9 02 fe ff ff       	jmp    ffffffff80004274 <printf+0x84>
ffffffff80004472:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                    int dcm = va_arg(list, int);
ffffffff80004478:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff8000447d:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80004481:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff80004486:	e9 58 ff ff ff       	jmp    ffffffff800043e3 <printf+0x1f3>
ffffffff8000448b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    char* str = va_arg(list, char*);
ffffffff80004490:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80004495:	48 8d 42 08          	lea    0x8(%rdx),%rax
ffffffff80004499:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffffff8000449e:	e9 68 ff ff ff       	jmp    ffffffff8000440b <printf+0x21b>
ffffffff800044a3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff800044aa:	00 00 00 
ffffffff800044ad:	0f 1f 00             	nopl   (%rax)

ffffffff800044b0 <strlen>:
#include <libc/string.h>

uint32_t strlen(const char* str)
{
ffffffff800044b0:	f3 0f 1e fa          	endbr64 
    uint32_t len = 0;
ffffffff800044b4:	31 c0                	xor    %eax,%eax

    while(str[len] != '\0')
ffffffff800044b6:	80 3f 00             	cmpb   $0x0,(%rdi)
ffffffff800044b9:	74 15                	je     ffffffff800044d0 <strlen+0x20>
ffffffff800044bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        len++;
ffffffff800044c0:	8d 50 01             	lea    0x1(%rax),%edx
    while(str[len] != '\0')
ffffffff800044c3:	80 3c 17 00          	cmpb   $0x0,(%rdi,%rdx,1)
        len++;
ffffffff800044c7:	48 89 d0             	mov    %rdx,%rax
    while(str[len] != '\0')
ffffffff800044ca:	75 f4                	jne    ffffffff800044c0 <strlen+0x10>
ffffffff800044cc:	c3                   	ret    
ffffffff800044cd:	0f 1f 00             	nopl   (%rax)
    }

    return len;
}
ffffffff800044d0:	c3                   	ret    
ffffffff800044d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff800044d8:	00 00 00 00 
ffffffff800044dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800044e0 <itoa>:

char* itoa(char* str, int m){
ffffffff800044e0:	f3 0f 1e fa          	endbr64 
ffffffff800044e4:	49 89 f8             	mov    %rdi,%r8
ffffffff800044e7:	48 89 f9             	mov    %rdi,%rcx
    int tmp = 0;
    int f = 0;
    while(m != 0)
ffffffff800044ea:	85 f6                	test   %esi,%esi
ffffffff800044ec:	74 2f                	je     ffffffff8000451d <itoa+0x3d>
ffffffff800044ee:	66 90                	xchg   %ax,%ax
    {
        tmp = /*tmp * 10*/ m % 10;
ffffffff800044f0:	48 63 c6             	movslq %esi,%rax
ffffffff800044f3:	89 f2                	mov    %esi,%edx
    while(m != 0)
ffffffff800044f5:	48 83 c1 01          	add    $0x1,%rcx
        tmp = /*tmp * 10*/ m % 10;
ffffffff800044f9:	48 69 c0 67 66 66 66 	imul   $0x66666667,%rax,%rax
ffffffff80004500:	c1 fa 1f             	sar    $0x1f,%edx
ffffffff80004503:	48 c1 f8 22          	sar    $0x22,%rax
ffffffff80004507:	29 d0                	sub    %edx,%eax
ffffffff80004509:	8d 14 80             	lea    (%rax,%rax,4),%edx
ffffffff8000450c:	01 d2                	add    %edx,%edx
ffffffff8000450e:	29 d6                	sub    %edx,%esi
        str[f++] = tmp+'0';
ffffffff80004510:	83 c6 30             	add    $0x30,%esi
ffffffff80004513:	40 88 71 ff          	mov    %sil,-0x1(%rcx)

        m /= 10;
ffffffff80004517:	89 c6                	mov    %eax,%esi
    while(m != 0)
ffffffff80004519:	85 c0                	test   %eax,%eax
ffffffff8000451b:	75 d3                	jne    ffffffff800044f0 <itoa+0x10>
    while(str[len] != '\0')
ffffffff8000451d:	41 0f b6 30          	movzbl (%r8),%esi
    uint32_t len = 0;
ffffffff80004521:	31 c0                	xor    %eax,%eax
    while(str[len] != '\0')
ffffffff80004523:	40 84 f6             	test   %sil,%sil
ffffffff80004526:	74 51                	je     ffffffff80004579 <itoa+0x99>
ffffffff80004528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000452f:	00 
        len++;
ffffffff80004530:	8d 48 01             	lea    0x1(%rax),%ecx
    while(str[len] != '\0')
ffffffff80004533:	41 80 3c 08 00       	cmpb   $0x0,(%r8,%rcx,1)
        len++;
ffffffff80004538:	48 89 c8             	mov    %rcx,%rax
    while(str[len] != '\0')
ffffffff8000453b:	75 f3                	jne    ffffffff80004530 <itoa+0x50>

char* strrev(char* str)
{
    size_t strl = strlen(str);

    for(int i = 0; i < strl / 2; i++)
ffffffff8000453d:	49 89 c9             	mov    %rcx,%r9
ffffffff80004540:	49 d1 e9             	shr    %r9
ffffffff80004543:	74 34                	je     ffffffff80004579 <itoa+0x99>
ffffffff80004545:	4c 89 c7             	mov    %r8,%rdi
ffffffff80004548:	49 8d 44 08 ff       	lea    -0x1(%r8,%rcx,1),%rax
ffffffff8000454d:	4c 89 c2             	mov    %r8,%rdx
ffffffff80004550:	4c 29 cf             	sub    %r9,%rdi
ffffffff80004553:	48 01 cf             	add    %rcx,%rdi
ffffffff80004556:	eb 0f                	jmp    ffffffff80004567 <itoa+0x87>
ffffffff80004558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8000455f:	00 
    {
        char ch = str[i];
ffffffff80004560:	0f b6 32             	movzbl (%rdx),%esi
ffffffff80004563:	48 83 e8 01          	sub    $0x1,%rax
        str[i] = str[strl - i - 1];
ffffffff80004567:	0f b6 08             	movzbl (%rax),%ecx
    for(int i = 0; i < strl / 2; i++)
ffffffff8000456a:	48 83 c2 01          	add    $0x1,%rdx
        str[i] = str[strl - i - 1];
ffffffff8000456e:	88 4a ff             	mov    %cl,-0x1(%rdx)
        str[strl - i - 1] = ch;
ffffffff80004571:	40 88 30             	mov    %sil,(%rax)
    for(int i = 0; i < strl / 2; i++)
ffffffff80004574:	48 39 c7             	cmp    %rax,%rdi
ffffffff80004577:	75 e7                	jne    ffffffff80004560 <itoa+0x80>
}
ffffffff80004579:	4c 89 c0             	mov    %r8,%rax
ffffffff8000457c:	c3                   	ret    
ffffffff8000457d:	0f 1f 00             	nopl   (%rax)

ffffffff80004580 <strrev>:
{
ffffffff80004580:	f3 0f 1e fa          	endbr64 
    while(str[len] != '\0')
ffffffff80004584:	44 0f b6 07          	movzbl (%rdi),%r8d
{
ffffffff80004588:	48 89 f8             	mov    %rdi,%rax
    while(str[len] != '\0')
ffffffff8000458b:	45 84 c0             	test   %r8b,%r8b
ffffffff8000458e:	74 4b                	je     ffffffff800045db <strrev+0x5b>
    uint32_t len = 0;
ffffffff80004590:	31 d2                	xor    %edx,%edx
ffffffff80004592:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        len++;
ffffffff80004598:	8d 72 01             	lea    0x1(%rdx),%esi
    while(str[len] != '\0')
ffffffff8000459b:	80 3c 30 00          	cmpb   $0x0,(%rax,%rsi,1)
        len++;
ffffffff8000459f:	48 89 f2             	mov    %rsi,%rdx
    while(str[len] != '\0')
ffffffff800045a2:	75 f4                	jne    ffffffff80004598 <strrev+0x18>
    for(int i = 0; i < strl / 2; i++)
ffffffff800045a4:	49 89 f1             	mov    %rsi,%r9
ffffffff800045a7:	49 d1 e9             	shr    %r9
ffffffff800045aa:	74 2f                	je     ffffffff800045db <strrev+0x5b>
ffffffff800045ac:	48 89 c7             	mov    %rax,%rdi
ffffffff800045af:	48 8d 54 30 ff       	lea    -0x1(%rax,%rsi,1),%rdx
ffffffff800045b4:	48 89 c1             	mov    %rax,%rcx
ffffffff800045b7:	4c 29 cf             	sub    %r9,%rdi
ffffffff800045ba:	48 01 f7             	add    %rsi,%rdi
ffffffff800045bd:	eb 09                	jmp    ffffffff800045c8 <strrev+0x48>
ffffffff800045bf:	90                   	nop
        char ch = str[i];
ffffffff800045c0:	44 0f b6 01          	movzbl (%rcx),%r8d
ffffffff800045c4:	48 83 ea 01          	sub    $0x1,%rdx
        str[i] = str[strl - i - 1];
ffffffff800045c8:	0f b6 32             	movzbl (%rdx),%esi
    for(int i = 0; i < strl / 2; i++)
ffffffff800045cb:	48 83 c1 01          	add    $0x1,%rcx
        str[i] = str[strl - i - 1];
ffffffff800045cf:	40 88 71 ff          	mov    %sil,-0x1(%rcx)
        str[strl - i - 1] = ch;
ffffffff800045d3:	44 88 02             	mov    %r8b,(%rdx)
    for(int i = 0; i < strl / 2; i++)
ffffffff800045d6:	48 39 fa             	cmp    %rdi,%rdx
ffffffff800045d9:	75 e5                	jne    ffffffff800045c0 <strrev+0x40>
    }

    return str;
ffffffff800045db:	c3                   	ret    
ffffffff800045dc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800045e0 <memcpy>:
// 4 functions even if they are not directly called.
// Implement them as the C specification mandates.
// DO NOT remove or rename these functions, or stuff will eventually break!
// They CAN be moved to a different .c file.

void *memcpy(void *dest, const void *src, size_t n) {
ffffffff800045e0:	f3 0f 1e fa          	endbr64 
ffffffff800045e4:	48 89 f8             	mov    %rdi,%rax
    uint8_t *pdest = (uint8_t *)dest;
    const uint8_t *psrc = (const uint8_t *)src;

    for (size_t i = 0; i < n; i++) {
ffffffff800045e7:	48 85 d2             	test   %rdx,%rdx
ffffffff800045ea:	74 16                	je     ffffffff80004602 <memcpy+0x22>
ffffffff800045ec:	31 c9                	xor    %ecx,%ecx
ffffffff800045ee:	66 90                	xchg   %ax,%ax
        pdest[i] = psrc[i];
ffffffff800045f0:	44 0f b6 04 0e       	movzbl (%rsi,%rcx,1),%r8d
ffffffff800045f5:	44 88 04 08          	mov    %r8b,(%rax,%rcx,1)
    for (size_t i = 0; i < n; i++) {
ffffffff800045f9:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800045fd:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80004600:	75 ee                	jne    ffffffff800045f0 <memcpy+0x10>
    }

    return dest;
}
ffffffff80004602:	c3                   	ret    
ffffffff80004603:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000460a:	00 00 00 00 
ffffffff8000460e:	66 90                	xchg   %ax,%ax

ffffffff80004610 <memset>:

void *memset(void *s, int c, size_t n) {
ffffffff80004610:	f3 0f 1e fa          	endbr64 
ffffffff80004614:	48 89 f8             	mov    %rdi,%rax
ffffffff80004617:	48 89 f9             	mov    %rdi,%rcx
ffffffff8000461a:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
    uint8_t *p = (uint8_t *)s;

    for (size_t i = 0; i < n; i++) {
ffffffff8000461e:	48 85 d2             	test   %rdx,%rdx
ffffffff80004621:	74 11                	je     ffffffff80004634 <memset+0x24>
ffffffff80004623:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        p[i] = (uint8_t)c;
ffffffff80004628:	40 88 31             	mov    %sil,(%rcx)
    for (size_t i = 0; i < n; i++) {
ffffffff8000462b:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000462f:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80004632:	75 f4                	jne    ffffffff80004628 <memset+0x18>
    }

    return s;
}
ffffffff80004634:	c3                   	ret    
ffffffff80004635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000463c:	00 00 00 00 

ffffffff80004640 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
ffffffff80004640:	f3 0f 1e fa          	endbr64 
ffffffff80004644:	48 89 f8             	mov    %rdi,%rax
    uint8_t *pdest = (uint8_t *)dest;
    const uint8_t *psrc = (const uint8_t *)src;

    if (src > dest) {
ffffffff80004647:	48 39 f7             	cmp    %rsi,%rdi
ffffffff8000464a:	73 24                	jae    ffffffff80004670 <memmove+0x30>
        for (size_t i = 0; i < n; i++) {
ffffffff8000464c:	48 85 d2             	test   %rdx,%rdx
ffffffff8000464f:	74 21                	je     ffffffff80004672 <memmove+0x32>
ffffffff80004651:	31 c9                	xor    %ecx,%ecx
ffffffff80004653:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            pdest[i] = psrc[i];
ffffffff80004658:	0f b6 3c 0e          	movzbl (%rsi,%rcx,1),%edi
ffffffff8000465c:	40 88 3c 08          	mov    %dil,(%rax,%rcx,1)
        for (size_t i = 0; i < n; i++) {
ffffffff80004660:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80004664:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80004667:	75 ef                	jne    ffffffff80004658 <memmove+0x18>
ffffffff80004669:	c3                   	ret    
ffffffff8000466a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        }
    } else if (src < dest) {
ffffffff80004670:	77 06                	ja     ffffffff80004678 <memmove+0x38>
            pdest[i-1] = psrc[i-1];
        }
    }

    return dest;
}
ffffffff80004672:	c3                   	ret    
ffffffff80004673:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        for (size_t i = n; i > 0; i--) {
ffffffff80004678:	48 85 d2             	test   %rdx,%rdx
ffffffff8000467b:	74 f5                	je     ffffffff80004672 <memmove+0x32>
ffffffff8000467d:	0f 1f 00             	nopl   (%rax)
            pdest[i-1] = psrc[i-1];
ffffffff80004680:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80004684:	0f b6 0c 16          	movzbl (%rsi,%rdx,1),%ecx
ffffffff80004688:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
        for (size_t i = n; i > 0; i--) {
ffffffff8000468b:	75 f3                	jne    ffffffff80004680 <memmove+0x40>
}
ffffffff8000468d:	c3                   	ret    
ffffffff8000468e:	66 90                	xchg   %ax,%ax

ffffffff80004690 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
ffffffff80004690:	f3 0f 1e fa          	endbr64 
    const uint8_t *p1 = (const uint8_t *)s1;
    const uint8_t *p2 = (const uint8_t *)s2;

    for (size_t i = 0; i < n; i++) {
ffffffff80004694:	48 85 d2             	test   %rdx,%rdx
ffffffff80004697:	74 27                	je     ffffffff800046c0 <memcmp+0x30>
ffffffff80004699:	31 c0                	xor    %eax,%eax
ffffffff8000469b:	eb 0c                	jmp    ffffffff800046a9 <memcmp+0x19>
ffffffff8000469d:	0f 1f 00             	nopl   (%rax)
ffffffff800046a0:	48 83 c0 01          	add    $0x1,%rax
ffffffff800046a4:	48 39 c2             	cmp    %rax,%rdx
ffffffff800046a7:	74 17                	je     ffffffff800046c0 <memcmp+0x30>
        if (p1[i] != p2[i]) {
ffffffff800046a9:	0f b6 0c 06          	movzbl (%rsi,%rax,1),%ecx
ffffffff800046ad:	38 0c 07             	cmp    %cl,(%rdi,%rax,1)
ffffffff800046b0:	74 ee                	je     ffffffff800046a0 <memcmp+0x10>
            return p1[i] < p2[i] ? -1 : 1;
ffffffff800046b2:	19 c0                	sbb    %eax,%eax
ffffffff800046b4:	83 c8 01             	or     $0x1,%eax
ffffffff800046b7:	c3                   	ret    
ffffffff800046b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800046bf:	00 
        }
    }

    return 0;
ffffffff800046c0:	31 c0                	xor    %eax,%eax
}
ffffffff800046c2:	c3                   	ret    
ffffffff800046c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff800046ca:	00 00 00 00 
ffffffff800046ce:	66 90                	xchg   %ax,%ax

ffffffff800046d0 <kwrite>:
struct limine_framebuffer *framebuffer;
struct limine_hhdm_response *hhdm;
struct flanterm_context *ft_ctx;

void kwrite(const char* str)
{
ffffffff800046d0:	f3 0f 1e fa          	endbr64 
ffffffff800046d4:	55                   	push   %rbp
ffffffff800046d5:	48 89 fd             	mov    %rdi,%rbp
    flanterm_write(ft_ctx, str, strlen(str));
ffffffff800046d8:	e8 d3 fd ff ff       	call   ffffffff800044b0 <strlen>
ffffffff800046dd:	48 8b 3d fc f6 0d 00 	mov    0xdf6fc(%rip),%rdi        # ffffffff800e3de0 <ft_ctx>
ffffffff800046e4:	48 89 ee             	mov    %rbp,%rsi
}
ffffffff800046e7:	5d                   	pop    %rbp
    flanterm_write(ft_ctx, str, strlen(str));
ffffffff800046e8:	89 c2                	mov    %eax,%edx
ffffffff800046ea:	e9 91 d5 ff ff       	jmp    ffffffff80001c80 <flanterm_write>
ffffffff800046ef:	90                   	nop

ffffffff800046f0 <_start>:

bool TerminalMode = true;

void _start(void) {
ffffffff800046f0:	f3 0f 1e fa          	endbr64 
    // Ensure the bootloader actually understands our base revision (see spec).
    if (LIMINE_BASE_REVISION_SUPPORTED == false) {
ffffffff800046f4:	48 8b 05 e5 82 00 00 	mov    0x82e5(%rip),%rax        # ffffffff8000c9e0 <limine_base_revision+0x10>
ffffffff800046fb:	48 85 c0             	test   %rax,%rax
ffffffff800046fe:	74 0b                	je     ffffffff8000470b <_start+0x1b>
    asm ("cli");
ffffffff80004700:	fa                   	cli    
ffffffff80004701:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        asm ("hlt");
ffffffff80004708:	f4                   	hlt    
    for (;;) {
ffffffff80004709:	eb fd                	jmp    ffffffff80004708 <_start+0x18>
void _start(void) {
ffffffff8000470b:	53                   	push   %rbx
        hcf();
    }

    load_gdt();
ffffffff8000470c:	31 c0                	xor    %eax,%eax
void _start(void) {
ffffffff8000470e:	48 83 ec 10          	sub    $0x10,%rsp
    load_gdt();
ffffffff80004712:	e8 69 f4 ff ff       	call   ffffffff80003b80 <load_gdt>
 
    hhdm = hhdm_request.response;
ffffffff80004717:	48 8b 05 6a 82 00 00 	mov    0x826a(%rip),%rax        # ffffffff8000c988 <hhdm_request+0x28>
ffffffff8000471e:	48 89 05 c3 f6 0d 00 	mov    %rax,0xdf6c3(%rip)        # ffffffff800e3de8 <hhdm>

        // Ensure we got a framebuffer.
    if (framebuffer_request.response == NULL
ffffffff80004725:	48 8b 05 9c 82 00 00 	mov    0x829c(%rip),%rax        # ffffffff8000c9c8 <framebuffer_request+0x28>
ffffffff8000472c:	48 85 c0             	test   %rax,%rax
ffffffff8000472f:	0f 84 f6 00 00 00    	je     ffffffff8000482b <_start+0x13b>
    || framebuffer_request.response->framebuffer_count < 1) {
ffffffff80004735:	48 8b 05 8c 82 00 00 	mov    0x828c(%rip),%rax        # ffffffff8000c9c8 <framebuffer_request+0x28>
ffffffff8000473c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80004741:	0f 84 e4 00 00 00    	je     ffffffff8000482b <_start+0x13b>
        hcf();
    }

    // Fetch the first framebuffer.
    framebuffer = framebuffer_request.response->framebuffers[0];
ffffffff80004747:	48 8b 05 7a 82 00 00 	mov    0x827a(%rip),%rax        # ffffffff8000c9c8 <framebuffer_request+0x28>

    if(TerminalMode == false)
ffffffff8000474e:	80 3d 5b 79 00 00 00 	cmpb   $0x0,0x795b(%rip)        # ffffffff8000c0b0 <TerminalMode>
    framebuffer = framebuffer_request.response->framebuffers[0];
ffffffff80004755:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80004759:	48 8b 00             	mov    (%rax),%rax
ffffffff8000475c:	48 89 05 8d f6 0d 00 	mov    %rax,0xdf68d(%rip)        # ffffffff800e3df0 <framebuffer>
    if(TerminalMode == false)
ffffffff80004763:	0f 84 ca 00 00 00    	je     ffffffff80004833 <_start+0x143>
        printf("This is a test of printf.");
        printf("This is written consecutively because I am very smart");
    }
    else
    {
        ft_ctx = flanterm_fb_init(
ffffffff80004769:	4c 8b 48 18          	mov    0x18(%rax),%r9
ffffffff8000476d:	4c 8b 40 10          	mov    0x10(%rax),%r8
ffffffff80004771:	31 f6                	xor    %esi,%esi
ffffffff80004773:	31 ff                	xor    %edi,%edi
ffffffff80004775:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80004779:	6a 00                	push   $0x0
ffffffff8000477b:	6a 00                	push   $0x0
ffffffff8000477d:	6a 00                	push   $0x0
ffffffff8000477f:	6a 01                	push   $0x1
ffffffff80004781:	6a 00                	push   $0x0
ffffffff80004783:	6a 00                	push   $0x0
ffffffff80004785:	6a 00                	push   $0x0
ffffffff80004787:	6a 00                	push   $0x0
ffffffff80004789:	6a 00                	push   $0x0
ffffffff8000478b:	6a 00                	push   $0x0
ffffffff8000478d:	6a 00                	push   $0x0
ffffffff8000478f:	6a 00                	push   $0x0
ffffffff80004791:	6a 00                	push   $0x0
ffffffff80004793:	6a 00                	push   $0x0
ffffffff80004795:	0f b6 50 28          	movzbl 0x28(%rax),%edx
ffffffff80004799:	52                   	push   %rdx
ffffffff8000479a:	0f b6 50 27          	movzbl 0x27(%rax),%edx
ffffffff8000479e:	52                   	push   %rdx
ffffffff8000479f:	0f b6 50 26          	movzbl 0x26(%rax),%edx
ffffffff800047a3:	52                   	push   %rdx
ffffffff800047a4:	0f b6 50 25          	movzbl 0x25(%rax),%edx
ffffffff800047a8:	52                   	push   %rdx
ffffffff800047a9:	0f b6 50 24          	movzbl 0x24(%rax),%edx
ffffffff800047ad:	52                   	push   %rdx
ffffffff800047ae:	0f b6 50 23          	movzbl 0x23(%rax),%edx
ffffffff800047b2:	52                   	push   %rdx
ffffffff800047b3:	48 8b 10             	mov    (%rax),%rdx
ffffffff800047b6:	e8 35 c6 ff ff       	call   ffffffff80000df0 <flanterm_fb_init>
            NULL, 0, 0, 1,
            0, 0,
            0
        );

        printf("Welcome to Ampersand: Terminal Mode. Version 1.0-dev\n");
ffffffff800047bb:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
ffffffff800047c2:	48 8d 3d 7f 4b 00 00 	lea    0x4b7f(%rip),%rdi        # ffffffff80009348 <font8+0x4a8>
        ft_ctx = flanterm_fb_init(
ffffffff800047c9:	48 89 05 10 f6 0d 00 	mov    %rax,0xdf610(%rip)        # ffffffff800e3de0 <ft_ctx>
        printf("Welcome to Ampersand: Terminal Mode. Version 1.0-dev\n");
ffffffff800047d0:	31 c0                	xor    %eax,%eax
ffffffff800047d2:	e8 19 fa ff ff       	call   ffffffff800041f0 <printf>
        printf("starting...\n");
ffffffff800047d7:	48 8d 3d f2 4a 00 00 	lea    0x4af2(%rip),%rdi        # ffffffff800092d0 <font8+0x430>
ffffffff800047de:	31 c0                	xor    %eax,%eax
ffffffff800047e0:	e8 0b fa ff ff       	call   ffffffff800041f0 <printf>
        printf("intitializing paging...\n");
ffffffff800047e5:	48 8d 3d f1 4a 00 00 	lea    0x4af1(%rip),%rdi        # ffffffff800092dd <font8+0x43d>
ffffffff800047ec:	31 c0                	xor    %eax,%eax
ffffffff800047ee:	e8 fd f9 ff ff       	call   ffffffff800041f0 <printf>
        pfbmp_init();
ffffffff800047f3:	31 c0                	xor    %eax,%eax
ffffffff800047f5:	e8 96 07 00 00       	call   ffffffff80004f90 <pfbmp_init>
        idt_init();
ffffffff800047fa:	31 c0                	xor    %eax,%eax
ffffffff800047fc:	e8 ef f6 ff ff       	call   ffffffff80003ef0 <idt_init>
        printf("PFA done.\n");
ffffffff80004801:	48 8d 3d ee 4a 00 00 	lea    0x4aee(%rip),%rdi        # ffffffff800092f6 <font8+0x456>
ffffffff80004808:	31 c0                	xor    %eax,%eax
ffffffff8000480a:	e8 e1 f9 ff ff       	call   ffffffff800041f0 <printf>
        pgsetup();
ffffffff8000480f:	31 c0                	xor    %eax,%eax
ffffffff80004811:	e8 ba 04 00 00       	call   ffffffff80004cd0 <pgsetup>
        printf("paging enabled");
ffffffff80004816:	48 8d 3d e4 4a 00 00 	lea    0x4ae4(%rip),%rdi        # ffffffff80009301 <font8+0x461>
ffffffff8000481d:	31 c0                	xor    %eax,%eax
ffffffff8000481f:	e8 cc f9 ff ff       	call   ffffffff800041f0 <printf>
    asm ("cli");
ffffffff80004824:	fa                   	cli    
ffffffff80004825:	0f 1f 00             	nopl   (%rax)
        asm ("hlt");
ffffffff80004828:	f4                   	hlt    
    for (;;) {
ffffffff80004829:	eb fd                	jmp    ffffffff80004828 <_start+0x138>
    asm ("cli");
ffffffff8000482b:	fa                   	cli    
ffffffff8000482c:	0f 1f 40 00          	nopl   0x0(%rax)
        asm ("hlt");
ffffffff80004830:	f4                   	hlt    
    for (;;) {
ffffffff80004831:	eb fd                	jmp    ffffffff80004830 <_start+0x140>
        calc_text_size("WELCOME TO AMPERSAND\n", 3, &twidth, &theight);
ffffffff80004833:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
ffffffff80004838:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
ffffffff8000483d:	be 03 00 00 00       	mov    $0x3,%esi
        uint32_t twidth = 0, theight = 0;
ffffffff80004842:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
ffffffff80004849:	00 
        calc_text_size("WELCOME TO AMPERSAND\n", 3, &twidth, &theight);
ffffffff8000484a:	48 8d 1d 4f 4a 00 00 	lea    0x4a4f(%rip),%rbx        # ffffffff800092a0 <font8+0x400>
        uint32_t twidth = 0, theight = 0;
ffffffff80004851:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
ffffffff80004858:	00 
        calc_text_size("WELCOME TO AMPERSAND\n", 3, &twidth, &theight);
ffffffff80004859:	48 89 df             	mov    %rbx,%rdi
ffffffff8000485c:	e8 9f f5 ff ff       	call   ffffffff80003e00 <calc_text_size>
        draw_str((volatile uint32_t*)framebuffer->address, framebuffer->pitch, font8, framebuffer->width/2-twidth/2, 25, "WELCOME TO AMPERSAND\n", create_color(255,0,0), 3);
ffffffff80004861:	31 d2                	xor    %edx,%edx
ffffffff80004863:	31 f6                	xor    %esi,%esi
ffffffff80004865:	bf ff 00 00 00       	mov    $0xff,%edi
ffffffff8000486a:	e8 61 f5 ff ff       	call   ffffffff80003dd0 <create_color>
ffffffff8000486f:	8b 54 24 08          	mov    0x8(%rsp),%edx
ffffffff80004873:	49 89 d9             	mov    %rbx,%r9
ffffffff80004876:	41 89 c0             	mov    %eax,%r8d
ffffffff80004879:	48 8b 05 70 f5 0d 00 	mov    0xdf570(%rip),%rax        # ffffffff800e3df0 <framebuffer>
ffffffff80004880:	d1 ea                	shr    %edx
ffffffff80004882:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80004886:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff8000488a:	6a 03                	push   $0x3
ffffffff8000488c:	41 50                	push   %r8
ffffffff8000488e:	48 8b 38             	mov    (%rax),%rdi
ffffffff80004891:	41 b8 19 00 00 00    	mov    $0x19,%r8d
ffffffff80004897:	48 d1 e9             	shr    %rcx
ffffffff8000489a:	29 d1                	sub    %edx,%ecx
ffffffff8000489c:	48 8d 15 dd 4a 00 00 	lea    0x4add(%rip),%rdx        # ffffffff80009380 <font8>
ffffffff800048a3:	e8 28 f4 ff ff       	call   ffffffff80003cd0 <draw_str>
        printf("This is a test of printf.");
ffffffff800048a8:	48 8d 3d 07 4a 00 00 	lea    0x4a07(%rip),%rdi        # ffffffff800092b6 <font8+0x416>
ffffffff800048af:	31 c0                	xor    %eax,%eax
        last_finish_x = 0;
ffffffff800048b1:	c7 05 dd d4 0d 00 00 	movl   $0x0,0xdd4dd(%rip)        # ffffffff800e1d98 <last_finish_x>
ffffffff800048b8:	00 00 00 
        printf("This is a test of printf.");
ffffffff800048bb:	e8 30 f9 ff ff       	call   ffffffff800041f0 <printf>
        printf("This is written consecutively because I am very smart");
ffffffff800048c0:	48 8d 3d 49 4a 00 00 	lea    0x4a49(%rip),%rdi        # ffffffff80009310 <font8+0x470>
ffffffff800048c7:	31 c0                	xor    %eax,%eax
ffffffff800048c9:	e8 22 f9 ff ff       	call   ffffffff800041f0 <printf>
ffffffff800048ce:	58                   	pop    %rax
ffffffff800048cf:	5a                   	pop    %rdx
ffffffff800048d0:	e9 4f ff ff ff       	jmp    ffffffff80004824 <_start+0x134>
ffffffff800048d5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff800048dc:	00 00 00 
ffffffff800048df:	90                   	nop

ffffffff800048e0 <map>:
    asm volatile("mov %cr3, %rax; mov %rax, %cr3");
}


void map(uint64_t vaddr, uint64_t paddr, uint64_t flags)
{
ffffffff800048e0:	f3 0f 1e fa          	endbr64 
ffffffff800048e4:	41 57                	push   %r15
    uint16_t pml4_index = (vaddr >> 39) & 0x1FF;
    uint16_t pml3_index = (vaddr >> 30) & 0x1FF;
ffffffff800048e6:	48 89 f9             	mov    %rdi,%rcx
    uint16_t pml2_index = (vaddr >> 21) & 0x1FF;
ffffffff800048e9:	49 89 ff             	mov    %rdi,%r15
{
ffffffff800048ec:	41 56                	push   %r14
    uint16_t pml3_index = (vaddr >> 30) & 0x1FF;
ffffffff800048ee:	48 c1 e9 1e          	shr    $0x1e,%rcx
    uint16_t pml4_index = (vaddr >> 39) & 0x1FF;
ffffffff800048f2:	49 89 fe             	mov    %rdi,%r14
    uint16_t pml2_index = (vaddr >> 21) & 0x1FF;
ffffffff800048f5:	49 c1 ef 15          	shr    $0x15,%r15
{
ffffffff800048f9:	41 55                	push   %r13
    uint16_t pml4_index = (vaddr >> 39) & 0x1FF;
ffffffff800048fb:	49 c1 ee 27          	shr    $0x27,%r14
{
ffffffff800048ff:	49 89 f5             	mov    %rsi,%r13
    uint16_t pml3_index = (vaddr >> 30) & 0x1FF;
ffffffff80004902:	66 81 e1 ff 01       	and    $0x1ff,%cx
{
ffffffff80004907:	41 54                	push   %r12
    uint16_t pml1_index = (vaddr >> 12) & 0x1FF;

    uint64_t *pml3 = NULL;
    if (page_dir_ptr_tab[pml4_index] & PAGE_PRESENT) {
ffffffff80004909:	41 81 e6 ff 01 00 00 	and    $0x1ff,%r14d
    uint16_t pml1_index = (vaddr >> 12) & 0x1FF;
ffffffff80004910:	49 89 fc             	mov    %rdi,%r12
    uint16_t pml2_index = (vaddr >> 21) & 0x1FF;
ffffffff80004913:	66 41 81 e7 ff 01    	and    $0x1ff,%r15w
{
ffffffff80004919:	55                   	push   %rbp
    uint16_t pml1_index = (vaddr >> 12) & 0x1FF;
ffffffff8000491a:	49 c1 ec 0c          	shr    $0xc,%r12
{
ffffffff8000491e:	48 89 fd             	mov    %rdi,%rbp
ffffffff80004921:	53                   	push   %rbx
    uint16_t pml1_index = (vaddr >> 12) & 0x1FF;
ffffffff80004922:	66 41 81 e4 ff 01    	and    $0x1ff,%r12w
{
ffffffff80004928:	48 89 d3             	mov    %rdx,%rbx
ffffffff8000492b:	48 83 ec 18          	sub    $0x18,%rsp
    if (page_dir_ptr_tab[pml4_index] & PAGE_PRESENT) {
ffffffff8000492f:	48 8b 05 ca f4 0d 00 	mov    0xdf4ca(%rip),%rax        # ffffffff800e3e00 <page_dir_ptr_tab>
ffffffff80004936:	4a 8b 04 f0          	mov    (%rax,%r14,8),%rax
ffffffff8000493a:	a8 01                	test   $0x1,%al
ffffffff8000493c:	0f 84 9e 00 00 00    	je     ffffffff800049e0 <map+0x100>
        pml3 = phys_to_virt(PTE_GET_ADDR(page_dir_ptr_tab[pml4_index]));
ffffffff80004942:	48 8b 15 9f f4 0d 00 	mov    0xdf49f(%rip),%rdx        # ffffffff800e3de8 <hhdm>
        pml3 = (uint64_t *)kalloc_frame(); 
        page_dir_ptr_tab[pml4_index] = virt_to_phys(pml3) | PAGE_PRESENT | PAGE_RW;
    }

    uint64_t *pml2 = NULL;
    if (pml3[pml3_index] & PAGE_PRESENT) {
ffffffff80004949:	0f b7 c9             	movzwl %cx,%ecx
        pml3 = phys_to_virt(PTE_GET_ADDR(page_dir_ptr_tab[pml4_index]));
ffffffff8000494c:	48 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%rsi
ffffffff80004953:	ff 0f 00 
ffffffff80004956:	48 21 f0             	and    %rsi,%rax
ffffffff80004959:	48 03 42 08          	add    0x8(%rdx),%rax
    if (pml3[pml3_index] & PAGE_PRESENT) {
ffffffff8000495d:	48 8d 0c c8          	lea    (%rax,%rcx,8),%rcx
ffffffff80004961:	48 8b 01             	mov    (%rcx),%rax
ffffffff80004964:	a8 01                	test   $0x1,%al
ffffffff80004966:	0f 84 b2 00 00 00    	je     ffffffff80004a1e <map+0x13e>
        pml2 = phys_to_virt(PTE_GET_ADDR(pml3[pml3_index]));
ffffffff8000496c:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff80004973:	ff 0f 00 
        pml2 = (uint64_t *)kalloc_frame(); 
        pml3[pml3_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
    }

    uint64_t *pml1 = NULL;
    if (pml2[pml2_index] & PAGE_PRESENT) {
ffffffff80004976:	45 0f b7 ff          	movzwl %r15w,%r15d
        pml2 = phys_to_virt(PTE_GET_ADDR(pml3[pml3_index]));
ffffffff8000497a:	48 21 c8             	and    %rcx,%rax
ffffffff8000497d:	48 03 42 08          	add    0x8(%rdx),%rax
ffffffff80004981:	49 89 c6             	mov    %rax,%r14
    if (pml2[pml2_index] & PAGE_PRESENT) {
ffffffff80004984:	4f 8d 3c fe          	lea    (%r14,%r15,8),%r15
ffffffff80004988:	49 8b 07             	mov    (%r15),%rax
ffffffff8000498b:	a8 01                	test   $0x1,%al
ffffffff8000498d:	0f 84 c4 00 00 00    	je     ffffffff80004a57 <map+0x177>
        pml1 = phys_to_virt(PTE_GET_ADDR(pml2[pml2_index]));
ffffffff80004993:	48 b9 00 f0 ff ff ff 	movabs $0xffffffffff000,%rcx
ffffffff8000499a:	ff 0f 00 
ffffffff8000499d:	48 21 c8             	and    %rcx,%rax
ffffffff800049a0:	48 03 42 08          	add    0x8(%rdx),%rax
    } else {
        pml1 = (uint64_t *)kalloc_frame(); 
        pml2[pml2_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
    }

    uint64_t perm_mod = pml1[pml1_index] & PAGE_PRESENT;
ffffffff800049a4:	45 0f b7 e4          	movzwl %r12w,%r12d
    pml1[pml1_index] = paddr | flags;
ffffffff800049a8:	4c 09 eb             	or     %r13,%rbx
    uint64_t perm_mod = pml1[pml1_index] & PAGE_PRESENT;
ffffffff800049ab:	4a 8d 04 e0          	lea    (%rax,%r12,8),%rax
ffffffff800049af:	4c 8b 20             	mov    (%rax),%r12
    pml1[pml1_index] = paddr | flags;
ffffffff800049b2:	48 89 18             	mov    %rbx,(%rax)
    uint64_t perm_mod = pml1[pml1_index] & PAGE_PRESENT;
ffffffff800049b5:	41 83 e4 01          	and    $0x1,%r12d

    if(hhdmm)
ffffffff800049b9:	80 3d 38 f4 0d 00 00 	cmpb   $0x0,0xdf438(%rip)        # ffffffff800e3df8 <hhdmm>
ffffffff800049c0:	0f 85 b2 00 00 00    	jne    ffffffff80004a78 <map+0x198>
        printf("mapping %x to %x\n", vaddr, paddr);

    if (perm_mod) {
ffffffff800049c6:	4d 85 e4             	test   %r12,%r12
ffffffff800049c9:	74 06                	je     ffffffff800049d1 <map+0xf1>
    asm volatile("mov %cr3, %rax; mov %rax, %cr3");
ffffffff800049cb:	0f 20 d8             	mov    %cr3,%rax
ffffffff800049ce:	0f 22 d8             	mov    %rax,%cr3
        flush_tlb();
    }
}
ffffffff800049d1:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800049d5:	5b                   	pop    %rbx
ffffffff800049d6:	5d                   	pop    %rbp
ffffffff800049d7:	41 5c                	pop    %r12
ffffffff800049d9:	41 5d                	pop    %r13
ffffffff800049db:	41 5e                	pop    %r14
ffffffff800049dd:	41 5f                	pop    %r15
ffffffff800049df:	c3                   	ret    
        pml3 = (uint64_t *)kalloc_frame(); 
ffffffff800049e0:	31 c0                	xor    %eax,%eax
ffffffff800049e2:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
ffffffff800049e6:	e8 f5 05 00 00       	call   ffffffff80004fe0 <kalloc_frame>
        page_dir_ptr_tab[pml4_index] = virt_to_phys(pml3) | PAGE_PRESENT | PAGE_RW;
ffffffff800049eb:	48 8b 15 f6 f3 0d 00 	mov    0xdf3f6(%rip),%rdx        # ffffffff800e3de8 <hhdm>
ffffffff800049f2:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
ffffffff800049f6:	48 89 c6             	mov    %rax,%rsi
ffffffff800049f9:	48 8b 3d 00 f4 0d 00 	mov    0xdf400(%rip),%rdi        # ffffffff800e3e00 <page_dir_ptr_tab>
ffffffff80004a00:	48 2b 72 08          	sub    0x8(%rdx),%rsi
    if (pml3[pml3_index] & PAGE_PRESENT) {
ffffffff80004a04:	0f b7 c9             	movzwl %cx,%ecx
        page_dir_ptr_tab[pml4_index] = virt_to_phys(pml3) | PAGE_PRESENT | PAGE_RW;
ffffffff80004a07:	48 83 ce 03          	or     $0x3,%rsi
    if (pml3[pml3_index] & PAGE_PRESENT) {
ffffffff80004a0b:	48 8d 0c c8          	lea    (%rax,%rcx,8),%rcx
        page_dir_ptr_tab[pml4_index] = virt_to_phys(pml3) | PAGE_PRESENT | PAGE_RW;
ffffffff80004a0f:	4a 89 34 f7          	mov    %rsi,(%rdi,%r14,8)
    if (pml3[pml3_index] & PAGE_PRESENT) {
ffffffff80004a13:	48 8b 01             	mov    (%rcx),%rax
ffffffff80004a16:	a8 01                	test   $0x1,%al
ffffffff80004a18:	0f 85 4e ff ff ff    	jne    ffffffff8000496c <map+0x8c>
        pml2 = (uint64_t *)kalloc_frame(); 
ffffffff80004a1e:	31 c0                	xor    %eax,%eax
ffffffff80004a20:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    if (pml2[pml2_index] & PAGE_PRESENT) {
ffffffff80004a25:	45 0f b7 ff          	movzwl %r15w,%r15d
        pml2 = (uint64_t *)kalloc_frame(); 
ffffffff80004a29:	e8 b2 05 00 00       	call   ffffffff80004fe0 <kalloc_frame>
        pml3[pml3_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
ffffffff80004a2e:	48 8b 15 b3 f3 0d 00 	mov    0xdf3b3(%rip),%rdx        # ffffffff800e3de8 <hhdm>
ffffffff80004a35:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
        pml2 = (uint64_t *)kalloc_frame(); 
ffffffff80004a3a:	49 89 c6             	mov    %rax,%r14
        pml3[pml3_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
ffffffff80004a3d:	48 2b 42 08          	sub    0x8(%rdx),%rax
    if (pml2[pml2_index] & PAGE_PRESENT) {
ffffffff80004a41:	4f 8d 3c fe          	lea    (%r14,%r15,8),%r15
        pml3[pml3_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
ffffffff80004a45:	48 83 c8 03          	or     $0x3,%rax
ffffffff80004a49:	48 89 01             	mov    %rax,(%rcx)
    if (pml2[pml2_index] & PAGE_PRESENT) {
ffffffff80004a4c:	49 8b 07             	mov    (%r15),%rax
ffffffff80004a4f:	a8 01                	test   $0x1,%al
ffffffff80004a51:	0f 85 3c ff ff ff    	jne    ffffffff80004993 <map+0xb3>
        pml1 = (uint64_t *)kalloc_frame(); 
ffffffff80004a57:	31 c0                	xor    %eax,%eax
ffffffff80004a59:	e8 82 05 00 00       	call   ffffffff80004fe0 <kalloc_frame>
        pml2[pml2_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
ffffffff80004a5e:	48 8b 15 83 f3 0d 00 	mov    0xdf383(%rip),%rdx        # ffffffff800e3de8 <hhdm>
ffffffff80004a65:	4c 2b 72 08          	sub    0x8(%rdx),%r14
ffffffff80004a69:	49 83 ce 03          	or     $0x3,%r14
ffffffff80004a6d:	4d 89 37             	mov    %r14,(%r15)
ffffffff80004a70:	e9 2f ff ff ff       	jmp    ffffffff800049a4 <map+0xc4>
ffffffff80004a75:	0f 1f 00             	nopl   (%rax)
        printf("mapping %x to %x\n", vaddr, paddr);
ffffffff80004a78:	4c 89 ea             	mov    %r13,%rdx
ffffffff80004a7b:	48 89 ee             	mov    %rbp,%rsi
ffffffff80004a7e:	48 8d 3d fb 4c 00 00 	lea    0x4cfb(%rip),%rdi        # ffffffff80009780 <font8+0x400>
ffffffff80004a85:	31 c0                	xor    %eax,%eax
ffffffff80004a87:	e8 64 f7 ff ff       	call   ffffffff800041f0 <printf>
ffffffff80004a8c:	e9 35 ff ff ff       	jmp    ffffffff800049c6 <map+0xe6>
ffffffff80004a91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80004a98:	00 00 00 00 
ffffffff80004a9c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80004aa0 <map_btldr>:
{
ffffffff80004aa0:	f3 0f 1e fa          	endbr64 
ffffffff80004aa4:	41 55                	push   %r13
    printf("mapping the bootloader\n");
ffffffff80004aa6:	31 c0                	xor    %eax,%eax
ffffffff80004aa8:	48 8d 3d e3 4c 00 00 	lea    0x4ce3(%rip),%rdi        # ffffffff80009792 <font8+0x412>
{
ffffffff80004aaf:	41 54                	push   %r12
ffffffff80004ab1:	55                   	push   %rbp
ffffffff80004ab2:	53                   	push   %rbx
ffffffff80004ab3:	48 83 ec 08          	sub    $0x8,%rsp
    printf("mapping the bootloader\n");
ffffffff80004ab7:	e8 34 f7 ff ff       	call   ffffffff800041f0 <printf>
    for(uint8_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80004abc:	48 8b 15 45 7e 00 00 	mov    0x7e45(%rip),%rdx        # ffffffff8000c908 <memmap+0x28>
ffffffff80004ac3:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
ffffffff80004ac8:	74 7b                	je     ffffffff80004b45 <map_btldr+0xa5>
ffffffff80004aca:	31 ed                	xor    %ebp,%ebp
ffffffff80004acc:	31 c0                	xor    %eax,%eax
ffffffff80004ace:	eb 0d                	jmp    ffffffff80004add <map_btldr+0x3d>
ffffffff80004ad0:	83 c5 01             	add    $0x1,%ebp
ffffffff80004ad3:	40 0f b6 c5          	movzbl %bpl,%eax
ffffffff80004ad7:	48 3b 42 08          	cmp    0x8(%rdx),%rax
ffffffff80004adb:	73 68                	jae    ffffffff80004b45 <map_btldr+0xa5>
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80004add:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
ffffffff80004ae1:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
        if (entry->type == LIMINE_MEMMAP_BOOTLOADER_RECLAIMABLE) {
ffffffff80004ae5:	48 83 78 10 05       	cmpq   $0x5,0x10(%rax)
ffffffff80004aea:	75 e4                	jne    ffffffff80004ad0 <map_btldr+0x30>
            uint64_t vaddr = (uint64_t)phys_to_virt(entry->base);
ffffffff80004aec:	48 8b 0d f5 f2 0d 00 	mov    0xdf2f5(%rip),%rcx        # ffffffff800e3de8 <hhdm>
ffffffff80004af3:	48 8b 18             	mov    (%rax),%rbx
            uint64_t pages = entry->length / PAGE_SIZE;
ffffffff80004af6:	4c 8b 60 08          	mov    0x8(%rax),%r12
            uint64_t vaddr = (uint64_t)phys_to_virt(entry->base);
ffffffff80004afa:	4c 8b 69 08          	mov    0x8(%rcx),%r13
ffffffff80004afe:	4c 01 eb             	add    %r13,%rbx
            for (uint64_t page = 0; page < pages; page++) {
ffffffff80004b01:	49 c1 ec 0c          	shr    $0xc,%r12
ffffffff80004b05:	74 c9                	je     ffffffff80004ad0 <map_btldr+0x30>
ffffffff80004b07:	49 c1 e4 0c          	shl    $0xc,%r12
ffffffff80004b0b:	49 01 dc             	add    %rbx,%r12
ffffffff80004b0e:	66 90                	xchg   %ax,%ax
                map(vaddr + (page * PAGE_SIZE), paddr + (page * PAGE_SIZE), PAGE_PRESENT | PAGE_RW | PAGE_USER);
ffffffff80004b10:	48 89 de             	mov    %rbx,%rsi
ffffffff80004b13:	48 89 df             	mov    %rbx,%rdi
ffffffff80004b16:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80004b1b:	31 c0                	xor    %eax,%eax
ffffffff80004b1d:	4c 29 ee             	sub    %r13,%rsi
            for (uint64_t page = 0; page < pages; page++) {
ffffffff80004b20:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
                map(vaddr + (page * PAGE_SIZE), paddr + (page * PAGE_SIZE), PAGE_PRESENT | PAGE_RW | PAGE_USER);
ffffffff80004b27:	e8 b4 fd ff ff       	call   ffffffff800048e0 <map>
            for (uint64_t page = 0; page < pages; page++) {
ffffffff80004b2c:	4c 39 e3             	cmp    %r12,%rbx
ffffffff80004b2f:	75 df                	jne    ffffffff80004b10 <map_btldr+0x70>
ffffffff80004b31:	48 8b 15 d0 7d 00 00 	mov    0x7dd0(%rip),%rdx        # ffffffff8000c908 <memmap+0x28>
    for(uint8_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80004b38:	83 c5 01             	add    $0x1,%ebp
ffffffff80004b3b:	40 0f b6 c5          	movzbl %bpl,%eax
ffffffff80004b3f:	48 3b 42 08          	cmp    0x8(%rdx),%rax
ffffffff80004b43:	72 98                	jb     ffffffff80004add <map_btldr+0x3d>
}
ffffffff80004b45:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80004b49:	5b                   	pop    %rbx
ffffffff80004b4a:	5d                   	pop    %rbp
ffffffff80004b4b:	41 5c                	pop    %r12
ffffffff80004b4d:	41 5d                	pop    %r13
ffffffff80004b4f:	c3                   	ret    

ffffffff80004b50 <map_hhdm>:
{
ffffffff80004b50:	f3 0f 1e fa          	endbr64 
ffffffff80004b54:	41 55                	push   %r13
ffffffff80004b56:	41 54                	push   %r12
ffffffff80004b58:	55                   	push   %rbp
ffffffff80004b59:	53                   	push   %rbx
ffffffff80004b5a:	48 83 ec 08          	sub    $0x8,%rsp
    uint64_t base = hhdm->offset;
ffffffff80004b5e:	48 8b 05 83 f2 0d 00 	mov    0xdf283(%rip),%rax        # ffffffff800e3de8 <hhdm>
ffffffff80004b65:	4c 8b 60 08          	mov    0x8(%rax),%r12
    for (uint8_t i=0; i<memmap.response->entry_count; i++) {
ffffffff80004b69:	48 8b 05 98 7d 00 00 	mov    0x7d98(%rip),%rax        # ffffffff8000c908 <memmap+0x28>
ffffffff80004b70:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff80004b74:	48 85 f6             	test   %rsi,%rsi
ffffffff80004b77:	0f 84 83 00 00 00    	je     ffffffff80004c00 <map_hhdm+0xb0>
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80004b7d:	48 8b 78 10          	mov    0x10(%rax),%rdi
    for (uint8_t i=0; i<memmap.response->entry_count; i++) {
ffffffff80004b81:	31 c9                	xor    %ecx,%ecx
    uint64_t high = 0;
ffffffff80004b83:	31 ed                	xor    %ebp,%ebp
    for (uint8_t i=0; i<memmap.response->entry_count; i++) {
ffffffff80004b85:	31 c0                	xor    %eax,%eax
ffffffff80004b87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80004b8e:	00 00 
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80004b90:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
        if (entry->type != LIMINE_MEMMAP_RESERVED) {
ffffffff80004b94:	48 83 78 10 01       	cmpq   $0x1,0x10(%rax)
ffffffff80004b99:	74 0e                	je     ffffffff80004ba9 <map_hhdm+0x59>
            uint64_t this_high = entry->base + entry->length;
ffffffff80004b9b:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80004b9f:	48 03 10             	add    (%rax),%rdx
ffffffff80004ba2:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80004ba5:	48 0f 42 ea          	cmovb  %rdx,%rbp
    for (uint8_t i=0; i<memmap.response->entry_count; i++) {
ffffffff80004ba9:	83 c1 01             	add    $0x1,%ecx
ffffffff80004bac:	0f b6 c1             	movzbl %cl,%eax
ffffffff80004baf:	48 39 f0             	cmp    %rsi,%rax
ffffffff80004bb2:	72 dc                	jb     ffffffff80004b90 <map_hhdm+0x40>
    printf("mapping hhdm memory\n");
ffffffff80004bb4:	31 c0                	xor    %eax,%eax
ffffffff80004bb6:	48 8d 3d ed 4b 00 00 	lea    0x4bed(%rip),%rdi        # ffffffff800097aa <font8+0x42a>
ffffffff80004bbd:	e8 2e f6 ff ff       	call   ffffffff800041f0 <printf>
    for (uint64_t i = 0; i < high; i += PAGE_SIZE) {
ffffffff80004bc2:	48 85 ed             	test   %rbp,%rbp
ffffffff80004bc5:	74 2e                	je     ffffffff80004bf5 <map_hhdm+0xa5>
        map(base + i, i, PAGE_PRESENT | PAGE_RW | PAGE_NX );
ffffffff80004bc7:	49 bd 03 00 00 00 00 	movabs $0x8000000000000003,%r13
ffffffff80004bce:	00 00 80 
    for (uint64_t i = 0; i < high; i += PAGE_SIZE) {
ffffffff80004bd1:	31 db                	xor    %ebx,%ebx
ffffffff80004bd3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        map(base + i, i, PAGE_PRESENT | PAGE_RW | PAGE_NX );
ffffffff80004bd8:	49 8d 3c 1c          	lea    (%r12,%rbx,1),%rdi
ffffffff80004bdc:	48 89 de             	mov    %rbx,%rsi
ffffffff80004bdf:	4c 89 ea             	mov    %r13,%rdx
ffffffff80004be2:	31 c0                	xor    %eax,%eax
ffffffff80004be4:	e8 f7 fc ff ff       	call   ffffffff800048e0 <map>
    for (uint64_t i = 0; i < high; i += PAGE_SIZE) {
ffffffff80004be9:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
ffffffff80004bf0:	48 39 dd             	cmp    %rbx,%rbp
ffffffff80004bf3:	77 e3                	ja     ffffffff80004bd8 <map_hhdm+0x88>
}
ffffffff80004bf5:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80004bf9:	5b                   	pop    %rbx
ffffffff80004bfa:	5d                   	pop    %rbp
ffffffff80004bfb:	41 5c                	pop    %r12
ffffffff80004bfd:	41 5d                	pop    %r13
ffffffff80004bff:	c3                   	ret    
ffffffff80004c00:	48 83 c4 08          	add    $0x8,%rsp
    printf("mapping hhdm memory\n");
ffffffff80004c04:	48 8d 3d 9f 4b 00 00 	lea    0x4b9f(%rip),%rdi        # ffffffff800097aa <font8+0x42a>
ffffffff80004c0b:	31 c0                	xor    %eax,%eax
}
ffffffff80004c0d:	5b                   	pop    %rbx
ffffffff80004c0e:	5d                   	pop    %rbp
ffffffff80004c0f:	41 5c                	pop    %r12
ffffffff80004c11:	41 5d                	pop    %r13
    printf("mapping hhdm memory\n");
ffffffff80004c13:	e9 d8 f5 ff ff       	jmp    ffffffff800041f0 <printf>
ffffffff80004c18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80004c1f:	00 

ffffffff80004c20 <map_fdmem>:
{
ffffffff80004c20:	f3 0f 1e fa          	endbr64 
ffffffff80004c24:	41 55                	push   %r13
    printf("mapping found mem\n");
ffffffff80004c26:	31 c0                	xor    %eax,%eax
ffffffff80004c28:	48 8d 3d 90 4b 00 00 	lea    0x4b90(%rip),%rdi        # ffffffff800097bf <font8+0x43f>
{
ffffffff80004c2f:	41 54                	push   %r12
ffffffff80004c31:	55                   	push   %rbp
ffffffff80004c32:	53                   	push   %rbx
ffffffff80004c33:	48 83 ec 08          	sub    $0x8,%rsp
    printf("mapping found mem\n");
ffffffff80004c37:	e8 b4 f5 ff ff       	call   ffffffff800041f0 <printf>
    for(size_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80004c3c:	48 8b 15 c5 7c 00 00 	mov    0x7cc5(%rip),%rdx        # ffffffff8000c908 <memmap+0x28>
ffffffff80004c43:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
ffffffff80004c48:	74 78                	je     ffffffff80004cc2 <map_fdmem+0xa2>
ffffffff80004c4a:	45 31 ed             	xor    %r13d,%r13d
ffffffff80004c4d:	eb 0b                	jmp    ffffffff80004c5a <map_fdmem+0x3a>
ffffffff80004c4f:	90                   	nop
ffffffff80004c50:	49 83 c5 01          	add    $0x1,%r13
ffffffff80004c54:	4c 39 6a 08          	cmp    %r13,0x8(%rdx)
ffffffff80004c58:	76 68                	jbe    ffffffff80004cc2 <map_fdmem+0xa2>
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80004c5a:	48 8b 42 10          	mov    0x10(%rdx),%rax
ffffffff80004c5e:	4a 8b 04 e8          	mov    (%rax,%r13,8),%rax
        if (entry->type != LIMINE_MEMMAP_USABLE) {
ffffffff80004c62:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
ffffffff80004c67:	75 e7                	jne    ffffffff80004c50 <map_fdmem+0x30>
        for (uint64_t page = 0; page < pages; page++) {
ffffffff80004c69:	48 8b 68 08          	mov    0x8(%rax),%rbp
ffffffff80004c6d:	48 c1 ed 0c          	shr    $0xc,%rbp
ffffffff80004c71:	74 dd                	je     ffffffff80004c50 <map_fdmem+0x30>
        uint64_t vaddr = (uint64_t)phys_to_virt(entry->base);
ffffffff80004c73:	48 8b 15 6e f1 0d 00 	mov    0xdf16e(%rip),%rdx        # ffffffff800e3de8 <hhdm>
ffffffff80004c7a:	48 8b 18             	mov    (%rax),%rbx
ffffffff80004c7d:	48 c1 e5 0c          	shl    $0xc,%rbp
ffffffff80004c81:	4c 8b 62 08          	mov    0x8(%rdx),%r12
ffffffff80004c85:	4c 01 e3             	add    %r12,%rbx
ffffffff80004c88:	48 01 dd             	add    %rbx,%rbp
ffffffff80004c8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            map(vaddr + (page * PAGE_SIZE), paddr + (page * PAGE_SIZE), PAGE_PRESENT | PAGE_RW | PAGE_USER);
ffffffff80004c90:	48 89 de             	mov    %rbx,%rsi
ffffffff80004c93:	48 89 df             	mov    %rbx,%rdi
ffffffff80004c96:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80004c9b:	31 c0                	xor    %eax,%eax
ffffffff80004c9d:	4c 29 e6             	sub    %r12,%rsi
        for (uint64_t page = 0; page < pages; page++) {
ffffffff80004ca0:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
            map(vaddr + (page * PAGE_SIZE), paddr + (page * PAGE_SIZE), PAGE_PRESENT | PAGE_RW | PAGE_USER);
ffffffff80004ca7:	e8 34 fc ff ff       	call   ffffffff800048e0 <map>
        for (uint64_t page = 0; page < pages; page++) {
ffffffff80004cac:	48 39 eb             	cmp    %rbp,%rbx
ffffffff80004caf:	75 df                	jne    ffffffff80004c90 <map_fdmem+0x70>
ffffffff80004cb1:	48 8b 15 50 7c 00 00 	mov    0x7c50(%rip),%rdx        # ffffffff8000c908 <memmap+0x28>
    for(size_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80004cb8:	49 83 c5 01          	add    $0x1,%r13
ffffffff80004cbc:	4c 39 6a 08          	cmp    %r13,0x8(%rdx)
ffffffff80004cc0:	77 98                	ja     ffffffff80004c5a <map_fdmem+0x3a>
}
ffffffff80004cc2:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80004cc6:	5b                   	pop    %rbx
ffffffff80004cc7:	5d                   	pop    %rbp
ffffffff80004cc8:	41 5c                	pop    %r12
ffffffff80004cca:	41 5d                	pop    %r13
ffffffff80004ccc:	c3                   	ret    
ffffffff80004ccd:	0f 1f 00             	nopl   (%rax)

ffffffff80004cd0 <pgsetup>:
{
ffffffff80004cd0:	f3 0f 1e fa          	endbr64 
ffffffff80004cd4:	41 57                	push   %r15
    page_dir_ptr_tab = (uint64_t *)kalloc_frame();
ffffffff80004cd6:	31 c0                	xor    %eax,%eax
{
ffffffff80004cd8:	41 56                	push   %r14
ffffffff80004cda:	41 55                	push   %r13
    uint64_t _text_end = ALIGN_UP((uint64_t)&text_end, PAGE_SIZE);
ffffffff80004cdc:	4c 8d 2d 95 21 00 00 	lea    0x2195(%rip),%r13        # ffffffff80006e78 <builtin_font+0xe78>
{
ffffffff80004ce3:	41 54                	push   %r12
    uint64_t _rodata_end = ALIGN_UP((uint64_t)&rodata_end, PAGE_SIZE);
ffffffff80004ce5:	4c 8d 25 d5 5b 00 00 	lea    0x5bd5(%rip),%r12        # ffffffff8000a8c1 <rodata_end+0xfff>
    uint64_t _text_end = ALIGN_UP((uint64_t)&text_end, PAGE_SIZE);
ffffffff80004cec:	49 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%r13
{
ffffffff80004cf3:	55                   	push   %rbp
    uint64_t _rodata_end = ALIGN_UP((uint64_t)&rodata_end, PAGE_SIZE);
ffffffff80004cf4:	49 81 e4 00 f0 ff ff 	and    $0xfffffffffffff000,%r12
{
ffffffff80004cfb:	53                   	push   %rbx
    uint64_t _data_start = ALIGN_DOWN((uint64_t)&data_start, PAGE_SIZE);
ffffffff80004cfc:	48 8d 1d fd 72 00 00 	lea    0x72fd(%rip),%rbx        # ffffffff8000c000 <exception_str>
ffffffff80004d03:	48 81 e3 00 f0 ff ff 	and    $0xfffffffffffff000,%rbx
{
ffffffff80004d0a:	48 83 ec 38          	sub    $0x38,%rsp
    page_dir_ptr_tab = (uint64_t *)kalloc_frame();
ffffffff80004d0e:	e8 cd 02 00 00       	call   ffffffff80004fe0 <kalloc_frame>
ffffffff80004d13:	48 89 05 e6 f0 0d 00 	mov    %rax,0xdf0e6(%rip)        # ffffffff800e3e00 <page_dir_ptr_tab>
    map_btldr();
ffffffff80004d1a:	31 c0                	xor    %eax,%eax
ffffffff80004d1c:	e8 7f fd ff ff       	call   ffffffff80004aa0 <map_btldr>
    map_fdmem();
ffffffff80004d21:	31 c0                	xor    %eax,%eax
ffffffff80004d23:	e8 f8 fe ff ff       	call   ffffffff80004c20 <map_fdmem>
    map_hhdm();
ffffffff80004d28:	31 c0                	xor    %eax,%eax
ffffffff80004d2a:	e8 21 fe ff ff       	call   ffffffff80004b50 <map_hhdm>
    uint64_t paddr = kernaddress_req.response->physical_base;
ffffffff80004d2f:	48 8b 05 12 7c 00 00 	mov    0x7c12(%rip),%rax        # ffffffff8000c948 <kernaddress_req+0x28>
    uint64_t _text_start = ALIGN_DOWN((uint64_t)&text_start, PAGE_SIZE);
ffffffff80004d36:	4c 8d 0d c3 b2 ff ff 	lea    -0x4d3d(%rip),%r9        # ffffffff80000000 <bump_alloc>
    uint64_t _rodata_start = ALIGN_DOWN((uint64_t)&rodata_start, PAGE_SIZE);
ffffffff80004d3d:	4c 8d 05 bc 12 00 00 	lea    0x12bc(%rip),%r8        # ffffffff80006000 <builtin_font>
    uint64_t _text_start = ALIGN_DOWN((uint64_t)&text_start, PAGE_SIZE);
ffffffff80004d44:	49 81 e1 00 f0 ff ff 	and    $0xfffffffffffff000,%r9
    uint64_t _rodata_start = ALIGN_DOWN((uint64_t)&rodata_start, PAGE_SIZE);
ffffffff80004d4b:	49 81 e0 00 f0 ff ff 	and    $0xfffffffffffff000,%r8
    uint64_t _rodata_end = ALIGN_UP((uint64_t)&rodata_end, PAGE_SIZE);
ffffffff80004d52:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
    printf("Kernel Section Mapping\n");
ffffffff80004d57:	48 8d 3d 74 4a 00 00 	lea    0x4a74(%rip),%rdi        # ffffffff800097d2 <font8+0x452>
    uint64_t paddr = kernaddress_req.response->physical_base;
ffffffff80004d5e:	4c 8b 70 08          	mov    0x8(%rax),%r14
    uint64_t vaddr = kernaddress_req.response->virtual_base;
ffffffff80004d62:	48 8b 40 10          	mov    0x10(%rax),%rax
    uint64_t _text_start = ALIGN_DOWN((uint64_t)&text_start, PAGE_SIZE);
ffffffff80004d66:	4d 89 cf             	mov    %r9,%r15
    uint64_t _rodata_start = ALIGN_DOWN((uint64_t)&rodata_start, PAGE_SIZE);
ffffffff80004d69:	4c 89 c5             	mov    %r8,%rbp
    uint64_t vaddr = kernaddress_req.response->virtual_base;
ffffffff80004d6c:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    uint64_t _data_end = ALIGN_UP((uint64_t)&data_end, PAGE_SIZE);
ffffffff80004d71:	48 8d 05 87 8c 00 00 	lea    0x8c87(%rip),%rax        # ffffffff8000d9ff <bump_alloc_pool+0xebf>
ffffffff80004d78:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
    uint64_t paddr = kernaddress_req.response->physical_base;
ffffffff80004d7e:	4c 89 74 24 28       	mov    %r14,0x28(%rsp)
    uint64_t _data_end = ALIGN_UP((uint64_t)&data_end, PAGE_SIZE);
ffffffff80004d83:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    printf("Kernel Section Mapping\n");
ffffffff80004d88:	31 c0                	xor    %eax,%eax
ffffffff80004d8a:	e8 61 f4 ff ff       	call   ffffffff800041f0 <printf>
    printf("Start: Data %x, Rodata %x, Text %x\n", _data_start, _rodata_start, _text_start);
ffffffff80004d8f:	4c 89 f9             	mov    %r15,%rcx
ffffffff80004d92:	48 89 ea             	mov    %rbp,%rdx
ffffffff80004d95:	48 89 de             	mov    %rbx,%rsi
ffffffff80004d98:	48 8d 3d d9 4a 00 00 	lea    0x4ad9(%rip),%rdi        # ffffffff80009878 <font8+0x4f8>
ffffffff80004d9f:	31 c0                	xor    %eax,%eax
ffffffff80004da1:	e8 4a f4 ff ff       	call   ffffffff800041f0 <printf>
    printf("End: Data %x, Rodata %x, Text %x\n", _data_end, _rodata_end, _text_end);
ffffffff80004da6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
ffffffff80004dab:	4c 89 e9             	mov    %r13,%rcx
ffffffff80004dae:	4c 89 e2             	mov    %r12,%rdx
ffffffff80004db1:	48 8d 3d e8 4a 00 00 	lea    0x4ae8(%rip),%rdi        # ffffffff800098a0 <font8+0x520>
ffffffff80004db8:	31 c0                	xor    %eax,%eax
ffffffff80004dba:	e8 31 f4 ff ff       	call   ffffffff800041f0 <printf>
    for(uint64_t text = _text_start; text < _text_end; text += PAGE_SIZE)
ffffffff80004dbf:	4c 2b 74 24 20       	sub    0x20(%rsp),%r14
ffffffff80004dc4:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
ffffffff80004dc9:	4c 8d 35 1a 4a 00 00 	lea    0x4a1a(%rip),%r14        # ffffffff800097ea <font8+0x46a>
ffffffff80004dd0:	4d 39 ef             	cmp    %r13,%r15
ffffffff80004dd3:	73 3a                	jae    ffffffff80004e0f <pgsetup+0x13f>
ffffffff80004dd5:	0f 1f 00             	nopl   (%rax)
        map(text, text - vaddr + paddr, PAGE_PRESENT | PAGE_USER);
ffffffff80004dd8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80004ddd:	4c 89 ff             	mov    %r15,%rdi
ffffffff80004de0:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80004de5:	4e 8d 24 38          	lea    (%rax,%r15,1),%r12
ffffffff80004de9:	31 c0                	xor    %eax,%eax
ffffffff80004deb:	4c 89 e6             	mov    %r12,%rsi
ffffffff80004dee:	e8 ed fa ff ff       	call   ffffffff800048e0 <map>
        printf(" t mapped %x to %x\n", text, text - vaddr + paddr);
ffffffff80004df3:	4c 89 fe             	mov    %r15,%rsi
ffffffff80004df6:	4c 89 e2             	mov    %r12,%rdx
ffffffff80004df9:	4c 89 f7             	mov    %r14,%rdi
ffffffff80004dfc:	31 c0                	xor    %eax,%eax
    for(uint64_t text = _text_start; text < _text_end; text += PAGE_SIZE)
ffffffff80004dfe:	49 81 c7 00 10 00 00 	add    $0x1000,%r15
        printf(" t mapped %x to %x\n", text, text - vaddr + paddr);
ffffffff80004e05:	e8 e6 f3 ff ff       	call   ffffffff800041f0 <printf>
    for(uint64_t text = _text_start; text < _text_end; text += PAGE_SIZE)
ffffffff80004e0a:	4d 39 fd             	cmp    %r15,%r13
ffffffff80004e0d:	77 c9                	ja     ffffffff80004dd8 <pgsetup+0x108>
    for(uint64_t rodata = _rodata_start; rodata < _rodata_end; rodata += PAGE_SIZE)
ffffffff80004e0f:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
ffffffff80004e14:	4c 2b 64 24 20       	sub    0x20(%rsp),%r12
ffffffff80004e19:	4c 8d 35 de 49 00 00 	lea    0x49de(%rip),%r14        # ffffffff800097fe <font8+0x47e>
        map(rodata, rodata - vaddr + paddr, PAGE_PRESENT | PAGE_NX | PAGE_USER);
ffffffff80004e20:	49 bd 05 00 00 00 00 	movabs $0x8000000000000005,%r13
ffffffff80004e27:	00 00 80 
    for(uint64_t rodata = _rodata_start; rodata < _rodata_end; rodata += PAGE_SIZE)
ffffffff80004e2a:	48 3b 6c 24 10       	cmp    0x10(%rsp),%rbp
ffffffff80004e2f:	73 39                	jae    ffffffff80004e6a <pgsetup+0x19a>
ffffffff80004e31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        map(rodata, rodata - vaddr + paddr, PAGE_PRESENT | PAGE_NX | PAGE_USER);
ffffffff80004e38:	4d 8d 3c 2c          	lea    (%r12,%rbp,1),%r15
ffffffff80004e3c:	48 89 ef             	mov    %rbp,%rdi
ffffffff80004e3f:	4c 89 ea             	mov    %r13,%rdx
ffffffff80004e42:	31 c0                	xor    %eax,%eax
ffffffff80004e44:	4c 89 fe             	mov    %r15,%rsi
ffffffff80004e47:	e8 94 fa ff ff       	call   ffffffff800048e0 <map>
        printf(" rd mapped %x to %x\n", rodata, rodata - vaddr + paddr);
ffffffff80004e4c:	48 89 ee             	mov    %rbp,%rsi
ffffffff80004e4f:	4c 89 fa             	mov    %r15,%rdx
ffffffff80004e52:	4c 89 f7             	mov    %r14,%rdi
ffffffff80004e55:	31 c0                	xor    %eax,%eax
    for(uint64_t rodata = _rodata_start; rodata < _rodata_end; rodata += PAGE_SIZE)
ffffffff80004e57:	48 81 c5 00 10 00 00 	add    $0x1000,%rbp
        printf(" rd mapped %x to %x\n", rodata, rodata - vaddr + paddr);
ffffffff80004e5e:	e8 8d f3 ff ff       	call   ffffffff800041f0 <printf>
    for(uint64_t rodata = _rodata_start; rodata < _rodata_end; rodata += PAGE_SIZE)
ffffffff80004e63:	48 39 6c 24 10       	cmp    %rbp,0x10(%rsp)
ffffffff80004e68:	77 ce                	ja     ffffffff80004e38 <pgsetup+0x168>
    for(uint64_t data = _data_start; data < _data_end; data += PAGE_SIZE)
ffffffff80004e6a:	4c 8b 74 24 28       	mov    0x28(%rsp),%r14
ffffffff80004e6f:	4c 2b 74 24 20       	sub    0x20(%rsp),%r14
ffffffff80004e74:	4c 8d 3d e4 49 00 00 	lea    0x49e4(%rip),%r15        # ffffffff8000985f <font8+0x4df>
        map(data, data - vaddr + paddr, PAGE_PRESENT | PAGE_NX | PAGE_RW | PAGE_USER);
ffffffff80004e7b:	49 bd 07 00 00 00 00 	movabs $0x8000000000000007,%r13
ffffffff80004e82:	00 00 80 
    for(uint64_t data = _data_start; data < _data_end; data += PAGE_SIZE)
ffffffff80004e85:	48 3b 5c 24 08       	cmp    0x8(%rsp),%rbx
ffffffff80004e8a:	73 36                	jae    ffffffff80004ec2 <pgsetup+0x1f2>
ffffffff80004e8c:	0f 1f 40 00          	nopl   0x0(%rax)
        map(data, data - vaddr + paddr, PAGE_PRESENT | PAGE_NX | PAGE_RW | PAGE_USER);
ffffffff80004e90:	4d 8d 24 1e          	lea    (%r14,%rbx,1),%r12
ffffffff80004e94:	48 89 df             	mov    %rbx,%rdi
ffffffff80004e97:	4c 89 ea             	mov    %r13,%rdx
ffffffff80004e9a:	31 c0                	xor    %eax,%eax
ffffffff80004e9c:	4c 89 e6             	mov    %r12,%rsi
ffffffff80004e9f:	e8 3c fa ff ff       	call   ffffffff800048e0 <map>
        printf(" d mapped %x to %x\n", data, data - vaddr + paddr);
ffffffff80004ea4:	48 89 de             	mov    %rbx,%rsi
ffffffff80004ea7:	4c 89 e2             	mov    %r12,%rdx
ffffffff80004eaa:	4c 89 ff             	mov    %r15,%rdi
ffffffff80004ead:	31 c0                	xor    %eax,%eax
    for(uint64_t data = _data_start; data < _data_end; data += PAGE_SIZE)
ffffffff80004eaf:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
        printf(" d mapped %x to %x\n", data, data - vaddr + paddr);
ffffffff80004eb6:	e8 35 f3 ff ff       	call   ffffffff800041f0 <printf>
    for(uint64_t data = _data_start; data < _data_end; data += PAGE_SIZE)
ffffffff80004ebb:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
ffffffff80004ec0:	77 ce                	ja     ffffffff80004e90 <pgsetup+0x1c0>
    printf("mapped kernel");
ffffffff80004ec2:	48 8d 3d 4a 49 00 00 	lea    0x494a(%rip),%rdi        # ffffffff80009813 <font8+0x493>
ffffffff80004ec9:	31 c0                	xor    %eax,%eax

void load_pdpt()
{
    printf("\nabt to load pdpt\n");
    printf("PDPT: Virtual %x, Physical %x", (uint64_t)&page_dir_ptr_tab, virt_to_phys((uint64_t)&page_dir_ptr_tab));
ffffffff80004ecb:	48 8d 1d 2e ef 0d 00 	lea    0xdef2e(%rip),%rbx        # ffffffff800e3e00 <page_dir_ptr_tab>
    printf("mapped kernel");
ffffffff80004ed2:	e8 19 f3 ff ff       	call   ffffffff800041f0 <printf>
    printf("\nabt to load pdpt\n");
ffffffff80004ed7:	48 8d 3d 43 49 00 00 	lea    0x4943(%rip),%rdi        # ffffffff80009821 <font8+0x4a1>
ffffffff80004ede:	31 c0                	xor    %eax,%eax
ffffffff80004ee0:	e8 0b f3 ff ff       	call   ffffffff800041f0 <printf>
    printf("PDPT: Virtual %x, Physical %x", (uint64_t)&page_dir_ptr_tab, virt_to_phys((uint64_t)&page_dir_ptr_tab));
ffffffff80004ee5:	48 8b 05 fc ee 0d 00 	mov    0xdeefc(%rip),%rax        # ffffffff800e3de8 <hhdm>
ffffffff80004eec:	48 89 de             	mov    %rbx,%rsi
ffffffff80004eef:	48 89 da             	mov    %rbx,%rdx
ffffffff80004ef2:	48 8d 3d 3b 49 00 00 	lea    0x493b(%rip),%rdi        # ffffffff80009834 <font8+0x4b4>
ffffffff80004ef9:	48 2b 50 08          	sub    0x8(%rax),%rdx
ffffffff80004efd:	31 c0                	xor    %eax,%eax
ffffffff80004eff:	e8 ec f2 ff ff       	call   ffffffff800041f0 <printf>
    asm volatile ("mov %0, %%cr3" :: "r" (virt_to_phys((uint64_t)&page_dir_ptr_tab))); // load PDPT into CR3
ffffffff80004f04:	48 8b 05 dd ee 0d 00 	mov    0xdeedd(%rip),%rax        # ffffffff800e3de8 <hhdm>
ffffffff80004f0b:	48 2b 58 08          	sub    0x8(%rax),%rbx
ffffffff80004f0f:	0f 22 db             	mov    %rbx,%cr3
}
ffffffff80004f12:	48 83 c4 38          	add    $0x38,%rsp
    printf("loaded pdpt\n");
ffffffff80004f16:	48 8d 3d 35 49 00 00 	lea    0x4935(%rip),%rdi        # ffffffff80009852 <font8+0x4d2>
ffffffff80004f1d:	31 c0                	xor    %eax,%eax
}
ffffffff80004f1f:	5b                   	pop    %rbx
ffffffff80004f20:	5d                   	pop    %rbp
ffffffff80004f21:	41 5c                	pop    %r12
ffffffff80004f23:	41 5d                	pop    %r13
ffffffff80004f25:	41 5e                	pop    %r14
ffffffff80004f27:	41 5f                	pop    %r15
    printf("loaded pdpt\n");
ffffffff80004f29:	e9 c2 f2 ff ff       	jmp    ffffffff800041f0 <printf>
ffffffff80004f2e:	66 90                	xchg   %ax,%ax

ffffffff80004f30 <load_pdpt>:
{
ffffffff80004f30:	f3 0f 1e fa          	endbr64 
ffffffff80004f34:	53                   	push   %rbx
    printf("\nabt to load pdpt\n");
ffffffff80004f35:	48 8d 3d e5 48 00 00 	lea    0x48e5(%rip),%rdi        # ffffffff80009821 <font8+0x4a1>
ffffffff80004f3c:	31 c0                	xor    %eax,%eax
    printf("PDPT: Virtual %x, Physical %x", (uint64_t)&page_dir_ptr_tab, virt_to_phys((uint64_t)&page_dir_ptr_tab));
ffffffff80004f3e:	48 8d 1d bb ee 0d 00 	lea    0xdeebb(%rip),%rbx        # ffffffff800e3e00 <page_dir_ptr_tab>
    printf("\nabt to load pdpt\n");
ffffffff80004f45:	e8 a6 f2 ff ff       	call   ffffffff800041f0 <printf>
    printf("PDPT: Virtual %x, Physical %x", (uint64_t)&page_dir_ptr_tab, virt_to_phys((uint64_t)&page_dir_ptr_tab));
ffffffff80004f4a:	48 8b 05 97 ee 0d 00 	mov    0xdee97(%rip),%rax        # ffffffff800e3de8 <hhdm>
ffffffff80004f51:	48 89 de             	mov    %rbx,%rsi
ffffffff80004f54:	48 89 da             	mov    %rbx,%rdx
ffffffff80004f57:	48 8d 3d d6 48 00 00 	lea    0x48d6(%rip),%rdi        # ffffffff80009834 <font8+0x4b4>
ffffffff80004f5e:	48 2b 50 08          	sub    0x8(%rax),%rdx
ffffffff80004f62:	31 c0                	xor    %eax,%eax
ffffffff80004f64:	e8 87 f2 ff ff       	call   ffffffff800041f0 <printf>
    asm volatile ("mov %0, %%cr3" :: "r" (virt_to_phys((uint64_t)&page_dir_ptr_tab))); // load PDPT into CR3
ffffffff80004f69:	48 8b 05 78 ee 0d 00 	mov    0xdee78(%rip),%rax        # ffffffff800e3de8 <hhdm>
ffffffff80004f70:	48 2b 58 08          	sub    0x8(%rax),%rbx
ffffffff80004f74:	0f 22 db             	mov    %rbx,%cr3
    printf("loaded pdpt\n");
ffffffff80004f77:	48 8d 3d d4 48 00 00 	lea    0x48d4(%rip),%rdi        # ffffffff80009852 <font8+0x4d2>
ffffffff80004f7e:	31 c0                	xor    %eax,%eax
ffffffff80004f80:	5b                   	pop    %rbx
    printf("loaded pdpt\n");
ffffffff80004f81:	e9 6a f2 ff ff       	jmp    ffffffff800041f0 <printf>
ffffffff80004f86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80004f8d:	00 00 00 

ffffffff80004f90 <pfbmp_init>:
static uint64_t start_address = 0;

uint64_t pfbmp[PAGE_FRAME_NUM / (sizeof(uint64_t) * 8)]; 

void pfbmp_init()
{
ffffffff80004f90:	f3 0f 1e fa          	endbr64 
    start_address = (uint64_t)(&endkernel) - 0xFFFFFFFF80000000 + hhdm->offset;
ffffffff80004f94:	ba 00 00 00 80       	mov    $0x80000000,%edx
ffffffff80004f99:	48 8d 05 50 ef 0f 00 	lea    0xfef50(%rip),%rax        # ffffffff80103ef0 <ebss>
ffffffff80004fa0:	48 01 d0             	add    %rdx,%rax
ffffffff80004fa3:	48 8b 15 3e ee 0d 00 	mov    0xdee3e(%rip),%rdx        # ffffffff800e3de8 <hhdm>
ffffffff80004faa:	48 03 42 08          	add    0x8(%rdx),%rax
ffffffff80004fae:	48 89 05 2b ef 0f 00 	mov    %rax,0xfef2b(%rip)        # ffffffff80103ee0 <start_address>

    for(uint64_t i = 0; i < PAGE_FRAME_NUM / (sizeof(uint64_t) * 8); i++)
ffffffff80004fb5:	48 8d 05 64 ee 0d 00 	lea    0xdee64(%rip),%rax        # ffffffff800e3e20 <pfbmp>
ffffffff80004fbc:	48 8d 90 00 00 02 00 	lea    0x20000(%rax),%rdx
ffffffff80004fc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        pfbmp[i] = PF_FREE;
ffffffff80004fc8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(uint64_t i = 0; i < PAGE_FRAME_NUM / (sizeof(uint64_t) * 8); i++)
ffffffff80004fcf:	48 83 c0 08          	add    $0x8,%rax
ffffffff80004fd3:	48 39 d0             	cmp    %rdx,%rax
ffffffff80004fd6:	75 f0                	jne    ffffffff80004fc8 <pfbmp_init+0x38>
    }
}
ffffffff80004fd8:	c3                   	ret    
ffffffff80004fd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80004fe0 <kalloc_frame>:
static pageframe_t preframes[20];
static uint8_t allocate = 1;
static uint8_t pframe = 0;

pageframe_t kalloc_frame()
{
ffffffff80004fe0:	f3 0f 1e fa          	endbr64 
    pageframe_t ret;

    if(pframe == 20)
ffffffff80004fe4:	0f b6 05 35 ee 0f 00 	movzbl 0xfee35(%rip),%eax        # ffffffff80103e20 <pframe>
{
ffffffff80004feb:	41 56                	push   %r14
ffffffff80004fed:	41 55                	push   %r13
ffffffff80004fef:	41 54                	push   %r12
ffffffff80004ff1:	55                   	push   %rbp
ffffffff80004ff2:	53                   	push   %rbx
    if(pframe == 20)
ffffffff80004ff3:	3c 14                	cmp    $0x14,%al
ffffffff80004ff5:	74 2d                	je     ffffffff80005024 <kalloc_frame+0x44>
    {
        allocate = 1;
    }

    if(allocate == 1)
ffffffff80004ff7:	80 3d b3 70 00 00 01 	cmpb   $0x1,0x70b3(%rip)        # ffffffff8000c0b1 <allocate>
ffffffff80004ffe:	74 2b                	je     ffffffff8000502b <kalloc_frame+0x4b>
        }
        pframe = 0;
        allocate = 0;
    }

    ret = preframes[pframe];
ffffffff80005000:	0f b6 d0             	movzbl %al,%edx
ffffffff80005003:	4c 8d 2d 36 ee 0f 00 	lea    0xfee36(%rip),%r13        # ffffffff80103e40 <preframes>
    pframe++;
ffffffff8000500a:	83 c0 01             	add    $0x1,%eax
    ret = preframes[pframe];
ffffffff8000500d:	4d 8b 44 d5 00       	mov    0x0(%r13,%rdx,8),%r8
    return ret;
}
ffffffff80005012:	5b                   	pop    %rbx
    pframe++;
ffffffff80005013:	88 05 07 ee 0f 00    	mov    %al,0xfee07(%rip)        # ffffffff80103e20 <pframe>
}
ffffffff80005019:	5d                   	pop    %rbp
ffffffff8000501a:	41 5c                	pop    %r12
ffffffff8000501c:	4c 89 c0             	mov    %r8,%rax
ffffffff8000501f:	41 5d                	pop    %r13
ffffffff80005021:	41 5e                	pop    %r14
ffffffff80005023:	c3                   	ret    
        allocate = 1;
ffffffff80005024:	c6 05 86 70 00 00 01 	movb   $0x1,0x7086(%rip)        # ffffffff8000c0b1 <allocate>
    if(allocate == 1)
ffffffff8000502b:	4c 8d 2d 0e ee 0f 00 	lea    0xfee0e(%rip),%r13        # ffffffff80103e40 <preframes>
ffffffff80005032:	48 8d 1d e7 ed 0d 00 	lea    0xdede7(%rip),%rbx        # ffffffff800e3e20 <pfbmp>
ffffffff80005039:	4d 89 ee             	mov    %r13,%r14
ffffffff8000503c:	4d 8d a5 a0 00 00 00 	lea    0xa0(%r13),%r12
ffffffff80005043:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    while(pfbmp[i] != PF_FREE)
ffffffff80005048:	48 8b 03             	mov    (%rbx),%rax
ffffffff8000504b:	31 ed                	xor    %ebp,%ebp
ffffffff8000504d:	48 85 c0             	test   %rax,%rax
ffffffff80005050:	74 18                	je     ffffffff8000506a <kalloc_frame+0x8a>
    uint64_t i = 0;
ffffffff80005052:	31 c0                	xor    %eax,%eax
ffffffff80005054:	0f 1f 40 00          	nopl   0x0(%rax)
        i++;
ffffffff80005058:	48 83 c0 01          	add    $0x1,%rax
    while(pfbmp[i] != PF_FREE)
ffffffff8000505c:	48 83 3c c3 00       	cmpq   $0x0,(%rbx,%rax,8)
ffffffff80005061:	75 f5                	jne    ffffffff80005058 <kalloc_frame+0x78>
    pageframe_t frame = start_address+(i*PAGE_FRAME_SIZE);
ffffffff80005063:	48 89 c5             	mov    %rax,%rbp
ffffffff80005066:	48 c1 e5 0c          	shl    $0xc,%rbp
ffffffff8000506a:	48 03 2d 6f ee 0f 00 	add    0xfee6f(%rip),%rbp        # ffffffff80103ee0 <start_address>
    memset((void*)frame, 0, PAGE_FRAME_SIZE);
ffffffff80005071:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff80005076:	31 f6                	xor    %esi,%esi
    pfbmp[i] = PF_USED;
ffffffff80005078:	48 c7 04 c3 01 00 00 	movq   $0x1,(%rbx,%rax,8)
ffffffff8000507f:	00 
    memset((void*)frame, 0, PAGE_FRAME_SIZE);
ffffffff80005080:	48 89 ef             	mov    %rbp,%rdi
        for(int i = 0; i < 20; i++)
ffffffff80005083:	49 83 c6 08          	add    $0x8,%r14
    memset((void*)frame, 0, PAGE_FRAME_SIZE);
ffffffff80005087:	e8 84 f5 ff ff       	call   ffffffff80004610 <memset>
            preframes[i] = kalloc_frame_int();
ffffffff8000508c:	49 89 6e f8          	mov    %rbp,-0x8(%r14)
        for(int i = 0; i < 20; i++)
ffffffff80005090:	4d 39 e6             	cmp    %r12,%r14
ffffffff80005093:	75 b3                	jne    ffffffff80005048 <kalloc_frame+0x68>
        allocate = 0;
ffffffff80005095:	c6 05 15 70 00 00 00 	movb   $0x0,0x7015(%rip)        # ffffffff8000c0b1 <allocate>
ffffffff8000509c:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800050a1:	31 d2                	xor    %edx,%edx
ffffffff800050a3:	e9 65 ff ff ff       	jmp    ffffffff8000500d <kalloc_frame+0x2d>
ffffffff800050a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff800050af:	00 

ffffffff800050b0 <kfree_frame>:

void kfree_frame(pageframe_t frame)
{
ffffffff800050b0:	f3 0f 1e fa          	endbr64 
    frame = frame - start_address;
    if(frame == 0)
ffffffff800050b4:	48 2b 3d 25 ee 0f 00 	sub    0xfee25(%rip),%rdi        # ffffffff80103ee0 <start_address>
ffffffff800050bb:	74 1b                	je     ffffffff800050d8 <kfree_frame+0x28>
    {
        pfbmp[0] = PF_FREE;
    }
    else
    {
        uint64_t index = ((uint64_t)frame)/PAGE_FRAME_SIZE;
ffffffff800050bd:	48 c1 ef 0c          	shr    $0xc,%rdi
        pfbmp[index] = PF_FREE;
ffffffff800050c1:	48 8d 05 58 ed 0d 00 	lea    0xded58(%rip),%rax        # ffffffff800e3e20 <pfbmp>
ffffffff800050c8:	48 c7 04 f8 00 00 00 	movq   $0x0,(%rax,%rdi,8)
ffffffff800050cf:	00 
    }
ffffffff800050d0:	c3                   	ret    
ffffffff800050d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        pfbmp[0] = PF_FREE;
ffffffff800050d8:	48 c7 05 3d ed 0d 00 	movq   $0x0,0xded3d(%rip)        # ffffffff800e3e20 <pfbmp>
ffffffff800050df:	00 00 00 00 
ffffffff800050e3:	c3                   	ret    
ffffffff800050e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff800050eb:	00 00 00 
ffffffff800050ee:	66 90                	xchg   %ax,%ax

ffffffff800050f0 <pic_remap>:
#include <pic/pic.h>

void pic_remap(int offset1, int offset2)
{
ffffffff800050f0:	f3 0f 1e fa          	endbr64 
ffffffff800050f4:	e4 21                	in     $0x21,%al
ffffffff800050f6:	41 89 c1             	mov    %eax,%r9d
ffffffff800050f9:	e4 a1                	in     $0xa1,%al
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff800050fb:	b9 11 00 00 00       	mov    $0x11,%ecx
    __asm__ volatile ( "inb %1, %0"
ffffffff80005100:	41 89 c0             	mov    %eax,%r8d
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80005103:	89 c8                	mov    %ecx,%eax
ffffffff80005105:	e6 20                	out    %al,$0x20
ffffffff80005107:	31 d2                	xor    %edx,%edx
ffffffff80005109:	89 d0                	mov    %edx,%eax
ffffffff8000510b:	e6 80                	out    %al,$0x80
ffffffff8000510d:	89 c8                	mov    %ecx,%eax
ffffffff8000510f:	e6 a0                	out    %al,$0xa0
ffffffff80005111:	89 d0                	mov    %edx,%eax
ffffffff80005113:	e6 80                	out    %al,$0x80
ffffffff80005115:	89 f8                	mov    %edi,%eax
ffffffff80005117:	e6 21                	out    %al,$0x21
ffffffff80005119:	89 d0                	mov    %edx,%eax
ffffffff8000511b:	e6 80                	out    %al,$0x80
ffffffff8000511d:	89 f0                	mov    %esi,%eax
ffffffff8000511f:	e6 a1                	out    %al,$0xa1
ffffffff80005121:	89 d0                	mov    %edx,%eax
ffffffff80005123:	e6 80                	out    %al,$0x80
ffffffff80005125:	b8 04 00 00 00       	mov    $0x4,%eax
ffffffff8000512a:	e6 21                	out    %al,$0x21
ffffffff8000512c:	89 d0                	mov    %edx,%eax
ffffffff8000512e:	e6 80                	out    %al,$0x80
ffffffff80005130:	b8 02 00 00 00       	mov    $0x2,%eax
ffffffff80005135:	e6 a1                	out    %al,$0xa1
ffffffff80005137:	89 d0                	mov    %edx,%eax
ffffffff80005139:	e6 80                	out    %al,$0x80
ffffffff8000513b:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80005140:	89 c8                	mov    %ecx,%eax
ffffffff80005142:	e6 21                	out    %al,$0x21
ffffffff80005144:	89 d0                	mov    %edx,%eax
ffffffff80005146:	e6 80                	out    %al,$0x80
ffffffff80005148:	89 c8                	mov    %ecx,%eax
ffffffff8000514a:	e6 a1                	out    %al,$0xa1
ffffffff8000514c:	89 d0                	mov    %edx,%eax
ffffffff8000514e:	e6 80                	out    %al,$0x80
ffffffff80005150:	44 89 c8             	mov    %r9d,%eax
ffffffff80005153:	e6 21                	out    %al,$0x21
ffffffff80005155:	44 89 c0             	mov    %r8d,%eax
ffffffff80005158:	e6 a1                	out    %al,$0xa1
    outb(PIC2_DATA, ICW4_8086);
    io_wait(); 

    outb(PIC1_DATA, a1);
	outb(PIC2_DATA, a2);
}
ffffffff8000515a:	c3                   	ret    
ffffffff8000515b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80005160 <irq_mask_all>:

void irq_mask_all() {
ffffffff80005160:	f3 0f 1e fa          	endbr64 
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff80005164:	31 f6                	xor    %esi,%esi
    //a
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
        port = PIC1_DATA;
ffffffff80005166:	ba 21 00 00 00       	mov    $0x21,%edx
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff8000516b:	31 c9                	xor    %ecx,%ecx
    } else {
        port = PIC2_DATA;
        IRQline -= 8;
    }
    value = inb(port) | (1 << IRQline);
ffffffff8000516d:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80005172:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    __asm__ volatile ( "inb %1, %0"
ffffffff80005178:	ec                   	in     (%dx),%al
ffffffff80005179:	41 89 f8             	mov    %edi,%r8d
ffffffff8000517c:	41 d3 e0             	shl    %cl,%r8d
ffffffff8000517f:	44 09 c0             	or     %r8d,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80005182:	ee                   	out    %al,(%dx)
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff80005183:	83 c6 01             	add    $0x1,%esi
ffffffff80005186:	83 fe 10             	cmp    $0x10,%esi
ffffffff80005189:	74 1d                	je     ffffffff800051a8 <irq_mask_all+0x48>
ffffffff8000518b:	89 f1                	mov    %esi,%ecx
        port = PIC1_DATA;
ffffffff8000518d:	ba 21 00 00 00       	mov    $0x21,%edx
    if(IRQline < 8) {
ffffffff80005192:	83 fe 07             	cmp    $0x7,%esi
ffffffff80005195:	7e e1                	jle    ffffffff80005178 <irq_mask_all+0x18>
        IRQline -= 8;
ffffffff80005197:	8d 4e f8             	lea    -0x8(%rsi),%ecx
        port = PIC2_DATA;
ffffffff8000519a:	ba a1 00 00 00       	mov    $0xa1,%edx
ffffffff8000519f:	eb d7                	jmp    ffffffff80005178 <irq_mask_all+0x18>
ffffffff800051a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
}
ffffffff800051a8:	c3                   	ret    
ffffffff800051a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800051b0 <pic_init>:
{
ffffffff800051b0:	f3 0f 1e fa          	endbr64 
    pic_remap(0x20,0x28);
ffffffff800051b4:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff800051b9:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800051be:	e8 2d ff ff ff       	call   ffffffff800050f0 <pic_remap>
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff800051c3:	31 f6                	xor    %esi,%esi
        port = PIC1_DATA;
ffffffff800051c5:	ba 21 00 00 00       	mov    $0x21,%edx
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff800051ca:	31 c9                	xor    %ecx,%ecx
    value = inb(port) | (1 << IRQline);
ffffffff800051cc:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff800051d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    __asm__ volatile ( "inb %1, %0"
ffffffff800051d8:	ec                   	in     (%dx),%al
ffffffff800051d9:	41 89 f8             	mov    %edi,%r8d
ffffffff800051dc:	41 d3 e0             	shl    %cl,%r8d
ffffffff800051df:	44 09 c0             	or     %r8d,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff800051e2:	ee                   	out    %al,(%dx)
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff800051e3:	83 c6 01             	add    $0x1,%esi
ffffffff800051e6:	83 fe 10             	cmp    $0x10,%esi
ffffffff800051e9:	74 1d                	je     ffffffff80005208 <pic_init+0x58>
ffffffff800051eb:	89 f1                	mov    %esi,%ecx
        port = PIC1_DATA;
ffffffff800051ed:	ba 21 00 00 00       	mov    $0x21,%edx
    if(IRQline < 8) {
ffffffff800051f2:	83 fe 07             	cmp    $0x7,%esi
ffffffff800051f5:	7e e1                	jle    ffffffff800051d8 <pic_init+0x28>
        IRQline -= 8;
ffffffff800051f7:	8d 4e f8             	lea    -0x8(%rsi),%ecx
        port = PIC2_DATA;
ffffffff800051fa:	ba a1 00 00 00       	mov    $0xa1,%edx
ffffffff800051ff:	eb d7                	jmp    ffffffff800051d8 <pic_init+0x28>
ffffffff80005201:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    __asm__ volatile ( "inb %1, %0"
ffffffff80005208:	e4 21                	in     $0x21,%al
        port = PIC1_DATA;
    } else {
        port = PIC2_DATA;
        IRQline -= 8;
    }
    value = inb(port) & ~(1 << IRQline);
ffffffff8000520a:	83 e0 fe             	and    $0xfffffffe,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff8000520d:	e6 21                	out    %al,$0x21
    __asm__ volatile ( "inb %1, %0"
ffffffff8000520f:	e4 21                	in     $0x21,%al
ffffffff80005211:	83 e0 fd             	and    $0xfffffffd,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80005214:	e6 21                	out    %al,$0x21
    __asm__ volatile ( "inb %1, %0"
ffffffff80005216:	e4 21                	in     $0x21,%al
ffffffff80005218:	83 e0 fb             	and    $0xfffffffb,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff8000521b:	e6 21                	out    %al,$0x21
}
ffffffff8000521d:	c3                   	ret    
ffffffff8000521e:	66 90                	xchg   %ax,%ax

ffffffff80005220 <irq_set_mask>:
{
ffffffff80005220:	f3 0f 1e fa          	endbr64 
ffffffff80005224:	89 f9                	mov    %edi,%ecx
        port = PIC1_DATA;
ffffffff80005226:	ba 21 00 00 00       	mov    $0x21,%edx
    if(IRQline < 8) {
ffffffff8000522b:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000522f:	76 08                	jbe    ffffffff80005239 <irq_set_mask+0x19>
        IRQline -= 8;
ffffffff80005231:	8d 4f f8             	lea    -0x8(%rdi),%ecx
        port = PIC2_DATA;
ffffffff80005234:	ba a1 00 00 00       	mov    $0xa1,%edx
    __asm__ volatile ( "inb %1, %0"
ffffffff80005239:	ec                   	in     (%dx),%al
    value = inb(port) | (1 << IRQline);
ffffffff8000523a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000523f:	d3 e6                	shl    %cl,%esi
ffffffff80005241:	09 f0                	or     %esi,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80005243:	ee                   	out    %al,(%dx)
}
ffffffff80005244:	c3                   	ret    
ffffffff80005245:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000524c:	00 00 00 00 

ffffffff80005250 <irq_clear_mask>:
{
ffffffff80005250:	f3 0f 1e fa          	endbr64 
ffffffff80005254:	89 f9                	mov    %edi,%ecx
        port = PIC1_DATA;
ffffffff80005256:	ba 21 00 00 00       	mov    $0x21,%edx
    if(IRQline < 8) {
ffffffff8000525b:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff8000525f:	76 08                	jbe    ffffffff80005269 <irq_clear_mask+0x19>
        IRQline -= 8;
ffffffff80005261:	8d 4f f8             	lea    -0x8(%rdi),%ecx
        port = PIC2_DATA;
ffffffff80005264:	ba a1 00 00 00       	mov    $0xa1,%edx
    __asm__ volatile ( "inb %1, %0"
ffffffff80005269:	ec                   	in     (%dx),%al
    value = inb(port) & ~(1 << IRQline);
ffffffff8000526a:	0f b3 c8             	btr    %ecx,%eax
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff8000526d:	ee                   	out    %al,(%dx)
    outb(port, value); 
}
ffffffff8000526e:	c3                   	ret    
ffffffff8000526f:	90                   	nop

ffffffff80005270 <pic_get_IrqReg>:

uint16_t pic_get_IrqReg(int ocw3)
{
ffffffff80005270:	f3 0f 1e fa          	endbr64 
    outb(PIC1_CMD, ocw3);
ffffffff80005274:	89 f8                	mov    %edi,%eax
ffffffff80005276:	e6 20                	out    %al,$0x20
ffffffff80005278:	e6 a0                	out    %al,$0xa0
    __asm__ volatile ( "inb %1, %0"
ffffffff8000527a:	e4 a0                	in     $0xa0,%al
ffffffff8000527c:	89 c2                	mov    %eax,%edx
ffffffff8000527e:	e4 20                	in     $0x20,%al
    outb(PIC2_CMD, ocw3);
    return (inb(PIC2_CMD) << 8) | inb(PIC1_CMD);
ffffffff80005280:	c1 e2 08             	shl    $0x8,%edx
ffffffff80005283:	0f b6 c0             	movzbl %al,%eax
ffffffff80005286:	09 d0                	or     %edx,%eax
}
ffffffff80005288:	c3                   	ret    
ffffffff80005289:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80005290 <pic_getIRR>:

uint16_t pic_getIRR(void)
{
ffffffff80005290:	f3 0f 1e fa          	endbr64 
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80005294:	b8 0a 00 00 00       	mov    $0xa,%eax
ffffffff80005299:	e6 20                	out    %al,$0x20
ffffffff8000529b:	e6 a0                	out    %al,$0xa0
    __asm__ volatile ( "inb %1, %0"
ffffffff8000529d:	e4 a0                	in     $0xa0,%al
ffffffff8000529f:	89 c2                	mov    %eax,%edx
ffffffff800052a1:	e4 20                	in     $0x20,%al
    return (inb(PIC2_CMD) << 8) | inb(PIC1_CMD);
ffffffff800052a3:	c1 e2 08             	shl    $0x8,%edx
ffffffff800052a6:	0f b6 c0             	movzbl %al,%eax
ffffffff800052a9:	09 d0                	or     %edx,%eax
    return pic_get_IrqReg(PIC_READ_IRR);
}
ffffffff800052ab:	c3                   	ret    
ffffffff800052ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800052b0 <pic_getISR>:

uint16_t pic_getISR(void)
{
ffffffff800052b0:	f3 0f 1e fa          	endbr64 
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff800052b4:	b8 0b 00 00 00       	mov    $0xb,%eax
ffffffff800052b9:	e6 20                	out    %al,$0x20
ffffffff800052bb:	e6 a0                	out    %al,$0xa0
    __asm__ volatile ( "inb %1, %0"
ffffffff800052bd:	e4 a0                	in     $0xa0,%al
ffffffff800052bf:	89 c2                	mov    %eax,%edx
ffffffff800052c1:	e4 20                	in     $0x20,%al
    return (inb(PIC2_CMD) << 8) | inb(PIC1_CMD);
ffffffff800052c3:	c1 e2 08             	shl    $0x8,%edx
ffffffff800052c6:	0f b6 c0             	movzbl %al,%eax
ffffffff800052c9:	09 d0                	or     %edx,%eax
    return pic_get_IrqReg(PIC_READ_ISR);
}
ffffffff800052cb:	c3                   	ret    
ffffffff800052cc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff800052d0 <pic_send_eoi>:

void pic_send_eoi(uint8_t irq)
{
ffffffff800052d0:	f3 0f 1e fa          	endbr64 

    if(irq >= 8)
ffffffff800052d4:	40 80 ff 07          	cmp    $0x7,%dil
ffffffff800052d8:	76 07                	jbe    ffffffff800052e1 <pic_send_eoi+0x11>
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff800052da:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff800052df:	e6 a0                	out    %al,$0xa0
ffffffff800052e1:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff800052e6:	e6 20                	out    %al,$0x20
		outb(PIC2_COMMAND, 0x20);
 
	outb(PIC1_COMMAND, 0x20);
ffffffff800052e8:	c3                   	ret    
ffffffff800052e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff800052f0 <pic_timer_setup>:

volatile int timer_count;
volatile int timer_seconds;

void pic_timer_setup()
{
ffffffff800052f0:	f3 0f 1e fa          	endbr64 
    timer_count = 0;
ffffffff800052f4:	c7 05 ee eb 0f 00 00 	movl   $0x0,0xfebee(%rip)        # ffffffff80103eec <timer_count>
ffffffff800052fb:	00 00 00 
    timer_seconds = 0;
ffffffff800052fe:	c7 05 e0 eb 0f 00 00 	movl   $0x0,0xfebe0(%rip)        # ffffffff80103ee8 <timer_seconds>
ffffffff80005305:	00 00 00 
}
ffffffff80005308:	c3                   	ret    
ffffffff80005309:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80005310 <timer_inc>:

void timer_inc()
{
ffffffff80005310:	f3 0f 1e fa          	endbr64 
    timer_count++;
ffffffff80005314:	8b 05 d2 eb 0f 00    	mov    0xfebd2(%rip),%eax        # ffffffff80103eec <timer_count>
ffffffff8000531a:	83 c0 01             	add    $0x1,%eax
ffffffff8000531d:	89 05 c9 eb 0f 00    	mov    %eax,0xfebc9(%rip)        # ffffffff80103eec <timer_count>
}
ffffffff80005323:	c3                   	ret    
ffffffff80005324:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000532b:	00 00 00 00 
ffffffff8000532f:	90                   	nop

ffffffff80005330 <timer_reset>:

void timer_reset()
{
ffffffff80005330:	f3 0f 1e fa          	endbr64 
    timer_count = 0;
ffffffff80005334:	c7 05 ae eb 0f 00 00 	movl   $0x0,0xfebae(%rip)        # ffffffff80103eec <timer_count>
ffffffff8000533b:	00 00 00 
}
ffffffff8000533e:	c3                   	ret    
ffffffff8000533f:	90                   	nop

ffffffff80005340 <timer_getct>:

int timer_getct()
{
ffffffff80005340:	f3 0f 1e fa          	endbr64 
    return timer_count;
ffffffff80005344:	8b 05 a2 eb 0f 00    	mov    0xfeba2(%rip),%eax        # ffffffff80103eec <timer_count>
}
ffffffff8000534a:	c3                   	ret    
ffffffff8000534b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80005350 <timer_getsec>:

int timer_getsec()
{
ffffffff80005350:	f3 0f 1e fa          	endbr64 
    return timer_seconds;
ffffffff80005354:	8b 05 8e eb 0f 00    	mov    0xfeb8e(%rip),%eax        # ffffffff80103ee8 <timer_seconds>
}
ffffffff8000535a:	c3                   	ret    
ffffffff8000535b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80005360 <timer_secinc>:

void timer_secinc()
{
ffffffff80005360:	f3 0f 1e fa          	endbr64 
    timer_seconds++;
ffffffff80005364:	8b 05 7e eb 0f 00    	mov    0xfeb7e(%rip),%eax        # ffffffff80103ee8 <timer_seconds>
ffffffff8000536a:	83 c0 01             	add    $0x1,%eax
ffffffff8000536d:	89 05 75 eb 0f 00    	mov    %eax,0xfeb75(%rip)        # ffffffff80103ee8 <timer_seconds>
}
ffffffff80005373:	c3                   	ret    
ffffffff80005374:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8000537b:	00 00 00 00 
ffffffff8000537f:	90                   	nop

ffffffff80005380 <sleep>:

void sleep(int seconds)
{
ffffffff80005380:	f3 0f 1e fa          	endbr64 
    return timer_seconds;
ffffffff80005384:	8b 05 5e eb 0f 00    	mov    0xfeb5e(%rip),%eax        # ffffffff80103ee8 <timer_seconds>
    uint64_t seconds_end = timer_getsec() + seconds;
ffffffff8000538a:	01 c7                	add    %eax,%edi
    return timer_seconds;
ffffffff8000538c:	48 63 05 55 eb 0f 00 	movslq 0xfeb55(%rip),%rax        # ffffffff80103ee8 <timer_seconds>
    uint64_t seconds_end = timer_getsec() + seconds;
ffffffff80005393:	48 63 ff             	movslq %edi,%rdi
    while(timer_getsec() < seconds_end)
ffffffff80005396:	48 39 c7             	cmp    %rax,%rdi
ffffffff80005399:	76 12                	jbe    ffffffff800053ad <sleep+0x2d>
ffffffff8000539b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        __asm__ ("nop");
ffffffff800053a0:	90                   	nop
    return timer_seconds;
ffffffff800053a1:	48 63 05 40 eb 0f 00 	movslq 0xfeb40(%rip),%rax        # ffffffff80103ee8 <timer_seconds>
    while(timer_getsec() < seconds_end)
ffffffff800053a8:	48 39 f8             	cmp    %rdi,%rax
ffffffff800053ab:	72 f3                	jb     ffffffff800053a0 <sleep+0x20>
    }
ffffffff800053ad:	c3                   	ret    
ffffffff800053ae:	66 90                	xchg   %ax,%ax

ffffffff800053b0 <reloadSegments>:
ffffffff800053b0:	6a 08                	push   $0x8
ffffffff800053b2:	48 8d 05 03 00 00 00 	lea    0x3(%rip),%rax        # ffffffff800053bc <reloadSegments.reload_CS>
ffffffff800053b9:	50                   	push   %rax
ffffffff800053ba:	48 cb                	lretq  

ffffffff800053bc <reloadSegments.reload_CS>:
ffffffff800053bc:	66 b8 10 00          	mov    $0x10,%ax
ffffffff800053c0:	8e d8                	mov    %eax,%ds
ffffffff800053c2:	8e c0                	mov    %eax,%es
ffffffff800053c4:	8e e0                	mov    %eax,%fs
ffffffff800053c6:	8e e8                	mov    %eax,%gs
ffffffff800053c8:	8e d0                	mov    %eax,%ss
ffffffff800053ca:	c3                   	ret    
ffffffff800053cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff800053d0 <wrapper>:
ffffffff800053d0:	fc                   	cld    
ffffffff800053d1:	50                   	push   %rax
ffffffff800053d2:	53                   	push   %rbx
ffffffff800053d3:	51                   	push   %rcx
ffffffff800053d4:	52                   	push   %rdx
ffffffff800053d5:	56                   	push   %rsi
ffffffff800053d6:	57                   	push   %rdi
ffffffff800053d7:	55                   	push   %rbp
ffffffff800053d8:	41 50                	push   %r8
ffffffff800053da:	41 51                	push   %r9
ffffffff800053dc:	41 52                	push   %r10
ffffffff800053de:	41 53                	push   %r11
ffffffff800053e0:	41 54                	push   %r12
ffffffff800053e2:	41 55                	push   %r13
ffffffff800053e4:	41 56                	push   %r14
ffffffff800053e6:	41 57                	push   %r15
ffffffff800053e8:	48 89 e7             	mov    %rsp,%rdi
ffffffff800053eb:	e8 90 eb ff ff       	call   ffffffff80003f80 <inthandler>
ffffffff800053f0:	41 5f                	pop    %r15
ffffffff800053f2:	41 5e                	pop    %r14
ffffffff800053f4:	41 5d                	pop    %r13
ffffffff800053f6:	41 5c                	pop    %r12
ffffffff800053f8:	41 5b                	pop    %r11
ffffffff800053fa:	41 5a                	pop    %r10
ffffffff800053fc:	41 59                	pop    %r9
ffffffff800053fe:	41 58                	pop    %r8
ffffffff80005400:	5d                   	pop    %rbp
ffffffff80005401:	5f                   	pop    %rdi
ffffffff80005402:	5e                   	pop    %rsi
ffffffff80005403:	5a                   	pop    %rdx
ffffffff80005404:	59                   	pop    %rcx
ffffffff80005405:	5b                   	pop    %rbx
ffffffff80005406:	58                   	pop    %rax
ffffffff80005407:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000540b:	48 cf                	iretq  

ffffffff8000540d <isr_stub_0>:
ffffffff8000540d:	6a 00                	push   $0x0
ffffffff8000540f:	6a 00                	push   $0x0
ffffffff80005411:	eb bd                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005413 <isr_stub_1>:
ffffffff80005413:	6a 00                	push   $0x0
ffffffff80005415:	6a 01                	push   $0x1
ffffffff80005417:	eb b7                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005419 <isr_stub_2>:
ffffffff80005419:	6a 00                	push   $0x0
ffffffff8000541b:	6a 02                	push   $0x2
ffffffff8000541d:	eb b1                	jmp    ffffffff800053d0 <wrapper>

ffffffff8000541f <isr_stub_3>:
ffffffff8000541f:	6a 00                	push   $0x0
ffffffff80005421:	6a 03                	push   $0x3
ffffffff80005423:	eb ab                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005425 <isr_stub_4>:
ffffffff80005425:	6a 00                	push   $0x0
ffffffff80005427:	6a 04                	push   $0x4
ffffffff80005429:	eb a5                	jmp    ffffffff800053d0 <wrapper>

ffffffff8000542b <isr_stub_5>:
ffffffff8000542b:	6a 00                	push   $0x0
ffffffff8000542d:	6a 05                	push   $0x5
ffffffff8000542f:	eb 9f                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005431 <isr_stub_6>:
ffffffff80005431:	6a 00                	push   $0x0
ffffffff80005433:	6a 06                	push   $0x6
ffffffff80005435:	eb 99                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005437 <isr_stub_7>:
ffffffff80005437:	6a 00                	push   $0x0
ffffffff80005439:	6a 07                	push   $0x7
ffffffff8000543b:	eb 93                	jmp    ffffffff800053d0 <wrapper>

ffffffff8000543d <isr_stub_8>:
ffffffff8000543d:	6a 08                	push   $0x8
ffffffff8000543f:	eb 8f                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005441 <isr_stub_9>:
ffffffff80005441:	6a 00                	push   $0x0
ffffffff80005443:	6a 09                	push   $0x9
ffffffff80005445:	eb 89                	jmp    ffffffff800053d0 <wrapper>

ffffffff80005447 <isr_stub_10>:
ffffffff80005447:	6a 0a                	push   $0xa
ffffffff80005449:	eb 85                	jmp    ffffffff800053d0 <wrapper>

ffffffff8000544b <isr_stub_11>:
ffffffff8000544b:	6a 0b                	push   $0xb
ffffffff8000544d:	eb 81                	jmp    ffffffff800053d0 <wrapper>

ffffffff8000544f <isr_stub_12>:
ffffffff8000544f:	6a 0c                	push   $0xc
ffffffff80005451:	e9 7a ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005456 <isr_stub_13>:
ffffffff80005456:	6a 0d                	push   $0xd
ffffffff80005458:	e9 73 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000545d <isr_stub_14>:
ffffffff8000545d:	6a 0e                	push   $0xe
ffffffff8000545f:	e9 6c ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005464 <isr_stub_15>:
ffffffff80005464:	6a 00                	push   $0x0
ffffffff80005466:	6a 0f                	push   $0xf
ffffffff80005468:	e9 63 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000546d <isr_stub_16>:
ffffffff8000546d:	6a 00                	push   $0x0
ffffffff8000546f:	6a 10                	push   $0x10
ffffffff80005471:	e9 5a ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005476 <isr_stub_17>:
ffffffff80005476:	6a 11                	push   $0x11
ffffffff80005478:	e9 53 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000547d <isr_stub_18>:
ffffffff8000547d:	6a 00                	push   $0x0
ffffffff8000547f:	6a 12                	push   $0x12
ffffffff80005481:	e9 4a ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005486 <isr_stub_19>:
ffffffff80005486:	6a 00                	push   $0x0
ffffffff80005488:	6a 13                	push   $0x13
ffffffff8000548a:	e9 41 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000548f <isr_stub_20>:
ffffffff8000548f:	6a 00                	push   $0x0
ffffffff80005491:	6a 14                	push   $0x14
ffffffff80005493:	e9 38 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005498 <isr_stub_21>:
ffffffff80005498:	6a 00                	push   $0x0
ffffffff8000549a:	6a 15                	push   $0x15
ffffffff8000549c:	e9 2f ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054a1 <isr_stub_22>:
ffffffff800054a1:	6a 00                	push   $0x0
ffffffff800054a3:	6a 16                	push   $0x16
ffffffff800054a5:	e9 26 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054aa <isr_stub_23>:
ffffffff800054aa:	6a 00                	push   $0x0
ffffffff800054ac:	6a 17                	push   $0x17
ffffffff800054ae:	e9 1d ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054b3 <isr_stub_24>:
ffffffff800054b3:	6a 00                	push   $0x0
ffffffff800054b5:	6a 18                	push   $0x18
ffffffff800054b7:	e9 14 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054bc <isr_stub_25>:
ffffffff800054bc:	6a 00                	push   $0x0
ffffffff800054be:	6a 19                	push   $0x19
ffffffff800054c0:	e9 0b ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054c5 <isr_stub_26>:
ffffffff800054c5:	6a 00                	push   $0x0
ffffffff800054c7:	6a 1a                	push   $0x1a
ffffffff800054c9:	e9 02 ff ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054ce <isr_stub_27>:
ffffffff800054ce:	6a 00                	push   $0x0
ffffffff800054d0:	6a 1b                	push   $0x1b
ffffffff800054d2:	e9 f9 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054d7 <isr_stub_28>:
ffffffff800054d7:	6a 00                	push   $0x0
ffffffff800054d9:	6a 1c                	push   $0x1c
ffffffff800054db:	e9 f0 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054e0 <isr_stub_29>:
ffffffff800054e0:	6a 00                	push   $0x0
ffffffff800054e2:	6a 1d                	push   $0x1d
ffffffff800054e4:	e9 e7 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054e9 <isr_stub_30>:
ffffffff800054e9:	6a 1e                	push   $0x1e
ffffffff800054eb:	e9 e0 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054f0 <isr_stub_31>:
ffffffff800054f0:	6a 00                	push   $0x0
ffffffff800054f2:	6a 1f                	push   $0x1f
ffffffff800054f4:	e9 d7 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800054f9 <isr_stub_32>:
ffffffff800054f9:	6a 00                	push   $0x0
ffffffff800054fb:	6a 20                	push   $0x20
ffffffff800054fd:	e9 ce fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005502 <isr_stub_33>:
ffffffff80005502:	6a 00                	push   $0x0
ffffffff80005504:	6a 21                	push   $0x21
ffffffff80005506:	e9 c5 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000550b <isr_stub_34>:
ffffffff8000550b:	6a 00                	push   $0x0
ffffffff8000550d:	6a 22                	push   $0x22
ffffffff8000550f:	e9 bc fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005514 <isr_stub_35>:
ffffffff80005514:	6a 00                	push   $0x0
ffffffff80005516:	6a 23                	push   $0x23
ffffffff80005518:	e9 b3 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000551d <isr_stub_36>:
ffffffff8000551d:	6a 00                	push   $0x0
ffffffff8000551f:	6a 24                	push   $0x24
ffffffff80005521:	e9 aa fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005526 <isr_stub_37>:
ffffffff80005526:	6a 00                	push   $0x0
ffffffff80005528:	6a 25                	push   $0x25
ffffffff8000552a:	e9 a1 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000552f <isr_stub_38>:
ffffffff8000552f:	6a 00                	push   $0x0
ffffffff80005531:	6a 26                	push   $0x26
ffffffff80005533:	e9 98 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005538 <isr_stub_39>:
ffffffff80005538:	6a 00                	push   $0x0
ffffffff8000553a:	6a 27                	push   $0x27
ffffffff8000553c:	e9 8f fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005541 <isr_stub_40>:
ffffffff80005541:	6a 00                	push   $0x0
ffffffff80005543:	6a 28                	push   $0x28
ffffffff80005545:	e9 86 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000554a <isr_stub_41>:
ffffffff8000554a:	6a 00                	push   $0x0
ffffffff8000554c:	6a 29                	push   $0x29
ffffffff8000554e:	e9 7d fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005553 <isr_stub_42>:
ffffffff80005553:	6a 00                	push   $0x0
ffffffff80005555:	6a 2a                	push   $0x2a
ffffffff80005557:	e9 74 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000555c <isr_stub_43>:
ffffffff8000555c:	6a 00                	push   $0x0
ffffffff8000555e:	6a 2b                	push   $0x2b
ffffffff80005560:	e9 6b fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005565 <isr_stub_44>:
ffffffff80005565:	6a 00                	push   $0x0
ffffffff80005567:	6a 2c                	push   $0x2c
ffffffff80005569:	e9 62 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000556e <isr_stub_45>:
ffffffff8000556e:	6a 00                	push   $0x0
ffffffff80005570:	6a 2d                	push   $0x2d
ffffffff80005572:	e9 59 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005577 <isr_stub_46>:
ffffffff80005577:	6a 00                	push   $0x0
ffffffff80005579:	6a 2e                	push   $0x2e
ffffffff8000557b:	e9 50 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005580 <isr_stub_47>:
ffffffff80005580:	6a 00                	push   $0x0
ffffffff80005582:	6a 2f                	push   $0x2f
ffffffff80005584:	e9 47 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005589 <isr_stub_48>:
ffffffff80005589:	6a 00                	push   $0x0
ffffffff8000558b:	6a 30                	push   $0x30
ffffffff8000558d:	e9 3e fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005592 <isr_stub_49>:
ffffffff80005592:	6a 00                	push   $0x0
ffffffff80005594:	6a 31                	push   $0x31
ffffffff80005596:	e9 35 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000559b <isr_stub_50>:
ffffffff8000559b:	6a 00                	push   $0x0
ffffffff8000559d:	6a 32                	push   $0x32
ffffffff8000559f:	e9 2c fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055a4 <isr_stub_51>:
ffffffff800055a4:	6a 00                	push   $0x0
ffffffff800055a6:	6a 33                	push   $0x33
ffffffff800055a8:	e9 23 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055ad <isr_stub_52>:
ffffffff800055ad:	6a 00                	push   $0x0
ffffffff800055af:	6a 34                	push   $0x34
ffffffff800055b1:	e9 1a fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055b6 <isr_stub_53>:
ffffffff800055b6:	6a 00                	push   $0x0
ffffffff800055b8:	6a 35                	push   $0x35
ffffffff800055ba:	e9 11 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055bf <isr_stub_54>:
ffffffff800055bf:	6a 00                	push   $0x0
ffffffff800055c1:	6a 36                	push   $0x36
ffffffff800055c3:	e9 08 fe ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055c8 <isr_stub_55>:
ffffffff800055c8:	6a 00                	push   $0x0
ffffffff800055ca:	6a 37                	push   $0x37
ffffffff800055cc:	e9 ff fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055d1 <isr_stub_56>:
ffffffff800055d1:	6a 00                	push   $0x0
ffffffff800055d3:	6a 38                	push   $0x38
ffffffff800055d5:	e9 f6 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055da <isr_stub_57>:
ffffffff800055da:	6a 00                	push   $0x0
ffffffff800055dc:	6a 39                	push   $0x39
ffffffff800055de:	e9 ed fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055e3 <isr_stub_58>:
ffffffff800055e3:	6a 00                	push   $0x0
ffffffff800055e5:	6a 3a                	push   $0x3a
ffffffff800055e7:	e9 e4 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055ec <isr_stub_59>:
ffffffff800055ec:	6a 00                	push   $0x0
ffffffff800055ee:	6a 3b                	push   $0x3b
ffffffff800055f0:	e9 db fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055f5 <isr_stub_60>:
ffffffff800055f5:	6a 00                	push   $0x0
ffffffff800055f7:	6a 3c                	push   $0x3c
ffffffff800055f9:	e9 d2 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800055fe <isr_stub_61>:
ffffffff800055fe:	6a 00                	push   $0x0
ffffffff80005600:	6a 3d                	push   $0x3d
ffffffff80005602:	e9 c9 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005607 <isr_stub_62>:
ffffffff80005607:	6a 00                	push   $0x0
ffffffff80005609:	6a 3e                	push   $0x3e
ffffffff8000560b:	e9 c0 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005610 <isr_stub_63>:
ffffffff80005610:	6a 00                	push   $0x0
ffffffff80005612:	6a 3f                	push   $0x3f
ffffffff80005614:	e9 b7 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005619 <isr_stub_64>:
ffffffff80005619:	6a 00                	push   $0x0
ffffffff8000561b:	6a 40                	push   $0x40
ffffffff8000561d:	e9 ae fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005622 <isr_stub_65>:
ffffffff80005622:	6a 00                	push   $0x0
ffffffff80005624:	6a 41                	push   $0x41
ffffffff80005626:	e9 a5 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000562b <isr_stub_66>:
ffffffff8000562b:	6a 00                	push   $0x0
ffffffff8000562d:	6a 42                	push   $0x42
ffffffff8000562f:	e9 9c fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005634 <isr_stub_67>:
ffffffff80005634:	6a 00                	push   $0x0
ffffffff80005636:	6a 43                	push   $0x43
ffffffff80005638:	e9 93 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000563d <isr_stub_68>:
ffffffff8000563d:	6a 00                	push   $0x0
ffffffff8000563f:	6a 44                	push   $0x44
ffffffff80005641:	e9 8a fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005646 <isr_stub_69>:
ffffffff80005646:	6a 00                	push   $0x0
ffffffff80005648:	6a 45                	push   $0x45
ffffffff8000564a:	e9 81 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000564f <isr_stub_70>:
ffffffff8000564f:	6a 00                	push   $0x0
ffffffff80005651:	6a 46                	push   $0x46
ffffffff80005653:	e9 78 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005658 <isr_stub_71>:
ffffffff80005658:	6a 00                	push   $0x0
ffffffff8000565a:	6a 47                	push   $0x47
ffffffff8000565c:	e9 6f fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005661 <isr_stub_72>:
ffffffff80005661:	6a 00                	push   $0x0
ffffffff80005663:	6a 48                	push   $0x48
ffffffff80005665:	e9 66 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000566a <isr_stub_73>:
ffffffff8000566a:	6a 00                	push   $0x0
ffffffff8000566c:	6a 49                	push   $0x49
ffffffff8000566e:	e9 5d fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005673 <isr_stub_74>:
ffffffff80005673:	6a 00                	push   $0x0
ffffffff80005675:	6a 4a                	push   $0x4a
ffffffff80005677:	e9 54 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000567c <isr_stub_75>:
ffffffff8000567c:	6a 00                	push   $0x0
ffffffff8000567e:	6a 4b                	push   $0x4b
ffffffff80005680:	e9 4b fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005685 <isr_stub_76>:
ffffffff80005685:	6a 00                	push   $0x0
ffffffff80005687:	6a 4c                	push   $0x4c
ffffffff80005689:	e9 42 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000568e <isr_stub_77>:
ffffffff8000568e:	6a 00                	push   $0x0
ffffffff80005690:	6a 4d                	push   $0x4d
ffffffff80005692:	e9 39 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005697 <isr_stub_78>:
ffffffff80005697:	6a 00                	push   $0x0
ffffffff80005699:	6a 4e                	push   $0x4e
ffffffff8000569b:	e9 30 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056a0 <isr_stub_79>:
ffffffff800056a0:	6a 00                	push   $0x0
ffffffff800056a2:	6a 4f                	push   $0x4f
ffffffff800056a4:	e9 27 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056a9 <isr_stub_80>:
ffffffff800056a9:	6a 00                	push   $0x0
ffffffff800056ab:	6a 50                	push   $0x50
ffffffff800056ad:	e9 1e fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056b2 <isr_stub_81>:
ffffffff800056b2:	6a 00                	push   $0x0
ffffffff800056b4:	6a 51                	push   $0x51
ffffffff800056b6:	e9 15 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056bb <isr_stub_82>:
ffffffff800056bb:	6a 00                	push   $0x0
ffffffff800056bd:	6a 52                	push   $0x52
ffffffff800056bf:	e9 0c fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056c4 <isr_stub_83>:
ffffffff800056c4:	6a 00                	push   $0x0
ffffffff800056c6:	6a 53                	push   $0x53
ffffffff800056c8:	e9 03 fd ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056cd <isr_stub_84>:
ffffffff800056cd:	6a 00                	push   $0x0
ffffffff800056cf:	6a 54                	push   $0x54
ffffffff800056d1:	e9 fa fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056d6 <isr_stub_85>:
ffffffff800056d6:	6a 00                	push   $0x0
ffffffff800056d8:	6a 55                	push   $0x55
ffffffff800056da:	e9 f1 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056df <isr_stub_86>:
ffffffff800056df:	6a 00                	push   $0x0
ffffffff800056e1:	6a 56                	push   $0x56
ffffffff800056e3:	e9 e8 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056e8 <isr_stub_87>:
ffffffff800056e8:	6a 00                	push   $0x0
ffffffff800056ea:	6a 57                	push   $0x57
ffffffff800056ec:	e9 df fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056f1 <isr_stub_88>:
ffffffff800056f1:	6a 00                	push   $0x0
ffffffff800056f3:	6a 58                	push   $0x58
ffffffff800056f5:	e9 d6 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800056fa <isr_stub_89>:
ffffffff800056fa:	6a 00                	push   $0x0
ffffffff800056fc:	6a 59                	push   $0x59
ffffffff800056fe:	e9 cd fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005703 <isr_stub_90>:
ffffffff80005703:	6a 00                	push   $0x0
ffffffff80005705:	6a 5a                	push   $0x5a
ffffffff80005707:	e9 c4 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000570c <isr_stub_91>:
ffffffff8000570c:	6a 00                	push   $0x0
ffffffff8000570e:	6a 5b                	push   $0x5b
ffffffff80005710:	e9 bb fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005715 <isr_stub_92>:
ffffffff80005715:	6a 00                	push   $0x0
ffffffff80005717:	6a 5c                	push   $0x5c
ffffffff80005719:	e9 b2 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000571e <isr_stub_93>:
ffffffff8000571e:	6a 00                	push   $0x0
ffffffff80005720:	6a 5d                	push   $0x5d
ffffffff80005722:	e9 a9 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005727 <isr_stub_94>:
ffffffff80005727:	6a 00                	push   $0x0
ffffffff80005729:	6a 5e                	push   $0x5e
ffffffff8000572b:	e9 a0 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005730 <isr_stub_95>:
ffffffff80005730:	6a 00                	push   $0x0
ffffffff80005732:	6a 5f                	push   $0x5f
ffffffff80005734:	e9 97 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005739 <isr_stub_96>:
ffffffff80005739:	6a 00                	push   $0x0
ffffffff8000573b:	6a 60                	push   $0x60
ffffffff8000573d:	e9 8e fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005742 <isr_stub_97>:
ffffffff80005742:	6a 00                	push   $0x0
ffffffff80005744:	6a 61                	push   $0x61
ffffffff80005746:	e9 85 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000574b <isr_stub_98>:
ffffffff8000574b:	6a 00                	push   $0x0
ffffffff8000574d:	6a 62                	push   $0x62
ffffffff8000574f:	e9 7c fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005754 <isr_stub_99>:
ffffffff80005754:	6a 00                	push   $0x0
ffffffff80005756:	6a 63                	push   $0x63
ffffffff80005758:	e9 73 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000575d <isr_stub_100>:
ffffffff8000575d:	6a 00                	push   $0x0
ffffffff8000575f:	6a 64                	push   $0x64
ffffffff80005761:	e9 6a fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005766 <isr_stub_101>:
ffffffff80005766:	6a 00                	push   $0x0
ffffffff80005768:	6a 65                	push   $0x65
ffffffff8000576a:	e9 61 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000576f <isr_stub_102>:
ffffffff8000576f:	6a 00                	push   $0x0
ffffffff80005771:	6a 66                	push   $0x66
ffffffff80005773:	e9 58 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005778 <isr_stub_103>:
ffffffff80005778:	6a 00                	push   $0x0
ffffffff8000577a:	6a 67                	push   $0x67
ffffffff8000577c:	e9 4f fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005781 <isr_stub_104>:
ffffffff80005781:	6a 00                	push   $0x0
ffffffff80005783:	6a 68                	push   $0x68
ffffffff80005785:	e9 46 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000578a <isr_stub_105>:
ffffffff8000578a:	6a 00                	push   $0x0
ffffffff8000578c:	6a 69                	push   $0x69
ffffffff8000578e:	e9 3d fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005793 <isr_stub_106>:
ffffffff80005793:	6a 00                	push   $0x0
ffffffff80005795:	6a 6a                	push   $0x6a
ffffffff80005797:	e9 34 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000579c <isr_stub_107>:
ffffffff8000579c:	6a 00                	push   $0x0
ffffffff8000579e:	6a 6b                	push   $0x6b
ffffffff800057a0:	e9 2b fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057a5 <isr_stub_108>:
ffffffff800057a5:	6a 00                	push   $0x0
ffffffff800057a7:	6a 6c                	push   $0x6c
ffffffff800057a9:	e9 22 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057ae <isr_stub_109>:
ffffffff800057ae:	6a 00                	push   $0x0
ffffffff800057b0:	6a 6d                	push   $0x6d
ffffffff800057b2:	e9 19 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057b7 <isr_stub_110>:
ffffffff800057b7:	6a 00                	push   $0x0
ffffffff800057b9:	6a 6e                	push   $0x6e
ffffffff800057bb:	e9 10 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057c0 <isr_stub_111>:
ffffffff800057c0:	6a 00                	push   $0x0
ffffffff800057c2:	6a 6f                	push   $0x6f
ffffffff800057c4:	e9 07 fc ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057c9 <isr_stub_112>:
ffffffff800057c9:	6a 00                	push   $0x0
ffffffff800057cb:	6a 70                	push   $0x70
ffffffff800057cd:	e9 fe fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057d2 <isr_stub_113>:
ffffffff800057d2:	6a 00                	push   $0x0
ffffffff800057d4:	6a 71                	push   $0x71
ffffffff800057d6:	e9 f5 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057db <isr_stub_114>:
ffffffff800057db:	6a 00                	push   $0x0
ffffffff800057dd:	6a 72                	push   $0x72
ffffffff800057df:	e9 ec fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057e4 <isr_stub_115>:
ffffffff800057e4:	6a 00                	push   $0x0
ffffffff800057e6:	6a 73                	push   $0x73
ffffffff800057e8:	e9 e3 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057ed <isr_stub_116>:
ffffffff800057ed:	6a 00                	push   $0x0
ffffffff800057ef:	6a 74                	push   $0x74
ffffffff800057f1:	e9 da fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057f6 <isr_stub_117>:
ffffffff800057f6:	6a 00                	push   $0x0
ffffffff800057f8:	6a 75                	push   $0x75
ffffffff800057fa:	e9 d1 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800057ff <isr_stub_118>:
ffffffff800057ff:	6a 00                	push   $0x0
ffffffff80005801:	6a 76                	push   $0x76
ffffffff80005803:	e9 c8 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005808 <isr_stub_119>:
ffffffff80005808:	6a 00                	push   $0x0
ffffffff8000580a:	6a 77                	push   $0x77
ffffffff8000580c:	e9 bf fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005811 <isr_stub_120>:
ffffffff80005811:	6a 00                	push   $0x0
ffffffff80005813:	6a 78                	push   $0x78
ffffffff80005815:	e9 b6 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000581a <isr_stub_121>:
ffffffff8000581a:	6a 00                	push   $0x0
ffffffff8000581c:	6a 79                	push   $0x79
ffffffff8000581e:	e9 ad fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005823 <isr_stub_122>:
ffffffff80005823:	6a 00                	push   $0x0
ffffffff80005825:	6a 7a                	push   $0x7a
ffffffff80005827:	e9 a4 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000582c <isr_stub_123>:
ffffffff8000582c:	6a 00                	push   $0x0
ffffffff8000582e:	6a 7b                	push   $0x7b
ffffffff80005830:	e9 9b fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005835 <isr_stub_124>:
ffffffff80005835:	6a 00                	push   $0x0
ffffffff80005837:	6a 7c                	push   $0x7c
ffffffff80005839:	e9 92 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000583e <isr_stub_125>:
ffffffff8000583e:	6a 00                	push   $0x0
ffffffff80005840:	6a 7d                	push   $0x7d
ffffffff80005842:	e9 89 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005847 <isr_stub_126>:
ffffffff80005847:	6a 00                	push   $0x0
ffffffff80005849:	6a 7e                	push   $0x7e
ffffffff8000584b:	e9 80 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005850 <isr_stub_127>:
ffffffff80005850:	6a 00                	push   $0x0
ffffffff80005852:	6a 7f                	push   $0x7f
ffffffff80005854:	e9 77 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005859 <isr_stub_128>:
ffffffff80005859:	6a 00                	push   $0x0
ffffffff8000585b:	68 80 00 00 00       	push   $0x80
ffffffff80005860:	e9 6b fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005865 <isr_stub_129>:
ffffffff80005865:	6a 00                	push   $0x0
ffffffff80005867:	68 81 00 00 00       	push   $0x81
ffffffff8000586c:	e9 5f fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005871 <isr_stub_130>:
ffffffff80005871:	6a 00                	push   $0x0
ffffffff80005873:	68 82 00 00 00       	push   $0x82
ffffffff80005878:	e9 53 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000587d <isr_stub_131>:
ffffffff8000587d:	6a 00                	push   $0x0
ffffffff8000587f:	68 83 00 00 00       	push   $0x83
ffffffff80005884:	e9 47 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005889 <isr_stub_132>:
ffffffff80005889:	6a 00                	push   $0x0
ffffffff8000588b:	68 84 00 00 00       	push   $0x84
ffffffff80005890:	e9 3b fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005895 <isr_stub_133>:
ffffffff80005895:	6a 00                	push   $0x0
ffffffff80005897:	68 85 00 00 00       	push   $0x85
ffffffff8000589c:	e9 2f fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058a1 <isr_stub_134>:
ffffffff800058a1:	6a 00                	push   $0x0
ffffffff800058a3:	68 86 00 00 00       	push   $0x86
ffffffff800058a8:	e9 23 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058ad <isr_stub_135>:
ffffffff800058ad:	6a 00                	push   $0x0
ffffffff800058af:	68 87 00 00 00       	push   $0x87
ffffffff800058b4:	e9 17 fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058b9 <isr_stub_136>:
ffffffff800058b9:	6a 00                	push   $0x0
ffffffff800058bb:	68 88 00 00 00       	push   $0x88
ffffffff800058c0:	e9 0b fb ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058c5 <isr_stub_137>:
ffffffff800058c5:	6a 00                	push   $0x0
ffffffff800058c7:	68 89 00 00 00       	push   $0x89
ffffffff800058cc:	e9 ff fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058d1 <isr_stub_138>:
ffffffff800058d1:	6a 00                	push   $0x0
ffffffff800058d3:	68 8a 00 00 00       	push   $0x8a
ffffffff800058d8:	e9 f3 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058dd <isr_stub_139>:
ffffffff800058dd:	6a 00                	push   $0x0
ffffffff800058df:	68 8b 00 00 00       	push   $0x8b
ffffffff800058e4:	e9 e7 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058e9 <isr_stub_140>:
ffffffff800058e9:	6a 00                	push   $0x0
ffffffff800058eb:	68 8c 00 00 00       	push   $0x8c
ffffffff800058f0:	e9 db fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800058f5 <isr_stub_141>:
ffffffff800058f5:	6a 00                	push   $0x0
ffffffff800058f7:	68 8d 00 00 00       	push   $0x8d
ffffffff800058fc:	e9 cf fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005901 <isr_stub_142>:
ffffffff80005901:	6a 00                	push   $0x0
ffffffff80005903:	68 8e 00 00 00       	push   $0x8e
ffffffff80005908:	e9 c3 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000590d <isr_stub_143>:
ffffffff8000590d:	6a 00                	push   $0x0
ffffffff8000590f:	68 8f 00 00 00       	push   $0x8f
ffffffff80005914:	e9 b7 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005919 <isr_stub_144>:
ffffffff80005919:	6a 00                	push   $0x0
ffffffff8000591b:	68 90 00 00 00       	push   $0x90
ffffffff80005920:	e9 ab fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005925 <isr_stub_145>:
ffffffff80005925:	6a 00                	push   $0x0
ffffffff80005927:	68 91 00 00 00       	push   $0x91
ffffffff8000592c:	e9 9f fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005931 <isr_stub_146>:
ffffffff80005931:	6a 00                	push   $0x0
ffffffff80005933:	68 92 00 00 00       	push   $0x92
ffffffff80005938:	e9 93 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000593d <isr_stub_147>:
ffffffff8000593d:	6a 00                	push   $0x0
ffffffff8000593f:	68 93 00 00 00       	push   $0x93
ffffffff80005944:	e9 87 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005949 <isr_stub_148>:
ffffffff80005949:	6a 00                	push   $0x0
ffffffff8000594b:	68 94 00 00 00       	push   $0x94
ffffffff80005950:	e9 7b fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005955 <isr_stub_149>:
ffffffff80005955:	6a 00                	push   $0x0
ffffffff80005957:	68 95 00 00 00       	push   $0x95
ffffffff8000595c:	e9 6f fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005961 <isr_stub_150>:
ffffffff80005961:	6a 00                	push   $0x0
ffffffff80005963:	68 96 00 00 00       	push   $0x96
ffffffff80005968:	e9 63 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000596d <isr_stub_151>:
ffffffff8000596d:	6a 00                	push   $0x0
ffffffff8000596f:	68 97 00 00 00       	push   $0x97
ffffffff80005974:	e9 57 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005979 <isr_stub_152>:
ffffffff80005979:	6a 00                	push   $0x0
ffffffff8000597b:	68 98 00 00 00       	push   $0x98
ffffffff80005980:	e9 4b fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005985 <isr_stub_153>:
ffffffff80005985:	6a 00                	push   $0x0
ffffffff80005987:	68 99 00 00 00       	push   $0x99
ffffffff8000598c:	e9 3f fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005991 <isr_stub_154>:
ffffffff80005991:	6a 00                	push   $0x0
ffffffff80005993:	68 9a 00 00 00       	push   $0x9a
ffffffff80005998:	e9 33 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff8000599d <isr_stub_155>:
ffffffff8000599d:	6a 00                	push   $0x0
ffffffff8000599f:	68 9b 00 00 00       	push   $0x9b
ffffffff800059a4:	e9 27 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059a9 <isr_stub_156>:
ffffffff800059a9:	6a 00                	push   $0x0
ffffffff800059ab:	68 9c 00 00 00       	push   $0x9c
ffffffff800059b0:	e9 1b fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059b5 <isr_stub_157>:
ffffffff800059b5:	6a 00                	push   $0x0
ffffffff800059b7:	68 9d 00 00 00       	push   $0x9d
ffffffff800059bc:	e9 0f fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059c1 <isr_stub_158>:
ffffffff800059c1:	6a 00                	push   $0x0
ffffffff800059c3:	68 9e 00 00 00       	push   $0x9e
ffffffff800059c8:	e9 03 fa ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059cd <isr_stub_159>:
ffffffff800059cd:	6a 00                	push   $0x0
ffffffff800059cf:	68 9f 00 00 00       	push   $0x9f
ffffffff800059d4:	e9 f7 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059d9 <isr_stub_160>:
ffffffff800059d9:	6a 00                	push   $0x0
ffffffff800059db:	68 a0 00 00 00       	push   $0xa0
ffffffff800059e0:	e9 eb f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059e5 <isr_stub_161>:
ffffffff800059e5:	6a 00                	push   $0x0
ffffffff800059e7:	68 a1 00 00 00       	push   $0xa1
ffffffff800059ec:	e9 df f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059f1 <isr_stub_162>:
ffffffff800059f1:	6a 00                	push   $0x0
ffffffff800059f3:	68 a2 00 00 00       	push   $0xa2
ffffffff800059f8:	e9 d3 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff800059fd <isr_stub_163>:
ffffffff800059fd:	6a 00                	push   $0x0
ffffffff800059ff:	68 a3 00 00 00       	push   $0xa3
ffffffff80005a04:	e9 c7 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a09 <isr_stub_164>:
ffffffff80005a09:	6a 00                	push   $0x0
ffffffff80005a0b:	68 a4 00 00 00       	push   $0xa4
ffffffff80005a10:	e9 bb f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a15 <isr_stub_165>:
ffffffff80005a15:	6a 00                	push   $0x0
ffffffff80005a17:	68 a5 00 00 00       	push   $0xa5
ffffffff80005a1c:	e9 af f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a21 <isr_stub_166>:
ffffffff80005a21:	6a 00                	push   $0x0
ffffffff80005a23:	68 a6 00 00 00       	push   $0xa6
ffffffff80005a28:	e9 a3 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a2d <isr_stub_167>:
ffffffff80005a2d:	6a 00                	push   $0x0
ffffffff80005a2f:	68 a7 00 00 00       	push   $0xa7
ffffffff80005a34:	e9 97 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a39 <isr_stub_168>:
ffffffff80005a39:	6a 00                	push   $0x0
ffffffff80005a3b:	68 a8 00 00 00       	push   $0xa8
ffffffff80005a40:	e9 8b f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a45 <isr_stub_169>:
ffffffff80005a45:	6a 00                	push   $0x0
ffffffff80005a47:	68 a9 00 00 00       	push   $0xa9
ffffffff80005a4c:	e9 7f f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a51 <isr_stub_170>:
ffffffff80005a51:	6a 00                	push   $0x0
ffffffff80005a53:	68 aa 00 00 00       	push   $0xaa
ffffffff80005a58:	e9 73 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a5d <isr_stub_171>:
ffffffff80005a5d:	6a 00                	push   $0x0
ffffffff80005a5f:	68 ab 00 00 00       	push   $0xab
ffffffff80005a64:	e9 67 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a69 <isr_stub_172>:
ffffffff80005a69:	6a 00                	push   $0x0
ffffffff80005a6b:	68 ac 00 00 00       	push   $0xac
ffffffff80005a70:	e9 5b f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a75 <isr_stub_173>:
ffffffff80005a75:	6a 00                	push   $0x0
ffffffff80005a77:	68 ad 00 00 00       	push   $0xad
ffffffff80005a7c:	e9 4f f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a81 <isr_stub_174>:
ffffffff80005a81:	6a 00                	push   $0x0
ffffffff80005a83:	68 ae 00 00 00       	push   $0xae
ffffffff80005a88:	e9 43 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a8d <isr_stub_175>:
ffffffff80005a8d:	6a 00                	push   $0x0
ffffffff80005a8f:	68 af 00 00 00       	push   $0xaf
ffffffff80005a94:	e9 37 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005a99 <isr_stub_176>:
ffffffff80005a99:	6a 00                	push   $0x0
ffffffff80005a9b:	68 b0 00 00 00       	push   $0xb0
ffffffff80005aa0:	e9 2b f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005aa5 <isr_stub_177>:
ffffffff80005aa5:	6a 00                	push   $0x0
ffffffff80005aa7:	68 b1 00 00 00       	push   $0xb1
ffffffff80005aac:	e9 1f f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ab1 <isr_stub_178>:
ffffffff80005ab1:	6a 00                	push   $0x0
ffffffff80005ab3:	68 b2 00 00 00       	push   $0xb2
ffffffff80005ab8:	e9 13 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005abd <isr_stub_179>:
ffffffff80005abd:	6a 00                	push   $0x0
ffffffff80005abf:	68 b3 00 00 00       	push   $0xb3
ffffffff80005ac4:	e9 07 f9 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ac9 <isr_stub_180>:
ffffffff80005ac9:	6a 00                	push   $0x0
ffffffff80005acb:	68 b4 00 00 00       	push   $0xb4
ffffffff80005ad0:	e9 fb f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ad5 <isr_stub_181>:
ffffffff80005ad5:	6a 00                	push   $0x0
ffffffff80005ad7:	68 b5 00 00 00       	push   $0xb5
ffffffff80005adc:	e9 ef f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ae1 <isr_stub_182>:
ffffffff80005ae1:	6a 00                	push   $0x0
ffffffff80005ae3:	68 b6 00 00 00       	push   $0xb6
ffffffff80005ae8:	e9 e3 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005aed <isr_stub_183>:
ffffffff80005aed:	6a 00                	push   $0x0
ffffffff80005aef:	68 b7 00 00 00       	push   $0xb7
ffffffff80005af4:	e9 d7 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005af9 <isr_stub_184>:
ffffffff80005af9:	6a 00                	push   $0x0
ffffffff80005afb:	68 b8 00 00 00       	push   $0xb8
ffffffff80005b00:	e9 cb f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b05 <isr_stub_185>:
ffffffff80005b05:	6a 00                	push   $0x0
ffffffff80005b07:	68 b9 00 00 00       	push   $0xb9
ffffffff80005b0c:	e9 bf f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b11 <isr_stub_186>:
ffffffff80005b11:	6a 00                	push   $0x0
ffffffff80005b13:	68 ba 00 00 00       	push   $0xba
ffffffff80005b18:	e9 b3 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b1d <isr_stub_187>:
ffffffff80005b1d:	6a 00                	push   $0x0
ffffffff80005b1f:	68 bb 00 00 00       	push   $0xbb
ffffffff80005b24:	e9 a7 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b29 <isr_stub_188>:
ffffffff80005b29:	6a 00                	push   $0x0
ffffffff80005b2b:	68 bc 00 00 00       	push   $0xbc
ffffffff80005b30:	e9 9b f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b35 <isr_stub_189>:
ffffffff80005b35:	6a 00                	push   $0x0
ffffffff80005b37:	68 bd 00 00 00       	push   $0xbd
ffffffff80005b3c:	e9 8f f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b41 <isr_stub_190>:
ffffffff80005b41:	6a 00                	push   $0x0
ffffffff80005b43:	68 be 00 00 00       	push   $0xbe
ffffffff80005b48:	e9 83 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b4d <isr_stub_191>:
ffffffff80005b4d:	6a 00                	push   $0x0
ffffffff80005b4f:	68 bf 00 00 00       	push   $0xbf
ffffffff80005b54:	e9 77 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b59 <isr_stub_192>:
ffffffff80005b59:	6a 00                	push   $0x0
ffffffff80005b5b:	68 c0 00 00 00       	push   $0xc0
ffffffff80005b60:	e9 6b f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b65 <isr_stub_193>:
ffffffff80005b65:	6a 00                	push   $0x0
ffffffff80005b67:	68 c1 00 00 00       	push   $0xc1
ffffffff80005b6c:	e9 5f f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b71 <isr_stub_194>:
ffffffff80005b71:	6a 00                	push   $0x0
ffffffff80005b73:	68 c2 00 00 00       	push   $0xc2
ffffffff80005b78:	e9 53 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b7d <isr_stub_195>:
ffffffff80005b7d:	6a 00                	push   $0x0
ffffffff80005b7f:	68 c3 00 00 00       	push   $0xc3
ffffffff80005b84:	e9 47 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b89 <isr_stub_196>:
ffffffff80005b89:	6a 00                	push   $0x0
ffffffff80005b8b:	68 c4 00 00 00       	push   $0xc4
ffffffff80005b90:	e9 3b f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005b95 <isr_stub_197>:
ffffffff80005b95:	6a 00                	push   $0x0
ffffffff80005b97:	68 c5 00 00 00       	push   $0xc5
ffffffff80005b9c:	e9 2f f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ba1 <isr_stub_198>:
ffffffff80005ba1:	6a 00                	push   $0x0
ffffffff80005ba3:	68 c6 00 00 00       	push   $0xc6
ffffffff80005ba8:	e9 23 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005bad <isr_stub_199>:
ffffffff80005bad:	6a 00                	push   $0x0
ffffffff80005baf:	68 c7 00 00 00       	push   $0xc7
ffffffff80005bb4:	e9 17 f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005bb9 <isr_stub_200>:
ffffffff80005bb9:	6a 00                	push   $0x0
ffffffff80005bbb:	68 c8 00 00 00       	push   $0xc8
ffffffff80005bc0:	e9 0b f8 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005bc5 <isr_stub_201>:
ffffffff80005bc5:	6a 00                	push   $0x0
ffffffff80005bc7:	68 c9 00 00 00       	push   $0xc9
ffffffff80005bcc:	e9 ff f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005bd1 <isr_stub_202>:
ffffffff80005bd1:	6a 00                	push   $0x0
ffffffff80005bd3:	68 ca 00 00 00       	push   $0xca
ffffffff80005bd8:	e9 f3 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005bdd <isr_stub_203>:
ffffffff80005bdd:	6a 00                	push   $0x0
ffffffff80005bdf:	68 cb 00 00 00       	push   $0xcb
ffffffff80005be4:	e9 e7 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005be9 <isr_stub_204>:
ffffffff80005be9:	6a 00                	push   $0x0
ffffffff80005beb:	68 cc 00 00 00       	push   $0xcc
ffffffff80005bf0:	e9 db f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005bf5 <isr_stub_205>:
ffffffff80005bf5:	6a 00                	push   $0x0
ffffffff80005bf7:	68 cd 00 00 00       	push   $0xcd
ffffffff80005bfc:	e9 cf f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c01 <isr_stub_206>:
ffffffff80005c01:	6a 00                	push   $0x0
ffffffff80005c03:	68 ce 00 00 00       	push   $0xce
ffffffff80005c08:	e9 c3 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c0d <isr_stub_207>:
ffffffff80005c0d:	6a 00                	push   $0x0
ffffffff80005c0f:	68 cf 00 00 00       	push   $0xcf
ffffffff80005c14:	e9 b7 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c19 <isr_stub_208>:
ffffffff80005c19:	6a 00                	push   $0x0
ffffffff80005c1b:	68 d0 00 00 00       	push   $0xd0
ffffffff80005c20:	e9 ab f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c25 <isr_stub_209>:
ffffffff80005c25:	6a 00                	push   $0x0
ffffffff80005c27:	68 d1 00 00 00       	push   $0xd1
ffffffff80005c2c:	e9 9f f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c31 <isr_stub_210>:
ffffffff80005c31:	6a 00                	push   $0x0
ffffffff80005c33:	68 d2 00 00 00       	push   $0xd2
ffffffff80005c38:	e9 93 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c3d <isr_stub_211>:
ffffffff80005c3d:	6a 00                	push   $0x0
ffffffff80005c3f:	68 d3 00 00 00       	push   $0xd3
ffffffff80005c44:	e9 87 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c49 <isr_stub_212>:
ffffffff80005c49:	6a 00                	push   $0x0
ffffffff80005c4b:	68 d4 00 00 00       	push   $0xd4
ffffffff80005c50:	e9 7b f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c55 <isr_stub_213>:
ffffffff80005c55:	6a 00                	push   $0x0
ffffffff80005c57:	68 d5 00 00 00       	push   $0xd5
ffffffff80005c5c:	e9 6f f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c61 <isr_stub_214>:
ffffffff80005c61:	6a 00                	push   $0x0
ffffffff80005c63:	68 d6 00 00 00       	push   $0xd6
ffffffff80005c68:	e9 63 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c6d <isr_stub_215>:
ffffffff80005c6d:	6a 00                	push   $0x0
ffffffff80005c6f:	68 d7 00 00 00       	push   $0xd7
ffffffff80005c74:	e9 57 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c79 <isr_stub_216>:
ffffffff80005c79:	6a 00                	push   $0x0
ffffffff80005c7b:	68 d8 00 00 00       	push   $0xd8
ffffffff80005c80:	e9 4b f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c85 <isr_stub_217>:
ffffffff80005c85:	6a 00                	push   $0x0
ffffffff80005c87:	68 d9 00 00 00       	push   $0xd9
ffffffff80005c8c:	e9 3f f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c91 <isr_stub_218>:
ffffffff80005c91:	6a 00                	push   $0x0
ffffffff80005c93:	68 da 00 00 00       	push   $0xda
ffffffff80005c98:	e9 33 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005c9d <isr_stub_219>:
ffffffff80005c9d:	6a 00                	push   $0x0
ffffffff80005c9f:	68 db 00 00 00       	push   $0xdb
ffffffff80005ca4:	e9 27 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ca9 <isr_stub_220>:
ffffffff80005ca9:	6a 00                	push   $0x0
ffffffff80005cab:	68 dc 00 00 00       	push   $0xdc
ffffffff80005cb0:	e9 1b f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005cb5 <isr_stub_221>:
ffffffff80005cb5:	6a 00                	push   $0x0
ffffffff80005cb7:	68 dd 00 00 00       	push   $0xdd
ffffffff80005cbc:	e9 0f f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005cc1 <isr_stub_222>:
ffffffff80005cc1:	6a 00                	push   $0x0
ffffffff80005cc3:	68 de 00 00 00       	push   $0xde
ffffffff80005cc8:	e9 03 f7 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ccd <isr_stub_223>:
ffffffff80005ccd:	6a 00                	push   $0x0
ffffffff80005ccf:	68 df 00 00 00       	push   $0xdf
ffffffff80005cd4:	e9 f7 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005cd9 <isr_stub_224>:
ffffffff80005cd9:	6a 00                	push   $0x0
ffffffff80005cdb:	68 e0 00 00 00       	push   $0xe0
ffffffff80005ce0:	e9 eb f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ce5 <isr_stub_225>:
ffffffff80005ce5:	6a 00                	push   $0x0
ffffffff80005ce7:	68 e1 00 00 00       	push   $0xe1
ffffffff80005cec:	e9 df f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005cf1 <isr_stub_226>:
ffffffff80005cf1:	6a 00                	push   $0x0
ffffffff80005cf3:	68 e2 00 00 00       	push   $0xe2
ffffffff80005cf8:	e9 d3 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005cfd <isr_stub_227>:
ffffffff80005cfd:	6a 00                	push   $0x0
ffffffff80005cff:	68 e3 00 00 00       	push   $0xe3
ffffffff80005d04:	e9 c7 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d09 <isr_stub_228>:
ffffffff80005d09:	6a 00                	push   $0x0
ffffffff80005d0b:	68 e4 00 00 00       	push   $0xe4
ffffffff80005d10:	e9 bb f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d15 <isr_stub_229>:
ffffffff80005d15:	6a 00                	push   $0x0
ffffffff80005d17:	68 e5 00 00 00       	push   $0xe5
ffffffff80005d1c:	e9 af f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d21 <isr_stub_230>:
ffffffff80005d21:	6a 00                	push   $0x0
ffffffff80005d23:	68 e6 00 00 00       	push   $0xe6
ffffffff80005d28:	e9 a3 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d2d <isr_stub_231>:
ffffffff80005d2d:	6a 00                	push   $0x0
ffffffff80005d2f:	68 e7 00 00 00       	push   $0xe7
ffffffff80005d34:	e9 97 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d39 <isr_stub_232>:
ffffffff80005d39:	6a 00                	push   $0x0
ffffffff80005d3b:	68 e8 00 00 00       	push   $0xe8
ffffffff80005d40:	e9 8b f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d45 <isr_stub_233>:
ffffffff80005d45:	6a 00                	push   $0x0
ffffffff80005d47:	68 e9 00 00 00       	push   $0xe9
ffffffff80005d4c:	e9 7f f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d51 <isr_stub_234>:
ffffffff80005d51:	6a 00                	push   $0x0
ffffffff80005d53:	68 ea 00 00 00       	push   $0xea
ffffffff80005d58:	e9 73 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d5d <isr_stub_235>:
ffffffff80005d5d:	6a 00                	push   $0x0
ffffffff80005d5f:	68 eb 00 00 00       	push   $0xeb
ffffffff80005d64:	e9 67 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d69 <isr_stub_236>:
ffffffff80005d69:	6a 00                	push   $0x0
ffffffff80005d6b:	68 ec 00 00 00       	push   $0xec
ffffffff80005d70:	e9 5b f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d75 <isr_stub_237>:
ffffffff80005d75:	6a 00                	push   $0x0
ffffffff80005d77:	68 ed 00 00 00       	push   $0xed
ffffffff80005d7c:	e9 4f f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d81 <isr_stub_238>:
ffffffff80005d81:	6a 00                	push   $0x0
ffffffff80005d83:	68 ee 00 00 00       	push   $0xee
ffffffff80005d88:	e9 43 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d8d <isr_stub_239>:
ffffffff80005d8d:	6a 00                	push   $0x0
ffffffff80005d8f:	68 ef 00 00 00       	push   $0xef
ffffffff80005d94:	e9 37 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005d99 <isr_stub_240>:
ffffffff80005d99:	6a 00                	push   $0x0
ffffffff80005d9b:	68 f0 00 00 00       	push   $0xf0
ffffffff80005da0:	e9 2b f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005da5 <isr_stub_241>:
ffffffff80005da5:	6a 00                	push   $0x0
ffffffff80005da7:	68 f1 00 00 00       	push   $0xf1
ffffffff80005dac:	e9 1f f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005db1 <isr_stub_242>:
ffffffff80005db1:	6a 00                	push   $0x0
ffffffff80005db3:	68 f2 00 00 00       	push   $0xf2
ffffffff80005db8:	e9 13 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005dbd <isr_stub_243>:
ffffffff80005dbd:	6a 00                	push   $0x0
ffffffff80005dbf:	68 f3 00 00 00       	push   $0xf3
ffffffff80005dc4:	e9 07 f6 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005dc9 <isr_stub_244>:
ffffffff80005dc9:	6a 00                	push   $0x0
ffffffff80005dcb:	68 f4 00 00 00       	push   $0xf4
ffffffff80005dd0:	e9 fb f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005dd5 <isr_stub_245>:
ffffffff80005dd5:	6a 00                	push   $0x0
ffffffff80005dd7:	68 f5 00 00 00       	push   $0xf5
ffffffff80005ddc:	e9 ef f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005de1 <isr_stub_246>:
ffffffff80005de1:	6a 00                	push   $0x0
ffffffff80005de3:	68 f6 00 00 00       	push   $0xf6
ffffffff80005de8:	e9 e3 f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005ded <isr_stub_247>:
ffffffff80005ded:	6a 00                	push   $0x0
ffffffff80005def:	68 f7 00 00 00       	push   $0xf7
ffffffff80005df4:	e9 d7 f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005df9 <isr_stub_248>:
ffffffff80005df9:	6a 00                	push   $0x0
ffffffff80005dfb:	68 f8 00 00 00       	push   $0xf8
ffffffff80005e00:	e9 cb f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e05 <isr_stub_249>:
ffffffff80005e05:	6a 00                	push   $0x0
ffffffff80005e07:	68 f9 00 00 00       	push   $0xf9
ffffffff80005e0c:	e9 bf f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e11 <isr_stub_250>:
ffffffff80005e11:	6a 00                	push   $0x0
ffffffff80005e13:	68 fa 00 00 00       	push   $0xfa
ffffffff80005e18:	e9 b3 f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e1d <isr_stub_251>:
ffffffff80005e1d:	6a 00                	push   $0x0
ffffffff80005e1f:	68 fb 00 00 00       	push   $0xfb
ffffffff80005e24:	e9 a7 f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e29 <isr_stub_252>:
ffffffff80005e29:	6a 00                	push   $0x0
ffffffff80005e2b:	68 fc 00 00 00       	push   $0xfc
ffffffff80005e30:	e9 9b f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e35 <isr_stub_253>:
ffffffff80005e35:	6a 00                	push   $0x0
ffffffff80005e37:	68 fd 00 00 00       	push   $0xfd
ffffffff80005e3c:	e9 8f f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e41 <isr_stub_254>:
ffffffff80005e41:	6a 00                	push   $0x0
ffffffff80005e43:	68 fe 00 00 00       	push   $0xfe
ffffffff80005e48:	e9 83 f5 ff ff       	jmp    ffffffff800053d0 <wrapper>

ffffffff80005e4d <isr_stub_255>:
ffffffff80005e4d:	6a 00                	push   $0x0
ffffffff80005e4f:	68 ff 00 00 00       	push   $0xff
ffffffff80005e54:	e9 77 f5 ff ff       	jmp    ffffffff800053d0 <wrapper>
ffffffff80005e59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80005e60 <enable_pae>:
ffffffff80005e60:	0f 20 e0             	mov    %cr4,%rax
ffffffff80005e63:	48 0f ba e8 05       	bts    $0x5,%rax
ffffffff80005e68:	0f 22 e0             	mov    %rax,%cr4
ffffffff80005e6b:	c3                   	ret    

ffffffff80005e6c <enable_paging>:
ffffffff80005e6c:	0f 20 c0             	mov    %cr0,%rax
ffffffff80005e6f:	48 0d 00 00 00 80    	or     $0xffffffff80000000,%rax
ffffffff80005e75:	0f 22 c0             	mov    %rax,%cr0
ffffffff80005e78:	c3                   	ret    
