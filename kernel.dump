
kernel/bin/kernel:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <bump_alloc>:
#endif

static uint8_t bump_alloc_pool[FLANTERM_FB_BUMP_ALLOC_POOL_SIZE];
static size_t bump_alloc_ptr = 0;

static void *bump_alloc(size_t s) {
ffffffff80000000:	f3 0f 1e fa          	endbr64 
ffffffff80000004:	55                   	push   %rbp
ffffffff80000005:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000008:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000000c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    size_t next_ptr = bump_alloc_ptr + s;
ffffffff80000010:	48 8b 15 31 6d 0e 00 	mov    0xe6d31(%rip),%rdx        # ffffffff800e6d48 <bump_alloc_ptr>
ffffffff80000017:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000001b:	48 01 d0             	add    %rdx,%rax
ffffffff8000001e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (next_ptr > FLANTERM_FB_BUMP_ALLOC_POOL_SIZE) {
ffffffff80000022:	48 81 7d f8 28 52 0d 	cmpq   $0xd5228,-0x8(%rbp)
ffffffff80000029:	00 
ffffffff8000002a:	76 07                	jbe    ffffffff80000033 <bump_alloc+0x33>
        return NULL;
ffffffff8000002c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80000031:	eb 24                	jmp    ffffffff80000057 <bump_alloc+0x57>
    }
    void *ret = &bump_alloc_pool[bump_alloc_ptr];
ffffffff80000033:	48 8b 05 0e 6d 0e 00 	mov    0xe6d0e(%rip),%rax        # ffffffff800e6d48 <bump_alloc_ptr>
ffffffff8000003a:	48 8d 15 df 1a 01 00 	lea    0x11adf(%rip),%rdx        # ffffffff80011b20 <bump_alloc_pool>
ffffffff80000041:	48 01 d0             	add    %rdx,%rax
ffffffff80000044:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    bump_alloc_ptr = next_ptr;
ffffffff80000048:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000004c:	48 89 05 f5 6c 0e 00 	mov    %rax,0xe6cf5(%rip)        # ffffffff800e6d48 <bump_alloc_ptr>
    return ret;
ffffffff80000053:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff80000057:	c9                   	leave  
ffffffff80000058:	c3                   	ret    

ffffffff80000059 <flanterm_fb_save_state>:
    uint32_t g = (colour >> 8) & 0xff;
    uint32_t b =  colour & 0xff;
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
}

static void flanterm_fb_save_state(struct flanterm_context *_ctx) {
ffffffff80000059:	f3 0f 1e fa          	endbr64 
ffffffff8000005d:	55                   	push   %rbp
ffffffff8000005e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000061:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000065:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000069:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000006d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ctx->saved_state_text_fg = ctx->text_fg;
ffffffff80000071:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000075:	8b 90 d8 02 00 00    	mov    0x2d8(%rax),%edx
ffffffff8000007b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000007f:	89 90 f0 02 00 00    	mov    %edx,0x2f0(%rax)
    ctx->saved_state_text_bg = ctx->text_bg;
ffffffff80000085:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000089:	8b 90 dc 02 00 00    	mov    0x2dc(%rax),%edx
ffffffff8000008f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000093:	89 90 f4 02 00 00    	mov    %edx,0x2f4(%rax)
    ctx->saved_state_cursor_x = ctx->cursor_x;
ffffffff80000099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000009d:	48 8b 90 e0 02 00 00 	mov    0x2e0(%rax),%rdx
ffffffff800000a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000a8:	48 89 90 f8 02 00 00 	mov    %rdx,0x2f8(%rax)
    ctx->saved_state_cursor_y = ctx->cursor_y;
ffffffff800000af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000b3:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff800000ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000be:	48 89 90 00 03 00 00 	mov    %rdx,0x300(%rax)
}
ffffffff800000c5:	90                   	nop
ffffffff800000c6:	c9                   	leave  
ffffffff800000c7:	c3                   	ret    

ffffffff800000c8 <flanterm_fb_restore_state>:

static void flanterm_fb_restore_state(struct flanterm_context *_ctx) {
ffffffff800000c8:	f3 0f 1e fa          	endbr64 
ffffffff800000cc:	55                   	push   %rbp
ffffffff800000cd:	48 89 e5             	mov    %rsp,%rbp
ffffffff800000d0:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800000d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800000d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800000dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    ctx->text_fg = ctx->saved_state_text_fg;
ffffffff800000e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000e4:	8b 90 f0 02 00 00    	mov    0x2f0(%rax),%edx
ffffffff800000ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000ee:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
    ctx->text_bg = ctx->saved_state_text_bg;
ffffffff800000f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000f8:	8b 90 f4 02 00 00    	mov    0x2f4(%rax),%edx
ffffffff800000fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000102:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%rax)
    ctx->cursor_x = ctx->saved_state_cursor_x;
ffffffff80000108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000010c:	48 8b 90 f8 02 00 00 	mov    0x2f8(%rax),%rdx
ffffffff80000113:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000117:	48 89 90 e0 02 00 00 	mov    %rdx,0x2e0(%rax)
    ctx->cursor_y = ctx->saved_state_cursor_y;
ffffffff8000011e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000122:	48 8b 90 00 03 00 00 	mov    0x300(%rax),%rdx
ffffffff80000129:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000012d:	48 89 90 e8 02 00 00 	mov    %rdx,0x2e8(%rax)
}
ffffffff80000134:	90                   	nop
ffffffff80000135:	c9                   	leave  
ffffffff80000136:	c3                   	ret    

ffffffff80000137 <flanterm_fb_swap_palette>:

static void flanterm_fb_swap_palette(struct flanterm_context *_ctx) {
ffffffff80000137:	f3 0f 1e fa          	endbr64 
ffffffff8000013b:	55                   	push   %rbp
ffffffff8000013c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000013f:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000143:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000147:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000014b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    uint32_t tmp = ctx->text_bg;
ffffffff8000014f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000153:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff80000159:	89 45 f4             	mov    %eax,-0xc(%rbp)
    ctx->text_bg = ctx->text_fg;
ffffffff8000015c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000160:	8b 90 d8 02 00 00    	mov    0x2d8(%rax),%edx
ffffffff80000166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000016a:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%rax)
    ctx->text_fg = tmp;
ffffffff80000170:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000174:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80000177:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
}
ffffffff8000017d:	90                   	nop
ffffffff8000017e:	c9                   	leave  
ffffffff8000017f:	c3                   	ret    

ffffffff80000180 <plot_char>:

static void plot_char(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff80000180:	f3 0f 1e fa          	endbr64 
ffffffff80000184:	55                   	push   %rbp
ffffffff80000185:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000188:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8000018c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
ffffffff80000190:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
ffffffff80000194:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
ffffffff80000198:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000019c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff800001a0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff800001a4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff800001a8:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800001af:	48 39 45 88          	cmp    %rax,-0x78(%rbp)
ffffffff800001b3:	0f 83 ab 02 00 00    	jae    ffffffff80000464 <plot_char+0x2e4>
ffffffff800001b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff800001bd:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff800001c4:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
ffffffff800001c8:	0f 83 96 02 00 00    	jae    ffffffff80000464 <plot_char+0x2e4>
        return;
    }

    uint32_t default_bg = ctx->default_bg;
ffffffff800001ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800001d2:	8b 80 84 02 00 00    	mov    0x284(%rax),%eax
ffffffff800001d8:	89 45 d4             	mov    %eax,-0x2c(%rbp)

    x = ctx->offset_x + x * ctx->glyph_width;
ffffffff800001db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800001df:	48 8b 90 e0 01 00 00 	mov    0x1e0(%rax),%rdx
ffffffff800001e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800001ea:	48 8b 80 c0 01 00 00 	mov    0x1c0(%rax),%rax
ffffffff800001f1:	48 0f af 45 88       	imul   -0x78(%rbp),%rax
ffffffff800001f6:	48 01 d0             	add    %rdx,%rax
ffffffff800001f9:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    y = ctx->offset_y + y * ctx->glyph_height;
ffffffff800001fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000201:	48 8b 90 e8 01 00 00 	mov    0x1e8(%rax),%rdx
ffffffff80000208:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000020c:	48 8b 80 c8 01 00 00 	mov    0x1c8(%rax),%rax
ffffffff80000213:	48 0f af 45 80       	imul   -0x80(%rbp),%rax
ffffffff80000218:	48 01 d0             	add    %rdx,%rax
ffffffff8000021b:	48 89 45 80          	mov    %rax,-0x80(%rbp)

    bool *glyph = &ctx->font_bool[c->c * ctx->font_height * ctx->font_width];
ffffffff8000021f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000223:	48 8b 88 38 02 00 00 	mov    0x238(%rax),%rcx
ffffffff8000022a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8000022e:	8b 00                	mov    (%rax),%eax
ffffffff80000230:	89 c2                	mov    %eax,%edx
ffffffff80000232:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000236:	48 8b 80 b8 01 00 00 	mov    0x1b8(%rax),%rax
ffffffff8000023d:	48 0f af d0          	imul   %rax,%rdx
ffffffff80000241:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000245:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff8000024c:	48 0f af c2          	imul   %rdx,%rax
ffffffff80000250:	48 01 c8             	add    %rcx,%rax
ffffffff80000253:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    // naming: fx,fy for font coordinates, gx,gy for glyph coordinates
    for (size_t gy = 0; gy < ctx->glyph_height; gy++) {
ffffffff80000257:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000025e:	00 
ffffffff8000025f:	e9 e9 01 00 00       	jmp    ffffffff8000044d <plot_char+0x2cd>
        uint8_t fy = gy / ctx->font_scale_y;
ffffffff80000264:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000268:	48 8b b0 d8 01 00 00 	mov    0x1d8(%rax),%rsi
ffffffff8000026f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000273:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80000278:	48 f7 f6             	div    %rsi
ffffffff8000027b:	88 45 c7             	mov    %al,-0x39(%rbp)
        volatile uint32_t *fb_line = ctx->framebuffer + x + (y + gy) * (ctx->pitch / 4);
ffffffff8000027e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000282:	48 8b 88 f0 01 00 00 	mov    0x1f0(%rax),%rcx
ffffffff80000289:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8000028d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000291:	48 01 c2             	add    %rax,%rdx
ffffffff80000294:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000298:	48 8b 80 f8 01 00 00 	mov    0x1f8(%rax),%rax
ffffffff8000029f:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff800002a3:	48 0f af d0          	imul   %rax,%rdx
ffffffff800002a7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff800002ab:	48 01 d0             	add    %rdx,%rax
ffffffff800002ae:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800002b2:	48 01 c8             	add    %rcx,%rax
ffffffff800002b5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        uint32_t *canvas_line = ctx->canvas + x + (y + gy) * ctx->width;
ffffffff800002b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800002bd:	48 8b 88 98 02 00 00 	mov    0x298(%rax),%rcx
ffffffff800002c4:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff800002c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800002cc:	48 01 c2             	add    %rax,%rdx
ffffffff800002cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800002d3:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax
ffffffff800002da:	48 0f af d0          	imul   %rax,%rdx
ffffffff800002de:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff800002e2:	48 01 d0             	add    %rdx,%rax
ffffffff800002e5:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800002e9:	48 01 c8             	add    %rcx,%rax
ffffffff800002ec:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
        for (size_t fx = 0; fx < ctx->font_width; fx++) {
ffffffff800002f0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff800002f7:	00 
ffffffff800002f8:	e9 36 01 00 00       	jmp    ffffffff80000433 <plot_char+0x2b3>
            bool draw = glyph[fy * ctx->font_width + fx];
ffffffff800002fd:	0f b6 55 c7          	movzbl -0x39(%rbp),%edx
ffffffff80000301:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000305:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff8000030c:	48 0f af d0          	imul   %rax,%rdx
ffffffff80000310:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000314:	48 01 c2             	add    %rax,%rdx
ffffffff80000317:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000031b:	48 01 d0             	add    %rdx,%rax
ffffffff8000031e:	0f b6 00             	movzbl (%rax),%eax
ffffffff80000321:	88 45 af             	mov    %al,-0x51(%rbp)
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff80000324:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8000032b:	00 
ffffffff8000032c:	e9 e8 00 00 00       	jmp    ffffffff80000419 <plot_char+0x299>
                size_t gx = ctx->font_scale_x * fx + i;
ffffffff80000331:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000335:	48 8b 80 d0 01 00 00 	mov    0x1d0(%rax),%rax
ffffffff8000033c:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
ffffffff80000341:	48 89 c2             	mov    %rax,%rdx
ffffffff80000344:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000348:	48 01 d0             	add    %rdx,%rax
ffffffff8000034b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
                uint32_t bg, fg;
                if (ctx->canvas != NULL) {
ffffffff8000034f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000353:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff8000035a:	48 85 c0             	test   %rax,%rax
ffffffff8000035d:	74 5c                	je     ffffffff800003bb <plot_char+0x23b>
                    bg = c->bg == 0xffffffff ? canvas_line[gx] : c->bg;
ffffffff8000035f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80000363:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80000366:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff80000369:	75 17                	jne    ffffffff80000382 <plot_char+0x202>
ffffffff8000036b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000036f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80000376:	00 
ffffffff80000377:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000037b:	48 01 d0             	add    %rdx,%rax
ffffffff8000037e:	8b 00                	mov    (%rax),%eax
ffffffff80000380:	eb 07                	jmp    ffffffff80000389 <plot_char+0x209>
ffffffff80000382:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80000386:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80000389:	89 45 e4             	mov    %eax,-0x1c(%rbp)
                    fg = c->fg == 0xffffffff ? canvas_line[gx] : c->fg;
ffffffff8000038c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80000390:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80000393:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff80000396:	75 17                	jne    ffffffff800003af <plot_char+0x22f>
ffffffff80000398:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000039c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff800003a3:	00 
ffffffff800003a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff800003a8:	48 01 d0             	add    %rdx,%rax
ffffffff800003ab:	8b 00                	mov    (%rax),%eax
ffffffff800003ad:	eb 07                	jmp    ffffffff800003b6 <plot_char+0x236>
ffffffff800003af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800003b3:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800003b6:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff800003b9:	eb 36                	jmp    ffffffff800003f1 <plot_char+0x271>
                } else {
                    bg = c->bg == 0xffffffff ? default_bg : c->bg;
ffffffff800003bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800003bf:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff800003c2:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff800003c5:	74 09                	je     ffffffff800003d0 <plot_char+0x250>
ffffffff800003c7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800003cb:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff800003ce:	eb 03                	jmp    ffffffff800003d3 <plot_char+0x253>
ffffffff800003d0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff800003d3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
                    fg = c->fg == 0xffffffff ? default_bg : c->fg;
ffffffff800003d6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800003da:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800003dd:	83 f8 ff             	cmp    $0xffffffff,%eax
ffffffff800003e0:	74 09                	je     ffffffff800003eb <plot_char+0x26b>
ffffffff800003e2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800003e6:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800003e9:	eb 03                	jmp    ffffffff800003ee <plot_char+0x26e>
ffffffff800003eb:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff800003ee:	89 45 e0             	mov    %eax,-0x20(%rbp)
                }
                fb_line[gx] = draw ? fg : bg;
ffffffff800003f1:	80 7d af 00          	cmpb   $0x0,-0x51(%rbp)
ffffffff800003f5:	74 05                	je     ffffffff800003fc <plot_char+0x27c>
ffffffff800003f7:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff800003fa:	eb 03                	jmp    ffffffff800003ff <plot_char+0x27f>
ffffffff800003fc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800003ff:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80000403:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
ffffffff8000040a:	00 
ffffffff8000040b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8000040f:	48 01 ca             	add    %rcx,%rdx
ffffffff80000412:	89 02                	mov    %eax,(%rdx)
            for (size_t i = 0; i < ctx->font_scale_x; i++) {
ffffffff80000414:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80000419:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000041d:	48 8b 80 d0 01 00 00 	mov    0x1d0(%rax),%rax
ffffffff80000424:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80000428:	0f 82 03 ff ff ff    	jb     ffffffff80000331 <plot_char+0x1b1>
        for (size_t fx = 0; fx < ctx->font_width; fx++) {
ffffffff8000042e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80000433:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000437:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff8000043e:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80000442:	0f 82 b5 fe ff ff    	jb     ffffffff800002fd <plot_char+0x17d>
    for (size_t gy = 0; gy < ctx->glyph_height; gy++) {
ffffffff80000448:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8000044d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000451:	48 8b 80 c8 01 00 00 	mov    0x1c8(%rax),%rax
ffffffff80000458:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8000045c:	0f 82 02 fe ff ff    	jb     ffffffff80000264 <plot_char+0xe4>
ffffffff80000462:	eb 01                	jmp    ffffffff80000465 <plot_char+0x2e5>
        return;
ffffffff80000464:	90                   	nop
            }
        }
    }
}
ffffffff80000465:	c9                   	leave  
ffffffff80000466:	c3                   	ret    

ffffffff80000467 <compare_char>:
        }
    }
}
#endif

static inline bool compare_char(struct flanterm_fb_char *a, struct flanterm_fb_char *b) {
ffffffff80000467:	55                   	push   %rbp
ffffffff80000468:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000046b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000046f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80000473:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    return !(a->c != b->c || a->bg != b->bg || a->fg != b->fg);
ffffffff80000477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000047b:	8b 10                	mov    (%rax),%edx
ffffffff8000047d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000481:	8b 00                	mov    (%rax),%eax
ffffffff80000483:	39 c2                	cmp    %eax,%edx
ffffffff80000485:	75 2b                	jne    ffffffff800004b2 <compare_char+0x4b>
ffffffff80000487:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000048b:	8b 50 08             	mov    0x8(%rax),%edx
ffffffff8000048e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000492:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80000495:	39 c2                	cmp    %eax,%edx
ffffffff80000497:	75 19                	jne    ffffffff800004b2 <compare_char+0x4b>
ffffffff80000499:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000049d:	8b 50 04             	mov    0x4(%rax),%edx
ffffffff800004a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800004a4:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800004a7:	39 c2                	cmp    %eax,%edx
ffffffff800004a9:	75 07                	jne    ffffffff800004b2 <compare_char+0x4b>
ffffffff800004ab:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800004b0:	eb 05                	jmp    ffffffff800004b7 <compare_char+0x50>
ffffffff800004b2:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800004b7:	83 e0 01             	and    $0x1,%eax
}
ffffffff800004ba:	c9                   	leave  
ffffffff800004bb:	c3                   	ret    

ffffffff800004bc <push_to_queue>:

static void push_to_queue(struct flanterm_context *_ctx, struct flanterm_fb_char *c, size_t x, size_t y) {
ffffffff800004bc:	f3 0f 1e fa          	endbr64 
ffffffff800004c0:	55                   	push   %rbp
ffffffff800004c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800004c4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff800004c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff800004cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff800004d0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff800004d4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800004d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800004dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if (x >= _ctx->cols || y >= _ctx->rows) {
ffffffff800004e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800004e4:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800004eb:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff800004ef:	0f 83 09 01 00 00    	jae    ffffffff800005fe <push_to_queue+0x142>
ffffffff800004f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800004f9:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000500:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
ffffffff80000504:	0f 83 f4 00 00 00    	jae    ffffffff800005fe <push_to_queue+0x142>
        return;
    }

    size_t i = y * _ctx->cols + x;
ffffffff8000050a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000050e:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000515:	48 0f af 45 c0       	imul   -0x40(%rbp),%rax
ffffffff8000051a:	48 89 c2             	mov    %rax,%rdx
ffffffff8000051d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000521:	48 01 d0             	add    %rdx,%rax
ffffffff80000524:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff80000528:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000052c:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff80000533:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000537:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8000053b:	48 01 d0             	add    %rdx,%rax
ffffffff8000053e:	48 8b 00             	mov    (%rax),%rax
ffffffff80000541:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if (q == NULL) {
ffffffff80000545:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000054a:	0f 85 97 00 00 00    	jne    ffffffff800005e7 <push_to_queue+0x12b>
        if (compare_char(&ctx->grid[i], c)) {
ffffffff80000550:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000554:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000055b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000055f:	48 89 d0             	mov    %rdx,%rax
ffffffff80000562:	48 01 c0             	add    %rax,%rax
ffffffff80000565:	48 01 d0             	add    %rdx,%rax
ffffffff80000568:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000056c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff80000570:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80000574:	48 89 c6             	mov    %rax,%rsi
ffffffff80000577:	48 89 d7             	mov    %rdx,%rdi
ffffffff8000057a:	e8 e8 fe ff ff       	call   ffffffff80000467 <compare_char>
ffffffff8000057f:	84 c0                	test   %al,%al
ffffffff80000581:	75 7e                	jne    ffffffff80000601 <push_to_queue+0x145>
            return;
        }
        q = &ctx->queue[ctx->queue_i++];
ffffffff80000583:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000587:	48 8b b0 c0 02 00 00 	mov    0x2c0(%rax),%rsi
ffffffff8000058e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000592:	48 8b 80 c8 02 00 00 	mov    0x2c8(%rax),%rax
ffffffff80000599:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff8000059d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff800005a1:	48 89 8a c8 02 00 00 	mov    %rcx,0x2c8(%rdx)
ffffffff800005a8:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff800005ac:	48 01 f0             	add    %rsi,%rax
ffffffff800005af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        q->x = x;
ffffffff800005b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800005b7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800005bb:	48 89 10             	mov    %rdx,(%rax)
        q->y = y;
ffffffff800005be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800005c2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff800005c6:	48 89 50 08          	mov    %rdx,0x8(%rax)
        ctx->map[i] = q;
ffffffff800005ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800005ce:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff800005d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800005d9:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff800005dd:	48 01 c2             	add    %rax,%rdx
ffffffff800005e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800005e4:	48 89 02             	mov    %rax,(%rdx)
    }

    q->c = *c;
ffffffff800005e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800005eb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff800005ef:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff800005f2:	48 89 48 10          	mov    %rcx,0x10(%rax)
ffffffff800005f6:	8b 52 08             	mov    0x8(%rdx),%edx
ffffffff800005f9:	89 50 18             	mov    %edx,0x18(%rax)
ffffffff800005fc:	eb 04                	jmp    ffffffff80000602 <push_to_queue+0x146>
        return;
ffffffff800005fe:	90                   	nop
ffffffff800005ff:	eb 01                	jmp    ffffffff80000602 <push_to_queue+0x146>
            return;
ffffffff80000601:	90                   	nop
}
ffffffff80000602:	c9                   	leave  
ffffffff80000603:	c3                   	ret    

ffffffff80000604 <flanterm_fb_revscroll>:

static void flanterm_fb_revscroll(struct flanterm_context *_ctx) {
ffffffff80000604:	f3 0f 1e fa          	endbr64 
ffffffff80000608:	55                   	push   %rbp
ffffffff80000609:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000060c:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80000610:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000614:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000618:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    for (size_t i = (_ctx->scroll_bottom_margin - 1) * _ctx->cols - 1;
ffffffff8000061c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000620:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80000624:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80000628:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000062c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000633:	48 0f af c2          	imul   %rdx,%rax
ffffffff80000637:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000063b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000063f:	e9 cc 00 00 00       	jmp    ffffffff80000710 <flanterm_fb_revscroll+0x10c>
         i >= _ctx->scroll_top_margin * _ctx->cols; i--) {
        if (i == (size_t)-1) {
ffffffff80000644:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff80000649:	0f 84 e4 00 00 00    	je     ffffffff80000733 <flanterm_fb_revscroll+0x12f>
            break;
        }
        struct flanterm_fb_char *c;
        struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff8000064f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000653:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff8000065a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000065e:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80000662:	48 01 d0             	add    %rdx,%rax
ffffffff80000665:	48 8b 00             	mov    (%rax),%rax
ffffffff80000668:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if (q != NULL) {
ffffffff8000066c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80000671:	74 0e                	je     ffffffff80000681 <flanterm_fb_revscroll+0x7d>
            c = &q->c;
ffffffff80000673:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000677:	48 83 c0 10          	add    $0x10,%rax
ffffffff8000067b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000067f:	eb 23                	jmp    ffffffff800006a4 <flanterm_fb_revscroll+0xa0>
        } else {
            c = &ctx->grid[i];
ffffffff80000681:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000685:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000068c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80000690:	48 89 d0             	mov    %rdx,%rax
ffffffff80000693:	48 01 c0             	add    %rax,%rax
ffffffff80000696:	48 01 d0             	add    %rdx,%rax
ffffffff80000699:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000069d:	48 01 c8             	add    %rcx,%rax
ffffffff800006a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        }
        push_to_queue(_ctx, c, (i + _ctx->cols) % _ctx->cols, (i + _ctx->cols) / _ctx->cols);
ffffffff800006a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800006a8:	48 8b 90 e8 00 00 00 	mov    0xe8(%rax),%rdx
ffffffff800006af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800006b3:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff800006b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800006bb:	48 8b b8 e8 00 00 00 	mov    0xe8(%rax),%rdi
ffffffff800006c2:	48 89 c8             	mov    %rcx,%rax
ffffffff800006c5:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800006ca:	48 f7 f7             	div    %rdi
ffffffff800006cd:	48 89 c7             	mov    %rax,%rdi
ffffffff800006d0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800006d4:	48 8b 90 e8 00 00 00 	mov    0xe8(%rax),%rdx
ffffffff800006db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800006df:	48 01 c2             	add    %rax,%rdx
ffffffff800006e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800006e6:	48 8b 88 e8 00 00 00 	mov    0xe8(%rax),%rcx
ffffffff800006ed:	48 89 d0             	mov    %rdx,%rax
ffffffff800006f0:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800006f5:	48 f7 f1             	div    %rcx
ffffffff800006f8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff800006fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000700:	48 89 f9             	mov    %rdi,%rcx
ffffffff80000703:	48 89 c7             	mov    %rax,%rdi
ffffffff80000706:	e8 b1 fd ff ff       	call   ffffffff800004bc <push_to_queue>
         i >= _ctx->scroll_top_margin * _ctx->cols; i--) {
ffffffff8000070b:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80000710:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000714:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80000718:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000071c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000723:	48 0f af c2          	imul   %rdx,%rax
ffffffff80000727:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8000072b:	0f 83 13 ff ff ff    	jae    ffffffff80000644 <flanterm_fb_revscroll+0x40>
ffffffff80000731:	eb 01                	jmp    ffffffff80000734 <flanterm_fb_revscroll+0x130>
            break;
ffffffff80000733:	90                   	nop
    }

    // Clear the first line of the screen.
    struct flanterm_fb_char empty;
    empty.c  = ' ';
ffffffff80000734:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%rbp)
    empty.fg = ctx->text_fg;
ffffffff8000073b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000073f:	8b 80 d8 02 00 00    	mov    0x2d8(%rax),%eax
ffffffff80000745:	89 45 d0             	mov    %eax,-0x30(%rbp)
    empty.bg = ctx->text_bg;
ffffffff80000748:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000074c:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff80000752:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff80000755:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8000075c:	00 
ffffffff8000075d:	eb 21                	jmp    ffffffff80000780 <flanterm_fb_revscroll+0x17c>
        push_to_queue(_ctx, &empty, i, _ctx->scroll_top_margin);
ffffffff8000075f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000763:	48 8b 48 68          	mov    0x68(%rax),%rcx
ffffffff80000767:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000076b:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
ffffffff8000076f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000773:	48 89 c7             	mov    %rax,%rdi
ffffffff80000776:	e8 41 fd ff ff       	call   ffffffff800004bc <push_to_queue>
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff8000077b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80000780:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000784:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000078b:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8000078f:	72 ce                	jb     ffffffff8000075f <flanterm_fb_revscroll+0x15b>
    }
}
ffffffff80000791:	90                   	nop
ffffffff80000792:	90                   	nop
ffffffff80000793:	c9                   	leave  
ffffffff80000794:	c3                   	ret    

ffffffff80000795 <flanterm_fb_scroll>:

static void flanterm_fb_scroll(struct flanterm_context *_ctx) {
ffffffff80000795:	f3 0f 1e fa          	endbr64 
ffffffff80000799:	55                   	push   %rbp
ffffffff8000079a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000079d:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff800007a1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800007a5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800007a9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    for (size_t i = (_ctx->scroll_top_margin + 1) * _ctx->cols;
ffffffff800007ad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800007b1:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff800007b5:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800007b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800007bd:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800007c4:	48 0f af c2          	imul   %rdx,%rax
ffffffff800007c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800007cc:	e9 c6 00 00 00       	jmp    ffffffff80000897 <flanterm_fb_scroll+0x102>
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
        struct flanterm_fb_char *c;
        struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff800007d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800007d5:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff800007dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800007e0:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff800007e4:	48 01 d0             	add    %rdx,%rax
ffffffff800007e7:	48 8b 00             	mov    (%rax),%rax
ffffffff800007ea:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if (q != NULL) {
ffffffff800007ee:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff800007f3:	74 0e                	je     ffffffff80000803 <flanterm_fb_scroll+0x6e>
            c = &q->c;
ffffffff800007f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800007f9:	48 83 c0 10          	add    $0x10,%rax
ffffffff800007fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000801:	eb 23                	jmp    ffffffff80000826 <flanterm_fb_scroll+0x91>
        } else {
            c = &ctx->grid[i];
ffffffff80000803:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000807:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000080e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80000812:	48 89 d0             	mov    %rdx,%rax
ffffffff80000815:	48 01 c0             	add    %rax,%rax
ffffffff80000818:	48 01 d0             	add    %rdx,%rax
ffffffff8000081b:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000081f:	48 01 c8             	add    %rcx,%rax
ffffffff80000822:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        }
        push_to_queue(_ctx, c, (i - _ctx->cols) % _ctx->cols, (i - _ctx->cols) / _ctx->cols);
ffffffff80000826:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000082a:	48 8b 90 e8 00 00 00 	mov    0xe8(%rax),%rdx
ffffffff80000831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000835:	48 29 d0             	sub    %rdx,%rax
ffffffff80000838:	48 89 c1             	mov    %rax,%rcx
ffffffff8000083b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000083f:	48 8b b8 e8 00 00 00 	mov    0xe8(%rax),%rdi
ffffffff80000846:	48 89 c8             	mov    %rcx,%rax
ffffffff80000849:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8000084e:	48 f7 f7             	div    %rdi
ffffffff80000851:	48 89 c7             	mov    %rax,%rdi
ffffffff80000854:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000858:	48 8b 88 e8 00 00 00 	mov    0xe8(%rax),%rcx
ffffffff8000085f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000863:	48 29 c8             	sub    %rcx,%rax
ffffffff80000866:	48 89 c2             	mov    %rax,%rdx
ffffffff80000869:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000086d:	48 8b 88 e8 00 00 00 	mov    0xe8(%rax),%rcx
ffffffff80000874:	48 89 d0             	mov    %rdx,%rax
ffffffff80000877:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8000087c:	48 f7 f1             	div    %rcx
ffffffff8000087f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80000883:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80000887:	48 89 f9             	mov    %rdi,%rcx
ffffffff8000088a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000088d:	e8 2a fc ff ff       	call   ffffffff800004bc <push_to_queue>
         i < _ctx->scroll_bottom_margin * _ctx->cols; i++) {
ffffffff80000892:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80000897:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000089b:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff8000089f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800008a3:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800008aa:	48 0f af c2          	imul   %rdx,%rax
ffffffff800008ae:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff800008b2:	0f 82 19 ff ff ff    	jb     ffffffff800007d1 <flanterm_fb_scroll+0x3c>
    }

    // Clear the last line of the screen.
    struct flanterm_fb_char empty;
    empty.c  = ' ';
ffffffff800008b8:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%rbp)
    empty.fg = ctx->text_fg;
ffffffff800008bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800008c3:	8b 80 d8 02 00 00    	mov    0x2d8(%rax),%eax
ffffffff800008c9:	89 45 d0             	mov    %eax,-0x30(%rbp)
    empty.bg = ctx->text_bg;
ffffffff800008cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800008d0:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff800008d6:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff800008d9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff800008e0:	00 
ffffffff800008e1:	eb 25                	jmp    ffffffff80000908 <flanterm_fb_scroll+0x173>
        push_to_queue(_ctx, &empty, i, _ctx->scroll_bottom_margin - 1);
ffffffff800008e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800008e7:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff800008eb:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
ffffffff800008ef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff800008f3:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
ffffffff800008f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800008fb:	48 89 c7             	mov    %rax,%rdi
ffffffff800008fe:	e8 b9 fb ff ff       	call   ffffffff800004bc <push_to_queue>
    for (size_t i = 0; i < _ctx->cols; i++) {
ffffffff80000903:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80000908:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000090c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000913:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80000917:	72 ca                	jb     ffffffff800008e3 <flanterm_fb_scroll+0x14e>
    }
}
ffffffff80000919:	90                   	nop
ffffffff8000091a:	90                   	nop
ffffffff8000091b:	c9                   	leave  
ffffffff8000091c:	c3                   	ret    

ffffffff8000091d <flanterm_fb_clear>:

static void flanterm_fb_clear(struct flanterm_context *_ctx, bool move) {
ffffffff8000091d:	f3 0f 1e fa          	endbr64 
ffffffff80000921:	55                   	push   %rbp
ffffffff80000922:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000925:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80000929:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000092d:	89 f0                	mov    %esi,%eax
ffffffff8000092f:	88 45 d4             	mov    %al,-0x2c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000932:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000936:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    struct flanterm_fb_char empty;
    empty.c  = ' ';
ffffffff8000093a:	c7 45 e4 20 00 00 00 	movl   $0x20,-0x1c(%rbp)
    empty.fg = ctx->text_fg;
ffffffff80000941:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000945:	8b 80 d8 02 00 00    	mov    0x2d8(%rax),%eax
ffffffff8000094b:	89 45 e8             	mov    %eax,-0x18(%rbp)
    empty.bg = ctx->text_bg;
ffffffff8000094e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000952:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff80000958:	89 45 ec             	mov    %eax,-0x14(%rbp)
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff8000095b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80000962:	00 
ffffffff80000963:	eb 49                	jmp    ffffffff800009ae <flanterm_fb_clear+0x91>
        push_to_queue(_ctx, &empty, i % _ctx->cols, i / _ctx->cols);
ffffffff80000965:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000969:	48 8b 88 e8 00 00 00 	mov    0xe8(%rax),%rcx
ffffffff80000970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000974:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80000979:	48 f7 f1             	div    %rcx
ffffffff8000097c:	48 89 c7             	mov    %rax,%rdi
ffffffff8000097f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000983:	48 8b 88 e8 00 00 00 	mov    0xe8(%rax),%rcx
ffffffff8000098a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000098e:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80000993:	48 f7 f1             	div    %rcx
ffffffff80000996:	48 8d 75 e4          	lea    -0x1c(%rbp),%rsi
ffffffff8000099a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000099e:	48 89 f9             	mov    %rdi,%rcx
ffffffff800009a1:	48 89 c7             	mov    %rax,%rdi
ffffffff800009a4:	e8 13 fb ff ff       	call   ffffffff800004bc <push_to_queue>
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff800009a9:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff800009ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800009b2:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff800009b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800009bd:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800009c4:	48 0f af c2          	imul   %rdx,%rax
ffffffff800009c8:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff800009cc:	72 97                	jb     ffffffff80000965 <flanterm_fb_clear+0x48>
    }

    if (move) {
ffffffff800009ce:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
ffffffff800009d2:	74 1e                	je     ffffffff800009f2 <flanterm_fb_clear+0xd5>
        ctx->cursor_x = 0;
ffffffff800009d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800009d8:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
ffffffff800009df:	00 00 00 00 
        ctx->cursor_y = 0;
ffffffff800009e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800009e7:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
ffffffff800009ee:	00 00 00 00 
    }
}
ffffffff800009f2:	90                   	nop
ffffffff800009f3:	c9                   	leave  
ffffffff800009f4:	c3                   	ret    

ffffffff800009f5 <flanterm_fb_set_cursor_pos>:

static void flanterm_fb_set_cursor_pos(struct flanterm_context *_ctx, size_t x, size_t y) {
ffffffff800009f5:	f3 0f 1e fa          	endbr64 
ffffffff800009f9:	55                   	push   %rbp
ffffffff800009fa:	48 89 e5             	mov    %rsp,%rbp
ffffffff800009fd:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80000a01:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000a05:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80000a09:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000a0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000a11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if (x >= _ctx->cols) {
ffffffff80000a15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000a19:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000a20:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80000a24:	72 25                	jb     ffffffff80000a4b <flanterm_fb_set_cursor_pos+0x56>
        if ((int)x < 0) {
ffffffff80000a26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000a2a:	85 c0                	test   %eax,%eax
ffffffff80000a2c:	79 0a                	jns    ffffffff80000a38 <flanterm_fb_set_cursor_pos+0x43>
            x = 0;
ffffffff80000a2e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80000a35:	00 
ffffffff80000a36:	eb 13                	jmp    ffffffff80000a4b <flanterm_fb_set_cursor_pos+0x56>
        } else {
            x = _ctx->cols - 1;
ffffffff80000a38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000a3c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000a43:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80000a47:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        }
    }
    if (y >= _ctx->rows) {
ffffffff80000a4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000a4f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000a56:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80000a5a:	72 25                	jb     ffffffff80000a81 <flanterm_fb_set_cursor_pos+0x8c>
        if ((int)y < 0) {
ffffffff80000a5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000a60:	85 c0                	test   %eax,%eax
ffffffff80000a62:	79 0a                	jns    ffffffff80000a6e <flanterm_fb_set_cursor_pos+0x79>
            y = 0;
ffffffff80000a64:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80000a6b:	00 
ffffffff80000a6c:	eb 13                	jmp    ffffffff80000a81 <flanterm_fb_set_cursor_pos+0x8c>
        } else {
            y = _ctx->rows - 1;
ffffffff80000a6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000a72:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000a79:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80000a7d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        }
    }
    ctx->cursor_x = x;
ffffffff80000a81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000a85:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80000a89:	48 89 90 e0 02 00 00 	mov    %rdx,0x2e0(%rax)
    ctx->cursor_y = y;
ffffffff80000a90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000a94:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80000a98:	48 89 90 e8 02 00 00 	mov    %rdx,0x2e8(%rax)
}
ffffffff80000a9f:	90                   	nop
ffffffff80000aa0:	c9                   	leave  
ffffffff80000aa1:	c3                   	ret    

ffffffff80000aa2 <flanterm_fb_get_cursor_pos>:

static void flanterm_fb_get_cursor_pos(struct flanterm_context *_ctx, size_t *x, size_t *y) {
ffffffff80000aa2:	f3 0f 1e fa          	endbr64 
ffffffff80000aa6:	55                   	push   %rbp
ffffffff80000aa7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000aaa:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80000aae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000ab2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80000ab6:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000aba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000abe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    *x = ctx->cursor_x >= _ctx->cols ? _ctx->cols - 1 : ctx->cursor_x;
ffffffff80000ac2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000ac6:	48 8b 90 e0 02 00 00 	mov    0x2e0(%rax),%rdx
ffffffff80000acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000ad1:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000ad8:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000adb:	72 11                	jb     ffffffff80000aee <flanterm_fb_get_cursor_pos+0x4c>
ffffffff80000add:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000ae1:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000ae8:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80000aec:	eb 0b                	jmp    ffffffff80000af9 <flanterm_fb_get_cursor_pos+0x57>
ffffffff80000aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000af2:	48 8b 80 e0 02 00 00 	mov    0x2e0(%rax),%rax
ffffffff80000af9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80000afd:	48 89 02             	mov    %rax,(%rdx)
    *y = ctx->cursor_y >= _ctx->rows ? _ctx->rows - 1 : ctx->cursor_y;
ffffffff80000b00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000b04:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff80000b0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000b0f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000b16:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000b19:	72 11                	jb     ffffffff80000b2c <flanterm_fb_get_cursor_pos+0x8a>
ffffffff80000b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000b1f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000b26:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80000b2a:	eb 0b                	jmp    ffffffff80000b37 <flanterm_fb_get_cursor_pos+0x95>
ffffffff80000b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000b30:	48 8b 80 e8 02 00 00 	mov    0x2e8(%rax),%rax
ffffffff80000b37:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80000b3b:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80000b3e:	90                   	nop
ffffffff80000b3f:	c9                   	leave  
ffffffff80000b40:	c3                   	ret    

ffffffff80000b41 <flanterm_fb_move_character>:

static void flanterm_fb_move_character(struct flanterm_context *_ctx, size_t new_x, size_t new_y, size_t old_x, size_t old_y) {
ffffffff80000b41:	f3 0f 1e fa          	endbr64 
ffffffff80000b45:	55                   	push   %rbp
ffffffff80000b46:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000b49:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80000b4d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80000b51:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80000b55:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80000b59:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80000b5d:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000b61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000b65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if (old_x >= _ctx->cols || old_y >= _ctx->rows
ffffffff80000b69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000b6d:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000b74:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
ffffffff80000b78:	0f 83 cc 00 00 00    	jae    ffffffff80000c4a <flanterm_fb_move_character+0x109>
ffffffff80000b7e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000b82:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000b89:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80000b8d:	0f 83 b7 00 00 00    	jae    ffffffff80000c4a <flanterm_fb_move_character+0x109>
     || new_x >= _ctx->cols || new_y >= _ctx->rows) {
ffffffff80000b93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000b97:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000b9e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80000ba2:	0f 83 a2 00 00 00    	jae    ffffffff80000c4a <flanterm_fb_move_character+0x109>
ffffffff80000ba8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000bac:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000bb3:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80000bb7:	0f 83 8d 00 00 00    	jae    ffffffff80000c4a <flanterm_fb_move_character+0x109>
        return;
    }

    size_t i = old_x + old_y * _ctx->cols;
ffffffff80000bbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000bc1:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000bc8:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
ffffffff80000bcd:	48 89 c2             	mov    %rax,%rdx
ffffffff80000bd0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80000bd4:	48 01 d0             	add    %rdx,%rax
ffffffff80000bd7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    struct flanterm_fb_char *c;
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff80000bdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000bdf:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff80000be6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000bea:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80000bee:	48 01 d0             	add    %rdx,%rax
ffffffff80000bf1:	48 8b 00             	mov    (%rax),%rax
ffffffff80000bf4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (q != NULL) {
ffffffff80000bf8:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80000bfd:	74 0e                	je     ffffffff80000c0d <flanterm_fb_move_character+0xcc>
        c = &q->c;
ffffffff80000bff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000c03:	48 83 c0 10          	add    $0x10,%rax
ffffffff80000c07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000c0b:	eb 23                	jmp    ffffffff80000c30 <flanterm_fb_move_character+0xef>
    } else {
        c = &ctx->grid[i];
ffffffff80000c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000c11:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff80000c18:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80000c1c:	48 89 d0             	mov    %rdx,%rax
ffffffff80000c1f:	48 01 c0             	add    %rax,%rax
ffffffff80000c22:	48 01 d0             	add    %rdx,%rax
ffffffff80000c25:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80000c29:	48 01 c8             	add    %rcx,%rax
ffffffff80000c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    }

    push_to_queue(_ctx, c, new_x, new_y);
ffffffff80000c30:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80000c34:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80000c38:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80000c3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80000c40:	48 89 c7             	mov    %rax,%rdi
ffffffff80000c43:	e8 74 f8 ff ff       	call   ffffffff800004bc <push_to_queue>
ffffffff80000c48:	eb 01                	jmp    ffffffff80000c4b <flanterm_fb_move_character+0x10a>
        return;
ffffffff80000c4a:	90                   	nop
}
ffffffff80000c4b:	c9                   	leave  
ffffffff80000c4c:	c3                   	ret    

ffffffff80000c4d <flanterm_fb_set_text_fg>:

static void flanterm_fb_set_text_fg(struct flanterm_context *_ctx, size_t fg) {
ffffffff80000c4d:	f3 0f 1e fa          	endbr64 
ffffffff80000c51:	55                   	push   %rbp
ffffffff80000c52:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000c55:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000c59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000c5d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000c61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000c65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_fg = ctx->ansi_colours[fg];
ffffffff80000c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000c6d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80000c71:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
ffffffff80000c78:	8b 14 90             	mov    (%rax,%rdx,4),%edx
ffffffff80000c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000c7f:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
}
ffffffff80000c85:	90                   	nop
ffffffff80000c86:	c9                   	leave  
ffffffff80000c87:	c3                   	ret    

ffffffff80000c88 <flanterm_fb_set_text_bg>:

static void flanterm_fb_set_text_bg(struct flanterm_context *_ctx, size_t bg) {
ffffffff80000c88:	f3 0f 1e fa          	endbr64 
ffffffff80000c8c:	55                   	push   %rbp
ffffffff80000c8d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000c90:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000c94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000c98:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000c9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000ca0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_bg = ctx->ansi_colours[bg];
ffffffff80000ca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000ca8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80000cac:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
ffffffff80000cb3:	8b 14 90             	mov    (%rax,%rdx,4),%edx
ffffffff80000cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000cba:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%rax)
}
ffffffff80000cc0:	90                   	nop
ffffffff80000cc1:	c9                   	leave  
ffffffff80000cc2:	c3                   	ret    

ffffffff80000cc3 <flanterm_fb_set_text_fg_bright>:

static void flanterm_fb_set_text_fg_bright(struct flanterm_context *_ctx, size_t fg) {
ffffffff80000cc3:	f3 0f 1e fa          	endbr64 
ffffffff80000cc7:	55                   	push   %rbp
ffffffff80000cc8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000ccb:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000ccf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000cd3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000cd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000cdb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_fg = ctx->ansi_bright_colours[fg];
ffffffff80000cdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000ce3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80000ce7:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff80000cee:	8b 14 90             	mov    (%rax,%rdx,4),%edx
ffffffff80000cf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000cf5:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
}
ffffffff80000cfb:	90                   	nop
ffffffff80000cfc:	c9                   	leave  
ffffffff80000cfd:	c3                   	ret    

ffffffff80000cfe <flanterm_fb_set_text_bg_bright>:

static void flanterm_fb_set_text_bg_bright(struct flanterm_context *_ctx, size_t bg) {
ffffffff80000cfe:	f3 0f 1e fa          	endbr64 
ffffffff80000d02:	55                   	push   %rbp
ffffffff80000d03:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000d06:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000d0a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000d0e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000d16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_bg = ctx->ansi_bright_colours[bg];
ffffffff80000d1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000d1e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80000d22:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff80000d29:	8b 14 90             	mov    (%rax,%rdx,4),%edx
ffffffff80000d2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000d30:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%rax)
}
ffffffff80000d36:	90                   	nop
ffffffff80000d37:	c9                   	leave  
ffffffff80000d38:	c3                   	ret    

ffffffff80000d39 <flanterm_fb_set_text_fg_rgb>:

static void flanterm_fb_set_text_fg_rgb(struct flanterm_context *_ctx, uint32_t fg) {
ffffffff80000d39:	f3 0f 1e fa          	endbr64 
ffffffff80000d3d:	55                   	push   %rbp
ffffffff80000d3e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000d41:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80000d45:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80000d49:	89 75 c4             	mov    %esi,-0x3c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000d4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000d50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000d54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000d58:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000d5c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
ffffffff80000d5f:	89 45 ec             	mov    %eax,-0x14(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000d62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000d66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000d6a:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80000d6d:	c1 e8 10             	shr    $0x10,%eax
ffffffff80000d70:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80000d75:	89 45 dc             	mov    %eax,-0x24(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000d78:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80000d7b:	c1 e8 08             	shr    $0x8,%eax
ffffffff80000d7e:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80000d83:	89 45 d8             	mov    %eax,-0x28(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80000d86:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80000d89:	0f b6 c0             	movzbl %al,%eax
ffffffff80000d8c:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000d8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000d93:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80000d9a:	0f b6 c0             	movzbl %al,%eax
ffffffff80000d9d:	8b 55 dc             	mov    -0x24(%rbp),%edx
ffffffff80000da0:	89 d6                	mov    %edx,%esi
ffffffff80000da2:	89 c1                	mov    %eax,%ecx
ffffffff80000da4:	d3 e6                	shl    %cl,%esi
ffffffff80000da6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000daa:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80000db1:	0f b6 c0             	movzbl %al,%eax
ffffffff80000db4:	8b 55 d8             	mov    -0x28(%rbp),%edx
ffffffff80000db7:	89 c1                	mov    %eax,%ecx
ffffffff80000db9:	d3 e2                	shl    %cl,%edx
ffffffff80000dbb:	89 d0                	mov    %edx,%eax
ffffffff80000dbd:	09 c6                	or     %eax,%esi
ffffffff80000dbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000dc3:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80000dca:	0f b6 c0             	movzbl %al,%eax
ffffffff80000dcd:	8b 55 d4             	mov    -0x2c(%rbp),%edx
ffffffff80000dd0:	89 c1                	mov    %eax,%ecx
ffffffff80000dd2:	d3 e2                	shl    %cl,%edx
ffffffff80000dd4:	89 d0                	mov    %edx,%eax
ffffffff80000dd6:	09 c6                	or     %eax,%esi
ffffffff80000dd8:	89 f2                	mov    %esi,%edx

    ctx->text_fg = convert_colour(_ctx, fg);
ffffffff80000dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000dde:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
}
ffffffff80000de4:	90                   	nop
ffffffff80000de5:	c9                   	leave  
ffffffff80000de6:	c3                   	ret    

ffffffff80000de7 <flanterm_fb_set_text_bg_rgb>:

static void flanterm_fb_set_text_bg_rgb(struct flanterm_context *_ctx, uint32_t bg) {
ffffffff80000de7:	f3 0f 1e fa          	endbr64 
ffffffff80000deb:	55                   	push   %rbp
ffffffff80000dec:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000def:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80000df3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80000df7:	89 75 c4             	mov    %esi,-0x3c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000dfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000dfe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000e02:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000e06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000e0a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
ffffffff80000e0d:	89 45 ec             	mov    %eax,-0x14(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000e10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000e14:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80000e18:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80000e1b:	c1 e8 10             	shr    $0x10,%eax
ffffffff80000e1e:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80000e23:	89 45 dc             	mov    %eax,-0x24(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80000e26:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80000e29:	c1 e8 08             	shr    $0x8,%eax
ffffffff80000e2c:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80000e31:	89 45 d8             	mov    %eax,-0x28(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80000e34:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80000e37:	0f b6 c0             	movzbl %al,%eax
ffffffff80000e3a:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80000e3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000e41:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80000e48:	0f b6 c0             	movzbl %al,%eax
ffffffff80000e4b:	8b 55 dc             	mov    -0x24(%rbp),%edx
ffffffff80000e4e:	89 d6                	mov    %edx,%esi
ffffffff80000e50:	89 c1                	mov    %eax,%ecx
ffffffff80000e52:	d3 e6                	shl    %cl,%esi
ffffffff80000e54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000e58:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80000e5f:	0f b6 c0             	movzbl %al,%eax
ffffffff80000e62:	8b 55 d8             	mov    -0x28(%rbp),%edx
ffffffff80000e65:	89 c1                	mov    %eax,%ecx
ffffffff80000e67:	d3 e2                	shl    %cl,%edx
ffffffff80000e69:	89 d0                	mov    %edx,%eax
ffffffff80000e6b:	09 c6                	or     %eax,%esi
ffffffff80000e6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000e71:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80000e78:	0f b6 c0             	movzbl %al,%eax
ffffffff80000e7b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
ffffffff80000e7e:	89 c1                	mov    %eax,%ecx
ffffffff80000e80:	d3 e2                	shl    %cl,%edx
ffffffff80000e82:	89 d0                	mov    %edx,%eax
ffffffff80000e84:	09 c6                	or     %eax,%esi
ffffffff80000e86:	89 f2                	mov    %esi,%edx

    ctx->text_bg = convert_colour(_ctx, bg);
ffffffff80000e88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000e8c:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%rax)
}
ffffffff80000e92:	90                   	nop
ffffffff80000e93:	c9                   	leave  
ffffffff80000e94:	c3                   	ret    

ffffffff80000e95 <flanterm_fb_set_text_fg_default>:

static void flanterm_fb_set_text_fg_default(struct flanterm_context *_ctx) {
ffffffff80000e95:	f3 0f 1e fa          	endbr64 
ffffffff80000e99:	55                   	push   %rbp
ffffffff80000e9a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000e9d:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000ea1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000ea5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000ea9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_fg = ctx->default_fg;
ffffffff80000ead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000eb1:	8b 90 80 02 00 00    	mov    0x280(%rax),%edx
ffffffff80000eb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000ebb:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
}
ffffffff80000ec1:	90                   	nop
ffffffff80000ec2:	c9                   	leave  
ffffffff80000ec3:	c3                   	ret    

ffffffff80000ec4 <flanterm_fb_set_text_bg_default>:

static void flanterm_fb_set_text_bg_default(struct flanterm_context *_ctx) {
ffffffff80000ec4:	f3 0f 1e fa          	endbr64 
ffffffff80000ec8:	55                   	push   %rbp
ffffffff80000ec9:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000ecc:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000ed0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000ed4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000ed8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_bg = 0xffffffff;
ffffffff80000edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000ee0:	c7 80 dc 02 00 00 ff 	movl   $0xffffffff,0x2dc(%rax)
ffffffff80000ee7:	ff ff ff 
}
ffffffff80000eea:	90                   	nop
ffffffff80000eeb:	c9                   	leave  
ffffffff80000eec:	c3                   	ret    

ffffffff80000eed <flanterm_fb_set_text_fg_default_bright>:

static void flanterm_fb_set_text_fg_default_bright(struct flanterm_context *_ctx) {
ffffffff80000eed:	f3 0f 1e fa          	endbr64 
ffffffff80000ef1:	55                   	push   %rbp
ffffffff80000ef2:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000ef5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000ef9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000efd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000f01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_fg = ctx->default_fg_bright;
ffffffff80000f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000f09:	8b 90 88 02 00 00    	mov    0x288(%rax),%edx
ffffffff80000f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000f13:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
}
ffffffff80000f19:	90                   	nop
ffffffff80000f1a:	c9                   	leave  
ffffffff80000f1b:	c3                   	ret    

ffffffff80000f1c <flanterm_fb_set_text_bg_default_bright>:

static void flanterm_fb_set_text_bg_default_bright(struct flanterm_context *_ctx) {
ffffffff80000f1c:	f3 0f 1e fa          	endbr64 
ffffffff80000f20:	55                   	push   %rbp
ffffffff80000f21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000f24:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000f28:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000f2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000f30:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    ctx->text_bg = ctx->default_bg_bright;
ffffffff80000f34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000f38:	8b 90 8c 02 00 00    	mov    0x28c(%rax),%edx
ffffffff80000f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000f42:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%rax)
}
ffffffff80000f48:	90                   	nop
ffffffff80000f49:	c9                   	leave  
ffffffff80000f4a:	c3                   	ret    

ffffffff80000f4b <draw_cursor>:

static void draw_cursor(struct flanterm_context *_ctx) {
ffffffff80000f4b:	f3 0f 1e fa          	endbr64 
ffffffff80000f4f:	55                   	push   %rbp
ffffffff80000f50:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000f53:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80000f57:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80000f5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000f5f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if (ctx->cursor_x >= _ctx->cols || ctx->cursor_y >= _ctx->rows) {
ffffffff80000f63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000f67:	48 8b 90 e0 02 00 00 	mov    0x2e0(%rax),%rdx
ffffffff80000f6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000f72:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000f79:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000f7c:	0f 83 3e 01 00 00    	jae    ffffffff800010c0 <draw_cursor+0x175>
ffffffff80000f82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000f86:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff80000f8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000f91:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80000f98:	48 39 c2             	cmp    %rax,%rdx
ffffffff80000f9b:	0f 83 1f 01 00 00    	jae    ffffffff800010c0 <draw_cursor+0x175>
        return;
    }

    size_t i = ctx->cursor_x + ctx->cursor_y * _ctx->cols;
ffffffff80000fa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000fa5:	48 8b 88 e0 02 00 00 	mov    0x2e0(%rax),%rcx
ffffffff80000fac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000fb0:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff80000fb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000fbb:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80000fc2:	48 0f af c2          	imul   %rdx,%rax
ffffffff80000fc6:	48 01 c8             	add    %rcx,%rax
ffffffff80000fc9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    struct flanterm_fb_char c;
    struct flanterm_fb_queue_item *q = ctx->map[i];
ffffffff80000fcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000fd1:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff80000fd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000fdc:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80000fe0:	48 01 d0             	add    %rdx,%rax
ffffffff80000fe3:	48 8b 00             	mov    (%rax),%rax
ffffffff80000fe6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    if (q != NULL) {
ffffffff80000fea:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80000fef:	74 14                	je     ffffffff80001005 <draw_cursor+0xba>
        c = q->c;
ffffffff80000ff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000ff5:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80000ff9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80000ffd:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80001000:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff80001003:	eb 2c                	jmp    ffffffff80001031 <draw_cursor+0xe6>
    } else {
        c = ctx->grid[i];
ffffffff80001005:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001009:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff80001010:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80001014:	48 89 d0             	mov    %rdx,%rax
ffffffff80001017:	48 01 c0             	add    %rax,%rax
ffffffff8000101a:	48 01 d0             	add    %rdx,%rax
ffffffff8000101d:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80001021:	48 01 c8             	add    %rcx,%rax
ffffffff80001024:	48 8b 10             	mov    (%rax),%rdx
ffffffff80001027:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8000102b:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff8000102e:	89 45 e0             	mov    %eax,-0x20(%rbp)
    }
    uint32_t tmp = c.fg;
ffffffff80001031:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80001034:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    c.fg = c.bg;
ffffffff80001037:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff8000103a:	89 45 dc             	mov    %eax,-0x24(%rbp)
    c.bg = tmp;
ffffffff8000103d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80001040:	89 45 e0             	mov    %eax,-0x20(%rbp)
    plot_char(_ctx, &c, ctx->cursor_x, ctx->cursor_y);
ffffffff80001043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001047:	48 8b 88 e8 02 00 00 	mov    0x2e8(%rax),%rcx
ffffffff8000104e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001052:	48 8b 90 e0 02 00 00 	mov    0x2e0(%rax),%rdx
ffffffff80001059:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
ffffffff8000105d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80001061:	48 89 c7             	mov    %rax,%rdi
ffffffff80001064:	e8 17 f1 ff ff       	call   ffffffff80000180 <plot_char>
    if (q != NULL) {
ffffffff80001069:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000106e:	74 51                	je     ffffffff800010c1 <draw_cursor+0x176>
        ctx->grid[i] = q->c;
ffffffff80001070:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001074:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000107b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000107f:	48 89 d0             	mov    %rdx,%rax
ffffffff80001082:	48 01 c0             	add    %rax,%rax
ffffffff80001085:	48 01 d0             	add    %rdx,%rax
ffffffff80001088:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000108c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff80001090:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001094:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff80001098:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff8000109b:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8000109e:	89 42 08             	mov    %eax,0x8(%rdx)
        ctx->map[i] = NULL;
ffffffff800010a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800010a5:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff800010ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800010b0:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff800010b4:	48 01 d0             	add    %rdx,%rax
ffffffff800010b7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff800010be:	eb 01                	jmp    ffffffff800010c1 <draw_cursor+0x176>
        return;
ffffffff800010c0:	90                   	nop
    }
}
ffffffff800010c1:	c9                   	leave  
ffffffff800010c2:	c3                   	ret    

ffffffff800010c3 <flanterm_fb_double_buffer_flush>:

static void flanterm_fb_double_buffer_flush(struct flanterm_context *_ctx) {
ffffffff800010c3:	f3 0f 1e fa          	endbr64 
ffffffff800010c7:	55                   	push   %rbp
ffffffff800010c8:	48 89 e5             	mov    %rsp,%rbp
ffffffff800010cb:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff800010cf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800010d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800010d7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    if (_ctx->cursor_enabled) {
ffffffff800010db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800010df:	0f b6 40 09          	movzbl 0x9(%rax),%eax
ffffffff800010e3:	84 c0                	test   %al,%al
ffffffff800010e5:	74 0c                	je     ffffffff800010f3 <flanterm_fb_double_buffer_flush+0x30>
        draw_cursor(_ctx);
ffffffff800010e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800010eb:	48 89 c7             	mov    %rax,%rdi
ffffffff800010ee:	e8 58 fe ff ff       	call   ffffffff80000f4b <draw_cursor>
    }

    for (size_t i = 0; i < ctx->queue_i; i++) {
ffffffff800010f3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff800010fa:	00 
ffffffff800010fb:	e9 d6 00 00 00       	jmp    ffffffff800011d6 <flanterm_fb_double_buffer_flush+0x113>
        struct flanterm_fb_queue_item *q = &ctx->queue[i];
ffffffff80001100:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001104:	48 8b 90 c0 02 00 00 	mov    0x2c0(%rax),%rdx
ffffffff8000110b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000110f:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff80001113:	48 01 d0             	add    %rdx,%rax
ffffffff80001116:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        size_t offset = q->y * _ctx->cols + q->x;
ffffffff8000111a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000111e:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80001122:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001126:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000112d:	48 0f af d0          	imul   %rax,%rdx
ffffffff80001131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001135:	48 8b 00             	mov    (%rax),%rax
ffffffff80001138:	48 01 d0             	add    %rdx,%rax
ffffffff8000113b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (ctx->map[offset] == NULL) {
ffffffff8000113f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001143:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff8000114a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000114e:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80001152:	48 01 d0             	add    %rdx,%rax
ffffffff80001155:	48 8b 00             	mov    (%rax),%rax
ffffffff80001158:	48 85 c0             	test   %rax,%rax
ffffffff8000115b:	74 73                	je     ffffffff800011d0 <flanterm_fb_double_buffer_flush+0x10d>
                plot_char_masked(_ctx, old, &q->c, q->x, q->y);
            } else {
                plot_char(_ctx, &q->c, q->x, q->y);
            }
        #else
            plot_char(_ctx, &q->c, q->x, q->y);
ffffffff8000115d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001161:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80001165:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001169:	48 8b 10             	mov    (%rax),%rdx
ffffffff8000116c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001170:	48 8d 70 10          	lea    0x10(%rax),%rsi
ffffffff80001174:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001178:	48 89 c7             	mov    %rax,%rdi
ffffffff8000117b:	e8 00 f0 ff ff       	call   ffffffff80000180 <plot_char>
        #endif
        ctx->grid[offset] = q->c;
ffffffff80001180:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001184:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000118b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8000118f:	48 89 d0             	mov    %rdx,%rax
ffffffff80001192:	48 01 c0             	add    %rax,%rax
ffffffff80001195:	48 01 d0             	add    %rdx,%rax
ffffffff80001198:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000119c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff800011a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800011a4:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff800011a8:	48 89 0a             	mov    %rcx,(%rdx)
ffffffff800011ab:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff800011ae:	89 42 08             	mov    %eax,0x8(%rdx)
        ctx->map[offset] = NULL;
ffffffff800011b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800011b5:	48 8b 90 d0 02 00 00 	mov    0x2d0(%rax),%rdx
ffffffff800011bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800011c0:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff800011c4:	48 01 d0             	add    %rdx,%rax
ffffffff800011c7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff800011ce:	eb 01                	jmp    ffffffff800011d1 <flanterm_fb_double_buffer_flush+0x10e>
            continue;
ffffffff800011d0:	90                   	nop
    for (size_t i = 0; i < ctx->queue_i; i++) {
ffffffff800011d1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff800011d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800011da:	48 8b 80 c8 02 00 00 	mov    0x2c8(%rax),%rax
ffffffff800011e1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff800011e5:	0f 82 15 ff ff ff    	jb     ffffffff80001100 <flanterm_fb_double_buffer_flush+0x3d>
    }

    if ((ctx->old_cursor_x != ctx->cursor_x || ctx->old_cursor_y != ctx->cursor_y) || _ctx->cursor_enabled == false) {
ffffffff800011eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800011ef:	48 8b 90 08 03 00 00 	mov    0x308(%rax),%rdx
ffffffff800011f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800011fa:	48 8b 80 e0 02 00 00 	mov    0x2e0(%rax),%rax
ffffffff80001201:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001204:	75 2e                	jne    ffffffff80001234 <flanterm_fb_double_buffer_flush+0x171>
ffffffff80001206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000120a:	48 8b 90 10 03 00 00 	mov    0x310(%rax),%rdx
ffffffff80001211:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001215:	48 8b 80 e8 02 00 00 	mov    0x2e8(%rax),%rax
ffffffff8000121c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000121f:	75 13                	jne    ffffffff80001234 <flanterm_fb_double_buffer_flush+0x171>
ffffffff80001221:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001225:	0f b6 40 09          	movzbl 0x9(%rax),%eax
ffffffff80001229:	83 f0 01             	xor    $0x1,%eax
ffffffff8000122c:	84 c0                	test   %al,%al
ffffffff8000122e:	0f 84 a1 00 00 00    	je     ffffffff800012d5 <flanterm_fb_double_buffer_flush+0x212>
        if (ctx->old_cursor_x < _ctx->cols && ctx->old_cursor_y < _ctx->rows) {
ffffffff80001234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001238:	48 8b 90 08 03 00 00 	mov    0x308(%rax),%rdx
ffffffff8000123f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001243:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000124a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000124d:	0f 83 82 00 00 00    	jae    ffffffff800012d5 <flanterm_fb_double_buffer_flush+0x212>
ffffffff80001253:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001257:	48 8b 90 10 03 00 00 	mov    0x310(%rax),%rdx
ffffffff8000125e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001262:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80001269:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000126c:	73 67                	jae    ffffffff800012d5 <flanterm_fb_double_buffer_flush+0x212>
            plot_char(_ctx, &ctx->grid[ctx->old_cursor_x + ctx->old_cursor_y * _ctx->cols], ctx->old_cursor_x, ctx->old_cursor_y);
ffffffff8000126e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001272:	48 8b 88 10 03 00 00 	mov    0x310(%rax),%rcx
ffffffff80001279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000127d:	48 8b 90 08 03 00 00 	mov    0x308(%rax),%rdx
ffffffff80001284:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001288:	48 8b b8 b8 02 00 00 	mov    0x2b8(%rax),%rdi
ffffffff8000128f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001293:	4c 8b 80 08 03 00 00 	mov    0x308(%rax),%r8
ffffffff8000129a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000129e:	48 8b b0 10 03 00 00 	mov    0x310(%rax),%rsi
ffffffff800012a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800012a9:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800012b0:	48 0f af c6          	imul   %rsi,%rax
ffffffff800012b4:	49 8d 34 00          	lea    (%r8,%rax,1),%rsi
ffffffff800012b8:	48 89 f0             	mov    %rsi,%rax
ffffffff800012bb:	48 01 c0             	add    %rax,%rax
ffffffff800012be:	48 01 f0             	add    %rsi,%rax
ffffffff800012c1:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800012c5:	48 8d 34 07          	lea    (%rdi,%rax,1),%rsi
ffffffff800012c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800012cd:	48 89 c7             	mov    %rax,%rdi
ffffffff800012d0:	e8 ab ee ff ff       	call   ffffffff80000180 <plot_char>
        }
    }

    ctx->old_cursor_x = ctx->cursor_x;
ffffffff800012d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800012d9:	48 8b 90 e0 02 00 00 	mov    0x2e0(%rax),%rdx
ffffffff800012e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800012e4:	48 89 90 08 03 00 00 	mov    %rdx,0x308(%rax)
    ctx->old_cursor_y = ctx->cursor_y;
ffffffff800012eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800012ef:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff800012f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800012fa:	48 89 90 10 03 00 00 	mov    %rdx,0x310(%rax)

    ctx->queue_i = 0;
ffffffff80001301:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001305:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
ffffffff8000130c:	00 00 00 00 
}
ffffffff80001310:	90                   	nop
ffffffff80001311:	c9                   	leave  
ffffffff80001312:	c3                   	ret    

ffffffff80001313 <flanterm_fb_raw_putchar>:

static void flanterm_fb_raw_putchar(struct flanterm_context *_ctx, uint8_t c) {
ffffffff80001313:	f3 0f 1e fa          	endbr64 
ffffffff80001317:	55                   	push   %rbp
ffffffff80001318:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000131b:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000131f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80001323:	89 f0                	mov    %esi,%eax
ffffffff80001325:	88 45 d4             	mov    %al,-0x2c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001328:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000132c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if (ctx->cursor_x >= _ctx->cols && (ctx->cursor_y < _ctx->scroll_bottom_margin - 1 || _ctx->scroll_enabled)) {
ffffffff80001330:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001334:	48 8b 90 e0 02 00 00 	mov    0x2e0(%rax),%rdx
ffffffff8000133b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000133f:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80001346:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001349:	0f 82 c8 00 00 00    	jb     ffffffff80001417 <flanterm_fb_raw_putchar+0x104>
ffffffff8000134f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001353:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff8000135a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000135e:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80001362:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80001366:	48 39 c2             	cmp    %rax,%rdx
ffffffff80001369:	72 10                	jb     ffffffff8000137b <flanterm_fb_raw_putchar+0x68>
ffffffff8000136b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000136f:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
ffffffff80001373:	84 c0                	test   %al,%al
ffffffff80001375:	0f 84 9c 00 00 00    	je     ffffffff80001417 <flanterm_fb_raw_putchar+0x104>
        ctx->cursor_x = 0;
ffffffff8000137b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000137f:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
ffffffff80001386:	00 00 00 00 
        ctx->cursor_y++;
ffffffff8000138a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000138e:	48 8b 80 e8 02 00 00 	mov    0x2e8(%rax),%rax
ffffffff80001395:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80001399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000139d:	48 89 90 e8 02 00 00 	mov    %rdx,0x2e8(%rax)
        if (ctx->cursor_y == _ctx->scroll_bottom_margin) {
ffffffff800013a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800013a8:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff800013af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800013b3:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff800013b7:	48 39 c2             	cmp    %rax,%rdx
ffffffff800013ba:	75 26                	jne    ffffffff800013e2 <flanterm_fb_raw_putchar+0xcf>
            ctx->cursor_y--;
ffffffff800013bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800013c0:	48 8b 80 e8 02 00 00 	mov    0x2e8(%rax),%rax
ffffffff800013c7:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff800013cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800013cf:	48 89 90 e8 02 00 00 	mov    %rdx,0x2e8(%rax)
            flanterm_fb_scroll(_ctx);
ffffffff800013d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800013da:	48 89 c7             	mov    %rax,%rdi
ffffffff800013dd:	e8 b3 f3 ff ff       	call   ffffffff80000795 <flanterm_fb_scroll>
        }
        if (ctx->cursor_y >= _ctx->cols) {
ffffffff800013e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800013e6:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff800013ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800013f1:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800013f8:	48 39 c2             	cmp    %rax,%rdx
ffffffff800013fb:	72 1a                	jb     ffffffff80001417 <flanterm_fb_raw_putchar+0x104>
            ctx->cursor_y = _ctx->cols - 1;
ffffffff800013fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001401:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80001408:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8000140c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001410:	48 89 90 e8 02 00 00 	mov    %rdx,0x2e8(%rax)
        }
    }

    struct flanterm_fb_char ch;
    ch.c  = c;
ffffffff80001417:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
ffffffff8000141b:	89 45 ec             	mov    %eax,-0x14(%rbp)
    ch.fg = ctx->text_fg;
ffffffff8000141e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001422:	8b 80 d8 02 00 00    	mov    0x2d8(%rax),%eax
ffffffff80001428:	89 45 f0             	mov    %eax,-0x10(%rbp)
    ch.bg = ctx->text_bg;
ffffffff8000142b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000142f:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff80001435:	89 45 f4             	mov    %eax,-0xc(%rbp)
    push_to_queue(_ctx, &ch, ctx->cursor_x++, ctx->cursor_y);
ffffffff80001438:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000143c:	48 8b 90 e8 02 00 00 	mov    0x2e8(%rax),%rdx
ffffffff80001443:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001447:	48 8b 80 e0 02 00 00 	mov    0x2e0(%rax),%rax
ffffffff8000144e:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff80001452:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80001456:	48 89 b1 e0 02 00 00 	mov    %rsi,0x2e0(%rcx)
ffffffff8000145d:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
ffffffff80001461:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80001465:	48 89 d1             	mov    %rdx,%rcx
ffffffff80001468:	48 89 c2             	mov    %rax,%rdx
ffffffff8000146b:	e8 4c f0 ff ff       	call   ffffffff800004bc <push_to_queue>
}
ffffffff80001470:	90                   	nop
ffffffff80001471:	c9                   	leave  
ffffffff80001472:	c3                   	ret    

ffffffff80001473 <flanterm_fb_full_refresh>:

static void flanterm_fb_full_refresh(struct flanterm_context *_ctx) {
ffffffff80001473:	f3 0f 1e fa          	endbr64 
ffffffff80001477:	55                   	push   %rbp
ffffffff80001478:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000147b:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8000147f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001483:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80001487:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    uint32_t default_bg = ctx->default_bg;
ffffffff8000148b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000148f:	8b 80 84 02 00 00    	mov    0x284(%rax),%eax
ffffffff80001495:	89 45 dc             	mov    %eax,-0x24(%rbp)

    for (size_t y = 0; y < ctx->height; y++) {
ffffffff80001498:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000149f:	00 
ffffffff800014a0:	e9 d4 00 00 00       	jmp    ffffffff80001579 <flanterm_fb_full_refresh+0x106>
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff800014a5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff800014ac:	00 
ffffffff800014ad:	e9 ad 00 00 00       	jmp    ffffffff8000155f <flanterm_fb_full_refresh+0xec>
            if (ctx->canvas != NULL) {
ffffffff800014b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800014b6:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff800014bd:	48 85 c0             	test   %rax,%rax
ffffffff800014c0:	74 63                	je     ffffffff80001525 <flanterm_fb_full_refresh+0xb2>
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = ctx->canvas[y * ctx->width + x];
ffffffff800014c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800014c6:	48 8b 90 98 02 00 00 	mov    0x298(%rax),%rdx
ffffffff800014cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800014d1:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax
ffffffff800014d8:	48 0f af 45 f8       	imul   -0x8(%rbp),%rax
ffffffff800014dd:	48 89 c1             	mov    %rax,%rcx
ffffffff800014e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800014e4:	48 01 c8             	add    %rcx,%rax
ffffffff800014e7:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800014eb:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff800014ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800014f3:	48 8b 90 f0 01 00 00 	mov    0x1f0(%rax),%rdx
ffffffff800014fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800014fe:	48 8b 80 f8 01 00 00 	mov    0x1f8(%rax),%rax
ffffffff80001505:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80001509:	48 0f af 45 f8       	imul   -0x8(%rbp),%rax
ffffffff8000150e:	48 89 c6             	mov    %rax,%rsi
ffffffff80001511:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001515:	48 01 f0             	add    %rsi,%rax
ffffffff80001518:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000151c:	48 01 c2             	add    %rax,%rdx
ffffffff8000151f:	8b 01                	mov    (%rcx),%eax
ffffffff80001521:	89 02                	mov    %eax,(%rdx)
ffffffff80001523:	eb 35                	jmp    ffffffff8000155a <flanterm_fb_full_refresh+0xe7>
            } else {
                ctx->framebuffer[y * (ctx->pitch / sizeof(uint32_t)) + x] = default_bg;
ffffffff80001525:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001529:	48 8b 90 f0 01 00 00 	mov    0x1f0(%rax),%rdx
ffffffff80001530:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001534:	48 8b 80 f8 01 00 00 	mov    0x1f8(%rax),%rax
ffffffff8000153b:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8000153f:	48 0f af 45 f8       	imul   -0x8(%rbp),%rax
ffffffff80001544:	48 89 c1             	mov    %rax,%rcx
ffffffff80001547:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000154b:	48 01 c8             	add    %rcx,%rax
ffffffff8000154e:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80001552:	48 01 c2             	add    %rax,%rdx
ffffffff80001555:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff80001558:	89 02                	mov    %eax,(%rdx)
        for (size_t x = 0; x < ctx->width; x++) {
ffffffff8000155a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff8000155f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001563:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax
ffffffff8000156a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8000156e:	0f 82 3e ff ff ff    	jb     ffffffff800014b2 <flanterm_fb_full_refresh+0x3f>
    for (size_t y = 0; y < ctx->height; y++) {
ffffffff80001574:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80001579:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000157d:	48 8b 80 08 02 00 00 	mov    0x208(%rax),%rax
ffffffff80001584:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80001588:	0f 82 17 ff ff ff    	jb     ffffffff800014a5 <flanterm_fb_full_refresh+0x32>
            }
        }
    }

    for (size_t i = 0; i < (size_t)_ctx->rows * _ctx->cols; i++) {
ffffffff8000158e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80001595:	00 
ffffffff80001596:	eb 6f                	jmp    ffffffff80001607 <flanterm_fb_full_refresh+0x194>
        size_t x = i % _ctx->cols;
ffffffff80001598:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000159c:	48 8b 88 e8 00 00 00 	mov    0xe8(%rax),%rcx
ffffffff800015a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800015a7:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800015ac:	48 f7 f1             	div    %rcx
ffffffff800015af:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
        size_t y = i / _ctx->cols;
ffffffff800015b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800015b7:	48 8b b8 e8 00 00 00 	mov    0xe8(%rax),%rdi
ffffffff800015be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800015c2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800015c7:	48 f7 f7             	div    %rdi
ffffffff800015ca:	48 89 45 c8          	mov    %rax,-0x38(%rbp)

        plot_char(_ctx, &ctx->grid[i], x, y);
ffffffff800015ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800015d2:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff800015d9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff800015dd:	48 89 d0             	mov    %rdx,%rax
ffffffff800015e0:	48 01 c0             	add    %rax,%rax
ffffffff800015e3:	48 01 d0             	add    %rdx,%rax
ffffffff800015e6:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800015ea:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
ffffffff800015ee:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800015f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff800015f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800015fa:	48 89 c7             	mov    %rax,%rdi
ffffffff800015fd:	e8 7e eb ff ff       	call   ffffffff80000180 <plot_char>
    for (size_t i = 0; i < (size_t)_ctx->rows * _ctx->cols; i++) {
ffffffff80001602:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80001607:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000160b:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff80001612:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80001616:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000161d:	48 0f af c2          	imul   %rdx,%rax
ffffffff80001621:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80001625:	0f 82 6d ff ff ff    	jb     ffffffff80001598 <flanterm_fb_full_refresh+0x125>
    }

    if (_ctx->cursor_enabled) {
ffffffff8000162b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000162f:	0f b6 40 09          	movzbl 0x9(%rax),%eax
ffffffff80001633:	84 c0                	test   %al,%al
ffffffff80001635:	74 0c                	je     ffffffff80001643 <flanterm_fb_full_refresh+0x1d0>
        draw_cursor(_ctx);
ffffffff80001637:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000163b:	48 89 c7             	mov    %rax,%rdi
ffffffff8000163e:	e8 08 f9 ff ff       	call   ffffffff80000f4b <draw_cursor>
    }
}
ffffffff80001643:	90                   	nop
ffffffff80001644:	c9                   	leave  
ffffffff80001645:	c3                   	ret    

ffffffff80001646 <flanterm_fb_deinit>:

static void flanterm_fb_deinit(struct flanterm_context *_ctx, void (*_free)(void *, size_t)) {
ffffffff80001646:	f3 0f 1e fa          	endbr64 
ffffffff8000164a:	55                   	push   %rbp
ffffffff8000164b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000164e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80001652:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80001656:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000165a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000165e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if (_free == NULL) {
ffffffff80001662:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80001667:	75 26                	jne    ffffffff8000168f <flanterm_fb_deinit+0x49>
#ifndef FLANTERM_FB_DISABLE_BUMP_ALLOC
        if (bump_allocated_instance == true) {
ffffffff80001669:	0f b6 05 e0 56 0e 00 	movzbl 0xe56e0(%rip),%eax        # ffffffff800e6d50 <bump_allocated_instance>
ffffffff80001670:	84 c0                	test   %al,%al
ffffffff80001672:	0f 84 07 01 00 00    	je     ffffffff8000177f <flanterm_fb_deinit+0x139>
            bump_alloc_ptr = 0;
ffffffff80001678:	48 c7 05 c5 56 0e 00 	movq   $0x0,0xe56c5(%rip)        # ffffffff800e6d48 <bump_alloc_ptr>
ffffffff8000167f:	00 00 00 00 
            bump_allocated_instance = false;
ffffffff80001683:	c6 05 c6 56 0e 00 00 	movb   $0x0,0xe56c6(%rip)        # ffffffff800e6d50 <bump_allocated_instance>
        }
#endif
        return;
ffffffff8000168a:	e9 f0 00 00 00       	jmp    ffffffff8000177f <flanterm_fb_deinit+0x139>
    }

    _free(ctx->font_bits, ctx->font_bits_size);
ffffffff8000168f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001693:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
ffffffff8000169a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000169e:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff800016a5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800016a9:	48 89 d6             	mov    %rdx,%rsi
ffffffff800016ac:	48 89 c7             	mov    %rax,%rdi
ffffffff800016af:	ff d1                	call   *%rcx
    _free(ctx->font_bool, ctx->font_bool_size);
ffffffff800016b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800016b5:	48 8b 90 30 02 00 00 	mov    0x230(%rax),%rdx
ffffffff800016bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800016c0:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
ffffffff800016c7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800016cb:	48 89 d6             	mov    %rdx,%rsi
ffffffff800016ce:	48 89 c7             	mov    %rax,%rdi
ffffffff800016d1:	ff d1                	call   *%rcx
    _free(ctx->grid, ctx->grid_size);
ffffffff800016d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800016d7:	48 8b 90 a0 02 00 00 	mov    0x2a0(%rax),%rdx
ffffffff800016de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800016e2:	48 8b 80 b8 02 00 00 	mov    0x2b8(%rax),%rax
ffffffff800016e9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800016ed:	48 89 d6             	mov    %rdx,%rsi
ffffffff800016f0:	48 89 c7             	mov    %rax,%rdi
ffffffff800016f3:	ff d1                	call   *%rcx
    _free(ctx->queue, ctx->queue_size);
ffffffff800016f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800016f9:	48 8b 90 a8 02 00 00 	mov    0x2a8(%rax),%rdx
ffffffff80001700:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001704:	48 8b 80 c0 02 00 00 	mov    0x2c0(%rax),%rax
ffffffff8000170b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000170f:	48 89 d6             	mov    %rdx,%rsi
ffffffff80001712:	48 89 c7             	mov    %rax,%rdi
ffffffff80001715:	ff d1                	call   *%rcx
    _free(ctx->map, ctx->map_size);
ffffffff80001717:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000171b:	48 8b 90 b0 02 00 00 	mov    0x2b0(%rax),%rdx
ffffffff80001722:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001726:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff8000172d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001731:	48 89 d6             	mov    %rdx,%rsi
ffffffff80001734:	48 89 c7             	mov    %rax,%rdi
ffffffff80001737:	ff d1                	call   *%rcx

    if (ctx->canvas != NULL) {
ffffffff80001739:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000173d:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff80001744:	48 85 c0             	test   %rax,%rax
ffffffff80001747:	74 22                	je     ffffffff8000176b <flanterm_fb_deinit+0x125>
        _free(ctx->canvas, ctx->canvas_size);
ffffffff80001749:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000174d:	48 8b 90 90 02 00 00 	mov    0x290(%rax),%rdx
ffffffff80001754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001758:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff8000175f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001763:	48 89 d6             	mov    %rdx,%rsi
ffffffff80001766:	48 89 c7             	mov    %rax,%rdi
ffffffff80001769:	ff d1                	call   *%rcx
    }

    _free(ctx, sizeof(struct flanterm_fb_context));
ffffffff8000176b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000176f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80001773:	be 18 03 00 00       	mov    $0x318,%esi
ffffffff80001778:	48 89 c7             	mov    %rax,%rdi
ffffffff8000177b:	ff d2                	call   *%rdx
ffffffff8000177d:	eb 01                	jmp    ffffffff80001780 <flanterm_fb_deinit+0x13a>
        return;
ffffffff8000177f:	90                   	nop
}
ffffffff80001780:	c9                   	leave  
ffffffff80001781:	c3                   	ret    

ffffffff80001782 <flanterm_fb_init>:
    uint32_t *default_bg, uint32_t *default_fg,
    uint32_t *default_bg_bright, uint32_t *default_fg_bright,
    void *font, size_t font_width, size_t font_height, size_t font_spacing,
    size_t font_scale_x, size_t font_scale_y,
    size_t margin
) {
ffffffff80001782:	f3 0f 1e fa          	endbr64 
ffffffff80001786:	55                   	push   %rbp
ffffffff80001787:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000178a:	48 81 ec e0 04 00 00 	sub    $0x4e0,%rsp
ffffffff80001791:	48 89 bd 68 fb ff ff 	mov    %rdi,-0x498(%rbp)
ffffffff80001798:	48 89 b5 60 fb ff ff 	mov    %rsi,-0x4a0(%rbp)
ffffffff8000179f:	48 89 95 58 fb ff ff 	mov    %rdx,-0x4a8(%rbp)
ffffffff800017a6:	48 89 8d 50 fb ff ff 	mov    %rcx,-0x4b0(%rbp)
ffffffff800017ad:	4c 89 85 48 fb ff ff 	mov    %r8,-0x4b8(%rbp)
ffffffff800017b4:	4c 89 8d 40 fb ff ff 	mov    %r9,-0x4c0(%rbp)
ffffffff800017bb:	44 8b 45 10          	mov    0x10(%rbp),%r8d
ffffffff800017bf:	8b 7d 18             	mov    0x18(%rbp),%edi
ffffffff800017c2:	8b 75 20             	mov    0x20(%rbp),%esi
ffffffff800017c5:	8b 4d 28             	mov    0x28(%rbp),%ecx
ffffffff800017c8:	8b 55 30             	mov    0x30(%rbp),%edx
ffffffff800017cb:	8b 45 38             	mov    0x38(%rbp),%eax
ffffffff800017ce:	44 88 85 3c fb ff ff 	mov    %r8b,-0x4c4(%rbp)
ffffffff800017d5:	40 88 bd 38 fb ff ff 	mov    %dil,-0x4c8(%rbp)
ffffffff800017dc:	40 88 b5 34 fb ff ff 	mov    %sil,-0x4cc(%rbp)
ffffffff800017e3:	88 8d 30 fb ff ff    	mov    %cl,-0x4d0(%rbp)
ffffffff800017e9:	88 95 2c fb ff ff    	mov    %dl,-0x4d4(%rbp)
ffffffff800017ef:	88 85 28 fb ff ff    	mov    %al,-0x4d8(%rbp)
    if (font_scale_x == 0 || font_scale_y == 0) {
ffffffff800017f5:	48 83 bd 98 00 00 00 	cmpq   $0x0,0x98(%rbp)
ffffffff800017fc:	00 
ffffffff800017fd:	74 0a                	je     ffffffff80001809 <flanterm_fb_init+0x87>
ffffffff800017ff:	48 83 bd a0 00 00 00 	cmpq   $0x0,0xa0(%rbp)
ffffffff80001806:	00 
ffffffff80001807:	75 76                	jne    ffffffff8000187f <flanterm_fb_init+0xfd>
        font_scale_x = 1;
ffffffff80001809:	48 c7 85 98 00 00 00 	movq   $0x1,0x98(%rbp)
ffffffff80001810:	01 00 00 00 
        font_scale_y = 1;
ffffffff80001814:	48 c7 85 a0 00 00 00 	movq   $0x1,0xa0(%rbp)
ffffffff8000181b:	01 00 00 00 
        if (width >= (1920 + 1920 / 3) && height >= (1080 + 1080 / 3)) {
ffffffff8000181f:	48 81 bd 50 fb ff ff 	cmpq   $0x9ff,-0x4b0(%rbp)
ffffffff80001826:	ff 09 00 00 
ffffffff8000182a:	76 23                	jbe    ffffffff8000184f <flanterm_fb_init+0xcd>
ffffffff8000182c:	48 81 bd 48 fb ff ff 	cmpq   $0x59f,-0x4b8(%rbp)
ffffffff80001833:	9f 05 00 00 
ffffffff80001837:	76 16                	jbe    ffffffff8000184f <flanterm_fb_init+0xcd>
            font_scale_x = 2;
ffffffff80001839:	48 c7 85 98 00 00 00 	movq   $0x2,0x98(%rbp)
ffffffff80001840:	02 00 00 00 
            font_scale_y = 2;
ffffffff80001844:	48 c7 85 a0 00 00 00 	movq   $0x2,0xa0(%rbp)
ffffffff8000184b:	02 00 00 00 
        }
        if (width >= (3840 + 3840 / 3) && height >= (2160 + 2160 / 3)) {
ffffffff8000184f:	48 81 bd 50 fb ff ff 	cmpq   $0x13ff,-0x4b0(%rbp)
ffffffff80001856:	ff 13 00 00 
ffffffff8000185a:	76 23                	jbe    ffffffff8000187f <flanterm_fb_init+0xfd>
ffffffff8000185c:	48 81 bd 48 fb ff ff 	cmpq   $0xb3f,-0x4b8(%rbp)
ffffffff80001863:	3f 0b 00 00 
ffffffff80001867:	76 16                	jbe    ffffffff8000187f <flanterm_fb_init+0xfd>
            font_scale_x = 4;
ffffffff80001869:	48 c7 85 98 00 00 00 	movq   $0x4,0x98(%rbp)
ffffffff80001870:	04 00 00 00 
            font_scale_y = 4;
ffffffff80001874:	48 c7 85 a0 00 00 00 	movq   $0x4,0xa0(%rbp)
ffffffff8000187b:	04 00 00 00 
        }
    }

    if (red_mask_size < 8 || red_mask_size != green_mask_size || red_mask_size != blue_mask_size) {
ffffffff8000187f:	80 bd 3c fb ff ff 07 	cmpb   $0x7,-0x4c4(%rbp)
ffffffff80001886:	76 1e                	jbe    ffffffff800018a6 <flanterm_fb_init+0x124>
ffffffff80001888:	0f b6 85 3c fb ff ff 	movzbl -0x4c4(%rbp),%eax
ffffffff8000188f:	3a 85 34 fb ff ff    	cmp    -0x4cc(%rbp),%al
ffffffff80001895:	75 0f                	jne    ffffffff800018a6 <flanterm_fb_init+0x124>
ffffffff80001897:	0f b6 85 3c fb ff ff 	movzbl -0x4c4(%rbp),%eax
ffffffff8000189e:	3a 85 2c fb ff ff    	cmp    -0x4d4(%rbp),%al
ffffffff800018a4:	74 0a                	je     ffffffff800018b0 <flanterm_fb_init+0x12e>
        return NULL;
ffffffff800018a6:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800018ab:	e9 4b 22 00 00       	jmp    ffffffff80003afb <flanterm_fb_init+0x2379>
    }

    if (_malloc == NULL) {
ffffffff800018b0:	48 83 bd 68 fb ff ff 	cmpq   $0x0,-0x498(%rbp)
ffffffff800018b7:	00 
ffffffff800018b8:	0f 85 eb 00 00 00    	jne    ffffffff800019a9 <flanterm_fb_init+0x227>
#ifndef FLANTERM_FB_DISABLE_BUMP_ALLOC
        if (bump_allocated_instance == true) {
ffffffff800018be:	0f b6 05 8b 54 0e 00 	movzbl 0xe548b(%rip),%eax        # ffffffff800e6d50 <bump_allocated_instance>
ffffffff800018c5:	84 c0                	test   %al,%al
ffffffff800018c7:	74 0a                	je     ffffffff800018d3 <flanterm_fb_init+0x151>
            return NULL;
ffffffff800018c9:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800018ce:	e9 28 22 00 00       	jmp    ffffffff80003afb <flanterm_fb_init+0x2379>
        }
        _malloc = bump_alloc;
ffffffff800018d3:	48 8d 05 26 e7 ff ff 	lea    -0x18da(%rip),%rax        # ffffffff80000000 <bump_alloc>
ffffffff800018da:	48 89 85 68 fb ff ff 	mov    %rax,-0x498(%rbp)
        // Limit terminal size if needed
        if (width > FLANTERM_FB_WIDTH_LIMIT || height > FLANTERM_FB_HEIGHT_LIMIT) {
ffffffff800018e1:	48 81 bd 50 fb ff ff 	cmpq   $0x780,-0x4b0(%rbp)
ffffffff800018e8:	80 07 00 00 
ffffffff800018ec:	77 11                	ja     ffffffff800018ff <flanterm_fb_init+0x17d>
ffffffff800018ee:	48 81 bd 48 fb ff ff 	cmpq   $0x4b0,-0x4b8(%rbp)
ffffffff800018f5:	b0 04 00 00 
ffffffff800018f9:	0f 86 a2 00 00 00    	jbe    ffffffff800019a1 <flanterm_fb_init+0x21f>
            size_t width_limit = width > FLANTERM_FB_WIDTH_LIMIT ? FLANTERM_FB_WIDTH_LIMIT : width;
ffffffff800018ff:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
ffffffff80001906:	ba 80 07 00 00       	mov    $0x780,%edx
ffffffff8000190b:	48 39 d0             	cmp    %rdx,%rax
ffffffff8000190e:	48 0f 47 c2          	cmova  %rdx,%rax
ffffffff80001912:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            size_t height_limit = height > FLANTERM_FB_HEIGHT_LIMIT ? FLANTERM_FB_HEIGHT_LIMIT : height;
ffffffff80001916:	48 8b 85 48 fb ff ff 	mov    -0x4b8(%rbp),%rax
ffffffff8000191d:	ba b0 04 00 00       	mov    $0x4b0,%edx
ffffffff80001922:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001925:	48 0f 47 c2          	cmova  %rdx,%rax
ffffffff80001929:	48 89 45 b0          	mov    %rax,-0x50(%rbp)

            framebuffer = (uint32_t *)((uintptr_t)framebuffer + ((((height / 2) - (height_limit / 2)) * pitch) + (((width / 2) - (width_limit / 2)) * 4)));
ffffffff8000192d:	48 8b 85 48 fb ff ff 	mov    -0x4b8(%rbp),%rax
ffffffff80001934:	48 d1 e8             	shr    %rax
ffffffff80001937:	48 89 c2             	mov    %rax,%rdx
ffffffff8000193a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000193e:	48 d1 e8             	shr    %rax
ffffffff80001941:	48 89 c1             	mov    %rax,%rcx
ffffffff80001944:	48 89 d0             	mov    %rdx,%rax
ffffffff80001947:	48 29 c8             	sub    %rcx,%rax
ffffffff8000194a:	48 0f af 85 40 fb ff 	imul   -0x4c0(%rbp),%rax
ffffffff80001951:	ff 
ffffffff80001952:	48 89 c1             	mov    %rax,%rcx
ffffffff80001955:	48 8b 85 50 fb ff ff 	mov    -0x4b0(%rbp),%rax
ffffffff8000195c:	48 d1 e8             	shr    %rax
ffffffff8000195f:	48 89 c2             	mov    %rax,%rdx
ffffffff80001962:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80001966:	48 d1 e8             	shr    %rax
ffffffff80001969:	48 89 c6             	mov    %rax,%rsi
ffffffff8000196c:	48 89 d0             	mov    %rdx,%rax
ffffffff8000196f:	48 29 f0             	sub    %rsi,%rax
ffffffff80001972:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80001976:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff8000197a:	48 8b 85 58 fb ff ff 	mov    -0x4a8(%rbp),%rax
ffffffff80001981:	48 01 d0             	add    %rdx,%rax
ffffffff80001984:	48 89 85 58 fb ff ff 	mov    %rax,-0x4a8(%rbp)

            width = width_limit;
ffffffff8000198b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000198f:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
            height = height_limit;
ffffffff80001996:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000199a:	48 89 85 48 fb ff ff 	mov    %rax,-0x4b8(%rbp)
        }

        // Force disable canvas
        canvas = NULL;
ffffffff800019a1:	48 c7 45 40 00 00 00 	movq   $0x0,0x40(%rbp)
ffffffff800019a8:	00 
#else
        return NULL;
#endif
    }

    struct flanterm_fb_context *ctx = NULL;
ffffffff800019a9:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
ffffffff800019b0:	00 
    ctx = _malloc(sizeof(struct flanterm_fb_context));
ffffffff800019b1:	48 8b 85 68 fb ff ff 	mov    -0x498(%rbp),%rax
ffffffff800019b8:	bf 18 03 00 00       	mov    $0x318,%edi
ffffffff800019bd:	ff d0                	call   *%rax
ffffffff800019bf:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    if (ctx == NULL) {
ffffffff800019c3:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff800019c8:	0f 84 7f 1f 00 00    	je     ffffffff8000394d <flanterm_fb_init+0x21cb>
        goto fail;
    }

    struct flanterm_context *_ctx = (void *)ctx;
ffffffff800019ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800019d2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    memset(ctx, 0, sizeof(struct flanterm_fb_context));
ffffffff800019d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800019da:	ba 18 03 00 00       	mov    $0x318,%edx
ffffffff800019df:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff800019e4:	48 89 c7             	mov    %rax,%rdi
ffffffff800019e7:	e8 3a 69 00 00       	call   ffffffff80008326 <memset>

    ctx->red_mask_size = red_mask_size;
ffffffff800019ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800019f0:	0f b6 95 3c fb ff ff 	movzbl -0x4c4(%rbp),%edx
ffffffff800019f7:	88 90 18 02 00 00    	mov    %dl,0x218(%rax)
    ctx->red_mask_shift = red_mask_shift + (red_mask_size - 8);
ffffffff800019fd:	0f b6 95 3c fb ff ff 	movzbl -0x4c4(%rbp),%edx
ffffffff80001a04:	0f b6 85 38 fb ff ff 	movzbl -0x4c8(%rbp),%eax
ffffffff80001a0b:	01 d0                	add    %edx,%eax
ffffffff80001a0d:	8d 50 f8             	lea    -0x8(%rax),%edx
ffffffff80001a10:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001a14:	88 90 19 02 00 00    	mov    %dl,0x219(%rax)
    ctx->green_mask_size = green_mask_size;
ffffffff80001a1a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001a1e:	0f b6 95 34 fb ff ff 	movzbl -0x4cc(%rbp),%edx
ffffffff80001a25:	88 90 1a 02 00 00    	mov    %dl,0x21a(%rax)
    ctx->green_mask_shift = green_mask_shift + (green_mask_size - 8);
ffffffff80001a2b:	0f b6 95 34 fb ff ff 	movzbl -0x4cc(%rbp),%edx
ffffffff80001a32:	0f b6 85 30 fb ff ff 	movzbl -0x4d0(%rbp),%eax
ffffffff80001a39:	01 d0                	add    %edx,%eax
ffffffff80001a3b:	8d 50 f8             	lea    -0x8(%rax),%edx
ffffffff80001a3e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001a42:	88 90 1b 02 00 00    	mov    %dl,0x21b(%rax)
    ctx->blue_mask_size = blue_mask_size;
ffffffff80001a48:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001a4c:	0f b6 95 2c fb ff ff 	movzbl -0x4d4(%rbp),%edx
ffffffff80001a53:	88 90 1c 02 00 00    	mov    %dl,0x21c(%rax)
    ctx->blue_mask_shift = blue_mask_shift + (blue_mask_size - 8);
ffffffff80001a59:	0f b6 95 2c fb ff ff 	movzbl -0x4d4(%rbp),%edx
ffffffff80001a60:	0f b6 85 28 fb ff ff 	movzbl -0x4d8(%rbp),%eax
ffffffff80001a67:	01 d0                	add    %edx,%eax
ffffffff80001a69:	8d 50 f8             	lea    -0x8(%rax),%edx
ffffffff80001a6c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001a70:	88 90 1d 02 00 00    	mov    %dl,0x21d(%rax)

    if (ansi_colours != NULL) {
ffffffff80001a76:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
ffffffff80001a7b:	0f 84 f6 00 00 00    	je     ffffffff80001b77 <flanterm_fb_init+0x3f5>
        for (size_t i = 0; i < 8; i++) {
ffffffff80001a81:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80001a88:	00 
ffffffff80001a89:	e9 d9 00 00 00       	jmp    ffffffff80001b67 <flanterm_fb_init+0x3e5>
            ctx->ansi_colours[i] = convert_colour(_ctx, ansi_colours[i]);
ffffffff80001a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80001a92:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80001a99:	00 
ffffffff80001a9a:	48 8b 45 48          	mov    0x48(%rbp),%rax
ffffffff80001a9e:	48 01 d0             	add    %rdx,%rax
ffffffff80001aa1:	8b 00                	mov    (%rax),%eax
ffffffff80001aa3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80001aa7:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
ffffffff80001aab:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001ab1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff80001ab5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001abc:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
ffffffff80001ac2:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001ac5:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001aca:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001ad0:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
ffffffff80001ad6:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001ad9:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001ade:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001ae4:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
ffffffff80001aea:	0f b6 c0             	movzbl %al,%eax
ffffffff80001aed:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001af3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff80001afa:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001b01:	0f b6 c0             	movzbl %al,%eax
ffffffff80001b04:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
ffffffff80001b0a:	89 d6                	mov    %edx,%esi
ffffffff80001b0c:	89 c1                	mov    %eax,%ecx
ffffffff80001b0e:	d3 e6                	shl    %cl,%esi
ffffffff80001b10:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff80001b17:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001b1e:	0f b6 c0             	movzbl %al,%eax
ffffffff80001b21:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
ffffffff80001b27:	89 c1                	mov    %eax,%ecx
ffffffff80001b29:	d3 e2                	shl    %cl,%edx
ffffffff80001b2b:	89 d0                	mov    %edx,%eax
ffffffff80001b2d:	09 c6                	or     %eax,%esi
ffffffff80001b2f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff80001b36:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001b3d:	0f b6 c0             	movzbl %al,%eax
ffffffff80001b40:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
ffffffff80001b46:	89 c1                	mov    %eax,%ecx
ffffffff80001b48:	d3 e2                	shl    %cl,%edx
ffffffff80001b4a:	89 d0                	mov    %edx,%eax
ffffffff80001b4c:	09 c6                	or     %eax,%esi
ffffffff80001b4e:	89 f1                	mov    %esi,%ecx
            ctx->ansi_colours[i] = convert_colour(_ctx, ansi_colours[i]);
ffffffff80001b50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001b54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80001b58:	48 81 c2 90 00 00 00 	add    $0x90,%rdx
ffffffff80001b5f:	89 0c 90             	mov    %ecx,(%rax,%rdx,4)
        for (size_t i = 0; i < 8; i++) {
ffffffff80001b62:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80001b67:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
ffffffff80001b6c:	0f 86 1c ff ff ff    	jbe    ffffffff80001a8e <flanterm_fb_init+0x30c>
ffffffff80001b72:	e9 08 06 00 00       	jmp    ffffffff8000217f <flanterm_fb_init+0x9fd>
ffffffff80001b77:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80001b7b:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
ffffffff80001b82:	c7 85 3c fe ff ff 00 	movl   $0x0,-0x1c4(%rbp)
ffffffff80001b89:	00 00 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001b8c:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
ffffffff80001b93:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001b9a:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
ffffffff80001ba0:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001ba3:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001ba8:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001bae:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
ffffffff80001bb4:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001bb7:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001bbc:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001bc2:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
ffffffff80001bc8:	0f b6 c0             	movzbl %al,%eax
ffffffff80001bcb:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001bd1:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
ffffffff80001bd8:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001bdf:	0f b6 c0             	movzbl %al,%eax
ffffffff80001be2:	8b 95 2c fe ff ff    	mov    -0x1d4(%rbp),%edx
ffffffff80001be8:	89 d6                	mov    %edx,%esi
ffffffff80001bea:	89 c1                	mov    %eax,%ecx
ffffffff80001bec:	d3 e6                	shl    %cl,%esi
ffffffff80001bee:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
ffffffff80001bf5:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001bfc:	0f b6 c0             	movzbl %al,%eax
ffffffff80001bff:	8b 95 28 fe ff ff    	mov    -0x1d8(%rbp),%edx
ffffffff80001c05:	89 c1                	mov    %eax,%ecx
ffffffff80001c07:	d3 e2                	shl    %cl,%edx
ffffffff80001c09:	89 d0                	mov    %edx,%eax
ffffffff80001c0b:	09 c6                	or     %eax,%esi
ffffffff80001c0d:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
ffffffff80001c14:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001c1b:	0f b6 c0             	movzbl %al,%eax
ffffffff80001c1e:	8b 95 24 fe ff ff    	mov    -0x1dc(%rbp),%edx
ffffffff80001c24:	89 c1                	mov    %eax,%ecx
ffffffff80001c26:	d3 e2                	shl    %cl,%edx
ffffffff80001c28:	89 d0                	mov    %edx,%eax
ffffffff80001c2a:	09 c6                	or     %eax,%esi
ffffffff80001c2c:	89 f2                	mov    %esi,%edx
        }
    } else {
        ctx->ansi_colours[0] = convert_colour(_ctx, 0x00000000); // black
ffffffff80001c2e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001c32:	89 90 40 02 00 00    	mov    %edx,0x240(%rax)
ffffffff80001c38:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80001c3c:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
ffffffff80001c43:	c7 85 64 fe ff ff 00 	movl   $0xaa0000,-0x19c(%rbp)
ffffffff80001c4a:	00 aa 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001c4d:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
ffffffff80001c54:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001c5b:	8b 85 64 fe ff ff    	mov    -0x19c(%rbp),%eax
ffffffff80001c61:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001c64:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001c69:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001c6f:	8b 85 64 fe ff ff    	mov    -0x19c(%rbp),%eax
ffffffff80001c75:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001c78:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001c7d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001c83:	8b 85 64 fe ff ff    	mov    -0x19c(%rbp),%eax
ffffffff80001c89:	0f b6 c0             	movzbl %al,%eax
ffffffff80001c8c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001c92:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
ffffffff80001c99:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001ca0:	0f b6 c0             	movzbl %al,%eax
ffffffff80001ca3:	8b 95 54 fe ff ff    	mov    -0x1ac(%rbp),%edx
ffffffff80001ca9:	89 d6                	mov    %edx,%esi
ffffffff80001cab:	89 c1                	mov    %eax,%ecx
ffffffff80001cad:	d3 e6                	shl    %cl,%esi
ffffffff80001caf:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
ffffffff80001cb6:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001cbd:	0f b6 c0             	movzbl %al,%eax
ffffffff80001cc0:	8b 95 50 fe ff ff    	mov    -0x1b0(%rbp),%edx
ffffffff80001cc6:	89 c1                	mov    %eax,%ecx
ffffffff80001cc8:	d3 e2                	shl    %cl,%edx
ffffffff80001cca:	89 d0                	mov    %edx,%eax
ffffffff80001ccc:	09 c6                	or     %eax,%esi
ffffffff80001cce:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
ffffffff80001cd5:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001cdc:	0f b6 c0             	movzbl %al,%eax
ffffffff80001cdf:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
ffffffff80001ce5:	89 c1                	mov    %eax,%ecx
ffffffff80001ce7:	d3 e2                	shl    %cl,%edx
ffffffff80001ce9:	89 d0                	mov    %edx,%eax
ffffffff80001ceb:	09 c6                	or     %eax,%esi
ffffffff80001ced:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[1] = convert_colour(_ctx, 0x00aa0000); // red
ffffffff80001cef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001cf3:	89 90 44 02 00 00    	mov    %edx,0x244(%rax)
ffffffff80001cf9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80001cfd:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
ffffffff80001d04:	c7 85 8c fe ff ff 00 	movl   $0xaa00,-0x174(%rbp)
ffffffff80001d0b:	aa 00 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001d0e:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
ffffffff80001d15:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001d1c:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
ffffffff80001d22:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001d25:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001d2a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001d30:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
ffffffff80001d36:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001d39:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001d3e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001d44:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
ffffffff80001d4a:	0f b6 c0             	movzbl %al,%eax
ffffffff80001d4d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001d53:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
ffffffff80001d5a:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001d61:	0f b6 c0             	movzbl %al,%eax
ffffffff80001d64:	8b 95 7c fe ff ff    	mov    -0x184(%rbp),%edx
ffffffff80001d6a:	89 d6                	mov    %edx,%esi
ffffffff80001d6c:	89 c1                	mov    %eax,%ecx
ffffffff80001d6e:	d3 e6                	shl    %cl,%esi
ffffffff80001d70:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
ffffffff80001d77:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001d7e:	0f b6 c0             	movzbl %al,%eax
ffffffff80001d81:	8b 95 78 fe ff ff    	mov    -0x188(%rbp),%edx
ffffffff80001d87:	89 c1                	mov    %eax,%ecx
ffffffff80001d89:	d3 e2                	shl    %cl,%edx
ffffffff80001d8b:	89 d0                	mov    %edx,%eax
ffffffff80001d8d:	09 c6                	or     %eax,%esi
ffffffff80001d8f:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
ffffffff80001d96:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001d9d:	0f b6 c0             	movzbl %al,%eax
ffffffff80001da0:	8b 95 74 fe ff ff    	mov    -0x18c(%rbp),%edx
ffffffff80001da6:	89 c1                	mov    %eax,%ecx
ffffffff80001da8:	d3 e2                	shl    %cl,%edx
ffffffff80001daa:	89 d0                	mov    %edx,%eax
ffffffff80001dac:	09 c6                	or     %eax,%esi
ffffffff80001dae:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[2] = convert_colour(_ctx, 0x0000aa00); // green
ffffffff80001db0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001db4:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
ffffffff80001dba:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80001dbe:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
ffffffff80001dc5:	c7 85 b4 fe ff ff 00 	movl   $0xaa5500,-0x14c(%rbp)
ffffffff80001dcc:	55 aa 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001dcf:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
ffffffff80001dd6:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001ddd:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
ffffffff80001de3:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001de6:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001deb:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001df1:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
ffffffff80001df7:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001dfa:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001dff:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001e05:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
ffffffff80001e0b:	0f b6 c0             	movzbl %al,%eax
ffffffff80001e0e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001e14:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
ffffffff80001e1b:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001e22:	0f b6 c0             	movzbl %al,%eax
ffffffff80001e25:	8b 95 a4 fe ff ff    	mov    -0x15c(%rbp),%edx
ffffffff80001e2b:	89 d6                	mov    %edx,%esi
ffffffff80001e2d:	89 c1                	mov    %eax,%ecx
ffffffff80001e2f:	d3 e6                	shl    %cl,%esi
ffffffff80001e31:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
ffffffff80001e38:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001e3f:	0f b6 c0             	movzbl %al,%eax
ffffffff80001e42:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
ffffffff80001e48:	89 c1                	mov    %eax,%ecx
ffffffff80001e4a:	d3 e2                	shl    %cl,%edx
ffffffff80001e4c:	89 d0                	mov    %edx,%eax
ffffffff80001e4e:	09 c6                	or     %eax,%esi
ffffffff80001e50:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
ffffffff80001e57:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001e5e:	0f b6 c0             	movzbl %al,%eax
ffffffff80001e61:	8b 95 9c fe ff ff    	mov    -0x164(%rbp),%edx
ffffffff80001e67:	89 c1                	mov    %eax,%ecx
ffffffff80001e69:	d3 e2                	shl    %cl,%edx
ffffffff80001e6b:	89 d0                	mov    %edx,%eax
ffffffff80001e6d:	09 c6                	or     %eax,%esi
ffffffff80001e6f:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[3] = convert_colour(_ctx, 0x00aa5500); // brown
ffffffff80001e71:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001e75:	89 90 4c 02 00 00    	mov    %edx,0x24c(%rax)
ffffffff80001e7b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80001e7f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
ffffffff80001e86:	c7 85 dc fe ff ff aa 	movl   $0xaa,-0x124(%rbp)
ffffffff80001e8d:	00 00 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001e90:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
ffffffff80001e97:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001e9e:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
ffffffff80001ea4:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001ea7:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001eac:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001eb2:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
ffffffff80001eb8:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001ebb:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001ec0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001ec6:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
ffffffff80001ecc:	0f b6 c0             	movzbl %al,%eax
ffffffff80001ecf:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001ed5:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
ffffffff80001edc:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001ee3:	0f b6 c0             	movzbl %al,%eax
ffffffff80001ee6:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
ffffffff80001eec:	89 d6                	mov    %edx,%esi
ffffffff80001eee:	89 c1                	mov    %eax,%ecx
ffffffff80001ef0:	d3 e6                	shl    %cl,%esi
ffffffff80001ef2:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
ffffffff80001ef9:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001f00:	0f b6 c0             	movzbl %al,%eax
ffffffff80001f03:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
ffffffff80001f09:	89 c1                	mov    %eax,%ecx
ffffffff80001f0b:	d3 e2                	shl    %cl,%edx
ffffffff80001f0d:	89 d0                	mov    %edx,%eax
ffffffff80001f0f:	09 c6                	or     %eax,%esi
ffffffff80001f11:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
ffffffff80001f18:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001f1f:	0f b6 c0             	movzbl %al,%eax
ffffffff80001f22:	8b 95 c4 fe ff ff    	mov    -0x13c(%rbp),%edx
ffffffff80001f28:	89 c1                	mov    %eax,%ecx
ffffffff80001f2a:	d3 e2                	shl    %cl,%edx
ffffffff80001f2c:	89 d0                	mov    %edx,%eax
ffffffff80001f2e:	09 c6                	or     %eax,%esi
ffffffff80001f30:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[4] = convert_colour(_ctx, 0x000000aa); // blue
ffffffff80001f32:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001f36:	89 90 50 02 00 00    	mov    %edx,0x250(%rax)
ffffffff80001f3c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80001f40:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
ffffffff80001f47:	c7 85 04 ff ff ff aa 	movl   $0xaa00aa,-0xfc(%rbp)
ffffffff80001f4e:	00 aa 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80001f51:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80001f58:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80001f5f:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
ffffffff80001f65:	c1 e8 10             	shr    $0x10,%eax
ffffffff80001f68:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001f6d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80001f73:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
ffffffff80001f79:	c1 e8 08             	shr    $0x8,%eax
ffffffff80001f7c:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80001f81:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80001f87:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
ffffffff80001f8d:	0f b6 c0             	movzbl %al,%eax
ffffffff80001f90:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80001f96:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
ffffffff80001f9d:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80001fa4:	0f b6 c0             	movzbl %al,%eax
ffffffff80001fa7:	8b 95 f4 fe ff ff    	mov    -0x10c(%rbp),%edx
ffffffff80001fad:	89 d6                	mov    %edx,%esi
ffffffff80001faf:	89 c1                	mov    %eax,%ecx
ffffffff80001fb1:	d3 e6                	shl    %cl,%esi
ffffffff80001fb3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
ffffffff80001fba:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80001fc1:	0f b6 c0             	movzbl %al,%eax
ffffffff80001fc4:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
ffffffff80001fca:	89 c1                	mov    %eax,%ecx
ffffffff80001fcc:	d3 e2                	shl    %cl,%edx
ffffffff80001fce:	89 d0                	mov    %edx,%eax
ffffffff80001fd0:	09 c6                	or     %eax,%esi
ffffffff80001fd2:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
ffffffff80001fd9:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80001fe0:	0f b6 c0             	movzbl %al,%eax
ffffffff80001fe3:	8b 95 ec fe ff ff    	mov    -0x114(%rbp),%edx
ffffffff80001fe9:	89 c1                	mov    %eax,%ecx
ffffffff80001feb:	d3 e2                	shl    %cl,%edx
ffffffff80001fed:	89 d0                	mov    %edx,%eax
ffffffff80001fef:	09 c6                	or     %eax,%esi
ffffffff80001ff1:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[5] = convert_colour(_ctx, 0x00aa00aa); // magenta
ffffffff80001ff3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80001ff7:	89 90 54 02 00 00    	mov    %edx,0x254(%rax)
ffffffff80001ffd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80002001:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
ffffffff80002008:	c7 85 2c ff ff ff aa 	movl   $0xaaaa,-0xd4(%rbp)
ffffffff8000200f:	aa 00 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002012:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
ffffffff80002019:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80002020:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
ffffffff80002026:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002029:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8000202e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002034:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
ffffffff8000203a:	c1 e8 08             	shr    $0x8,%eax
ffffffff8000203d:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002042:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002048:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
ffffffff8000204e:	0f b6 c0             	movzbl %al,%eax
ffffffff80002051:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002057:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
ffffffff8000205e:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002065:	0f b6 c0             	movzbl %al,%eax
ffffffff80002068:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
ffffffff8000206e:	89 d6                	mov    %edx,%esi
ffffffff80002070:	89 c1                	mov    %eax,%ecx
ffffffff80002072:	d3 e6                	shl    %cl,%esi
ffffffff80002074:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
ffffffff8000207b:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002082:	0f b6 c0             	movzbl %al,%eax
ffffffff80002085:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
ffffffff8000208b:	89 c1                	mov    %eax,%ecx
ffffffff8000208d:	d3 e2                	shl    %cl,%edx
ffffffff8000208f:	89 d0                	mov    %edx,%eax
ffffffff80002091:	09 c6                	or     %eax,%esi
ffffffff80002093:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
ffffffff8000209a:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff800020a1:	0f b6 c0             	movzbl %al,%eax
ffffffff800020a4:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
ffffffff800020aa:	89 c1                	mov    %eax,%ecx
ffffffff800020ac:	d3 e2                	shl    %cl,%edx
ffffffff800020ae:	89 d0                	mov    %edx,%eax
ffffffff800020b0:	09 c6                	or     %eax,%esi
ffffffff800020b2:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[6] = convert_colour(_ctx, 0x0000aaaa); // cyan
ffffffff800020b4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800020b8:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
ffffffff800020be:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800020c2:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
ffffffff800020c9:	c7 85 54 ff ff ff aa 	movl   $0xaaaaaa,-0xac(%rbp)
ffffffff800020d0:	aa aa 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800020d3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
ffffffff800020da:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800020e1:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
ffffffff800020e7:	c1 e8 10             	shr    $0x10,%eax
ffffffff800020ea:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800020ef:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800020f5:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
ffffffff800020fb:	c1 e8 08             	shr    $0x8,%eax
ffffffff800020fe:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002103:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002109:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
ffffffff8000210f:	0f b6 c0             	movzbl %al,%eax
ffffffff80002112:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002118:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff8000211f:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002126:	0f b6 c0             	movzbl %al,%eax
ffffffff80002129:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
ffffffff8000212f:	89 d6                	mov    %edx,%esi
ffffffff80002131:	89 c1                	mov    %eax,%ecx
ffffffff80002133:	d3 e6                	shl    %cl,%esi
ffffffff80002135:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff8000213c:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002143:	0f b6 c0             	movzbl %al,%eax
ffffffff80002146:	8b 95 40 ff ff ff    	mov    -0xc0(%rbp),%edx
ffffffff8000214c:	89 c1                	mov    %eax,%ecx
ffffffff8000214e:	d3 e2                	shl    %cl,%edx
ffffffff80002150:	89 d0                	mov    %edx,%eax
ffffffff80002152:	09 c6                	or     %eax,%esi
ffffffff80002154:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff8000215b:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002162:	0f b6 c0             	movzbl %al,%eax
ffffffff80002165:	8b 95 3c ff ff ff    	mov    -0xc4(%rbp),%edx
ffffffff8000216b:	89 c1                	mov    %eax,%ecx
ffffffff8000216d:	d3 e2                	shl    %cl,%edx
ffffffff8000216f:	89 d0                	mov    %edx,%eax
ffffffff80002171:	09 c6                	or     %eax,%esi
ffffffff80002173:	89 f2                	mov    %esi,%edx
        ctx->ansi_colours[7] = convert_colour(_ctx, 0x00aaaaaa); // grey
ffffffff80002175:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002179:	89 90 5c 02 00 00    	mov    %edx,0x25c(%rax)
    }

    if (ansi_bright_colours != NULL) {
ffffffff8000217f:	48 83 7d 50 00       	cmpq   $0x0,0x50(%rbp)
ffffffff80002184:	0f 84 fc 00 00 00    	je     ffffffff80002286 <flanterm_fb_init+0xb04>
        for (size_t i = 0; i < 8; i++) {
ffffffff8000218a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80002191:	00 
ffffffff80002192:	e9 df 00 00 00       	jmp    ffffffff80002276 <flanterm_fb_init+0xaf4>
            ctx->ansi_bright_colours[i] = convert_colour(_ctx, ansi_bright_colours[i]);
ffffffff80002197:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000219b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff800021a2:	00 
ffffffff800021a3:	48 8b 45 50          	mov    0x50(%rbp),%rax
ffffffff800021a7:	48 01 d0             	add    %rdx,%rax
ffffffff800021aa:	8b 00                	mov    (%rax),%eax
ffffffff800021ac:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff800021b0:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
ffffffff800021b7:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800021bd:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
ffffffff800021c4:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800021cb:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
ffffffff800021d1:	c1 e8 10             	shr    $0x10,%eax
ffffffff800021d4:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800021d9:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800021df:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
ffffffff800021e5:	c1 e8 08             	shr    $0x8,%eax
ffffffff800021e8:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800021ed:	89 85 00 fe ff ff    	mov    %eax,-0x200(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff800021f3:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
ffffffff800021f9:	0f b6 c0             	movzbl %al,%eax
ffffffff800021fc:	89 85 fc fd ff ff    	mov    %eax,-0x204(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002202:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
ffffffff80002209:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002210:	0f b6 c0             	movzbl %al,%eax
ffffffff80002213:	8b 95 04 fe ff ff    	mov    -0x1fc(%rbp),%edx
ffffffff80002219:	89 d6                	mov    %edx,%esi
ffffffff8000221b:	89 c1                	mov    %eax,%ecx
ffffffff8000221d:	d3 e6                	shl    %cl,%esi
ffffffff8000221f:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
ffffffff80002226:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff8000222d:	0f b6 c0             	movzbl %al,%eax
ffffffff80002230:	8b 95 00 fe ff ff    	mov    -0x200(%rbp),%edx
ffffffff80002236:	89 c1                	mov    %eax,%ecx
ffffffff80002238:	d3 e2                	shl    %cl,%edx
ffffffff8000223a:	89 d0                	mov    %edx,%eax
ffffffff8000223c:	09 c6                	or     %eax,%esi
ffffffff8000223e:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
ffffffff80002245:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff8000224c:	0f b6 c0             	movzbl %al,%eax
ffffffff8000224f:	8b 95 fc fd ff ff    	mov    -0x204(%rbp),%edx
ffffffff80002255:	89 c1                	mov    %eax,%ecx
ffffffff80002257:	d3 e2                	shl    %cl,%edx
ffffffff80002259:	89 d0                	mov    %edx,%eax
ffffffff8000225b:	09 c6                	or     %eax,%esi
ffffffff8000225d:	89 f1                	mov    %esi,%ecx
            ctx->ansi_bright_colours[i] = convert_colour(_ctx, ansi_bright_colours[i]);
ffffffff8000225f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002263:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80002267:	48 81 c2 98 00 00 00 	add    $0x98,%rdx
ffffffff8000226e:	89 0c 90             	mov    %ecx,(%rax,%rdx,4)
        for (size_t i = 0; i < 8; i++) {
ffffffff80002271:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80002276:	48 83 7d f0 07       	cmpq   $0x7,-0x10(%rbp)
ffffffff8000227b:	0f 86 16 ff ff ff    	jbe    ffffffff80002197 <flanterm_fb_init+0xa15>
ffffffff80002281:	e9 08 06 00 00       	jmp    ffffffff8000288e <flanterm_fb_init+0x110c>
ffffffff80002286:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000228a:	48 89 85 d8 fc ff ff 	mov    %rax,-0x328(%rbp)
ffffffff80002291:	c7 85 d4 fc ff ff 55 	movl   $0x555555,-0x32c(%rbp)
ffffffff80002298:	55 55 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000229b:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
ffffffff800022a2:	48 89 85 c8 fc ff ff 	mov    %rax,-0x338(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800022a9:	8b 85 d4 fc ff ff    	mov    -0x32c(%rbp),%eax
ffffffff800022af:	c1 e8 10             	shr    $0x10,%eax
ffffffff800022b2:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800022b7:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800022bd:	8b 85 d4 fc ff ff    	mov    -0x32c(%rbp),%eax
ffffffff800022c3:	c1 e8 08             	shr    $0x8,%eax
ffffffff800022c6:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800022cb:	89 85 c0 fc ff ff    	mov    %eax,-0x340(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff800022d1:	8b 85 d4 fc ff ff    	mov    -0x32c(%rbp),%eax
ffffffff800022d7:	0f b6 c0             	movzbl %al,%eax
ffffffff800022da:	89 85 bc fc ff ff    	mov    %eax,-0x344(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800022e0:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
ffffffff800022e7:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff800022ee:	0f b6 c0             	movzbl %al,%eax
ffffffff800022f1:	8b 95 c4 fc ff ff    	mov    -0x33c(%rbp),%edx
ffffffff800022f7:	89 d6                	mov    %edx,%esi
ffffffff800022f9:	89 c1                	mov    %eax,%ecx
ffffffff800022fb:	d3 e6                	shl    %cl,%esi
ffffffff800022fd:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
ffffffff80002304:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff8000230b:	0f b6 c0             	movzbl %al,%eax
ffffffff8000230e:	8b 95 c0 fc ff ff    	mov    -0x340(%rbp),%edx
ffffffff80002314:	89 c1                	mov    %eax,%ecx
ffffffff80002316:	d3 e2                	shl    %cl,%edx
ffffffff80002318:	89 d0                	mov    %edx,%eax
ffffffff8000231a:	09 c6                	or     %eax,%esi
ffffffff8000231c:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
ffffffff80002323:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff8000232a:	0f b6 c0             	movzbl %al,%eax
ffffffff8000232d:	8b 95 bc fc ff ff    	mov    -0x344(%rbp),%edx
ffffffff80002333:	89 c1                	mov    %eax,%ecx
ffffffff80002335:	d3 e2                	shl    %cl,%edx
ffffffff80002337:	89 d0                	mov    %edx,%eax
ffffffff80002339:	09 c6                	or     %eax,%esi
ffffffff8000233b:	89 f2                	mov    %esi,%edx
        }
    } else {
        ctx->ansi_bright_colours[0] = convert_colour(_ctx, 0x00555555); // black
ffffffff8000233d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002341:	89 90 60 02 00 00    	mov    %edx,0x260(%rax)
ffffffff80002347:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000234b:	48 89 85 00 fd ff ff 	mov    %rax,-0x300(%rbp)
ffffffff80002352:	c7 85 fc fc ff ff 55 	movl   $0xff5555,-0x304(%rbp)
ffffffff80002359:	55 ff 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000235c:	48 8b 85 00 fd ff ff 	mov    -0x300(%rbp),%rax
ffffffff80002363:	48 89 85 f0 fc ff ff 	mov    %rax,-0x310(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000236a:	8b 85 fc fc ff ff    	mov    -0x304(%rbp),%eax
ffffffff80002370:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002373:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002378:	89 85 ec fc ff ff    	mov    %eax,-0x314(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff8000237e:	8b 85 fc fc ff ff    	mov    -0x304(%rbp),%eax
ffffffff80002384:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002387:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8000238c:	89 85 e8 fc ff ff    	mov    %eax,-0x318(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002392:	8b 85 fc fc ff ff    	mov    -0x304(%rbp),%eax
ffffffff80002398:	0f b6 c0             	movzbl %al,%eax
ffffffff8000239b:	89 85 e4 fc ff ff    	mov    %eax,-0x31c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800023a1:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
ffffffff800023a8:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff800023af:	0f b6 c0             	movzbl %al,%eax
ffffffff800023b2:	8b 95 ec fc ff ff    	mov    -0x314(%rbp),%edx
ffffffff800023b8:	89 d6                	mov    %edx,%esi
ffffffff800023ba:	89 c1                	mov    %eax,%ecx
ffffffff800023bc:	d3 e6                	shl    %cl,%esi
ffffffff800023be:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
ffffffff800023c5:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff800023cc:	0f b6 c0             	movzbl %al,%eax
ffffffff800023cf:	8b 95 e8 fc ff ff    	mov    -0x318(%rbp),%edx
ffffffff800023d5:	89 c1                	mov    %eax,%ecx
ffffffff800023d7:	d3 e2                	shl    %cl,%edx
ffffffff800023d9:	89 d0                	mov    %edx,%eax
ffffffff800023db:	09 c6                	or     %eax,%esi
ffffffff800023dd:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
ffffffff800023e4:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff800023eb:	0f b6 c0             	movzbl %al,%eax
ffffffff800023ee:	8b 95 e4 fc ff ff    	mov    -0x31c(%rbp),%edx
ffffffff800023f4:	89 c1                	mov    %eax,%ecx
ffffffff800023f6:	d3 e2                	shl    %cl,%edx
ffffffff800023f8:	89 d0                	mov    %edx,%eax
ffffffff800023fa:	09 c6                	or     %eax,%esi
ffffffff800023fc:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[1] = convert_colour(_ctx, 0x00ff5555); // red
ffffffff800023fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002402:	89 90 64 02 00 00    	mov    %edx,0x264(%rax)
ffffffff80002408:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000240c:	48 89 85 28 fd ff ff 	mov    %rax,-0x2d8(%rbp)
ffffffff80002413:	c7 85 24 fd ff ff 55 	movl   $0x55ff55,-0x2dc(%rbp)
ffffffff8000241a:	ff 55 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000241d:	48 8b 85 28 fd ff ff 	mov    -0x2d8(%rbp),%rax
ffffffff80002424:	48 89 85 18 fd ff ff 	mov    %rax,-0x2e8(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000242b:	8b 85 24 fd ff ff    	mov    -0x2dc(%rbp),%eax
ffffffff80002431:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002434:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002439:	89 85 14 fd ff ff    	mov    %eax,-0x2ec(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff8000243f:	8b 85 24 fd ff ff    	mov    -0x2dc(%rbp),%eax
ffffffff80002445:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002448:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8000244d:	89 85 10 fd ff ff    	mov    %eax,-0x2f0(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002453:	8b 85 24 fd ff ff    	mov    -0x2dc(%rbp),%eax
ffffffff80002459:	0f b6 c0             	movzbl %al,%eax
ffffffff8000245c:	89 85 0c fd ff ff    	mov    %eax,-0x2f4(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002462:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
ffffffff80002469:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002470:	0f b6 c0             	movzbl %al,%eax
ffffffff80002473:	8b 95 14 fd ff ff    	mov    -0x2ec(%rbp),%edx
ffffffff80002479:	89 d6                	mov    %edx,%esi
ffffffff8000247b:	89 c1                	mov    %eax,%ecx
ffffffff8000247d:	d3 e6                	shl    %cl,%esi
ffffffff8000247f:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
ffffffff80002486:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff8000248d:	0f b6 c0             	movzbl %al,%eax
ffffffff80002490:	8b 95 10 fd ff ff    	mov    -0x2f0(%rbp),%edx
ffffffff80002496:	89 c1                	mov    %eax,%ecx
ffffffff80002498:	d3 e2                	shl    %cl,%edx
ffffffff8000249a:	89 d0                	mov    %edx,%eax
ffffffff8000249c:	09 c6                	or     %eax,%esi
ffffffff8000249e:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
ffffffff800024a5:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff800024ac:	0f b6 c0             	movzbl %al,%eax
ffffffff800024af:	8b 95 0c fd ff ff    	mov    -0x2f4(%rbp),%edx
ffffffff800024b5:	89 c1                	mov    %eax,%ecx
ffffffff800024b7:	d3 e2                	shl    %cl,%edx
ffffffff800024b9:	89 d0                	mov    %edx,%eax
ffffffff800024bb:	09 c6                	or     %eax,%esi
ffffffff800024bd:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[2] = convert_colour(_ctx, 0x0055ff55); // green
ffffffff800024bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800024c3:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
ffffffff800024c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800024cd:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)
ffffffff800024d4:	c7 85 4c fd ff ff 55 	movl   $0xffff55,-0x2b4(%rbp)
ffffffff800024db:	ff ff 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800024de:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
ffffffff800024e5:	48 89 85 40 fd ff ff 	mov    %rax,-0x2c0(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800024ec:	8b 85 4c fd ff ff    	mov    -0x2b4(%rbp),%eax
ffffffff800024f2:	c1 e8 10             	shr    $0x10,%eax
ffffffff800024f5:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800024fa:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002500:	8b 85 4c fd ff ff    	mov    -0x2b4(%rbp),%eax
ffffffff80002506:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002509:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8000250e:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002514:	8b 85 4c fd ff ff    	mov    -0x2b4(%rbp),%eax
ffffffff8000251a:	0f b6 c0             	movzbl %al,%eax
ffffffff8000251d:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002523:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
ffffffff8000252a:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002531:	0f b6 c0             	movzbl %al,%eax
ffffffff80002534:	8b 95 3c fd ff ff    	mov    -0x2c4(%rbp),%edx
ffffffff8000253a:	89 d6                	mov    %edx,%esi
ffffffff8000253c:	89 c1                	mov    %eax,%ecx
ffffffff8000253e:	d3 e6                	shl    %cl,%esi
ffffffff80002540:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
ffffffff80002547:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff8000254e:	0f b6 c0             	movzbl %al,%eax
ffffffff80002551:	8b 95 38 fd ff ff    	mov    -0x2c8(%rbp),%edx
ffffffff80002557:	89 c1                	mov    %eax,%ecx
ffffffff80002559:	d3 e2                	shl    %cl,%edx
ffffffff8000255b:	89 d0                	mov    %edx,%eax
ffffffff8000255d:	09 c6                	or     %eax,%esi
ffffffff8000255f:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
ffffffff80002566:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff8000256d:	0f b6 c0             	movzbl %al,%eax
ffffffff80002570:	8b 95 34 fd ff ff    	mov    -0x2cc(%rbp),%edx
ffffffff80002576:	89 c1                	mov    %eax,%ecx
ffffffff80002578:	d3 e2                	shl    %cl,%edx
ffffffff8000257a:	89 d0                	mov    %edx,%eax
ffffffff8000257c:	09 c6                	or     %eax,%esi
ffffffff8000257e:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[3] = convert_colour(_ctx, 0x00ffff55); // brown
ffffffff80002580:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002584:	89 90 6c 02 00 00    	mov    %edx,0x26c(%rax)
ffffffff8000258a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000258e:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
ffffffff80002595:	c7 85 74 fd ff ff ff 	movl   $0x5555ff,-0x28c(%rbp)
ffffffff8000259c:	55 55 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000259f:	48 8b 85 78 fd ff ff 	mov    -0x288(%rbp),%rax
ffffffff800025a6:	48 89 85 68 fd ff ff 	mov    %rax,-0x298(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800025ad:	8b 85 74 fd ff ff    	mov    -0x28c(%rbp),%eax
ffffffff800025b3:	c1 e8 10             	shr    $0x10,%eax
ffffffff800025b6:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800025bb:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800025c1:	8b 85 74 fd ff ff    	mov    -0x28c(%rbp),%eax
ffffffff800025c7:	c1 e8 08             	shr    $0x8,%eax
ffffffff800025ca:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800025cf:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff800025d5:	8b 85 74 fd ff ff    	mov    -0x28c(%rbp),%eax
ffffffff800025db:	0f b6 c0             	movzbl %al,%eax
ffffffff800025de:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800025e4:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
ffffffff800025eb:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff800025f2:	0f b6 c0             	movzbl %al,%eax
ffffffff800025f5:	8b 95 64 fd ff ff    	mov    -0x29c(%rbp),%edx
ffffffff800025fb:	89 d6                	mov    %edx,%esi
ffffffff800025fd:	89 c1                	mov    %eax,%ecx
ffffffff800025ff:	d3 e6                	shl    %cl,%esi
ffffffff80002601:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
ffffffff80002608:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff8000260f:	0f b6 c0             	movzbl %al,%eax
ffffffff80002612:	8b 95 60 fd ff ff    	mov    -0x2a0(%rbp),%edx
ffffffff80002618:	89 c1                	mov    %eax,%ecx
ffffffff8000261a:	d3 e2                	shl    %cl,%edx
ffffffff8000261c:	89 d0                	mov    %edx,%eax
ffffffff8000261e:	09 c6                	or     %eax,%esi
ffffffff80002620:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
ffffffff80002627:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff8000262e:	0f b6 c0             	movzbl %al,%eax
ffffffff80002631:	8b 95 5c fd ff ff    	mov    -0x2a4(%rbp),%edx
ffffffff80002637:	89 c1                	mov    %eax,%ecx
ffffffff80002639:	d3 e2                	shl    %cl,%edx
ffffffff8000263b:	89 d0                	mov    %edx,%eax
ffffffff8000263d:	09 c6                	or     %eax,%esi
ffffffff8000263f:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[4] = convert_colour(_ctx, 0x005555ff); // blue
ffffffff80002641:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002645:	89 90 70 02 00 00    	mov    %edx,0x270(%rax)
ffffffff8000264b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000264f:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
ffffffff80002656:	c7 85 9c fd ff ff ff 	movl   $0xff55ff,-0x264(%rbp)
ffffffff8000265d:	55 ff 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002660:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
ffffffff80002667:	48 89 85 90 fd ff ff 	mov    %rax,-0x270(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000266e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
ffffffff80002674:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002677:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8000267c:	89 85 8c fd ff ff    	mov    %eax,-0x274(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002682:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
ffffffff80002688:	c1 e8 08             	shr    $0x8,%eax
ffffffff8000268b:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002690:	89 85 88 fd ff ff    	mov    %eax,-0x278(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002696:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
ffffffff8000269c:	0f b6 c0             	movzbl %al,%eax
ffffffff8000269f:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800026a5:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
ffffffff800026ac:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff800026b3:	0f b6 c0             	movzbl %al,%eax
ffffffff800026b6:	8b 95 8c fd ff ff    	mov    -0x274(%rbp),%edx
ffffffff800026bc:	89 d6                	mov    %edx,%esi
ffffffff800026be:	89 c1                	mov    %eax,%ecx
ffffffff800026c0:	d3 e6                	shl    %cl,%esi
ffffffff800026c2:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
ffffffff800026c9:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff800026d0:	0f b6 c0             	movzbl %al,%eax
ffffffff800026d3:	8b 95 88 fd ff ff    	mov    -0x278(%rbp),%edx
ffffffff800026d9:	89 c1                	mov    %eax,%ecx
ffffffff800026db:	d3 e2                	shl    %cl,%edx
ffffffff800026dd:	89 d0                	mov    %edx,%eax
ffffffff800026df:	09 c6                	or     %eax,%esi
ffffffff800026e1:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
ffffffff800026e8:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff800026ef:	0f b6 c0             	movzbl %al,%eax
ffffffff800026f2:	8b 95 84 fd ff ff    	mov    -0x27c(%rbp),%edx
ffffffff800026f8:	89 c1                	mov    %eax,%ecx
ffffffff800026fa:	d3 e2                	shl    %cl,%edx
ffffffff800026fc:	89 d0                	mov    %edx,%eax
ffffffff800026fe:	09 c6                	or     %eax,%esi
ffffffff80002700:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[5] = convert_colour(_ctx, 0x00ff55ff); // magenta
ffffffff80002702:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002706:	89 90 74 02 00 00    	mov    %edx,0x274(%rax)
ffffffff8000270c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80002710:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
ffffffff80002717:	c7 85 c4 fd ff ff ff 	movl   $0x55ffff,-0x23c(%rbp)
ffffffff8000271e:	ff 55 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002721:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
ffffffff80002728:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000272f:	8b 85 c4 fd ff ff    	mov    -0x23c(%rbp),%eax
ffffffff80002735:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002738:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff8000273d:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002743:	8b 85 c4 fd ff ff    	mov    -0x23c(%rbp),%eax
ffffffff80002749:	c1 e8 08             	shr    $0x8,%eax
ffffffff8000274c:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002751:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002757:	8b 85 c4 fd ff ff    	mov    -0x23c(%rbp),%eax
ffffffff8000275d:	0f b6 c0             	movzbl %al,%eax
ffffffff80002760:	89 85 ac fd ff ff    	mov    %eax,-0x254(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002766:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
ffffffff8000276d:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002774:	0f b6 c0             	movzbl %al,%eax
ffffffff80002777:	8b 95 b4 fd ff ff    	mov    -0x24c(%rbp),%edx
ffffffff8000277d:	89 d6                	mov    %edx,%esi
ffffffff8000277f:	89 c1                	mov    %eax,%ecx
ffffffff80002781:	d3 e6                	shl    %cl,%esi
ffffffff80002783:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
ffffffff8000278a:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002791:	0f b6 c0             	movzbl %al,%eax
ffffffff80002794:	8b 95 b0 fd ff ff    	mov    -0x250(%rbp),%edx
ffffffff8000279a:	89 c1                	mov    %eax,%ecx
ffffffff8000279c:	d3 e2                	shl    %cl,%edx
ffffffff8000279e:	89 d0                	mov    %edx,%eax
ffffffff800027a0:	09 c6                	or     %eax,%esi
ffffffff800027a2:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
ffffffff800027a9:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff800027b0:	0f b6 c0             	movzbl %al,%eax
ffffffff800027b3:	8b 95 ac fd ff ff    	mov    -0x254(%rbp),%edx
ffffffff800027b9:	89 c1                	mov    %eax,%ecx
ffffffff800027bb:	d3 e2                	shl    %cl,%edx
ffffffff800027bd:	89 d0                	mov    %edx,%eax
ffffffff800027bf:	09 c6                	or     %eax,%esi
ffffffff800027c1:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[6] = convert_colour(_ctx, 0x0055ffff); // cyan
ffffffff800027c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800027c7:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
ffffffff800027cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800027d1:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
ffffffff800027d8:	c7 85 ec fd ff ff ff 	movl   $0xffffff,-0x214(%rbp)
ffffffff800027df:	ff ff 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800027e2:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
ffffffff800027e9:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800027f0:	8b 85 ec fd ff ff    	mov    -0x214(%rbp),%eax
ffffffff800027f6:	c1 e8 10             	shr    $0x10,%eax
ffffffff800027f9:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800027fe:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002804:	8b 85 ec fd ff ff    	mov    -0x214(%rbp),%eax
ffffffff8000280a:	c1 e8 08             	shr    $0x8,%eax
ffffffff8000280d:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002812:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002818:	8b 85 ec fd ff ff    	mov    -0x214(%rbp),%eax
ffffffff8000281e:	0f b6 c0             	movzbl %al,%eax
ffffffff80002821:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002827:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
ffffffff8000282e:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002835:	0f b6 c0             	movzbl %al,%eax
ffffffff80002838:	8b 95 dc fd ff ff    	mov    -0x224(%rbp),%edx
ffffffff8000283e:	89 d6                	mov    %edx,%esi
ffffffff80002840:	89 c1                	mov    %eax,%ecx
ffffffff80002842:	d3 e6                	shl    %cl,%esi
ffffffff80002844:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
ffffffff8000284b:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002852:	0f b6 c0             	movzbl %al,%eax
ffffffff80002855:	8b 95 d8 fd ff ff    	mov    -0x228(%rbp),%edx
ffffffff8000285b:	89 c1                	mov    %eax,%ecx
ffffffff8000285d:	d3 e2                	shl    %cl,%edx
ffffffff8000285f:	89 d0                	mov    %edx,%eax
ffffffff80002861:	09 c6                	or     %eax,%esi
ffffffff80002863:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
ffffffff8000286a:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002871:	0f b6 c0             	movzbl %al,%eax
ffffffff80002874:	8b 95 d4 fd ff ff    	mov    -0x22c(%rbp),%edx
ffffffff8000287a:	89 c1                	mov    %eax,%ecx
ffffffff8000287c:	d3 e2                	shl    %cl,%edx
ffffffff8000287e:	89 d0                	mov    %edx,%eax
ffffffff80002880:	09 c6                	or     %eax,%esi
ffffffff80002882:	89 f2                	mov    %esi,%edx
        ctx->ansi_bright_colours[7] = convert_colour(_ctx, 0x00ffffff); // grey
ffffffff80002884:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002888:	89 90 7c 02 00 00    	mov    %edx,0x27c(%rax)
    }

    if (default_bg != NULL) {
ffffffff8000288e:	48 83 7d 58 00       	cmpq   $0x0,0x58(%rbp)
ffffffff80002893:	0f 84 c5 00 00 00    	je     ffffffff8000295e <flanterm_fb_init+0x11dc>
        ctx->default_bg = convert_colour(_ctx, *default_bg);
ffffffff80002899:	48 8b 45 58          	mov    0x58(%rbp),%rax
ffffffff8000289d:	8b 00                	mov    (%rax),%eax
ffffffff8000289f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff800028a3:	48 89 95 b0 fc ff ff 	mov    %rdx,-0x350(%rbp)
ffffffff800028aa:	89 85 ac fc ff ff    	mov    %eax,-0x354(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800028b0:	48 8b 85 b0 fc ff ff 	mov    -0x350(%rbp),%rax
ffffffff800028b7:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800028be:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
ffffffff800028c4:	c1 e8 10             	shr    $0x10,%eax
ffffffff800028c7:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800028cc:	89 85 9c fc ff ff    	mov    %eax,-0x364(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800028d2:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
ffffffff800028d8:	c1 e8 08             	shr    $0x8,%eax
ffffffff800028db:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800028e0:	89 85 98 fc ff ff    	mov    %eax,-0x368(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff800028e6:	8b 85 ac fc ff ff    	mov    -0x354(%rbp),%eax
ffffffff800028ec:	0f b6 c0             	movzbl %al,%eax
ffffffff800028ef:	89 85 94 fc ff ff    	mov    %eax,-0x36c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800028f5:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
ffffffff800028fc:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002903:	0f b6 c0             	movzbl %al,%eax
ffffffff80002906:	8b 95 9c fc ff ff    	mov    -0x364(%rbp),%edx
ffffffff8000290c:	89 d6                	mov    %edx,%esi
ffffffff8000290e:	89 c1                	mov    %eax,%ecx
ffffffff80002910:	d3 e6                	shl    %cl,%esi
ffffffff80002912:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
ffffffff80002919:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002920:	0f b6 c0             	movzbl %al,%eax
ffffffff80002923:	8b 95 98 fc ff ff    	mov    -0x368(%rbp),%edx
ffffffff80002929:	89 c1                	mov    %eax,%ecx
ffffffff8000292b:	d3 e2                	shl    %cl,%edx
ffffffff8000292d:	89 d0                	mov    %edx,%eax
ffffffff8000292f:	09 c6                	or     %eax,%esi
ffffffff80002931:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
ffffffff80002938:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff8000293f:	0f b6 c0             	movzbl %al,%eax
ffffffff80002942:	8b 95 94 fc ff ff    	mov    -0x36c(%rbp),%edx
ffffffff80002948:	89 c1                	mov    %eax,%ecx
ffffffff8000294a:	d3 e2                	shl    %cl,%edx
ffffffff8000294c:	89 d0                	mov    %edx,%eax
ffffffff8000294e:	09 c6                	or     %eax,%esi
ffffffff80002950:	89 f2                	mov    %esi,%edx
        ctx->default_bg = convert_colour(_ctx, *default_bg);
ffffffff80002952:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002956:	89 90 84 02 00 00    	mov    %edx,0x284(%rax)
ffffffff8000295c:	eb 0e                	jmp    ffffffff8000296c <flanterm_fb_init+0x11ea>
    } else {
        ctx->default_bg = 0x00000000; // background (black)
ffffffff8000295e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002962:	c7 80 84 02 00 00 00 	movl   $0x0,0x284(%rax)
ffffffff80002969:	00 00 00 
    }

    if (default_fg != NULL) {
ffffffff8000296c:	48 83 7d 60 00       	cmpq   $0x0,0x60(%rbp)
ffffffff80002971:	0f 84 c8 00 00 00    	je     ffffffff80002a3f <flanterm_fb_init+0x12bd>
        ctx->default_fg = convert_colour(_ctx, *default_fg);
ffffffff80002977:	48 8b 45 60          	mov    0x60(%rbp),%rax
ffffffff8000297b:	8b 00                	mov    (%rax),%eax
ffffffff8000297d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80002981:	48 89 95 88 fc ff ff 	mov    %rdx,-0x378(%rbp)
ffffffff80002988:	89 85 84 fc ff ff    	mov    %eax,-0x37c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff8000298e:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
ffffffff80002995:	48 89 85 78 fc ff ff 	mov    %rax,-0x388(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff8000299c:	8b 85 84 fc ff ff    	mov    -0x37c(%rbp),%eax
ffffffff800029a2:	c1 e8 10             	shr    $0x10,%eax
ffffffff800029a5:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800029aa:	89 85 74 fc ff ff    	mov    %eax,-0x38c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800029b0:	8b 85 84 fc ff ff    	mov    -0x37c(%rbp),%eax
ffffffff800029b6:	c1 e8 08             	shr    $0x8,%eax
ffffffff800029b9:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800029be:	89 85 70 fc ff ff    	mov    %eax,-0x390(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff800029c4:	8b 85 84 fc ff ff    	mov    -0x37c(%rbp),%eax
ffffffff800029ca:	0f b6 c0             	movzbl %al,%eax
ffffffff800029cd:	89 85 6c fc ff ff    	mov    %eax,-0x394(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800029d3:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
ffffffff800029da:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff800029e1:	0f b6 c0             	movzbl %al,%eax
ffffffff800029e4:	8b 95 74 fc ff ff    	mov    -0x38c(%rbp),%edx
ffffffff800029ea:	89 d6                	mov    %edx,%esi
ffffffff800029ec:	89 c1                	mov    %eax,%ecx
ffffffff800029ee:	d3 e6                	shl    %cl,%esi
ffffffff800029f0:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
ffffffff800029f7:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff800029fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80002a01:	8b 95 70 fc ff ff    	mov    -0x390(%rbp),%edx
ffffffff80002a07:	89 c1                	mov    %eax,%ecx
ffffffff80002a09:	d3 e2                	shl    %cl,%edx
ffffffff80002a0b:	89 d0                	mov    %edx,%eax
ffffffff80002a0d:	09 c6                	or     %eax,%esi
ffffffff80002a0f:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
ffffffff80002a16:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002a1d:	0f b6 c0             	movzbl %al,%eax
ffffffff80002a20:	8b 95 6c fc ff ff    	mov    -0x394(%rbp),%edx
ffffffff80002a26:	89 c1                	mov    %eax,%ecx
ffffffff80002a28:	d3 e2                	shl    %cl,%edx
ffffffff80002a2a:	89 d0                	mov    %edx,%eax
ffffffff80002a2c:	09 c6                	or     %eax,%esi
ffffffff80002a2e:	89 f2                	mov    %esi,%edx
        ctx->default_fg = convert_colour(_ctx, *default_fg);
ffffffff80002a30:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002a34:	89 90 80 02 00 00    	mov    %edx,0x280(%rax)
ffffffff80002a3a:	e9 c1 00 00 00       	jmp    ffffffff80002b00 <flanterm_fb_init+0x137e>
ffffffff80002a3f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80002a43:	48 89 85 60 fc ff ff 	mov    %rax,-0x3a0(%rbp)
ffffffff80002a4a:	c7 85 5c fc ff ff aa 	movl   $0xaaaaaa,-0x3a4(%rbp)
ffffffff80002a51:	aa aa 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002a54:	48 8b 85 60 fc ff ff 	mov    -0x3a0(%rbp),%rax
ffffffff80002a5b:	48 89 85 50 fc ff ff 	mov    %rax,-0x3b0(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80002a62:	8b 85 5c fc ff ff    	mov    -0x3a4(%rbp),%eax
ffffffff80002a68:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002a6b:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002a70:	89 85 4c fc ff ff    	mov    %eax,-0x3b4(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002a76:	8b 85 5c fc ff ff    	mov    -0x3a4(%rbp),%eax
ffffffff80002a7c:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002a7f:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002a84:	89 85 48 fc ff ff    	mov    %eax,-0x3b8(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002a8a:	8b 85 5c fc ff ff    	mov    -0x3a4(%rbp),%eax
ffffffff80002a90:	0f b6 c0             	movzbl %al,%eax
ffffffff80002a93:	89 85 44 fc ff ff    	mov    %eax,-0x3bc(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002a99:	48 8b 85 50 fc ff ff 	mov    -0x3b0(%rbp),%rax
ffffffff80002aa0:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002aa7:	0f b6 c0             	movzbl %al,%eax
ffffffff80002aaa:	8b 95 4c fc ff ff    	mov    -0x3b4(%rbp),%edx
ffffffff80002ab0:	89 d6                	mov    %edx,%esi
ffffffff80002ab2:	89 c1                	mov    %eax,%ecx
ffffffff80002ab4:	d3 e6                	shl    %cl,%esi
ffffffff80002ab6:	48 8b 85 50 fc ff ff 	mov    -0x3b0(%rbp),%rax
ffffffff80002abd:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002ac4:	0f b6 c0             	movzbl %al,%eax
ffffffff80002ac7:	8b 95 48 fc ff ff    	mov    -0x3b8(%rbp),%edx
ffffffff80002acd:	89 c1                	mov    %eax,%ecx
ffffffff80002acf:	d3 e2                	shl    %cl,%edx
ffffffff80002ad1:	89 d0                	mov    %edx,%eax
ffffffff80002ad3:	09 c6                	or     %eax,%esi
ffffffff80002ad5:	48 8b 85 50 fc ff ff 	mov    -0x3b0(%rbp),%rax
ffffffff80002adc:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002ae3:	0f b6 c0             	movzbl %al,%eax
ffffffff80002ae6:	8b 95 44 fc ff ff    	mov    -0x3bc(%rbp),%edx
ffffffff80002aec:	89 c1                	mov    %eax,%ecx
ffffffff80002aee:	d3 e2                	shl    %cl,%edx
ffffffff80002af0:	89 d0                	mov    %edx,%eax
ffffffff80002af2:	09 c6                	or     %eax,%esi
ffffffff80002af4:	89 f2                	mov    %esi,%edx
    } else {
        ctx->default_fg = convert_colour(_ctx, 0x00aaaaaa); // foreground (grey)
ffffffff80002af6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002afa:	89 90 80 02 00 00    	mov    %edx,0x280(%rax)
    }

    if (default_bg_bright != NULL) {
ffffffff80002b00:	48 83 7d 68 00       	cmpq   $0x0,0x68(%rbp)
ffffffff80002b05:	0f 84 c8 00 00 00    	je     ffffffff80002bd3 <flanterm_fb_init+0x1451>
        ctx->default_bg_bright = convert_colour(_ctx, *default_bg_bright);
ffffffff80002b0b:	48 8b 45 68          	mov    0x68(%rbp),%rax
ffffffff80002b0f:	8b 00                	mov    (%rax),%eax
ffffffff80002b11:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80002b15:	48 89 95 38 fc ff ff 	mov    %rdx,-0x3c8(%rbp)
ffffffff80002b1c:	89 85 34 fc ff ff    	mov    %eax,-0x3cc(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002b22:	48 8b 85 38 fc ff ff 	mov    -0x3c8(%rbp),%rax
ffffffff80002b29:	48 89 85 28 fc ff ff 	mov    %rax,-0x3d8(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80002b30:	8b 85 34 fc ff ff    	mov    -0x3cc(%rbp),%eax
ffffffff80002b36:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002b39:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002b3e:	89 85 24 fc ff ff    	mov    %eax,-0x3dc(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002b44:	8b 85 34 fc ff ff    	mov    -0x3cc(%rbp),%eax
ffffffff80002b4a:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002b4d:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002b52:	89 85 20 fc ff ff    	mov    %eax,-0x3e0(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002b58:	8b 85 34 fc ff ff    	mov    -0x3cc(%rbp),%eax
ffffffff80002b5e:	0f b6 c0             	movzbl %al,%eax
ffffffff80002b61:	89 85 1c fc ff ff    	mov    %eax,-0x3e4(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002b67:	48 8b 85 28 fc ff ff 	mov    -0x3d8(%rbp),%rax
ffffffff80002b6e:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002b75:	0f b6 c0             	movzbl %al,%eax
ffffffff80002b78:	8b 95 24 fc ff ff    	mov    -0x3dc(%rbp),%edx
ffffffff80002b7e:	89 d6                	mov    %edx,%esi
ffffffff80002b80:	89 c1                	mov    %eax,%ecx
ffffffff80002b82:	d3 e6                	shl    %cl,%esi
ffffffff80002b84:	48 8b 85 28 fc ff ff 	mov    -0x3d8(%rbp),%rax
ffffffff80002b8b:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002b92:	0f b6 c0             	movzbl %al,%eax
ffffffff80002b95:	8b 95 20 fc ff ff    	mov    -0x3e0(%rbp),%edx
ffffffff80002b9b:	89 c1                	mov    %eax,%ecx
ffffffff80002b9d:	d3 e2                	shl    %cl,%edx
ffffffff80002b9f:	89 d0                	mov    %edx,%eax
ffffffff80002ba1:	09 c6                	or     %eax,%esi
ffffffff80002ba3:	48 8b 85 28 fc ff ff 	mov    -0x3d8(%rbp),%rax
ffffffff80002baa:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002bb1:	0f b6 c0             	movzbl %al,%eax
ffffffff80002bb4:	8b 95 1c fc ff ff    	mov    -0x3e4(%rbp),%edx
ffffffff80002bba:	89 c1                	mov    %eax,%ecx
ffffffff80002bbc:	d3 e2                	shl    %cl,%edx
ffffffff80002bbe:	89 d0                	mov    %edx,%eax
ffffffff80002bc0:	09 c6                	or     %eax,%esi
ffffffff80002bc2:	89 f2                	mov    %esi,%edx
        ctx->default_bg_bright = convert_colour(_ctx, *default_bg_bright);
ffffffff80002bc4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002bc8:	89 90 8c 02 00 00    	mov    %edx,0x28c(%rax)
ffffffff80002bce:	e9 c1 00 00 00       	jmp    ffffffff80002c94 <flanterm_fb_init+0x1512>
ffffffff80002bd3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80002bd7:	48 89 85 10 fc ff ff 	mov    %rax,-0x3f0(%rbp)
ffffffff80002bde:	c7 85 0c fc ff ff 55 	movl   $0x555555,-0x3f4(%rbp)
ffffffff80002be5:	55 55 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002be8:	48 8b 85 10 fc ff ff 	mov    -0x3f0(%rbp),%rax
ffffffff80002bef:	48 89 85 00 fc ff ff 	mov    %rax,-0x400(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80002bf6:	8b 85 0c fc ff ff    	mov    -0x3f4(%rbp),%eax
ffffffff80002bfc:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002bff:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002c04:	89 85 fc fb ff ff    	mov    %eax,-0x404(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002c0a:	8b 85 0c fc ff ff    	mov    -0x3f4(%rbp),%eax
ffffffff80002c10:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002c13:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002c18:	89 85 f8 fb ff ff    	mov    %eax,-0x408(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002c1e:	8b 85 0c fc ff ff    	mov    -0x3f4(%rbp),%eax
ffffffff80002c24:	0f b6 c0             	movzbl %al,%eax
ffffffff80002c27:	89 85 f4 fb ff ff    	mov    %eax,-0x40c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002c2d:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
ffffffff80002c34:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002c3b:	0f b6 c0             	movzbl %al,%eax
ffffffff80002c3e:	8b 95 fc fb ff ff    	mov    -0x404(%rbp),%edx
ffffffff80002c44:	89 d6                	mov    %edx,%esi
ffffffff80002c46:	89 c1                	mov    %eax,%ecx
ffffffff80002c48:	d3 e6                	shl    %cl,%esi
ffffffff80002c4a:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
ffffffff80002c51:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002c58:	0f b6 c0             	movzbl %al,%eax
ffffffff80002c5b:	8b 95 f8 fb ff ff    	mov    -0x408(%rbp),%edx
ffffffff80002c61:	89 c1                	mov    %eax,%ecx
ffffffff80002c63:	d3 e2                	shl    %cl,%edx
ffffffff80002c65:	89 d0                	mov    %edx,%eax
ffffffff80002c67:	09 c6                	or     %eax,%esi
ffffffff80002c69:	48 8b 85 00 fc ff ff 	mov    -0x400(%rbp),%rax
ffffffff80002c70:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002c77:	0f b6 c0             	movzbl %al,%eax
ffffffff80002c7a:	8b 95 f4 fb ff ff    	mov    -0x40c(%rbp),%edx
ffffffff80002c80:	89 c1                	mov    %eax,%ecx
ffffffff80002c82:	d3 e2                	shl    %cl,%edx
ffffffff80002c84:	89 d0                	mov    %edx,%eax
ffffffff80002c86:	09 c6                	or     %eax,%esi
ffffffff80002c88:	89 f2                	mov    %esi,%edx
    } else {
        ctx->default_bg_bright = convert_colour(_ctx, 0x00555555); // background (black)
ffffffff80002c8a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002c8e:	89 90 8c 02 00 00    	mov    %edx,0x28c(%rax)
    }

    if (default_fg_bright != NULL) {
ffffffff80002c94:	48 83 7d 70 00       	cmpq   $0x0,0x70(%rbp)
ffffffff80002c99:	0f 84 c8 00 00 00    	je     ffffffff80002d67 <flanterm_fb_init+0x15e5>
        ctx->default_fg_bright = convert_colour(_ctx, *default_fg_bright);
ffffffff80002c9f:	48 8b 45 70          	mov    0x70(%rbp),%rax
ffffffff80002ca3:	8b 00                	mov    (%rax),%eax
ffffffff80002ca5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80002ca9:	48 89 95 e8 fb ff ff 	mov    %rdx,-0x418(%rbp)
ffffffff80002cb0:	89 85 e4 fb ff ff    	mov    %eax,-0x41c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002cb6:	48 8b 85 e8 fb ff ff 	mov    -0x418(%rbp),%rax
ffffffff80002cbd:	48 89 85 d8 fb ff ff 	mov    %rax,-0x428(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80002cc4:	8b 85 e4 fb ff ff    	mov    -0x41c(%rbp),%eax
ffffffff80002cca:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002ccd:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002cd2:	89 85 d4 fb ff ff    	mov    %eax,-0x42c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002cd8:	8b 85 e4 fb ff ff    	mov    -0x41c(%rbp),%eax
ffffffff80002cde:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002ce1:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002ce6:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002cec:	8b 85 e4 fb ff ff    	mov    -0x41c(%rbp),%eax
ffffffff80002cf2:	0f b6 c0             	movzbl %al,%eax
ffffffff80002cf5:	89 85 cc fb ff ff    	mov    %eax,-0x434(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002cfb:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
ffffffff80002d02:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002d09:	0f b6 c0             	movzbl %al,%eax
ffffffff80002d0c:	8b 95 d4 fb ff ff    	mov    -0x42c(%rbp),%edx
ffffffff80002d12:	89 d6                	mov    %edx,%esi
ffffffff80002d14:	89 c1                	mov    %eax,%ecx
ffffffff80002d16:	d3 e6                	shl    %cl,%esi
ffffffff80002d18:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
ffffffff80002d1f:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002d26:	0f b6 c0             	movzbl %al,%eax
ffffffff80002d29:	8b 95 d0 fb ff ff    	mov    -0x430(%rbp),%edx
ffffffff80002d2f:	89 c1                	mov    %eax,%ecx
ffffffff80002d31:	d3 e2                	shl    %cl,%edx
ffffffff80002d33:	89 d0                	mov    %edx,%eax
ffffffff80002d35:	09 c6                	or     %eax,%esi
ffffffff80002d37:	48 8b 85 d8 fb ff ff 	mov    -0x428(%rbp),%rax
ffffffff80002d3e:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002d45:	0f b6 c0             	movzbl %al,%eax
ffffffff80002d48:	8b 95 cc fb ff ff    	mov    -0x434(%rbp),%edx
ffffffff80002d4e:	89 c1                	mov    %eax,%ecx
ffffffff80002d50:	d3 e2                	shl    %cl,%edx
ffffffff80002d52:	89 d0                	mov    %edx,%eax
ffffffff80002d54:	09 c6                	or     %eax,%esi
ffffffff80002d56:	89 f2                	mov    %esi,%edx
        ctx->default_fg_bright = convert_colour(_ctx, *default_fg_bright);
ffffffff80002d58:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002d5c:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
ffffffff80002d62:	e9 c1 00 00 00       	jmp    ffffffff80002e28 <flanterm_fb_init+0x16a6>
ffffffff80002d67:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80002d6b:	48 89 85 c0 fb ff ff 	mov    %rax,-0x440(%rbp)
ffffffff80002d72:	c7 85 bc fb ff ff ff 	movl   $0xffffff,-0x444(%rbp)
ffffffff80002d79:	ff ff 00 
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff80002d7c:	48 8b 85 c0 fb ff ff 	mov    -0x440(%rbp),%rax
ffffffff80002d83:	48 89 85 b0 fb ff ff 	mov    %rax,-0x450(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff80002d8a:	8b 85 bc fb ff ff    	mov    -0x444(%rbp),%eax
ffffffff80002d90:	c1 e8 10             	shr    $0x10,%eax
ffffffff80002d93:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002d98:	89 85 ac fb ff ff    	mov    %eax,-0x454(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff80002d9e:	8b 85 bc fb ff ff    	mov    -0x444(%rbp),%eax
ffffffff80002da4:	c1 e8 08             	shr    $0x8,%eax
ffffffff80002da7:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80002dac:	89 85 a8 fb ff ff    	mov    %eax,-0x458(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff80002db2:	8b 85 bc fb ff ff    	mov    -0x444(%rbp),%eax
ffffffff80002db8:	0f b6 c0             	movzbl %al,%eax
ffffffff80002dbb:	89 85 a4 fb ff ff    	mov    %eax,-0x45c(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff80002dc1:	48 8b 85 b0 fb ff ff 	mov    -0x450(%rbp),%rax
ffffffff80002dc8:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff80002dcf:	0f b6 c0             	movzbl %al,%eax
ffffffff80002dd2:	8b 95 ac fb ff ff    	mov    -0x454(%rbp),%edx
ffffffff80002dd8:	89 d6                	mov    %edx,%esi
ffffffff80002dda:	89 c1                	mov    %eax,%ecx
ffffffff80002ddc:	d3 e6                	shl    %cl,%esi
ffffffff80002dde:	48 8b 85 b0 fb ff ff 	mov    -0x450(%rbp),%rax
ffffffff80002de5:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff80002dec:	0f b6 c0             	movzbl %al,%eax
ffffffff80002def:	8b 95 a8 fb ff ff    	mov    -0x458(%rbp),%edx
ffffffff80002df5:	89 c1                	mov    %eax,%ecx
ffffffff80002df7:	d3 e2                	shl    %cl,%edx
ffffffff80002df9:	89 d0                	mov    %edx,%eax
ffffffff80002dfb:	09 c6                	or     %eax,%esi
ffffffff80002dfd:	48 8b 85 b0 fb ff ff 	mov    -0x450(%rbp),%rax
ffffffff80002e04:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff80002e0b:	0f b6 c0             	movzbl %al,%eax
ffffffff80002e0e:	8b 95 a4 fb ff ff    	mov    -0x45c(%rbp),%edx
ffffffff80002e14:	89 c1                	mov    %eax,%ecx
ffffffff80002e16:	d3 e2                	shl    %cl,%edx
ffffffff80002e18:	89 d0                	mov    %edx,%eax
ffffffff80002e1a:	09 c6                	or     %eax,%esi
ffffffff80002e1c:	89 f2                	mov    %esi,%edx
    } else {
        ctx->default_fg_bright = convert_colour(_ctx, 0x00ffffff); // foreground (grey)
ffffffff80002e1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e22:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
    }

    ctx->text_fg = ctx->default_fg;
ffffffff80002e28:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e2c:	8b 90 80 02 00 00    	mov    0x280(%rax),%edx
ffffffff80002e32:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e36:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
    ctx->text_bg = 0xffffffff;
ffffffff80002e3c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e40:	c7 80 dc 02 00 00 ff 	movl   $0xffffffff,0x2dc(%rax)
ffffffff80002e47:	ff ff ff 

    ctx->framebuffer = (void *)framebuffer;
ffffffff80002e4a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e4e:	48 8b 95 58 fb ff ff 	mov    -0x4a8(%rbp),%rdx
ffffffff80002e55:	48 89 90 f0 01 00 00 	mov    %rdx,0x1f0(%rax)
    ctx->width = width;
ffffffff80002e5c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e60:	48 8b 95 50 fb ff ff 	mov    -0x4b0(%rbp),%rdx
ffffffff80002e67:	48 89 90 00 02 00 00 	mov    %rdx,0x200(%rax)
    ctx->height = height;
ffffffff80002e6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e72:	48 8b 95 48 fb ff ff 	mov    -0x4b8(%rbp),%rdx
ffffffff80002e79:	48 89 90 08 02 00 00 	mov    %rdx,0x208(%rax)
    ctx->pitch = pitch;
ffffffff80002e80:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002e84:	48 8b 95 40 fb ff ff 	mov    -0x4c0(%rbp),%rdx
ffffffff80002e8b:	48 89 90 f8 01 00 00 	mov    %rdx,0x1f8(%rax)

#define FONT_BYTES ((font_width * font_height * FLANTERM_FB_FONT_GLYPHS) / 8)

    if (font != NULL) {
ffffffff80002e92:	48 83 7d 78 00       	cmpq   $0x0,0x78(%rbp)
ffffffff80002e97:	0f 84 a9 00 00 00    	je     ffffffff80002f46 <flanterm_fb_init+0x17c4>
        ctx->font_width = font_width;
ffffffff80002e9d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002ea1:	48 8b 95 80 00 00 00 	mov    0x80(%rbp),%rdx
ffffffff80002ea8:	48 89 90 b0 01 00 00 	mov    %rdx,0x1b0(%rax)
        ctx->font_height = font_height;
ffffffff80002eaf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002eb3:	48 8b 95 88 00 00 00 	mov    0x88(%rbp),%rdx
ffffffff80002eba:	48 89 90 b8 01 00 00 	mov    %rdx,0x1b8(%rax)
        ctx->font_bits_size = FONT_BYTES;
ffffffff80002ec1:	48 8b 85 80 00 00 00 	mov    0x80(%rbp),%rax
ffffffff80002ec8:	48 0f af 85 88 00 00 	imul   0x88(%rbp),%rax
ffffffff80002ecf:	00 
ffffffff80002ed0:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff80002ed4:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80002ed8:	48 89 c2             	mov    %rax,%rdx
ffffffff80002edb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002edf:	48 89 90 20 02 00 00 	mov    %rdx,0x220(%rax)
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff80002ee6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002eea:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
ffffffff80002ef1:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff80002ef8:	48 89 c7             	mov    %rax,%rdi
ffffffff80002efb:	ff d2                	call   *%rdx
ffffffff80002efd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80002f01:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        if (ctx->font_bits == NULL) {
ffffffff80002f08:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002f0c:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff80002f13:	48 85 c0             	test   %rax,%rax
ffffffff80002f16:	0f 84 34 0a 00 00    	je     ffffffff80003950 <flanterm_fb_init+0x21ce>
            goto fail;
        }
        memcpy(ctx->font_bits, font, ctx->font_bits_size);
ffffffff80002f1c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002f20:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
ffffffff80002f27:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002f2b:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff80002f32:	48 8b 4d 78          	mov    0x78(%rbp),%rcx
ffffffff80002f36:	48 89 ce             	mov    %rcx,%rsi
ffffffff80002f39:	48 89 c7             	mov    %rax,%rdi
ffffffff80002f3c:	e8 83 53 00 00       	call   ffffffff800082c4 <memcpy>
ffffffff80002f41:	e9 c8 00 00 00       	jmp    ffffffff8000300e <flanterm_fb_init+0x188c>
    } else {
        ctx->font_width = font_width = 8;
ffffffff80002f46:	48 c7 85 80 00 00 00 	movq   $0x8,0x80(%rbp)
ffffffff80002f4d:	08 00 00 00 
ffffffff80002f51:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002f55:	48 8b 95 80 00 00 00 	mov    0x80(%rbp),%rdx
ffffffff80002f5c:	48 89 90 b0 01 00 00 	mov    %rdx,0x1b0(%rax)
        ctx->font_height = font_height = 16;
ffffffff80002f63:	48 c7 85 88 00 00 00 	movq   $0x10,0x88(%rbp)
ffffffff80002f6a:	10 00 00 00 
ffffffff80002f6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002f72:	48 8b 95 88 00 00 00 	mov    0x88(%rbp),%rdx
ffffffff80002f79:	48 89 90 b8 01 00 00 	mov    %rdx,0x1b8(%rax)
        ctx->font_bits_size = FONT_BYTES;
ffffffff80002f80:	48 8b 85 80 00 00 00 	mov    0x80(%rbp),%rax
ffffffff80002f87:	48 0f af 85 88 00 00 	imul   0x88(%rbp),%rax
ffffffff80002f8e:	00 
ffffffff80002f8f:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff80002f93:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80002f97:	48 89 c2             	mov    %rax,%rdx
ffffffff80002f9a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002f9e:	48 89 90 20 02 00 00 	mov    %rdx,0x220(%rax)
        font_spacing = 1;
ffffffff80002fa5:	48 c7 85 90 00 00 00 	movq   $0x1,0x90(%rbp)
ffffffff80002fac:	01 00 00 00 
        ctx->font_bits = _malloc(ctx->font_bits_size);
ffffffff80002fb0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002fb4:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
ffffffff80002fbb:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff80002fc2:	48 89 c7             	mov    %rax,%rdi
ffffffff80002fc5:	ff d2                	call   *%rdx
ffffffff80002fc7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80002fcb:	48 89 82 28 02 00 00 	mov    %rax,0x228(%rdx)
        if (ctx->font_bits == NULL) {
ffffffff80002fd2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002fd6:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff80002fdd:	48 85 c0             	test   %rax,%rax
ffffffff80002fe0:	0f 84 6d 09 00 00    	je     ffffffff80003953 <flanterm_fb_init+0x21d1>
            goto fail;
        }
        memcpy(ctx->font_bits, builtin_font, ctx->font_bits_size);
ffffffff80002fe6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002fea:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
ffffffff80002ff1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80002ff5:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff80002ffc:	48 8d 0d fd 7f 00 00 	lea    0x7ffd(%rip),%rcx        # ffffffff8000b000 <builtin_font>
ffffffff80003003:	48 89 ce             	mov    %rcx,%rsi
ffffffff80003006:	48 89 c7             	mov    %rax,%rdi
ffffffff80003009:	e8 b6 52 00 00       	call   ffffffff800082c4 <memcpy>
    }

#undef FONT_BYTES

    ctx->font_width += font_spacing;
ffffffff8000300e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003012:	48 8b 90 b0 01 00 00 	mov    0x1b0(%rax),%rdx
ffffffff80003019:	48 8b 85 90 00 00 00 	mov    0x90(%rbp),%rax
ffffffff80003020:	48 01 c2             	add    %rax,%rdx
ffffffff80003023:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003027:	48 89 90 b0 01 00 00 	mov    %rdx,0x1b0(%rax)

    ctx->font_bool_size = FLANTERM_FB_FONT_GLYPHS * font_height * ctx->font_width * sizeof(bool);
ffffffff8000302e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003032:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff80003039:	48 0f af 85 88 00 00 	imul   0x88(%rbp),%rax
ffffffff80003040:	00 
ffffffff80003041:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff80003045:	48 89 c2             	mov    %rax,%rdx
ffffffff80003048:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000304c:	48 89 90 30 02 00 00 	mov    %rdx,0x230(%rax)
    ctx->font_bool = _malloc(ctx->font_bool_size);
ffffffff80003053:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003057:	48 8b 80 30 02 00 00 	mov    0x230(%rax),%rax
ffffffff8000305e:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff80003065:	48 89 c7             	mov    %rax,%rdi
ffffffff80003068:	ff d2                	call   *%rdx
ffffffff8000306a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8000306e:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
    if (ctx->font_bool == NULL) {
ffffffff80003075:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003079:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
ffffffff80003080:	48 85 c0             	test   %rax,%rax
ffffffff80003083:	0f 84 cd 08 00 00    	je     ffffffff80003956 <flanterm_fb_init+0x21d4>
        goto fail;
    }

    for (size_t i = 0; i < FLANTERM_FB_FONT_GLYPHS; i++) {
ffffffff80003089:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80003090:	00 
ffffffff80003091:	e9 96 01 00 00       	jmp    ffffffff8000322c <flanterm_fb_init+0x1aaa>
        uint8_t *glyph = &ctx->font_bits[i * font_height];
ffffffff80003096:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000309a:	48 8b 90 28 02 00 00 	mov    0x228(%rax),%rdx
ffffffff800030a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800030a5:	48 0f af 85 88 00 00 	imul   0x88(%rbp),%rax
ffffffff800030ac:	00 
ffffffff800030ad:	48 01 d0             	add    %rdx,%rax
ffffffff800030b0:	48 89 45 98          	mov    %rax,-0x68(%rbp)

        for (size_t y = 0; y < font_height; y++) {
ffffffff800030b4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff800030bb:	00 
ffffffff800030bc:	e9 55 01 00 00       	jmp    ffffffff80003216 <flanterm_fb_init+0x1a94>
            // NOTE: the characters in VGA fonts are always one byte wide.
            // 9 dot wide fonts have 8 dots and one empty column, except
            // characters 0xC0-0xDF replicate column 9.
            for (size_t x = 0; x < 8; x++) {
ffffffff800030c1:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff800030c8:	00 
ffffffff800030c9:	e9 87 00 00 00       	jmp    ffffffff80003155 <flanterm_fb_init+0x19d3>
                size_t offset = i * font_height * ctx->font_width + y * ctx->font_width + x;
ffffffff800030ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800030d2:	48 0f af 85 88 00 00 	imul   0x88(%rbp),%rax
ffffffff800030d9:	00 
ffffffff800030da:	48 89 c2             	mov    %rax,%rdx
ffffffff800030dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800030e1:	48 01 c2             	add    %rax,%rdx
ffffffff800030e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800030e8:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff800030ef:	48 0f af d0          	imul   %rax,%rdx
ffffffff800030f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800030f7:	48 01 d0             	add    %rdx,%rax
ffffffff800030fa:	48 89 45 88          	mov    %rax,-0x78(%rbp)

                if ((glyph[y] & (0x80 >> x))) {
ffffffff800030fe:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80003102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003106:	48 01 d0             	add    %rdx,%rax
ffffffff80003109:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000310c:	0f b6 d0             	movzbl %al,%edx
ffffffff8000310f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003113:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff80003118:	89 c1                	mov    %eax,%ecx
ffffffff8000311a:	d3 fe                	sar    %cl,%esi
ffffffff8000311c:	89 f0                	mov    %esi,%eax
ffffffff8000311e:	21 d0                	and    %edx,%eax
ffffffff80003120:	85 c0                	test   %eax,%eax
ffffffff80003122:	74 17                	je     ffffffff8000313b <flanterm_fb_init+0x19b9>
                    ctx->font_bool[offset] = true;
ffffffff80003124:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003128:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
ffffffff8000312f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80003133:	48 01 d0             	add    %rdx,%rax
ffffffff80003136:	c6 00 01             	movb   $0x1,(%rax)
ffffffff80003139:	eb 15                	jmp    ffffffff80003150 <flanterm_fb_init+0x19ce>
                } else {
                    ctx->font_bool[offset] = false;
ffffffff8000313b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000313f:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
ffffffff80003146:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8000314a:	48 01 d0             	add    %rdx,%rax
ffffffff8000314d:	c6 00 00             	movb   $0x0,(%rax)
            for (size_t x = 0; x < 8; x++) {
ffffffff80003150:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
ffffffff80003155:	48 83 7d d8 07       	cmpq   $0x7,-0x28(%rbp)
ffffffff8000315a:	0f 86 6e ff ff ff    	jbe    ffffffff800030ce <flanterm_fb_init+0x194c>
                }
            }
            // fill columns above 8 like VGA Line Graphics Mode does
            for (size_t x = 8; x < ctx->font_width; x++) {
ffffffff80003160:	48 c7 45 d0 08 00 00 	movq   $0x8,-0x30(%rbp)
ffffffff80003167:	00 
ffffffff80003168:	e9 8f 00 00 00       	jmp    ffffffff800031fc <flanterm_fb_init+0x1a7a>
                size_t offset = i * font_height * ctx->font_width + y * ctx->font_width + x;
ffffffff8000316d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003171:	48 0f af 85 88 00 00 	imul   0x88(%rbp),%rax
ffffffff80003178:	00 
ffffffff80003179:	48 89 c2             	mov    %rax,%rdx
ffffffff8000317c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003180:	48 01 c2             	add    %rax,%rdx
ffffffff80003183:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003187:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff8000318e:	48 0f af d0          	imul   %rax,%rdx
ffffffff80003192:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80003196:	48 01 d0             	add    %rdx,%rax
ffffffff80003199:	48 89 45 90          	mov    %rax,-0x70(%rbp)

                if (i >= 0xc0 && i <= 0xdf) {
ffffffff8000319d:	48 81 7d e8 bf 00 00 	cmpq   $0xbf,-0x18(%rbp)
ffffffff800031a4:	00 
ffffffff800031a5:	76 3b                	jbe    ffffffff800031e2 <flanterm_fb_init+0x1a60>
ffffffff800031a7:	48 81 7d e8 df 00 00 	cmpq   $0xdf,-0x18(%rbp)
ffffffff800031ae:	00 
ffffffff800031af:	77 31                	ja     ffffffff800031e2 <flanterm_fb_init+0x1a60>
                    ctx->font_bool[offset] = (glyph[y] & 1);
ffffffff800031b1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff800031b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800031b9:	48 01 d0             	add    %rdx,%rax
ffffffff800031bc:	0f b6 00             	movzbl (%rax),%eax
ffffffff800031bf:	0f b6 c0             	movzbl %al,%eax
ffffffff800031c2:	83 e0 01             	and    $0x1,%eax
ffffffff800031c5:	89 c2                	mov    %eax,%edx
ffffffff800031c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800031cb:	48 8b 88 38 02 00 00 	mov    0x238(%rax),%rcx
ffffffff800031d2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800031d6:	48 01 c8             	add    %rcx,%rax
ffffffff800031d9:	85 d2                	test   %edx,%edx
ffffffff800031db:	0f 95 c2             	setne  %dl
ffffffff800031de:	88 10                	mov    %dl,(%rax)
ffffffff800031e0:	eb 15                	jmp    ffffffff800031f7 <flanterm_fb_init+0x1a75>
                } else {
                    ctx->font_bool[offset] = false;
ffffffff800031e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800031e6:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
ffffffff800031ed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800031f1:	48 01 d0             	add    %rdx,%rax
ffffffff800031f4:	c6 00 00             	movb   $0x0,(%rax)
            for (size_t x = 8; x < ctx->font_width; x++) {
ffffffff800031f7:	48 83 45 d0 01       	addq   $0x1,-0x30(%rbp)
ffffffff800031fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003200:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff80003207:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8000320b:	0f 82 5c ff ff ff    	jb     ffffffff8000316d <flanterm_fb_init+0x19eb>
        for (size_t y = 0; y < font_height; y++) {
ffffffff80003211:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff80003216:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000321a:	48 3b 85 88 00 00 00 	cmp    0x88(%rbp),%rax
ffffffff80003221:	0f 82 9a fe ff ff    	jb     ffffffff800030c1 <flanterm_fb_init+0x193f>
    for (size_t i = 0; i < FLANTERM_FB_FONT_GLYPHS; i++) {
ffffffff80003227:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8000322c:	48 81 7d e8 ff 00 00 	cmpq   $0xff,-0x18(%rbp)
ffffffff80003233:	00 
ffffffff80003234:	0f 86 5c fe ff ff    	jbe    ffffffff80003096 <flanterm_fb_init+0x1914>
                }
            }
        }
    }

    ctx->font_scale_x = font_scale_x;
ffffffff8000323a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000323e:	48 8b 95 98 00 00 00 	mov    0x98(%rbp),%rdx
ffffffff80003245:	48 89 90 d0 01 00 00 	mov    %rdx,0x1d0(%rax)
    ctx->font_scale_y = font_scale_y;
ffffffff8000324c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003250:	48 8b 95 a0 00 00 00 	mov    0xa0(%rbp),%rdx
ffffffff80003257:	48 89 90 d8 01 00 00 	mov    %rdx,0x1d8(%rax)

    ctx->glyph_width = ctx->font_width * font_scale_x;
ffffffff8000325e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003262:	48 8b 80 b0 01 00 00 	mov    0x1b0(%rax),%rax
ffffffff80003269:	48 0f af 85 98 00 00 	imul   0x98(%rbp),%rax
ffffffff80003270:	00 
ffffffff80003271:	48 89 c2             	mov    %rax,%rdx
ffffffff80003274:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003278:	48 89 90 c0 01 00 00 	mov    %rdx,0x1c0(%rax)
    ctx->glyph_height = font_height * font_scale_y;
ffffffff8000327f:	48 8b 85 88 00 00 00 	mov    0x88(%rbp),%rax
ffffffff80003286:	48 0f af 85 a0 00 00 	imul   0xa0(%rbp),%rax
ffffffff8000328d:	00 
ffffffff8000328e:	48 89 c2             	mov    %rax,%rdx
ffffffff80003291:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003295:	48 89 90 c8 01 00 00 	mov    %rdx,0x1c8(%rax)

    _ctx->cols = (ctx->width - margin * 2) / ctx->glyph_width;
ffffffff8000329c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800032a0:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax
ffffffff800032a7:	48 8b 95 a8 00 00 00 	mov    0xa8(%rbp),%rdx
ffffffff800032ae:	48 01 d2             	add    %rdx,%rdx
ffffffff800032b1:	48 29 d0             	sub    %rdx,%rax
ffffffff800032b4:	48 89 c1             	mov    %rax,%rcx
ffffffff800032b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800032bb:	48 8b b8 c0 01 00 00 	mov    0x1c0(%rax),%rdi
ffffffff800032c2:	48 89 c8             	mov    %rcx,%rax
ffffffff800032c5:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800032ca:	48 f7 f7             	div    %rdi
ffffffff800032cd:	48 89 c2             	mov    %rax,%rdx
ffffffff800032d0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800032d4:	48 89 90 e8 00 00 00 	mov    %rdx,0xe8(%rax)
    _ctx->rows = (ctx->height - margin * 2) / ctx->glyph_height;
ffffffff800032db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800032df:	48 8b 80 08 02 00 00 	mov    0x208(%rax),%rax
ffffffff800032e6:	48 8b 95 a8 00 00 00 	mov    0xa8(%rbp),%rdx
ffffffff800032ed:	48 01 d2             	add    %rdx,%rdx
ffffffff800032f0:	48 29 d0             	sub    %rdx,%rax
ffffffff800032f3:	48 89 c1             	mov    %rax,%rcx
ffffffff800032f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800032fa:	48 8b b8 c8 01 00 00 	mov    0x1c8(%rax),%rdi
ffffffff80003301:	48 89 c8             	mov    %rcx,%rax
ffffffff80003304:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80003309:	48 f7 f7             	div    %rdi
ffffffff8000330c:	48 89 c2             	mov    %rax,%rdx
ffffffff8000330f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003313:	48 89 90 e0 00 00 00 	mov    %rdx,0xe0(%rax)

    ctx->offset_x = margin + ((ctx->width - margin * 2) % ctx->glyph_width) / 2;
ffffffff8000331a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000331e:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax
ffffffff80003325:	48 8b 95 a8 00 00 00 	mov    0xa8(%rbp),%rdx
ffffffff8000332c:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
ffffffff80003330:	48 29 c8             	sub    %rcx,%rax
ffffffff80003333:	48 89 c2             	mov    %rax,%rdx
ffffffff80003336:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000333a:	48 8b 88 c0 01 00 00 	mov    0x1c0(%rax),%rcx
ffffffff80003341:	48 89 d0             	mov    %rdx,%rax
ffffffff80003344:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80003349:	48 f7 f1             	div    %rcx
ffffffff8000334c:	48 89 d0             	mov    %rdx,%rax
ffffffff8000334f:	48 d1 e8             	shr    %rax
ffffffff80003352:	48 89 c2             	mov    %rax,%rdx
ffffffff80003355:	48 8b 85 a8 00 00 00 	mov    0xa8(%rbp),%rax
ffffffff8000335c:	48 01 c2             	add    %rax,%rdx
ffffffff8000335f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003363:	48 89 90 e0 01 00 00 	mov    %rdx,0x1e0(%rax)
    ctx->offset_y = margin + ((ctx->height - margin * 2) % ctx->glyph_height) / 2;
ffffffff8000336a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000336e:	48 8b 80 08 02 00 00 	mov    0x208(%rax),%rax
ffffffff80003375:	48 8b 95 a8 00 00 00 	mov    0xa8(%rbp),%rdx
ffffffff8000337c:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
ffffffff80003380:	48 29 c8             	sub    %rcx,%rax
ffffffff80003383:	48 89 c2             	mov    %rax,%rdx
ffffffff80003386:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000338a:	48 8b 88 c8 01 00 00 	mov    0x1c8(%rax),%rcx
ffffffff80003391:	48 89 d0             	mov    %rdx,%rax
ffffffff80003394:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80003399:	48 f7 f1             	div    %rcx
ffffffff8000339c:	48 89 d0             	mov    %rdx,%rax
ffffffff8000339f:	48 d1 e8             	shr    %rax
ffffffff800033a2:	48 89 c2             	mov    %rax,%rdx
ffffffff800033a5:	48 8b 85 a8 00 00 00 	mov    0xa8(%rbp),%rax
ffffffff800033ac:	48 01 c2             	add    %rax,%rdx
ffffffff800033af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800033b3:	48 89 90 e8 01 00 00 	mov    %rdx,0x1e8(%rax)

    ctx->grid_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_char);
ffffffff800033ba:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800033be:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff800033c5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800033c9:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800033d0:	48 0f af d0          	imul   %rax,%rdx
ffffffff800033d4:	48 89 d0             	mov    %rdx,%rax
ffffffff800033d7:	48 01 c0             	add    %rax,%rax
ffffffff800033da:	48 01 d0             	add    %rdx,%rax
ffffffff800033dd:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800033e1:	48 89 c2             	mov    %rax,%rdx
ffffffff800033e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800033e8:	48 89 90 a0 02 00 00 	mov    %rdx,0x2a0(%rax)
    ctx->grid = _malloc(ctx->grid_size);
ffffffff800033ef:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800033f3:	48 8b 80 a0 02 00 00 	mov    0x2a0(%rax),%rax
ffffffff800033fa:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff80003401:	48 89 c7             	mov    %rax,%rdi
ffffffff80003404:	ff d2                	call   *%rdx
ffffffff80003406:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8000340a:	48 89 82 b8 02 00 00 	mov    %rax,0x2b8(%rdx)
    if (ctx->grid == NULL) {
ffffffff80003411:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003415:	48 8b 80 b8 02 00 00 	mov    0x2b8(%rax),%rax
ffffffff8000341c:	48 85 c0             	test   %rax,%rax
ffffffff8000341f:	0f 84 34 05 00 00    	je     ffffffff80003959 <flanterm_fb_init+0x21d7>
        goto fail;
    }
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff80003425:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff8000342c:	00 
ffffffff8000342d:	e9 84 00 00 00       	jmp    ffffffff800034b6 <flanterm_fb_init+0x1d34>
        ctx->grid[i].c = ' ';
ffffffff80003432:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003436:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000343d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80003441:	48 89 d0             	mov    %rdx,%rax
ffffffff80003444:	48 01 c0             	add    %rax,%rax
ffffffff80003447:	48 01 d0             	add    %rdx,%rax
ffffffff8000344a:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8000344e:	48 01 c8             	add    %rcx,%rax
ffffffff80003451:	c7 00 20 00 00 00    	movl   $0x20,(%rax)
        ctx->grid[i].fg = ctx->text_fg;
ffffffff80003457:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000345b:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff80003462:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80003466:	48 89 d0             	mov    %rdx,%rax
ffffffff80003469:	48 01 c0             	add    %rax,%rax
ffffffff8000346c:	48 01 d0             	add    %rdx,%rax
ffffffff8000346f:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80003473:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff80003477:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000347b:	8b 80 d8 02 00 00    	mov    0x2d8(%rax),%eax
ffffffff80003481:	89 42 04             	mov    %eax,0x4(%rdx)
        ctx->grid[i].bg = ctx->text_bg;
ffffffff80003484:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003488:	48 8b 88 b8 02 00 00 	mov    0x2b8(%rax),%rcx
ffffffff8000348f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80003493:	48 89 d0             	mov    %rdx,%rax
ffffffff80003496:	48 01 c0             	add    %rax,%rax
ffffffff80003499:	48 01 d0             	add    %rdx,%rax
ffffffff8000349c:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff800034a0:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
ffffffff800034a4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800034a8:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff800034ae:	89 42 08             	mov    %eax,0x8(%rdx)
    for (size_t i = 0; i < _ctx->rows * _ctx->cols; i++) {
ffffffff800034b1:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
ffffffff800034b6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800034ba:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff800034c1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800034c5:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800034cc:	48 0f af c2          	imul   %rdx,%rax
ffffffff800034d0:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff800034d4:	0f 82 58 ff ff ff    	jb     ffffffff80003432 <flanterm_fb_init+0x1cb0>
    }

    ctx->queue_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_queue_item);
ffffffff800034da:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800034de:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff800034e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800034e9:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800034f0:	48 0f af c2          	imul   %rdx,%rax
ffffffff800034f4:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff800034f8:	48 89 c2             	mov    %rax,%rdx
ffffffff800034fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800034ff:	48 89 90 a8 02 00 00 	mov    %rdx,0x2a8(%rax)
    ctx->queue = _malloc(ctx->queue_size);
ffffffff80003506:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000350a:	48 8b 80 a8 02 00 00 	mov    0x2a8(%rax),%rax
ffffffff80003511:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff80003518:	48 89 c7             	mov    %rax,%rdi
ffffffff8000351b:	ff d2                	call   *%rdx
ffffffff8000351d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80003521:	48 89 82 c0 02 00 00 	mov    %rax,0x2c0(%rdx)
    if (ctx->queue == NULL) {
ffffffff80003528:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000352c:	48 8b 80 c0 02 00 00 	mov    0x2c0(%rax),%rax
ffffffff80003533:	48 85 c0             	test   %rax,%rax
ffffffff80003536:	0f 84 20 04 00 00    	je     ffffffff8000395c <flanterm_fb_init+0x21da>
        goto fail;
    }
    ctx->queue_i = 0;
ffffffff8000353c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003540:	48 c7 80 c8 02 00 00 	movq   $0x0,0x2c8(%rax)
ffffffff80003547:	00 00 00 00 
    memset(ctx->queue, 0, ctx->queue_size);
ffffffff8000354b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000354f:	48 8b 90 a8 02 00 00 	mov    0x2a8(%rax),%rdx
ffffffff80003556:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000355a:	48 8b 80 c0 02 00 00 	mov    0x2c0(%rax),%rax
ffffffff80003561:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80003566:	48 89 c7             	mov    %rax,%rdi
ffffffff80003569:	e8 b8 4d 00 00       	call   ffffffff80008326 <memset>

    ctx->map_size = _ctx->rows * _ctx->cols * sizeof(struct flanterm_fb_queue_item *);
ffffffff8000356e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003572:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff80003579:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000357d:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80003584:	48 0f af c2          	imul   %rdx,%rax
ffffffff80003588:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8000358f:	00 
ffffffff80003590:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003594:	48 89 90 b0 02 00 00 	mov    %rdx,0x2b0(%rax)
    ctx->map = _malloc(ctx->map_size);
ffffffff8000359b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000359f:	48 8b 80 b0 02 00 00 	mov    0x2b0(%rax),%rax
ffffffff800035a6:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff800035ad:	48 89 c7             	mov    %rax,%rdi
ffffffff800035b0:	ff d2                	call   *%rdx
ffffffff800035b2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff800035b6:	48 89 82 d0 02 00 00 	mov    %rax,0x2d0(%rdx)
    if (ctx->map == NULL) {
ffffffff800035bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800035c1:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff800035c8:	48 85 c0             	test   %rax,%rax
ffffffff800035cb:	0f 84 8e 03 00 00    	je     ffffffff8000395f <flanterm_fb_init+0x21dd>
        goto fail;
    }
    memset(ctx->map, 0, ctx->map_size);
ffffffff800035d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800035d5:	48 8b 90 b0 02 00 00 	mov    0x2b0(%rax),%rdx
ffffffff800035dc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800035e0:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff800035e7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff800035ec:	48 89 c7             	mov    %rax,%rdi
ffffffff800035ef:	e8 32 4d 00 00       	call   ffffffff80008326 <memset>

    if (canvas != NULL) {
ffffffff800035f4:	48 83 7d 40 00       	cmpq   $0x0,0x40(%rbp)
ffffffff800035f9:	0f 84 78 01 00 00    	je     ffffffff80003777 <flanterm_fb_init+0x1ff5>
        ctx->canvas_size = ctx->width * ctx->height * sizeof(uint32_t);
ffffffff800035ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003603:	48 8b 90 00 02 00 00 	mov    0x200(%rax),%rdx
ffffffff8000360a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000360e:	48 8b 80 08 02 00 00 	mov    0x208(%rax),%rax
ffffffff80003615:	48 0f af c2          	imul   %rdx,%rax
ffffffff80003619:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80003620:	00 
ffffffff80003621:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003625:	48 89 90 90 02 00 00 	mov    %rdx,0x290(%rax)
        ctx->canvas = _malloc(ctx->canvas_size);
ffffffff8000362c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003630:	48 8b 80 90 02 00 00 	mov    0x290(%rax),%rax
ffffffff80003637:	48 8b 95 68 fb ff ff 	mov    -0x498(%rbp),%rdx
ffffffff8000363e:	48 89 c7             	mov    %rax,%rdi
ffffffff80003641:	ff d2                	call   *%rdx
ffffffff80003643:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80003647:	48 89 82 98 02 00 00 	mov    %rax,0x298(%rdx)
        if (ctx->canvas == NULL) {
ffffffff8000364e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003652:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff80003659:	48 85 c0             	test   %rax,%rax
ffffffff8000365c:	0f 84 00 03 00 00    	je     ffffffff80003962 <flanterm_fb_init+0x21e0>
            goto fail;
        }
        for (size_t i = 0; i < ctx->width * ctx->height; i++) {
ffffffff80003662:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80003669:	00 
ffffffff8000366a:	e9 e4 00 00 00       	jmp    ffffffff80003753 <flanterm_fb_init+0x1fd1>
            ctx->canvas[i] = convert_colour(_ctx, canvas[i]);
ffffffff8000366f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80003673:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff8000367a:	00 
ffffffff8000367b:	48 8b 45 40          	mov    0x40(%rbp),%rax
ffffffff8000367f:	48 01 d0             	add    %rdx,%rax
ffffffff80003682:	8b 00                	mov    (%rax),%eax
ffffffff80003684:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80003688:	48 8b 8a 98 02 00 00 	mov    0x298(%rdx),%rcx
ffffffff8000368f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80003693:	48 c1 e2 02          	shl    $0x2,%rdx
ffffffff80003697:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
ffffffff8000369b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8000369f:	48 89 95 98 fb ff ff 	mov    %rdx,-0x468(%rbp)
ffffffff800036a6:	89 85 94 fb ff ff    	mov    %eax,-0x46c(%rbp)
    struct flanterm_fb_context *ctx = (void *)_ctx;
ffffffff800036ac:	48 8b 85 98 fb ff ff 	mov    -0x468(%rbp),%rax
ffffffff800036b3:	48 89 85 88 fb ff ff 	mov    %rax,-0x478(%rbp)
    uint32_t r = (colour >> 16) & 0xff;
ffffffff800036ba:	8b 85 94 fb ff ff    	mov    -0x46c(%rbp),%eax
ffffffff800036c0:	c1 e8 10             	shr    $0x10,%eax
ffffffff800036c3:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800036c8:	89 85 84 fb ff ff    	mov    %eax,-0x47c(%rbp)
    uint32_t g = (colour >> 8) & 0xff;
ffffffff800036ce:	8b 85 94 fb ff ff    	mov    -0x46c(%rbp),%eax
ffffffff800036d4:	c1 e8 08             	shr    $0x8,%eax
ffffffff800036d7:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff800036dc:	89 85 80 fb ff ff    	mov    %eax,-0x480(%rbp)
    uint32_t b =  colour & 0xff;
ffffffff800036e2:	8b 85 94 fb ff ff    	mov    -0x46c(%rbp),%eax
ffffffff800036e8:	0f b6 c0             	movzbl %al,%eax
ffffffff800036eb:	89 85 7c fb ff ff    	mov    %eax,-0x484(%rbp)
    return (r << ctx->red_mask_shift) | (g << ctx->green_mask_shift) | (b << ctx->blue_mask_shift);
ffffffff800036f1:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
ffffffff800036f8:	0f b6 80 19 02 00 00 	movzbl 0x219(%rax),%eax
ffffffff800036ff:	0f b6 c0             	movzbl %al,%eax
ffffffff80003702:	8b 95 84 fb ff ff    	mov    -0x47c(%rbp),%edx
ffffffff80003708:	89 d7                	mov    %edx,%edi
ffffffff8000370a:	89 c1                	mov    %eax,%ecx
ffffffff8000370c:	d3 e7                	shl    %cl,%edi
ffffffff8000370e:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
ffffffff80003715:	0f b6 80 1b 02 00 00 	movzbl 0x21b(%rax),%eax
ffffffff8000371c:	0f b6 c0             	movzbl %al,%eax
ffffffff8000371f:	8b 95 80 fb ff ff    	mov    -0x480(%rbp),%edx
ffffffff80003725:	89 c1                	mov    %eax,%ecx
ffffffff80003727:	d3 e2                	shl    %cl,%edx
ffffffff80003729:	89 d0                	mov    %edx,%eax
ffffffff8000372b:	09 c7                	or     %eax,%edi
ffffffff8000372d:	48 8b 85 88 fb ff ff 	mov    -0x478(%rbp),%rax
ffffffff80003734:	0f b6 80 1d 02 00 00 	movzbl 0x21d(%rax),%eax
ffffffff8000373b:	0f b6 c0             	movzbl %al,%eax
ffffffff8000373e:	8b 95 7c fb ff ff    	mov    -0x484(%rbp),%edx
ffffffff80003744:	89 c1                	mov    %eax,%ecx
ffffffff80003746:	d3 e2                	shl    %cl,%edx
ffffffff80003748:	89 d0                	mov    %edx,%eax
ffffffff8000374a:	09 f8                	or     %edi,%eax
            ctx->canvas[i] = convert_colour(_ctx, canvas[i]);
ffffffff8000374c:	89 06                	mov    %eax,(%rsi)
        for (size_t i = 0; i < ctx->width * ctx->height; i++) {
ffffffff8000374e:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
ffffffff80003753:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003757:	48 8b 90 00 02 00 00 	mov    0x200(%rax),%rdx
ffffffff8000375e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003762:	48 8b 80 08 02 00 00 	mov    0x208(%rax),%rax
ffffffff80003769:	48 0f af c2          	imul   %rdx,%rax
ffffffff8000376d:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
ffffffff80003771:	0f 82 f8 fe ff ff    	jb     ffffffff8000366f <flanterm_fb_init+0x1eed>
        }
    }

    _ctx->raw_putchar = flanterm_fb_raw_putchar;
ffffffff80003777:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000377b:	48 8d 15 91 db ff ff 	lea    -0x246f(%rip),%rdx        # ffffffff80001313 <flanterm_fb_raw_putchar>
ffffffff80003782:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
    _ctx->clear = flanterm_fb_clear;
ffffffff80003789:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000378d:	48 8d 15 89 d1 ff ff 	lea    -0x2e77(%rip),%rdx        # ffffffff8000091d <flanterm_fb_clear>
ffffffff80003794:	48 89 90 f8 00 00 00 	mov    %rdx,0xf8(%rax)
    _ctx->set_cursor_pos = flanterm_fb_set_cursor_pos;
ffffffff8000379b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000379f:	48 8d 15 4f d2 ff ff 	lea    -0x2db1(%rip),%rdx        # ffffffff800009f5 <flanterm_fb_set_cursor_pos>
ffffffff800037a6:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
    _ctx->get_cursor_pos = flanterm_fb_get_cursor_pos;
ffffffff800037ad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800037b1:	48 8d 15 ea d2 ff ff 	lea    -0x2d16(%rip),%rdx        # ffffffff80000aa2 <flanterm_fb_get_cursor_pos>
ffffffff800037b8:	48 89 90 08 01 00 00 	mov    %rdx,0x108(%rax)
    _ctx->set_text_fg = flanterm_fb_set_text_fg;
ffffffff800037bf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800037c3:	48 8d 15 83 d4 ff ff 	lea    -0x2b7d(%rip),%rdx        # ffffffff80000c4d <flanterm_fb_set_text_fg>
ffffffff800037ca:	48 89 90 10 01 00 00 	mov    %rdx,0x110(%rax)
    _ctx->set_text_bg = flanterm_fb_set_text_bg;
ffffffff800037d1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800037d5:	48 8d 15 ac d4 ff ff 	lea    -0x2b54(%rip),%rdx        # ffffffff80000c88 <flanterm_fb_set_text_bg>
ffffffff800037dc:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
    _ctx->set_text_fg_bright = flanterm_fb_set_text_fg_bright;
ffffffff800037e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800037e7:	48 8d 15 d5 d4 ff ff 	lea    -0x2b2b(%rip),%rdx        # ffffffff80000cc3 <flanterm_fb_set_text_fg_bright>
ffffffff800037ee:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
    _ctx->set_text_bg_bright = flanterm_fb_set_text_bg_bright;
ffffffff800037f5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800037f9:	48 8d 15 fe d4 ff ff 	lea    -0x2b02(%rip),%rdx        # ffffffff80000cfe <flanterm_fb_set_text_bg_bright>
ffffffff80003800:	48 89 90 28 01 00 00 	mov    %rdx,0x128(%rax)
    _ctx->set_text_fg_rgb = flanterm_fb_set_text_fg_rgb;
ffffffff80003807:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000380b:	48 8d 15 27 d5 ff ff 	lea    -0x2ad9(%rip),%rdx        # ffffffff80000d39 <flanterm_fb_set_text_fg_rgb>
ffffffff80003812:	48 89 90 30 01 00 00 	mov    %rdx,0x130(%rax)
    _ctx->set_text_bg_rgb = flanterm_fb_set_text_bg_rgb;
ffffffff80003819:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000381d:	48 8d 15 c3 d5 ff ff 	lea    -0x2a3d(%rip),%rdx        # ffffffff80000de7 <flanterm_fb_set_text_bg_rgb>
ffffffff80003824:	48 89 90 38 01 00 00 	mov    %rdx,0x138(%rax)
    _ctx->set_text_fg_default = flanterm_fb_set_text_fg_default;
ffffffff8000382b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000382f:	48 8d 15 5f d6 ff ff 	lea    -0x29a1(%rip),%rdx        # ffffffff80000e95 <flanterm_fb_set_text_fg_default>
ffffffff80003836:	48 89 90 40 01 00 00 	mov    %rdx,0x140(%rax)
    _ctx->set_text_bg_default = flanterm_fb_set_text_bg_default;
ffffffff8000383d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003841:	48 8d 15 7c d6 ff ff 	lea    -0x2984(%rip),%rdx        # ffffffff80000ec4 <flanterm_fb_set_text_bg_default>
ffffffff80003848:	48 89 90 48 01 00 00 	mov    %rdx,0x148(%rax)
    _ctx->set_text_fg_default_bright = flanterm_fb_set_text_fg_default_bright;
ffffffff8000384f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003853:	48 8d 15 93 d6 ff ff 	lea    -0x296d(%rip),%rdx        # ffffffff80000eed <flanterm_fb_set_text_fg_default_bright>
ffffffff8000385a:	48 89 90 50 01 00 00 	mov    %rdx,0x150(%rax)
    _ctx->set_text_bg_default_bright = flanterm_fb_set_text_bg_default_bright;
ffffffff80003861:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003865:	48 8d 15 b0 d6 ff ff 	lea    -0x2950(%rip),%rdx        # ffffffff80000f1c <flanterm_fb_set_text_bg_default_bright>
ffffffff8000386c:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)
    _ctx->move_character = flanterm_fb_move_character;
ffffffff80003873:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003877:	48 8d 15 c3 d2 ff ff 	lea    -0x2d3d(%rip),%rdx        # ffffffff80000b41 <flanterm_fb_move_character>
ffffffff8000387e:	48 89 90 60 01 00 00 	mov    %rdx,0x160(%rax)
    _ctx->scroll = flanterm_fb_scroll;
ffffffff80003885:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003889:	48 8d 15 05 cf ff ff 	lea    -0x30fb(%rip),%rdx        # ffffffff80000795 <flanterm_fb_scroll>
ffffffff80003890:	48 89 90 68 01 00 00 	mov    %rdx,0x168(%rax)
    _ctx->revscroll = flanterm_fb_revscroll;
ffffffff80003897:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000389b:	48 8d 15 62 cd ff ff 	lea    -0x329e(%rip),%rdx        # ffffffff80000604 <flanterm_fb_revscroll>
ffffffff800038a2:	48 89 90 70 01 00 00 	mov    %rdx,0x170(%rax)
    _ctx->swap_palette = flanterm_fb_swap_palette;
ffffffff800038a9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800038ad:	48 8d 15 83 c8 ff ff 	lea    -0x377d(%rip),%rdx        # ffffffff80000137 <flanterm_fb_swap_palette>
ffffffff800038b4:	48 89 90 78 01 00 00 	mov    %rdx,0x178(%rax)
    _ctx->save_state = flanterm_fb_save_state;
ffffffff800038bb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800038bf:	48 8d 15 93 c7 ff ff 	lea    -0x386d(%rip),%rdx        # ffffffff80000059 <flanterm_fb_save_state>
ffffffff800038c6:	48 89 90 80 01 00 00 	mov    %rdx,0x180(%rax)
    _ctx->restore_state = flanterm_fb_restore_state;
ffffffff800038cd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800038d1:	48 8d 15 f0 c7 ff ff 	lea    -0x3810(%rip),%rdx        # ffffffff800000c8 <flanterm_fb_restore_state>
ffffffff800038d8:	48 89 90 88 01 00 00 	mov    %rdx,0x188(%rax)
    _ctx->double_buffer_flush = flanterm_fb_double_buffer_flush;
ffffffff800038df:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800038e3:	48 8d 15 d9 d7 ff ff 	lea    -0x2827(%rip),%rdx        # ffffffff800010c3 <flanterm_fb_double_buffer_flush>
ffffffff800038ea:	48 89 90 90 01 00 00 	mov    %rdx,0x190(%rax)
    _ctx->full_refresh = flanterm_fb_full_refresh;
ffffffff800038f1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800038f5:	48 8d 15 77 db ff ff 	lea    -0x2489(%rip),%rdx        # ffffffff80001473 <flanterm_fb_full_refresh>
ffffffff800038fc:	48 89 90 98 01 00 00 	mov    %rdx,0x198(%rax)
    _ctx->deinit = flanterm_fb_deinit;
ffffffff80003903:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003907:	48 8d 15 38 dd ff ff 	lea    -0x22c8(%rip),%rdx        # ffffffff80001646 <flanterm_fb_deinit>
ffffffff8000390e:	48 89 90 a0 01 00 00 	mov    %rdx,0x1a0(%rax)

    flanterm_context_reinit(_ctx);
ffffffff80003915:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003919:	48 89 c7             	mov    %rax,%rdi
ffffffff8000391c:	e8 dc 01 00 00       	call   ffffffff80003afd <flanterm_context_reinit>
    flanterm_fb_full_refresh(_ctx);
ffffffff80003921:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003925:	48 89 c7             	mov    %rax,%rdi
ffffffff80003928:	e8 46 db ff ff       	call   ffffffff80001473 <flanterm_fb_full_refresh>

#ifndef FLANTERM_FB_DISABLE_BUMP_ALLOC
    if (_malloc == bump_alloc) {
ffffffff8000392d:	48 8d 05 cc c6 ff ff 	lea    -0x3934(%rip),%rax        # ffffffff80000000 <bump_alloc>
ffffffff80003934:	48 39 85 68 fb ff ff 	cmp    %rax,-0x498(%rbp)
ffffffff8000393b:	75 07                	jne    ffffffff80003944 <flanterm_fb_init+0x21c2>
        bump_allocated_instance = true;
ffffffff8000393d:	c6 05 0c 34 0e 00 01 	movb   $0x1,0xe340c(%rip)        # ffffffff800e6d50 <bump_allocated_instance>
    }
#endif

    return _ctx;
ffffffff80003944:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003948:	e9 ae 01 00 00       	jmp    ffffffff80003afb <flanterm_fb_init+0x2379>
        goto fail;
ffffffff8000394d:	90                   	nop
ffffffff8000394e:	eb 13                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
            goto fail;
ffffffff80003950:	90                   	nop
ffffffff80003951:	eb 10                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
            goto fail;
ffffffff80003953:	90                   	nop
ffffffff80003954:	eb 0d                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
        goto fail;
ffffffff80003956:	90                   	nop
ffffffff80003957:	eb 0a                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
        goto fail;
ffffffff80003959:	90                   	nop
ffffffff8000395a:	eb 07                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
        goto fail;
ffffffff8000395c:	90                   	nop
ffffffff8000395d:	eb 04                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
        goto fail;
ffffffff8000395f:	90                   	nop
ffffffff80003960:	eb 01                	jmp    ffffffff80003963 <flanterm_fb_init+0x21e1>
            goto fail;
ffffffff80003962:	90                   	nop

fail:
#ifndef FLANTERM_FB_DISABLE_BUMP_ALLOC
    if (_malloc == bump_alloc) {
ffffffff80003963:	48 8d 05 96 c6 ff ff 	lea    -0x396a(%rip),%rax        # ffffffff80000000 <bump_alloc>
ffffffff8000396a:	48 39 85 68 fb ff ff 	cmp    %rax,-0x498(%rbp)
ffffffff80003971:	75 15                	jne    ffffffff80003988 <flanterm_fb_init+0x2206>
        bump_alloc_ptr = 0;
ffffffff80003973:	48 c7 05 ca 33 0e 00 	movq   $0x0,0xe33ca(%rip)        # ffffffff800e6d48 <bump_alloc_ptr>
ffffffff8000397a:	00 00 00 00 
        return NULL;
ffffffff8000397e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80003983:	e9 73 01 00 00       	jmp    ffffffff80003afb <flanterm_fb_init+0x2379>
    }
#endif

    if (_free == NULL) {
ffffffff80003988:	48 83 bd 60 fb ff ff 	cmpq   $0x0,-0x4a0(%rbp)
ffffffff8000398f:	00 
ffffffff80003990:	75 0a                	jne    ffffffff8000399c <flanterm_fb_init+0x221a>
        return NULL;
ffffffff80003992:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80003997:	e9 5f 01 00 00       	jmp    ffffffff80003afb <flanterm_fb_init+0x2379>
    }

    if (ctx->canvas != NULL) {
ffffffff8000399c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800039a0:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff800039a7:	48 85 c0             	test   %rax,%rax
ffffffff800039aa:	74 25                	je     ffffffff800039d1 <flanterm_fb_init+0x224f>
        _free(ctx->canvas, ctx->canvas_size);
ffffffff800039ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800039b0:	48 8b 90 90 02 00 00 	mov    0x290(%rax),%rdx
ffffffff800039b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800039bb:	48 8b 80 98 02 00 00 	mov    0x298(%rax),%rax
ffffffff800039c2:	48 8b 8d 60 fb ff ff 	mov    -0x4a0(%rbp),%rcx
ffffffff800039c9:	48 89 d6             	mov    %rdx,%rsi
ffffffff800039cc:	48 89 c7             	mov    %rax,%rdi
ffffffff800039cf:	ff d1                	call   *%rcx
    }
    if (ctx->map != NULL) {
ffffffff800039d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800039d5:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff800039dc:	48 85 c0             	test   %rax,%rax
ffffffff800039df:	74 25                	je     ffffffff80003a06 <flanterm_fb_init+0x2284>
        _free(ctx->map, ctx->map_size);
ffffffff800039e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800039e5:	48 8b 90 b0 02 00 00 	mov    0x2b0(%rax),%rdx
ffffffff800039ec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800039f0:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff800039f7:	48 8b 8d 60 fb ff ff 	mov    -0x4a0(%rbp),%rcx
ffffffff800039fe:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003a01:	48 89 c7             	mov    %rax,%rdi
ffffffff80003a04:	ff d1                	call   *%rcx
    }
    if (ctx->queue != NULL) {
ffffffff80003a06:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a0a:	48 8b 80 c0 02 00 00 	mov    0x2c0(%rax),%rax
ffffffff80003a11:	48 85 c0             	test   %rax,%rax
ffffffff80003a14:	74 25                	je     ffffffff80003a3b <flanterm_fb_init+0x22b9>
        _free(ctx->queue, ctx->queue_size);
ffffffff80003a16:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a1a:	48 8b 90 a8 02 00 00 	mov    0x2a8(%rax),%rdx
ffffffff80003a21:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a25:	48 8b 80 c0 02 00 00 	mov    0x2c0(%rax),%rax
ffffffff80003a2c:	48 8b 8d 60 fb ff ff 	mov    -0x4a0(%rbp),%rcx
ffffffff80003a33:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003a36:	48 89 c7             	mov    %rax,%rdi
ffffffff80003a39:	ff d1                	call   *%rcx
    }
    if (ctx->grid != NULL) {
ffffffff80003a3b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a3f:	48 8b 80 b8 02 00 00 	mov    0x2b8(%rax),%rax
ffffffff80003a46:	48 85 c0             	test   %rax,%rax
ffffffff80003a49:	74 25                	je     ffffffff80003a70 <flanterm_fb_init+0x22ee>
        _free(ctx->grid, ctx->grid_size);
ffffffff80003a4b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a4f:	48 8b 90 a0 02 00 00 	mov    0x2a0(%rax),%rdx
ffffffff80003a56:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a5a:	48 8b 80 b8 02 00 00 	mov    0x2b8(%rax),%rax
ffffffff80003a61:	48 8b 8d 60 fb ff ff 	mov    -0x4a0(%rbp),%rcx
ffffffff80003a68:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003a6b:	48 89 c7             	mov    %rax,%rdi
ffffffff80003a6e:	ff d1                	call   *%rcx
    }
    if (ctx->font_bool != NULL) {
ffffffff80003a70:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a74:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
ffffffff80003a7b:	48 85 c0             	test   %rax,%rax
ffffffff80003a7e:	74 25                	je     ffffffff80003aa5 <flanterm_fb_init+0x2323>
        _free(ctx->font_bool, ctx->font_bool_size);
ffffffff80003a80:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a84:	48 8b 90 30 02 00 00 	mov    0x230(%rax),%rdx
ffffffff80003a8b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003a8f:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
ffffffff80003a96:	48 8b 8d 60 fb ff ff 	mov    -0x4a0(%rbp),%rcx
ffffffff80003a9d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003aa0:	48 89 c7             	mov    %rax,%rdi
ffffffff80003aa3:	ff d1                	call   *%rcx
    }
    if (ctx->font_bits != NULL) {
ffffffff80003aa5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003aa9:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff80003ab0:	48 85 c0             	test   %rax,%rax
ffffffff80003ab3:	74 25                	je     ffffffff80003ada <flanterm_fb_init+0x2358>
        _free(ctx->font_bits, ctx->font_bits_size);
ffffffff80003ab5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003ab9:	48 8b 90 20 02 00 00 	mov    0x220(%rax),%rdx
ffffffff80003ac0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003ac4:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff80003acb:	48 8b 8d 60 fb ff ff 	mov    -0x4a0(%rbp),%rcx
ffffffff80003ad2:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003ad5:	48 89 c7             	mov    %rax,%rdi
ffffffff80003ad8:	ff d1                	call   *%rcx
    }
    if (ctx != NULL) {
ffffffff80003ada:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80003adf:	74 15                	je     ffffffff80003af6 <flanterm_fb_init+0x2374>
        _free(ctx, sizeof(struct flanterm_fb_context));
ffffffff80003ae1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003ae5:	48 8b 95 60 fb ff ff 	mov    -0x4a0(%rbp),%rdx
ffffffff80003aec:	be 18 03 00 00       	mov    $0x318,%esi
ffffffff80003af1:	48 89 c7             	mov    %rax,%rdi
ffffffff80003af4:	ff d2                	call   *%rdx
    }

    return NULL;
ffffffff80003af6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80003afb:	c9                   	leave  
ffffffff80003afc:	c3                   	ret    

ffffffff80003afd <flanterm_context_reinit>:
};

#define CHARSET_DEFAULT 0
#define CHARSET_DEC_SPECIAL 1

void flanterm_context_reinit(struct flanterm_context *ctx) {
ffffffff80003afd:	f3 0f 1e fa          	endbr64 
ffffffff80003b01:	55                   	push   %rbp
ffffffff80003b02:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003b05:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80003b09:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ctx->tab_size = 8;
ffffffff80003b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b11:	48 c7 00 08 00 00 00 	movq   $0x8,(%rax)
    ctx->autoflush = true;
ffffffff80003b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b1c:	c6 40 08 01          	movb   $0x1,0x8(%rax)
    ctx->cursor_enabled = true;
ffffffff80003b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b24:	c6 40 09 01          	movb   $0x1,0x9(%rax)
    ctx->scroll_enabled = true;
ffffffff80003b28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b2c:	c6 40 0a 01          	movb   $0x1,0xa(%rax)
    ctx->control_sequence = false;
ffffffff80003b30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b34:	c6 40 0b 00          	movb   $0x0,0xb(%rax)
    ctx->escape = false;
ffffffff80003b38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b3c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
    ctx->osc = false;
ffffffff80003b40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b44:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
    ctx->osc_escape = false;
ffffffff80003b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b4c:	c6 40 0e 00          	movb   $0x0,0xe(%rax)
    ctx->rrr = false;
ffffffff80003b50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b54:	c6 40 0f 00          	movb   $0x0,0xf(%rax)
    ctx->discard_next = false;
ffffffff80003b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b5c:	c6 40 10 00          	movb   $0x0,0x10(%rax)
    ctx->bold = false;
ffffffff80003b60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b64:	c6 40 11 00          	movb   $0x0,0x11(%rax)
    ctx->bg_bold = false;
ffffffff80003b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b6c:	c6 40 12 00          	movb   $0x0,0x12(%rax)
    ctx->reverse_video = false;
ffffffff80003b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b74:	c6 40 13 00          	movb   $0x0,0x13(%rax)
    ctx->dec_private = false;
ffffffff80003b78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b7c:	c6 40 14 00          	movb   $0x0,0x14(%rax)
    ctx->insert_mode = false;
ffffffff80003b80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b84:	c6 40 15 00          	movb   $0x0,0x15(%rax)
    ctx->unicode_remaining = 0;
ffffffff80003b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b8c:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80003b93:	00 
    ctx->g_select = 0;
ffffffff80003b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003b98:	c6 40 28 00          	movb   $0x0,0x28(%rax)
    ctx->charsets[0] = CHARSET_DEFAULT;
ffffffff80003b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003ba0:	c6 40 29 00          	movb   $0x0,0x29(%rax)
    ctx->charsets[1] = CHARSET_DEC_SPECIAL;
ffffffff80003ba4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003ba8:	c6 40 2a 01          	movb   $0x1,0x2a(%rax)
    ctx->current_charset = 0;
ffffffff80003bac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003bb0:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80003bb7:	00 
    ctx->escape_offset = 0;
ffffffff80003bb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003bbc:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80003bc3:	00 
    ctx->esc_values_i = 0;
ffffffff80003bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003bc8:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
ffffffff80003bcf:	00 
    ctx->saved_cursor_x = 0;
ffffffff80003bd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003bd4:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
ffffffff80003bdb:	00 
    ctx->saved_cursor_y = 0;
ffffffff80003bdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003be0:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80003be7:	00 
    ctx->current_primary = (size_t)-1;
ffffffff80003be8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003bec:	48 c7 40 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%rax)
ffffffff80003bf3:	ff 
    ctx->current_bg = (size_t)-1;
ffffffff80003bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003bf8:	48 c7 40 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rax)
ffffffff80003bff:	ff 
    ctx->scroll_top_margin = 0;
ffffffff80003c00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003c04:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
ffffffff80003c0b:	00 
    ctx->scroll_bottom_margin = ctx->rows;
ffffffff80003c0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003c10:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff80003c17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003c1b:	48 89 50 70          	mov    %rdx,0x70(%rax)
    ctx->oob_output = FLANTERM_OOB_OUTPUT_ONLCR;
ffffffff80003c1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003c23:	48 c7 80 b8 00 00 00 	movq   $0x10,0xb8(%rax)
ffffffff80003c2a:	10 00 00 00 
}
ffffffff80003c2e:	90                   	nop
ffffffff80003c2f:	c9                   	leave  
ffffffff80003c30:	c3                   	ret    

ffffffff80003c31 <flanterm_write>:

static void flanterm_putchar(struct flanterm_context *ctx, uint8_t c);

void flanterm_write(struct flanterm_context *ctx, const char *buf, size_t count) {
ffffffff80003c31:	f3 0f 1e fa          	endbr64 
ffffffff80003c35:	55                   	push   %rbp
ffffffff80003c36:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003c39:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80003c3d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80003c41:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80003c45:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    for (size_t i = 0; i < count; i++) {
ffffffff80003c49:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80003c50:	00 
ffffffff80003c51:	eb 24                	jmp    ffffffff80003c77 <flanterm_write+0x46>
        flanterm_putchar(ctx, buf[i]);
ffffffff80003c53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80003c57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003c5b:	48 01 d0             	add    %rdx,%rax
ffffffff80003c5e:	0f b6 00             	movzbl (%rax),%eax
ffffffff80003c61:	0f b6 d0             	movzbl %al,%edx
ffffffff80003c64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003c68:	89 d6                	mov    %edx,%esi
ffffffff80003c6a:	48 89 c7             	mov    %rax,%rdi
ffffffff80003c6d:	e8 bb 33 00 00       	call   ffffffff8000702d <flanterm_putchar>
    for (size_t i = 0; i < count; i++) {
ffffffff80003c72:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80003c77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003c7b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80003c7f:	72 d2                	jb     ffffffff80003c53 <flanterm_write+0x22>
    }

    if (ctx->autoflush) {
ffffffff80003c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003c85:	0f b6 40 08          	movzbl 0x8(%rax),%eax
ffffffff80003c89:	84 c0                	test   %al,%al
ffffffff80003c8b:	74 14                	je     ffffffff80003ca1 <flanterm_write+0x70>
        ctx->double_buffer_flush(ctx);
ffffffff80003c8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003c91:	48 8b 90 90 01 00 00 	mov    0x190(%rax),%rdx
ffffffff80003c98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003c9c:	48 89 c7             	mov    %rax,%rdi
ffffffff80003c9f:	ff d2                	call   *%rdx
    }
}
ffffffff80003ca1:	90                   	nop
ffffffff80003ca2:	c9                   	leave  
ffffffff80003ca3:	c3                   	ret    

ffffffff80003ca4 <sgr>:

static void sgr(struct flanterm_context *ctx) {
ffffffff80003ca4:	f3 0f 1e fa          	endbr64 
ffffffff80003ca8:	55                   	push   %rbp
ffffffff80003ca9:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003cac:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80003cb0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    size_t i = 0;
ffffffff80003cb4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80003cbb:	00 

    if (!ctx->esc_values_i)
ffffffff80003cbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003cc0:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80003cc4:	48 85 c0             	test   %rax,%rax
ffffffff80003cc7:	0f 85 14 0b 00 00    	jne    ffffffff800047e1 <sgr+0xb3d>
        goto def;
ffffffff80003ccd:	eb 15                	jmp    ffffffff80003ce4 <sgr+0x40>

    for (; i < ctx->esc_values_i; i++) {
        size_t offset;

        if (ctx->esc_values[i] == 0) {
ffffffff80003ccf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003cd3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80003cd7:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80003cdb:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80003cdf:	85 c0                	test   %eax,%eax
ffffffff80003ce1:	75 7e                	jne    ffffffff80003d61 <sgr+0xbd>
def:
ffffffff80003ce3:	90                   	nop
            if (ctx->reverse_video) {
ffffffff80003ce4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ce8:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003cec:	84 c0                	test   %al,%al
ffffffff80003cee:	74 1c                	je     ffffffff80003d0c <sgr+0x68>
                ctx->reverse_video = false;
ffffffff80003cf0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003cf4:	c6 40 13 00          	movb   $0x0,0x13(%rax)
                ctx->swap_palette(ctx);
ffffffff80003cf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003cfc:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff80003d03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d07:	48 89 c7             	mov    %rax,%rdi
ffffffff80003d0a:	ff d2                	call   *%rdx
            }
            ctx->bold = false;
ffffffff80003d0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d10:	c6 40 11 00          	movb   $0x0,0x11(%rax)
            ctx->bg_bold = false;
ffffffff80003d14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d18:	c6 40 12 00          	movb   $0x0,0x12(%rax)
            ctx->current_primary = (size_t)-1;
ffffffff80003d1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d20:	48 c7 40 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%rax)
ffffffff80003d27:	ff 
            ctx->current_bg = (size_t)-1;
ffffffff80003d28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d2c:	48 c7 40 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rax)
ffffffff80003d33:	ff 
            ctx->set_text_bg_default(ctx);
ffffffff80003d34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d38:	48 8b 90 48 01 00 00 	mov    0x148(%rax),%rdx
ffffffff80003d3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d43:	48 89 c7             	mov    %rax,%rdi
ffffffff80003d46:	ff d2                	call   *%rdx
            ctx->set_text_fg_default(ctx);
ffffffff80003d48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d4c:	48 8b 90 40 01 00 00 	mov    0x140(%rax),%rdx
ffffffff80003d53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d57:	48 89 c7             	mov    %rax,%rdi
ffffffff80003d5a:	ff d2                	call   *%rdx
            continue;
ffffffff80003d5c:	e9 79 0a 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] == 1) {
ffffffff80003d61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d65:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80003d69:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80003d6d:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80003d71:	83 f8 01             	cmp    $0x1,%eax
ffffffff80003d74:	0f 85 ae 00 00 00    	jne    ffffffff80003e28 <sgr+0x184>
            ctx->bold = true;
ffffffff80003d7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d7e:	c6 40 11 01          	movb   $0x1,0x11(%rax)
            if (ctx->current_primary != (size_t)-1) {
ffffffff80003d82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d86:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80003d8a:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80003d8e:	74 57                	je     ffffffff80003de7 <sgr+0x143>
                if (!ctx->reverse_video) {
ffffffff80003d90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003d94:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003d98:	83 f0 01             	xor    $0x1,%eax
ffffffff80003d9b:	84 c0                	test   %al,%al
ffffffff80003d9d:	74 24                	je     ffffffff80003dc3 <sgr+0x11f>
                    ctx->set_text_fg_bright(ctx, ctx->current_primary);
ffffffff80003d9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003da3:	48 8b 88 20 01 00 00 	mov    0x120(%rax),%rcx
ffffffff80003daa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003dae:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80003db2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003db6:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003db9:	48 89 c7             	mov    %rax,%rdi
ffffffff80003dbc:	ff d1                	call   *%rcx
                    ctx->set_text_fg_default_bright(ctx);
                } else {
                    ctx->set_text_bg_default_bright(ctx);
                }
            }
            continue;
ffffffff80003dbe:	e9 17 0a 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_bg_bright(ctx, ctx->current_primary);
ffffffff80003dc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003dc7:	48 8b 88 28 01 00 00 	mov    0x128(%rax),%rcx
ffffffff80003dce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003dd2:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80003dd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003dda:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003ddd:	48 89 c7             	mov    %rax,%rdi
ffffffff80003de0:	ff d1                	call   *%rcx
            continue;
ffffffff80003de2:	e9 f3 09 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                if (!ctx->reverse_video) {
ffffffff80003de7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003deb:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003def:	83 f0 01             	xor    $0x1,%eax
ffffffff80003df2:	84 c0                	test   %al,%al
ffffffff80003df4:	74 19                	je     ffffffff80003e0f <sgr+0x16b>
                    ctx->set_text_fg_default_bright(ctx);
ffffffff80003df6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003dfa:	48 8b 90 50 01 00 00 	mov    0x150(%rax),%rdx
ffffffff80003e01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e05:	48 89 c7             	mov    %rax,%rdi
ffffffff80003e08:	ff d2                	call   *%rdx
            continue;
ffffffff80003e0a:	e9 cb 09 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_bg_default_bright(ctx);
ffffffff80003e0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e13:	48 8b 90 58 01 00 00 	mov    0x158(%rax),%rdx
ffffffff80003e1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e1e:	48 89 c7             	mov    %rax,%rdi
ffffffff80003e21:	ff d2                	call   *%rdx
            continue;
ffffffff80003e23:	e9 b2 09 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] == 5) {
ffffffff80003e28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80003e30:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80003e34:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80003e38:	83 f8 05             	cmp    $0x5,%eax
ffffffff80003e3b:	0f 85 ae 00 00 00    	jne    ffffffff80003eef <sgr+0x24b>
            ctx->bg_bold = true;
ffffffff80003e41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e45:	c6 40 12 01          	movb   $0x1,0x12(%rax)
            if (ctx->current_bg != (size_t)-1) {
ffffffff80003e49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e4d:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80003e51:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80003e55:	74 57                	je     ffffffff80003eae <sgr+0x20a>
                if (!ctx->reverse_video) {
ffffffff80003e57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e5b:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003e5f:	83 f0 01             	xor    $0x1,%eax
ffffffff80003e62:	84 c0                	test   %al,%al
ffffffff80003e64:	74 24                	je     ffffffff80003e8a <sgr+0x1e6>
                    ctx->set_text_bg_bright(ctx, ctx->current_bg);
ffffffff80003e66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e6a:	48 8b 88 28 01 00 00 	mov    0x128(%rax),%rcx
ffffffff80003e71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e75:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80003e79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e7d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003e80:	48 89 c7             	mov    %rax,%rdi
ffffffff80003e83:	ff d1                	call   *%rcx
                    ctx->set_text_bg_default_bright(ctx);
                } else {
                    ctx->set_text_fg_default_bright(ctx);
                }
            }
            continue;
ffffffff80003e85:	e9 50 09 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_fg_bright(ctx, ctx->current_bg);
ffffffff80003e8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e8e:	48 8b 88 20 01 00 00 	mov    0x120(%rax),%rcx
ffffffff80003e95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e99:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80003e9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ea1:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003ea4:	48 89 c7             	mov    %rax,%rdi
ffffffff80003ea7:	ff d1                	call   *%rcx
            continue;
ffffffff80003ea9:	e9 2c 09 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                if (!ctx->reverse_video) {
ffffffff80003eae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003eb2:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003eb6:	83 f0 01             	xor    $0x1,%eax
ffffffff80003eb9:	84 c0                	test   %al,%al
ffffffff80003ebb:	74 19                	je     ffffffff80003ed6 <sgr+0x232>
                    ctx->set_text_bg_default_bright(ctx);
ffffffff80003ebd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ec1:	48 8b 90 58 01 00 00 	mov    0x158(%rax),%rdx
ffffffff80003ec8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ecc:	48 89 c7             	mov    %rax,%rdi
ffffffff80003ecf:	ff d2                	call   *%rdx
            continue;
ffffffff80003ed1:	e9 04 09 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_fg_default_bright(ctx);
ffffffff80003ed6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003eda:	48 8b 90 50 01 00 00 	mov    0x150(%rax),%rdx
ffffffff80003ee1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ee5:	48 89 c7             	mov    %rax,%rdi
ffffffff80003ee8:	ff d2                	call   *%rdx
            continue;
ffffffff80003eea:	e9 eb 08 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] == 22) {
ffffffff80003eef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ef3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80003ef7:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80003efb:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80003eff:	83 f8 16             	cmp    $0x16,%eax
ffffffff80003f02:	0f 85 ae 00 00 00    	jne    ffffffff80003fb6 <sgr+0x312>
            ctx->bold = false;
ffffffff80003f08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f0c:	c6 40 11 00          	movb   $0x0,0x11(%rax)
            if (ctx->current_primary != (size_t)-1) {
ffffffff80003f10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f14:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80003f18:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80003f1c:	74 57                	je     ffffffff80003f75 <sgr+0x2d1>
                if (!ctx->reverse_video) {
ffffffff80003f1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f22:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003f26:	83 f0 01             	xor    $0x1,%eax
ffffffff80003f29:	84 c0                	test   %al,%al
ffffffff80003f2b:	74 24                	je     ffffffff80003f51 <sgr+0x2ad>
                    ctx->set_text_fg(ctx, ctx->current_primary);
ffffffff80003f2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f31:	48 8b 88 10 01 00 00 	mov    0x110(%rax),%rcx
ffffffff80003f38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f3c:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80003f40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f44:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003f47:	48 89 c7             	mov    %rax,%rdi
ffffffff80003f4a:	ff d1                	call   *%rcx
                    ctx->set_text_fg_default(ctx);
                } else {
                    ctx->set_text_bg_default(ctx);
                }
            }
            continue;
ffffffff80003f4c:	e9 89 08 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_bg(ctx, ctx->current_primary);
ffffffff80003f51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f55:	48 8b 88 18 01 00 00 	mov    0x118(%rax),%rcx
ffffffff80003f5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f60:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80003f64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f68:	48 89 d6             	mov    %rdx,%rsi
ffffffff80003f6b:	48 89 c7             	mov    %rax,%rdi
ffffffff80003f6e:	ff d1                	call   *%rcx
            continue;
ffffffff80003f70:	e9 65 08 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                if (!ctx->reverse_video) {
ffffffff80003f75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f79:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003f7d:	83 f0 01             	xor    $0x1,%eax
ffffffff80003f80:	84 c0                	test   %al,%al
ffffffff80003f82:	74 19                	je     ffffffff80003f9d <sgr+0x2f9>
                    ctx->set_text_fg_default(ctx);
ffffffff80003f84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f88:	48 8b 90 40 01 00 00 	mov    0x140(%rax),%rdx
ffffffff80003f8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003f93:	48 89 c7             	mov    %rax,%rdi
ffffffff80003f96:	ff d2                	call   *%rdx
            continue;
ffffffff80003f98:	e9 3d 08 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_bg_default(ctx);
ffffffff80003f9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fa1:	48 8b 90 48 01 00 00 	mov    0x148(%rax),%rdx
ffffffff80003fa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fac:	48 89 c7             	mov    %rax,%rdi
ffffffff80003faf:	ff d2                	call   *%rdx
            continue;
ffffffff80003fb1:	e9 24 08 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] == 25) {
ffffffff80003fb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fba:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80003fbe:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80003fc2:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80003fc6:	83 f8 19             	cmp    $0x19,%eax
ffffffff80003fc9:	0f 85 ae 00 00 00    	jne    ffffffff8000407d <sgr+0x3d9>
            ctx->bg_bold = false;
ffffffff80003fcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fd3:	c6 40 12 00          	movb   $0x0,0x12(%rax)
            if (ctx->current_bg != (size_t)-1) {
ffffffff80003fd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fdb:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80003fdf:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80003fe3:	74 57                	je     ffffffff8000403c <sgr+0x398>
                if (!ctx->reverse_video) {
ffffffff80003fe5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fe9:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80003fed:	83 f0 01             	xor    $0x1,%eax
ffffffff80003ff0:	84 c0                	test   %al,%al
ffffffff80003ff2:	74 24                	je     ffffffff80004018 <sgr+0x374>
                    ctx->set_text_bg(ctx, ctx->current_bg);
ffffffff80003ff4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ff8:	48 8b 88 18 01 00 00 	mov    0x118(%rax),%rcx
ffffffff80003fff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004003:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80004007:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000400b:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000400e:	48 89 c7             	mov    %rax,%rdi
ffffffff80004011:	ff d1                	call   *%rcx
                    ctx->set_text_bg_default(ctx);
                } else {
                    ctx->set_text_fg_default(ctx);
                }
            }
            continue;
ffffffff80004013:	e9 c2 07 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_fg(ctx, ctx->current_bg);
ffffffff80004018:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000401c:	48 8b 88 10 01 00 00 	mov    0x110(%rax),%rcx
ffffffff80004023:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004027:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff8000402b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000402f:	48 89 d6             	mov    %rdx,%rsi
ffffffff80004032:	48 89 c7             	mov    %rax,%rdi
ffffffff80004035:	ff d1                	call   *%rcx
            continue;
ffffffff80004037:	e9 9e 07 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                if (!ctx->reverse_video) {
ffffffff8000403c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004040:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004044:	83 f0 01             	xor    $0x1,%eax
ffffffff80004047:	84 c0                	test   %al,%al
ffffffff80004049:	74 19                	je     ffffffff80004064 <sgr+0x3c0>
                    ctx->set_text_bg_default(ctx);
ffffffff8000404b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000404f:	48 8b 90 48 01 00 00 	mov    0x148(%rax),%rdx
ffffffff80004056:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000405a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000405d:	ff d2                	call   *%rdx
            continue;
ffffffff8000405f:	e9 76 07 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    ctx->set_text_fg_default(ctx);
ffffffff80004064:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004068:	48 8b 90 40 01 00 00 	mov    0x140(%rax),%rdx
ffffffff8000406f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004073:	48 89 c7             	mov    %rax,%rdi
ffffffff80004076:	ff d2                	call   *%rdx
            continue;
ffffffff80004078:	e9 5d 07 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] >= 30 && ctx->esc_values[i] <= 37) {
ffffffff8000407d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004081:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004085:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004089:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000408d:	83 f8 1d             	cmp    $0x1d,%eax
ffffffff80004090:	0f 86 f3 00 00 00    	jbe    ffffffff80004189 <sgr+0x4e5>
ffffffff80004096:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000409a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000409e:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800040a2:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800040a6:	83 f8 25             	cmp    $0x25,%eax
ffffffff800040a9:	0f 87 da 00 00 00    	ja     ffffffff80004189 <sgr+0x4e5>
            offset = 30;
ffffffff800040af:	48 c7 45 f0 1e 00 00 	movq   $0x1e,-0x10(%rbp)
ffffffff800040b6:	00 
            ctx->current_primary = ctx->esc_values[i] - offset;
ffffffff800040b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800040bb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800040bf:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800040c3:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800040c7:	89 c0                	mov    %eax,%eax
ffffffff800040c9:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff800040cd:	48 89 c2             	mov    %rax,%rdx
ffffffff800040d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800040d4:	48 89 50 58          	mov    %rdx,0x58(%rax)

            if (ctx->reverse_video) {
ffffffff800040d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800040dc:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff800040e0:	84 c0                	test   %al,%al
ffffffff800040e2:	0f 85 0e 01 00 00    	jne    ffffffff800041f6 <sgr+0x552>
                goto set_bg;
            }

set_fg:
ffffffff800040e8:	90                   	nop
ffffffff800040e9:	eb 01                	jmp    ffffffff800040ec <sgr+0x448>
        else if (ctx->esc_values[i] >= 40 && ctx->esc_values[i] <= 47) {
            offset = 40;
            ctx->current_bg = ctx->esc_values[i] - offset;

            if (ctx->reverse_video) {
                goto set_fg;
ffffffff800040eb:	90                   	nop
            if ((ctx->bold && !ctx->reverse_video)
ffffffff800040ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800040f0:	0f b6 40 11          	movzbl 0x11(%rax),%eax
ffffffff800040f4:	84 c0                	test   %al,%al
ffffffff800040f6:	74 0f                	je     ffffffff80004107 <sgr+0x463>
ffffffff800040f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800040fc:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004100:	83 f0 01             	xor    $0x1,%eax
ffffffff80004103:	84 c0                	test   %al,%al
ffffffff80004105:	75 18                	jne    ffffffff8000411f <sgr+0x47b>
             || (ctx->bg_bold && ctx->reverse_video)) {
ffffffff80004107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000410b:	0f b6 40 12          	movzbl 0x12(%rax),%eax
ffffffff8000410f:	84 c0                	test   %al,%al
ffffffff80004111:	74 41                	je     ffffffff80004154 <sgr+0x4b0>
ffffffff80004113:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004117:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff8000411b:	84 c0                	test   %al,%al
ffffffff8000411d:	74 35                	je     ffffffff80004154 <sgr+0x4b0>
                ctx->set_text_fg_bright(ctx, ctx->esc_values[i] - offset);
ffffffff8000411f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004123:	48 8b 88 20 01 00 00 	mov    0x120(%rax),%rcx
ffffffff8000412a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000412e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004132:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004136:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000413a:	89 c0                	mov    %eax,%eax
ffffffff8000413c:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff80004140:	48 89 c2             	mov    %rax,%rdx
ffffffff80004143:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004147:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000414a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000414d:	ff d1                	call   *%rcx
            continue;
ffffffff8000414f:	e9 86 06 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                ctx->set_text_fg(ctx, ctx->esc_values[i] - offset);
ffffffff80004154:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004158:	48 8b 88 10 01 00 00 	mov    0x110(%rax),%rcx
ffffffff8000415f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004163:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004167:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff8000416b:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000416f:	89 c0                	mov    %eax,%eax
ffffffff80004171:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff80004175:	48 89 c2             	mov    %rax,%rdx
ffffffff80004178:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000417c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000417f:	48 89 c7             	mov    %rax,%rdi
ffffffff80004182:	ff d1                	call   *%rcx
            continue;
ffffffff80004184:	e9 51 06 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        else if (ctx->esc_values[i] >= 40 && ctx->esc_values[i] <= 47) {
ffffffff80004189:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000418d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004191:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004195:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80004199:	83 f8 27             	cmp    $0x27,%eax
ffffffff8000419c:	0f 86 f2 00 00 00    	jbe    ffffffff80004294 <sgr+0x5f0>
ffffffff800041a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800041a6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800041aa:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800041ae:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800041b2:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800041b5:	0f 87 d9 00 00 00    	ja     ffffffff80004294 <sgr+0x5f0>
            offset = 40;
ffffffff800041bb:	48 c7 45 f0 28 00 00 	movq   $0x28,-0x10(%rbp)
ffffffff800041c2:	00 
            ctx->current_bg = ctx->esc_values[i] - offset;
ffffffff800041c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800041c7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800041cb:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800041cf:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800041d3:	89 c0                	mov    %eax,%eax
ffffffff800041d5:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff800041d9:	48 89 c2             	mov    %rax,%rdx
ffffffff800041dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800041e0:	48 89 50 60          	mov    %rdx,0x60(%rax)
            if (ctx->reverse_video) {
ffffffff800041e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800041e8:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff800041ec:	84 c0                	test   %al,%al
ffffffff800041ee:	0f 85 f7 fe ff ff    	jne    ffffffff800040eb <sgr+0x447>
            }

set_bg:
ffffffff800041f4:	eb 01                	jmp    ffffffff800041f7 <sgr+0x553>
                goto set_bg;
ffffffff800041f6:	90                   	nop
            if ((ctx->bold && ctx->reverse_video)
ffffffff800041f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800041fb:	0f b6 40 11          	movzbl 0x11(%rax),%eax
ffffffff800041ff:	84 c0                	test   %al,%al
ffffffff80004201:	74 0c                	je     ffffffff8000420f <sgr+0x56b>
ffffffff80004203:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004207:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff8000420b:	84 c0                	test   %al,%al
ffffffff8000420d:	75 1b                	jne    ffffffff8000422a <sgr+0x586>
             || (ctx->bg_bold && !ctx->reverse_video)) {
ffffffff8000420f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004213:	0f b6 40 12          	movzbl 0x12(%rax),%eax
ffffffff80004217:	84 c0                	test   %al,%al
ffffffff80004219:	74 44                	je     ffffffff8000425f <sgr+0x5bb>
ffffffff8000421b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000421f:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004223:	83 f0 01             	xor    $0x1,%eax
ffffffff80004226:	84 c0                	test   %al,%al
ffffffff80004228:	74 35                	je     ffffffff8000425f <sgr+0x5bb>
                ctx->set_text_bg_bright(ctx, ctx->esc_values[i] - offset);
ffffffff8000422a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000422e:	48 8b 88 28 01 00 00 	mov    0x128(%rax),%rcx
ffffffff80004235:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004239:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000423d:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004241:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80004245:	89 c0                	mov    %eax,%eax
ffffffff80004247:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff8000424b:	48 89 c2             	mov    %rax,%rdx
ffffffff8000424e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004252:	48 89 d6             	mov    %rdx,%rsi
ffffffff80004255:	48 89 c7             	mov    %rax,%rdi
ffffffff80004258:	ff d1                	call   *%rcx
            } else {
                ctx->set_text_bg(ctx, ctx->esc_values[i] - offset);
            }
            continue;
ffffffff8000425a:	e9 7b 05 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                ctx->set_text_bg(ctx, ctx->esc_values[i] - offset);
ffffffff8000425f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004263:	48 8b 88 18 01 00 00 	mov    0x118(%rax),%rcx
ffffffff8000426a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000426e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004272:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004276:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000427a:	89 c0                	mov    %eax,%eax
ffffffff8000427c:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff80004280:	48 89 c2             	mov    %rax,%rdx
ffffffff80004283:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004287:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000428a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000428d:	ff d1                	call   *%rcx
            continue;
ffffffff8000428f:	e9 46 05 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] >= 90 && ctx->esc_values[i] <= 97) {
ffffffff80004294:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004298:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000429c:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800042a0:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800042a4:	83 f8 59             	cmp    $0x59,%eax
ffffffff800042a7:	0f 86 87 00 00 00    	jbe    ffffffff80004334 <sgr+0x690>
ffffffff800042ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800042b1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800042b5:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800042b9:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800042bd:	83 f8 61             	cmp    $0x61,%eax
ffffffff800042c0:	77 72                	ja     ffffffff80004334 <sgr+0x690>
            offset = 90;
ffffffff800042c2:	48 c7 45 f0 5a 00 00 	movq   $0x5a,-0x10(%rbp)
ffffffff800042c9:	00 
            ctx->current_primary = ctx->esc_values[i] - offset;
ffffffff800042ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800042ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800042d2:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800042d6:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800042da:	89 c0                	mov    %eax,%eax
ffffffff800042dc:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff800042e0:	48 89 c2             	mov    %rax,%rdx
ffffffff800042e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800042e7:	48 89 50 58          	mov    %rdx,0x58(%rax)

            if (ctx->reverse_video) {
ffffffff800042eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800042ef:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff800042f3:	84 c0                	test   %al,%al
ffffffff800042f5:	0f 85 a2 00 00 00    	jne    ffffffff8000439d <sgr+0x6f9>
                goto set_bg_bright;
            }

set_fg_bright:
ffffffff800042fb:	90                   	nop
ffffffff800042fc:	eb 01                	jmp    ffffffff800042ff <sgr+0x65b>
        else if (ctx->esc_values[i] >= 100 && ctx->esc_values[i] <= 107) {
            offset = 100;
            ctx->current_bg = ctx->esc_values[i] - offset;

            if (ctx->reverse_video) {
                goto set_fg_bright;
ffffffff800042fe:	90                   	nop
            ctx->set_text_fg_bright(ctx, ctx->esc_values[i] - offset);
ffffffff800042ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004303:	48 8b 88 20 01 00 00 	mov    0x120(%rax),%rcx
ffffffff8000430a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000430e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004312:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004316:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000431a:	89 c0                	mov    %eax,%eax
ffffffff8000431c:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff80004320:	48 89 c2             	mov    %rax,%rdx
ffffffff80004323:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004327:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000432a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000432d:	ff d1                	call   *%rcx
            continue;
ffffffff8000432f:	e9 a6 04 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        else if (ctx->esc_values[i] >= 100 && ctx->esc_values[i] <= 107) {
ffffffff80004334:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004338:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000433c:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004340:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80004344:	83 f8 63             	cmp    $0x63,%eax
ffffffff80004347:	0f 86 86 00 00 00    	jbe    ffffffff800043d3 <sgr+0x72f>
ffffffff8000434d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004351:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004355:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004359:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000435d:	83 f8 6b             	cmp    $0x6b,%eax
ffffffff80004360:	77 71                	ja     ffffffff800043d3 <sgr+0x72f>
            offset = 100;
ffffffff80004362:	48 c7 45 f0 64 00 00 	movq   $0x64,-0x10(%rbp)
ffffffff80004369:	00 
            ctx->current_bg = ctx->esc_values[i] - offset;
ffffffff8000436a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000436e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004372:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004376:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000437a:	89 c0                	mov    %eax,%eax
ffffffff8000437c:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff80004380:	48 89 c2             	mov    %rax,%rdx
ffffffff80004383:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004387:	48 89 50 60          	mov    %rdx,0x60(%rax)
            if (ctx->reverse_video) {
ffffffff8000438b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000438f:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004393:	84 c0                	test   %al,%al
ffffffff80004395:	0f 85 63 ff ff ff    	jne    ffffffff800042fe <sgr+0x65a>
            }

set_bg_bright:
ffffffff8000439b:	eb 01                	jmp    ffffffff8000439e <sgr+0x6fa>
                goto set_bg_bright;
ffffffff8000439d:	90                   	nop
            ctx->set_text_bg_bright(ctx, ctx->esc_values[i] - offset);
ffffffff8000439e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800043a2:	48 8b 88 28 01 00 00 	mov    0x128(%rax),%rcx
ffffffff800043a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800043ad:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800043b1:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800043b5:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800043b9:	89 c0                	mov    %eax,%eax
ffffffff800043bb:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff800043bf:	48 89 c2             	mov    %rax,%rdx
ffffffff800043c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800043c6:	48 89 d6             	mov    %rdx,%rsi
ffffffff800043c9:	48 89 c7             	mov    %rax,%rdi
ffffffff800043cc:	ff d1                	call   *%rcx
            continue;
ffffffff800043ce:	e9 07 04 00 00       	jmp    ffffffff800047da <sgr+0xb36>
        }

        else if (ctx->esc_values[i] == 39) {
ffffffff800043d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800043d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800043db:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800043df:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800043e3:	83 f8 27             	cmp    $0x27,%eax
ffffffff800043e6:	0f 85 8e 00 00 00    	jne    ffffffff8000447a <sgr+0x7d6>
            ctx->current_primary = (size_t)-1;
ffffffff800043ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800043f0:	48 c7 40 58 ff ff ff 	movq   $0xffffffffffffffff,0x58(%rax)
ffffffff800043f7:	ff 

            if (ctx->reverse_video) {
ffffffff800043f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800043fc:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004400:	84 c0                	test   %al,%al
ffffffff80004402:	74 14                	je     ffffffff80004418 <sgr+0x774>
                ctx->swap_palette(ctx);
ffffffff80004404:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004408:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff8000440f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004413:	48 89 c7             	mov    %rax,%rdi
ffffffff80004416:	ff d2                	call   *%rdx
            }

            if (!ctx->bold) {
ffffffff80004418:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000441c:	0f b6 40 11          	movzbl 0x11(%rax),%eax
ffffffff80004420:	83 f0 01             	xor    $0x1,%eax
ffffffff80004423:	84 c0                	test   %al,%al
ffffffff80004425:	74 16                	je     ffffffff8000443d <sgr+0x799>
                ctx->set_text_fg_default(ctx);
ffffffff80004427:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000442b:	48 8b 90 40 01 00 00 	mov    0x140(%rax),%rdx
ffffffff80004432:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004436:	48 89 c7             	mov    %rax,%rdi
ffffffff80004439:	ff d2                	call   *%rdx
ffffffff8000443b:	eb 14                	jmp    ffffffff80004451 <sgr+0x7ad>
            } else {
                ctx->set_text_fg_default_bright(ctx);
ffffffff8000443d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004441:	48 8b 90 50 01 00 00 	mov    0x150(%rax),%rdx
ffffffff80004448:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000444c:	48 89 c7             	mov    %rax,%rdi
ffffffff8000444f:	ff d2                	call   *%rdx
            }

            if (ctx->reverse_video) {
ffffffff80004451:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004455:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004459:	84 c0                	test   %al,%al
ffffffff8000445b:	0f 84 6c 03 00 00    	je     ffffffff800047cd <sgr+0xb29>
                ctx->swap_palette(ctx);
ffffffff80004461:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004465:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff8000446c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004470:	48 89 c7             	mov    %rax,%rdi
ffffffff80004473:	ff d2                	call   *%rdx
            }

            continue;
ffffffff80004475:	e9 53 03 00 00       	jmp    ffffffff800047cd <sgr+0xb29>
        }

        else if (ctx->esc_values[i] == 49) {
ffffffff8000447a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000447e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004482:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004486:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000448a:	83 f8 31             	cmp    $0x31,%eax
ffffffff8000448d:	0f 85 8e 00 00 00    	jne    ffffffff80004521 <sgr+0x87d>
            ctx->current_bg = (size_t)-1;
ffffffff80004493:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004497:	48 c7 40 60 ff ff ff 	movq   $0xffffffffffffffff,0x60(%rax)
ffffffff8000449e:	ff 

            if (ctx->reverse_video) {
ffffffff8000449f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044a3:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff800044a7:	84 c0                	test   %al,%al
ffffffff800044a9:	74 14                	je     ffffffff800044bf <sgr+0x81b>
                ctx->swap_palette(ctx);
ffffffff800044ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044af:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff800044b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044ba:	48 89 c7             	mov    %rax,%rdi
ffffffff800044bd:	ff d2                	call   *%rdx
            }

            if (!ctx->bg_bold) {
ffffffff800044bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044c3:	0f b6 40 12          	movzbl 0x12(%rax),%eax
ffffffff800044c7:	83 f0 01             	xor    $0x1,%eax
ffffffff800044ca:	84 c0                	test   %al,%al
ffffffff800044cc:	74 16                	je     ffffffff800044e4 <sgr+0x840>
                ctx->set_text_bg_default(ctx);
ffffffff800044ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044d2:	48 8b 90 48 01 00 00 	mov    0x148(%rax),%rdx
ffffffff800044d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044dd:	48 89 c7             	mov    %rax,%rdi
ffffffff800044e0:	ff d2                	call   *%rdx
ffffffff800044e2:	eb 14                	jmp    ffffffff800044f8 <sgr+0x854>
            } else {
                ctx->set_text_bg_default_bright(ctx);
ffffffff800044e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044e8:	48 8b 90 58 01 00 00 	mov    0x158(%rax),%rdx
ffffffff800044ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044f3:	48 89 c7             	mov    %rax,%rdi
ffffffff800044f6:	ff d2                	call   *%rdx
            }

            if (ctx->reverse_video) {
ffffffff800044f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800044fc:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004500:	84 c0                	test   %al,%al
ffffffff80004502:	0f 84 c8 02 00 00    	je     ffffffff800047d0 <sgr+0xb2c>
                ctx->swap_palette(ctx);
ffffffff80004508:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000450c:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff80004513:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004517:	48 89 c7             	mov    %rax,%rdi
ffffffff8000451a:	ff d2                	call   *%rdx
            }

            continue;
ffffffff8000451c:	e9 af 02 00 00       	jmp    ffffffff800047d0 <sgr+0xb2c>
        }

        else if (ctx->esc_values[i] == 7) {
ffffffff80004521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004525:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004529:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff8000452d:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80004531:	83 f8 07             	cmp    $0x7,%eax
ffffffff80004534:	75 34                	jne    ffffffff8000456a <sgr+0x8c6>
            if (!ctx->reverse_video) {
ffffffff80004536:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000453a:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff8000453e:	83 f0 01             	xor    $0x1,%eax
ffffffff80004541:	84 c0                	test   %al,%al
ffffffff80004543:	0f 84 8a 02 00 00    	je     ffffffff800047d3 <sgr+0xb2f>
                ctx->reverse_video = true;
ffffffff80004549:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000454d:	c6 40 13 01          	movb   $0x1,0x13(%rax)
                ctx->swap_palette(ctx);
ffffffff80004551:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004555:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff8000455c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004560:	48 89 c7             	mov    %rax,%rdi
ffffffff80004563:	ff d2                	call   *%rdx
            }
            continue;
ffffffff80004565:	e9 69 02 00 00       	jmp    ffffffff800047d3 <sgr+0xb2f>
        }

        else if (ctx->esc_values[i] == 27) {
ffffffff8000456a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000456e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004572:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004576:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000457a:	83 f8 1b             	cmp    $0x1b,%eax
ffffffff8000457d:	75 31                	jne    ffffffff800045b0 <sgr+0x90c>
            if (ctx->reverse_video) {
ffffffff8000457f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004583:	0f b6 40 13          	movzbl 0x13(%rax),%eax
ffffffff80004587:	84 c0                	test   %al,%al
ffffffff80004589:	0f 84 47 02 00 00    	je     ffffffff800047d6 <sgr+0xb32>
                ctx->reverse_video = false;
ffffffff8000458f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004593:	c6 40 13 00          	movb   $0x0,0x13(%rax)
                ctx->swap_palette(ctx);
ffffffff80004597:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000459b:	48 8b 90 78 01 00 00 	mov    0x178(%rax),%rdx
ffffffff800045a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800045a6:	48 89 c7             	mov    %rax,%rdi
ffffffff800045a9:	ff d2                	call   *%rdx
            }
            continue;
ffffffff800045ab:	e9 26 02 00 00       	jmp    ffffffff800047d6 <sgr+0xb32>
        }

        // 256/RGB
        else if (ctx->esc_values[i] == 38 || ctx->esc_values[i] == 48) {
ffffffff800045b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800045b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800045b8:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800045bc:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800045c0:	83 f8 26             	cmp    $0x26,%eax
ffffffff800045c3:	74 19                	je     ffffffff800045de <sgr+0x93a>
ffffffff800045c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800045c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800045cd:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800045d1:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800045d5:	83 f8 30             	cmp    $0x30,%eax
ffffffff800045d8:	0f 85 fc 01 00 00    	jne    ffffffff800047da <sgr+0xb36>
            bool fg = ctx->esc_values[i] == 38;
ffffffff800045de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800045e2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800045e6:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800045ea:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800045ee:	83 f8 26             	cmp    $0x26,%eax
ffffffff800045f1:	0f 94 c0             	sete   %al
ffffffff800045f4:	88 45 ef             	mov    %al,-0x11(%rbp)

            i++;
ffffffff800045f7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
            if (i >= ctx->esc_values_i) {
ffffffff800045fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004600:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004604:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80004608:	0f 83 e8 01 00 00    	jae    ffffffff800047f6 <sgr+0xb52>
                break;
            }

            switch (ctx->esc_values[i]) {
ffffffff8000460e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004612:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80004616:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff8000461a:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000461e:	83 f8 02             	cmp    $0x2,%eax
ffffffff80004621:	74 0e                	je     ffffffff80004631 <sgr+0x98d>
ffffffff80004623:	83 f8 05             	cmp    $0x5,%eax
ffffffff80004626:	0f 84 a6 00 00 00    	je     ffffffff800046d2 <sgr+0xa2e>
                        (fg ? ctx->set_text_fg_rgb : ctx->set_text_bg_rgb)(ctx, rgb_value);
                    }

                    break;
                }
                default: continue;
ffffffff8000462c:	e9 a9 01 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    if (i + 3 >= ctx->esc_values_i) {
ffffffff80004631:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004635:	48 8d 50 03          	lea    0x3(%rax),%rdx
ffffffff80004639:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000463d:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004641:	48 39 c2             	cmp    %rax,%rdx
ffffffff80004644:	0f 83 af 01 00 00    	jae    ffffffff800047f9 <sgr+0xb55>
                    uint32_t rgb_value = 0;
ffffffff8000464a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
                    rgb_value |= ctx->esc_values[i + 1] << 16;
ffffffff80004651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004655:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80004659:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000465d:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004661:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80004665:	c1 e0 10             	shl    $0x10,%eax
ffffffff80004668:	09 45 e0             	or     %eax,-0x20(%rbp)
                    rgb_value |= ctx->esc_values[i + 2] << 8;
ffffffff8000466b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000466f:	48 8d 50 02          	lea    0x2(%rax),%rdx
ffffffff80004673:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004677:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff8000467b:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff8000467f:	c1 e0 08             	shl    $0x8,%eax
ffffffff80004682:	09 45 e0             	or     %eax,-0x20(%rbp)
                    rgb_value |= ctx->esc_values[i + 3];
ffffffff80004685:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004689:	48 8d 50 03          	lea    0x3(%rax),%rdx
ffffffff8000468d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004691:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004695:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff80004699:	09 45 e0             	or     %eax,-0x20(%rbp)
                    i += 3;
ffffffff8000469c:	48 83 45 f8 03       	addq   $0x3,-0x8(%rbp)
                    (fg ? ctx->set_text_fg_rgb : ctx->set_text_bg_rgb)(ctx, rgb_value);
ffffffff800046a1:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
ffffffff800046a5:	74 0d                	je     ffffffff800046b4 <sgr+0xa10>
ffffffff800046a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800046ab:	48 8b 80 30 01 00 00 	mov    0x130(%rax),%rax
ffffffff800046b2:	eb 0b                	jmp    ffffffff800046bf <sgr+0xa1b>
ffffffff800046b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800046b8:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
ffffffff800046bf:	8b 4d e0             	mov    -0x20(%rbp),%ecx
ffffffff800046c2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800046c6:	89 ce                	mov    %ecx,%esi
ffffffff800046c8:	48 89 d7             	mov    %rdx,%rdi
ffffffff800046cb:	ff d0                	call   *%rax
                    break;
ffffffff800046cd:	e9 08 01 00 00       	jmp    ffffffff800047da <sgr+0xb36>
                    if (i + 1 >= ctx->esc_values_i) {
ffffffff800046d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800046d6:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800046da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800046de:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff800046e2:	48 39 c2             	cmp    %rax,%rdx
ffffffff800046e5:	0f 83 11 01 00 00    	jae    ffffffff800047fc <sgr+0xb58>
                    uint32_t col = ctx->esc_values[i + 1];
ffffffff800046eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800046ef:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800046f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800046f7:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff800046fb:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
ffffffff800046ff:	89 45 e8             	mov    %eax,-0x18(%rbp)
                    i++;
ffffffff80004702:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
                    if (col < 8) {
ffffffff80004707:	83 7d e8 07          	cmpl   $0x7,-0x18(%rbp)
ffffffff8000470b:	77 32                	ja     ffffffff8000473f <sgr+0xa9b>
                        (fg ? ctx->set_text_fg : ctx->set_text_bg)(ctx, col);
ffffffff8000470d:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
ffffffff80004711:	74 0d                	je     ffffffff80004720 <sgr+0xa7c>
ffffffff80004713:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004717:	48 8b 80 10 01 00 00 	mov    0x110(%rax),%rax
ffffffff8000471e:	eb 0b                	jmp    ffffffff8000472b <sgr+0xa87>
ffffffff80004720:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004724:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
ffffffff8000472b:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff8000472e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80004732:	48 89 ce             	mov    %rcx,%rsi
ffffffff80004735:	48 89 d7             	mov    %rdx,%rdi
ffffffff80004738:	ff d0                	call   *%rax
                    break;
ffffffff8000473a:	e9 9a 00 00 00       	jmp    ffffffff800047d9 <sgr+0xb35>
                    } else if (col < 16) {
ffffffff8000473f:	83 7d e8 0f          	cmpl   $0xf,-0x18(%rbp)
ffffffff80004743:	77 34                	ja     ffffffff80004779 <sgr+0xad5>
                        (fg ? ctx->set_text_fg_bright : ctx->set_text_bg_bright)(ctx, col - 8);
ffffffff80004745:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
ffffffff80004749:	74 0d                	je     ffffffff80004758 <sgr+0xab4>
ffffffff8000474b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000474f:	48 8b 80 20 01 00 00 	mov    0x120(%rax),%rax
ffffffff80004756:	eb 0b                	jmp    ffffffff80004763 <sgr+0xabf>
ffffffff80004758:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000475c:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
ffffffff80004763:	8b 55 e8             	mov    -0x18(%rbp),%edx
ffffffff80004766:	83 ea 08             	sub    $0x8,%edx
ffffffff80004769:	89 d1                	mov    %edx,%ecx
ffffffff8000476b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8000476f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80004772:	48 89 d7             	mov    %rdx,%rdi
ffffffff80004775:	ff d0                	call   *%rax
                    break;
ffffffff80004777:	eb 60                	jmp    ffffffff800047d9 <sgr+0xb35>
                    } else if (col < 256) {
ffffffff80004779:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%rbp)
ffffffff80004780:	77 57                	ja     ffffffff800047d9 <sgr+0xb35>
                        uint32_t rgb_value = col256[col - 16];
ffffffff80004782:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80004785:	83 e8 10             	sub    $0x10,%eax
ffffffff80004788:	89 c0                	mov    %eax,%eax
ffffffff8000478a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80004791:	00 
ffffffff80004792:	48 8d 05 67 78 00 00 	lea    0x7867(%rip),%rax        # ffffffff8000c000 <col256>
ffffffff80004799:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff8000479c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
                        (fg ? ctx->set_text_fg_rgb : ctx->set_text_bg_rgb)(ctx, rgb_value);
ffffffff8000479f:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
ffffffff800047a3:	74 0d                	je     ffffffff800047b2 <sgr+0xb0e>
ffffffff800047a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800047a9:	48 8b 80 30 01 00 00 	mov    0x130(%rax),%rax
ffffffff800047b0:	eb 0b                	jmp    ffffffff800047bd <sgr+0xb19>
ffffffff800047b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800047b6:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
ffffffff800047bd:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff800047c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800047c4:	89 ce                	mov    %ecx,%esi
ffffffff800047c6:	48 89 d7             	mov    %rdx,%rdi
ffffffff800047c9:	ff d0                	call   *%rax
                    break;
ffffffff800047cb:	eb 0c                	jmp    ffffffff800047d9 <sgr+0xb35>
            continue;
ffffffff800047cd:	90                   	nop
ffffffff800047ce:	eb 0a                	jmp    ffffffff800047da <sgr+0xb36>
            continue;
ffffffff800047d0:	90                   	nop
ffffffff800047d1:	eb 07                	jmp    ffffffff800047da <sgr+0xb36>
            continue;
ffffffff800047d3:	90                   	nop
ffffffff800047d4:	eb 04                	jmp    ffffffff800047da <sgr+0xb36>
            continue;
ffffffff800047d6:	90                   	nop
ffffffff800047d7:	eb 01                	jmp    ffffffff800047da <sgr+0xb36>
                    break;
ffffffff800047d9:	90                   	nop
    for (; i < ctx->esc_values_i; i++) {
ffffffff800047da:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff800047df:	eb 01                	jmp    ffffffff800047e2 <sgr+0xb3e>
ffffffff800047e1:	90                   	nop
ffffffff800047e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800047e6:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff800047ea:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff800047ee:	0f 82 db f4 ff ff    	jb     ffffffff80003ccf <sgr+0x2b>
            }
        }
    }

out:;
ffffffff800047f4:	eb 07                	jmp    ffffffff800047fd <sgr+0xb59>
                break;
ffffffff800047f6:	90                   	nop
ffffffff800047f7:	eb 04                	jmp    ffffffff800047fd <sgr+0xb59>
                        goto out;
ffffffff800047f9:	90                   	nop
ffffffff800047fa:	eb 01                	jmp    ffffffff800047fd <sgr+0xb59>
                        goto out;
ffffffff800047fc:	90                   	nop
}
ffffffff800047fd:	90                   	nop
ffffffff800047fe:	c9                   	leave  
ffffffff800047ff:	c3                   	ret    

ffffffff80004800 <dec_private_parse>:

static void dec_private_parse(struct flanterm_context *ctx, uint8_t c) {
ffffffff80004800:	f3 0f 1e fa          	endbr64 
ffffffff80004804:	55                   	push   %rbp
ffffffff80004805:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004808:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000480c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80004810:	89 f0                	mov    %esi,%eax
ffffffff80004812:	88 45 e4             	mov    %al,-0x1c(%rbp)
    ctx->dec_private = false;
ffffffff80004815:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004819:	c6 40 14 00          	movb   $0x0,0x14(%rax)

    if (ctx->esc_values_i == 0) {
ffffffff8000481d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004821:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004825:	48 85 c0             	test   %rax,%rax
ffffffff80004828:	0f 84 8a 00 00 00    	je     ffffffff800048b8 <dec_private_parse+0xb8>
        return;
    }

    bool set;

    switch (c) {
ffffffff8000482e:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
ffffffff80004832:	83 f8 68             	cmp    $0x68,%eax
ffffffff80004835:	74 07                	je     ffffffff8000483e <dec_private_parse+0x3e>
ffffffff80004837:	83 f8 6c             	cmp    $0x6c,%eax
ffffffff8000483a:	74 08                	je     ffffffff80004844 <dec_private_parse+0x44>
        case 'h':
            set = true; break;
        case 'l':
            set = false; break;
        default:
            return;
ffffffff8000483c:	eb 7b                	jmp    ffffffff800048b9 <dec_private_parse+0xb9>
            set = true; break;
ffffffff8000483e:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff80004842:	eb 05                	jmp    ffffffff80004849 <dec_private_parse+0x49>
            set = false; break;
ffffffff80004844:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80004848:	90                   	nop
    }

    switch (ctx->esc_values[0]) {
ffffffff80004849:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000484d:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004850:	83 f8 19             	cmp    $0x19,%eax
ffffffff80004853:	75 1a                	jne    ffffffff8000486f <dec_private_parse+0x6f>
        case 25: {
            if (set) {
ffffffff80004855:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
ffffffff80004859:	74 0a                	je     ffffffff80004865 <dec_private_parse+0x65>
                ctx->cursor_enabled = true;
ffffffff8000485b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000485f:	c6 40 09 01          	movb   $0x1,0x9(%rax)
            } else {
                ctx->cursor_enabled = false;
            }
            return;
ffffffff80004863:	eb 54                	jmp    ffffffff800048b9 <dec_private_parse+0xb9>
                ctx->cursor_enabled = false;
ffffffff80004865:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004869:	c6 40 09 00          	movb   $0x0,0x9(%rax)
            return;
ffffffff8000486d:	eb 4a                	jmp    ffffffff800048b9 <dec_private_parse+0xb9>
        }
    }

    if (ctx->callback != NULL) {
ffffffff8000486f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004873:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff8000487a:	48 85 c0             	test   %rax,%rax
ffffffff8000487d:	74 3a                	je     ffffffff800048b9 <dec_private_parse+0xb9>
        ctx->callback(ctx, FLANTERM_CB_DEC, ctx->esc_values_i, (uintptr_t)ctx->esc_values, c);
ffffffff8000487f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004883:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff8000488a:	0f b6 4d e4          	movzbl -0x1c(%rbp),%ecx
ffffffff8000488e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004892:	48 83 c0 78          	add    $0x78,%rax
ffffffff80004896:	48 89 c6             	mov    %rax,%rsi
ffffffff80004899:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000489d:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff800048a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800048a5:	49 89 c8             	mov    %rcx,%r8
ffffffff800048a8:	48 89 f1             	mov    %rsi,%rcx
ffffffff800048ab:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff800048b0:	48 89 c7             	mov    %rax,%rdi
ffffffff800048b3:	41 ff d1             	call   *%r9
ffffffff800048b6:	eb 01                	jmp    ffffffff800048b9 <dec_private_parse+0xb9>
        return;
ffffffff800048b8:	90                   	nop
    }
}
ffffffff800048b9:	c9                   	leave  
ffffffff800048ba:	c3                   	ret    

ffffffff800048bb <linux_private_parse>:

static void linux_private_parse(struct flanterm_context *ctx) {
ffffffff800048bb:	f3 0f 1e fa          	endbr64 
ffffffff800048bf:	55                   	push   %rbp
ffffffff800048c0:	48 89 e5             	mov    %rsp,%rbp
ffffffff800048c3:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800048c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if (ctx->esc_values_i == 0) {
ffffffff800048cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800048cf:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff800048d3:	48 85 c0             	test   %rax,%rax
ffffffff800048d6:	74 45                	je     ffffffff8000491d <linux_private_parse+0x62>
        return;
    }

    if (ctx->callback != NULL) {
ffffffff800048d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800048dc:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff800048e3:	48 85 c0             	test   %rax,%rax
ffffffff800048e6:	74 36                	je     ffffffff8000491e <linux_private_parse+0x63>
        ctx->callback(ctx, FLANTERM_CB_LINUX, ctx->esc_values_i, (uintptr_t)ctx->esc_values, 0);
ffffffff800048e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800048ec:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff800048f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800048f7:	48 83 c0 78          	add    $0x78,%rax
ffffffff800048fb:	48 89 c1             	mov    %rax,%rcx
ffffffff800048fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004902:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80004906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000490a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80004910:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff80004915:	48 89 c7             	mov    %rax,%rdi
ffffffff80004918:	41 ff d1             	call   *%r9
ffffffff8000491b:	eb 01                	jmp    ffffffff8000491e <linux_private_parse+0x63>
        return;
ffffffff8000491d:	90                   	nop
    }
}
ffffffff8000491e:	c9                   	leave  
ffffffff8000491f:	c3                   	ret    

ffffffff80004920 <mode_toggle>:

static void mode_toggle(struct flanterm_context *ctx, uint8_t c) {
ffffffff80004920:	f3 0f 1e fa          	endbr64 
ffffffff80004924:	55                   	push   %rbp
ffffffff80004925:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004928:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000492c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80004930:	89 f0                	mov    %esi,%eax
ffffffff80004932:	88 45 e4             	mov    %al,-0x1c(%rbp)
    if (ctx->esc_values_i == 0) {
ffffffff80004935:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004939:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff8000493d:	48 85 c0             	test   %rax,%rax
ffffffff80004940:	74 7d                	je     ffffffff800049bf <mode_toggle+0x9f>
        return;
    }

    bool set;

    switch (c) {
ffffffff80004942:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
ffffffff80004946:	83 f8 68             	cmp    $0x68,%eax
ffffffff80004949:	74 07                	je     ffffffff80004952 <mode_toggle+0x32>
ffffffff8000494b:	83 f8 6c             	cmp    $0x6c,%eax
ffffffff8000494e:	74 08                	je     ffffffff80004958 <mode_toggle+0x38>
        case 'h':
            set = true; break;
        case 'l':
            set = false; break;
        default:
            return;
ffffffff80004950:	eb 6e                	jmp    ffffffff800049c0 <mode_toggle+0xa0>
            set = true; break;
ffffffff80004952:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff80004956:	eb 05                	jmp    ffffffff8000495d <mode_toggle+0x3d>
            set = false; break;
ffffffff80004958:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff8000495c:	90                   	nop
    }

    switch (ctx->esc_values[0]) {
ffffffff8000495d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004961:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004964:	83 f8 04             	cmp    $0x4,%eax
ffffffff80004967:	75 0d                	jne    ffffffff80004976 <mode_toggle+0x56>
        case 4:
            ctx->insert_mode = set; return;
ffffffff80004969:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000496d:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
ffffffff80004971:	88 50 15             	mov    %dl,0x15(%rax)
ffffffff80004974:	eb 4a                	jmp    ffffffff800049c0 <mode_toggle+0xa0>
    }

    if (ctx->callback != NULL) {
ffffffff80004976:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000497a:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff80004981:	48 85 c0             	test   %rax,%rax
ffffffff80004984:	74 3a                	je     ffffffff800049c0 <mode_toggle+0xa0>
        ctx->callback(ctx, FLANTERM_CB_MODE, ctx->esc_values_i, (uintptr_t)ctx->esc_values, c);
ffffffff80004986:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000498a:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff80004991:	0f b6 4d e4          	movzbl -0x1c(%rbp),%ecx
ffffffff80004995:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004999:	48 83 c0 78          	add    $0x78,%rax
ffffffff8000499d:	48 89 c6             	mov    %rax,%rsi
ffffffff800049a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800049a4:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff800049a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800049ac:	49 89 c8             	mov    %rcx,%r8
ffffffff800049af:	48 89 f1             	mov    %rsi,%rcx
ffffffff800049b2:	be 46 00 00 00       	mov    $0x46,%esi
ffffffff800049b7:	48 89 c7             	mov    %rax,%rdi
ffffffff800049ba:	41 ff d1             	call   *%r9
ffffffff800049bd:	eb 01                	jmp    ffffffff800049c0 <mode_toggle+0xa0>
        return;
ffffffff800049bf:	90                   	nop
    }
}
ffffffff800049c0:	c9                   	leave  
ffffffff800049c1:	c3                   	ret    

ffffffff800049c2 <osc_parse>:

static void osc_parse(struct flanterm_context *ctx, uint8_t c) {
ffffffff800049c2:	f3 0f 1e fa          	endbr64 
ffffffff800049c6:	55                   	push   %rbp
ffffffff800049c7:	48 89 e5             	mov    %rsp,%rbp
ffffffff800049ca:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800049ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800049d2:	89 f0                	mov    %esi,%eax
ffffffff800049d4:	88 45 f4             	mov    %al,-0xc(%rbp)
    if (ctx->osc_escape && c == '\\') {
ffffffff800049d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800049db:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
ffffffff800049df:	84 c0                	test   %al,%al
ffffffff800049e1:	74 06                	je     ffffffff800049e9 <osc_parse+0x27>
ffffffff800049e3:	80 7d f4 5c          	cmpb   $0x5c,-0xc(%rbp)
ffffffff800049e7:	74 21                	je     ffffffff80004a0a <osc_parse+0x48>
        goto cleanup;
    }

    ctx->osc_escape = false;
ffffffff800049e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800049ed:	c6 40 0e 00          	movb   $0x0,0xe(%rax)

    switch (c) {
ffffffff800049f1:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
ffffffff800049f5:	83 f8 07             	cmp    $0x7,%eax
ffffffff800049f8:	74 13                	je     ffffffff80004a0d <osc_parse+0x4b>
ffffffff800049fa:	83 f8 1b             	cmp    $0x1b,%eax
ffffffff800049fd:	75 29                	jne    ffffffff80004a28 <osc_parse+0x66>
        case 0x1b:
            ctx->osc_escape = true;
ffffffff800049ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004a03:	c6 40 0e 01          	movb   $0x1,0xe(%rax)
            break;
ffffffff80004a07:	90                   	nop
        case '\a':
            goto cleanup;
    }

    return;
ffffffff80004a08:	eb 1e                	jmp    ffffffff80004a28 <osc_parse+0x66>
        goto cleanup;
ffffffff80004a0a:	90                   	nop
ffffffff80004a0b:	eb 01                	jmp    ffffffff80004a0e <osc_parse+0x4c>
            goto cleanup;
ffffffff80004a0d:	90                   	nop

cleanup:
    ctx->osc_escape = false;
ffffffff80004a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004a12:	c6 40 0e 00          	movb   $0x0,0xe(%rax)
    ctx->osc = false;
ffffffff80004a16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004a1a:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
    ctx->escape = false;
ffffffff80004a1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004a22:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
ffffffff80004a26:	eb 01                	jmp    ffffffff80004a29 <osc_parse+0x67>
    return;
ffffffff80004a28:	90                   	nop
}
ffffffff80004a29:	c9                   	leave  
ffffffff80004a2a:	c3                   	ret    

ffffffff80004a2b <control_sequence_parse>:

static void control_sequence_parse(struct flanterm_context *ctx, uint8_t c) {
ffffffff80004a2b:	f3 0f 1e fa          	endbr64 
ffffffff80004a2f:	55                   	push   %rbp
ffffffff80004a30:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004a33:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
ffffffff80004a3a:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
ffffffff80004a41:	89 f0                	mov    %esi,%eax
ffffffff80004a43:	88 85 04 ff ff ff    	mov    %al,-0xfc(%rbp)
    if (ctx->escape_offset == 2) {
ffffffff80004a49:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004a50:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80004a54:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80004a58:	75 31                	jne    ffffffff80004a8b <control_sequence_parse+0x60>
        switch (c) {
ffffffff80004a5a:	0f b6 85 04 ff ff ff 	movzbl -0xfc(%rbp),%eax
ffffffff80004a61:	83 f8 3f             	cmp    $0x3f,%eax
ffffffff80004a64:	74 15                	je     ffffffff80004a7b <control_sequence_parse+0x50>
ffffffff80004a66:	83 f8 5b             	cmp    $0x5b,%eax
ffffffff80004a69:	75 20                	jne    ffffffff80004a8b <control_sequence_parse+0x60>
            case '[':
                ctx->discard_next = true;
ffffffff80004a6b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004a72:	c6 40 10 01          	movb   $0x1,0x10(%rax)
                goto cleanup;
ffffffff80004a76:	e9 34 12 00 00       	jmp    ffffffff80005caf <control_sequence_parse+0x1284>
            case '?':
                ctx->dec_private = true;
ffffffff80004a7b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004a82:	c6 40 14 01          	movb   $0x1,0x14(%rax)
                return;
ffffffff80004a86:	e9 40 12 00 00       	jmp    ffffffff80005ccb <control_sequence_parse+0x12a0>
        }
    }

    if (c >= '0' && c <= '9') {
ffffffff80004a8b:	80 bd 04 ff ff ff 2f 	cmpb   $0x2f,-0xfc(%rbp)
ffffffff80004a92:	0f 86 b2 00 00 00    	jbe    ffffffff80004b4a <control_sequence_parse+0x11f>
ffffffff80004a98:	80 bd 04 ff ff ff 39 	cmpb   $0x39,-0xfc(%rbp)
ffffffff80004a9f:	0f 87 a5 00 00 00    	ja     ffffffff80004b4a <control_sequence_parse+0x11f>
        if (ctx->esc_values_i == FLANTERM_MAX_ESC_VALUES) {
ffffffff80004aa5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004aac:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004ab0:	48 83 f8 10          	cmp    $0x10,%rax
ffffffff80004ab4:	0f 84 0d 12 00 00    	je     ffffffff80005cc7 <control_sequence_parse+0x129c>
            return;
        }
        ctx->rrr = true;
ffffffff80004aba:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ac1:	c6 40 0f 01          	movb   $0x1,0xf(%rax)
        ctx->esc_values[ctx->esc_values_i] *= 10;
ffffffff80004ac5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004acc:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80004ad0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ad7:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004adb:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
ffffffff80004adf:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ae6:	48 8b 48 40          	mov    0x40(%rax),%rcx
ffffffff80004aea:	89 d0                	mov    %edx,%eax
ffffffff80004aec:	c1 e0 02             	shl    $0x2,%eax
ffffffff80004aef:	01 d0                	add    %edx,%eax
ffffffff80004af1:	01 c0                	add    %eax,%eax
ffffffff80004af3:	89 c6                	mov    %eax,%esi
ffffffff80004af5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004afc:	48 8d 51 1c          	lea    0x1c(%rcx),%rdx
ffffffff80004b00:	89 74 90 08          	mov    %esi,0x8(%rax,%rdx,4)
        ctx->esc_values[ctx->esc_values_i] += c - '0';
ffffffff80004b04:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b0b:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80004b0f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b16:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004b1a:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
ffffffff80004b1e:	0f b6 85 04 ff ff ff 	movzbl -0xfc(%rbp),%eax
ffffffff80004b25:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
ffffffff80004b28:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b2f:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80004b33:	83 e9 30             	sub    $0x30,%ecx
ffffffff80004b36:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b3d:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004b41:	89 4c 90 08          	mov    %ecx,0x8(%rax,%rdx,4)
        return;
ffffffff80004b45:	e9 81 11 00 00       	jmp    ffffffff80005ccb <control_sequence_parse+0x12a0>
    }

    if (ctx->rrr == true) {
ffffffff80004b4a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b51:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
ffffffff80004b55:	84 c0                	test   %al,%al
ffffffff80004b57:	74 33                	je     ffffffff80004b8c <control_sequence_parse+0x161>
        ctx->esc_values_i++;
ffffffff80004b59:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b60:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004b64:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80004b68:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b6f:	48 89 50 40          	mov    %rdx,0x40(%rax)
        ctx->rrr = false;
ffffffff80004b73:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b7a:	c6 40 0f 00          	movb   $0x0,0xf(%rax)
        if (c == ';')
ffffffff80004b7e:	80 bd 04 ff ff ff 3b 	cmpb   $0x3b,-0xfc(%rbp)
ffffffff80004b85:	75 60                	jne    ffffffff80004be7 <control_sequence_parse+0x1bc>
            return;
ffffffff80004b87:	e9 3f 11 00 00       	jmp    ffffffff80005ccb <control_sequence_parse+0x12a0>
    } else if (c == ';') {
ffffffff80004b8c:	80 bd 04 ff ff ff 3b 	cmpb   $0x3b,-0xfc(%rbp)
ffffffff80004b93:	75 52                	jne    ffffffff80004be7 <control_sequence_parse+0x1bc>
        if (ctx->esc_values_i == FLANTERM_MAX_ESC_VALUES) {
ffffffff80004b95:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004b9c:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004ba0:	48 83 f8 10          	cmp    $0x10,%rax
ffffffff80004ba4:	0f 84 20 11 00 00    	je     ffffffff80005cca <control_sequence_parse+0x129f>
            return;
        }
        ctx->esc_values[ctx->esc_values_i] = 0;
ffffffff80004baa:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004bb1:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80004bb5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004bbc:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004bc0:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%rax,%rdx,4)
ffffffff80004bc7:	00 
        ctx->esc_values_i++;
ffffffff80004bc8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004bcf:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004bd3:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80004bd7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004bde:	48 89 50 40          	mov    %rdx,0x40(%rax)
        return;
ffffffff80004be2:	e9 e4 10 00 00       	jmp    ffffffff80005ccb <control_sequence_parse+0x12a0>
    }

    size_t esc_default;
    switch (c) {
ffffffff80004be7:	0f b6 85 04 ff ff ff 	movzbl -0xfc(%rbp),%eax
ffffffff80004bee:	83 f8 4b             	cmp    $0x4b,%eax
ffffffff80004bf1:	7f 07                	jg     ffffffff80004bfa <control_sequence_parse+0x1cf>
ffffffff80004bf3:	83 f8 4a             	cmp    $0x4a,%eax
ffffffff80004bf6:	7d 07                	jge    ffffffff80004bff <control_sequence_parse+0x1d4>
ffffffff80004bf8:	eb 0f                	jmp    ffffffff80004c09 <control_sequence_parse+0x1de>
ffffffff80004bfa:	83 f8 71             	cmp    $0x71,%eax
ffffffff80004bfd:	75 0a                	jne    ffffffff80004c09 <control_sequence_parse+0x1de>
        case 'J': case 'K': case 'q':
            esc_default = 0; break;
ffffffff80004bff:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80004c06:	00 
ffffffff80004c07:	eb 09                	jmp    ffffffff80004c12 <control_sequence_parse+0x1e7>
        default:
            esc_default = 1; break;
ffffffff80004c09:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff80004c10:	00 
ffffffff80004c11:	90                   	nop
    }

    for (size_t i = ctx->esc_values_i; i < FLANTERM_MAX_ESC_VALUES; i++) {
ffffffff80004c12:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c19:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80004c21:	eb 1e                	jmp    ffffffff80004c41 <control_sequence_parse+0x216>
        ctx->esc_values[i] = esc_default;
ffffffff80004c23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80004c27:	89 c1                	mov    %eax,%ecx
ffffffff80004c29:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80004c34:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80004c38:	89 4c 90 08          	mov    %ecx,0x8(%rax,%rdx,4)
    for (size_t i = ctx->esc_values_i; i < FLANTERM_MAX_ESC_VALUES; i++) {
ffffffff80004c3c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80004c41:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff80004c46:	76 db                	jbe    ffffffff80004c23 <control_sequence_parse+0x1f8>
    }

    if (ctx->dec_private == true) {
ffffffff80004c48:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c4f:	0f b6 40 14          	movzbl 0x14(%rax),%eax
ffffffff80004c53:	84 c0                	test   %al,%al
ffffffff80004c55:	74 1d                	je     ffffffff80004c74 <control_sequence_parse+0x249>
        dec_private_parse(ctx, c);
ffffffff80004c57:	0f b6 95 04 ff ff ff 	movzbl -0xfc(%rbp),%edx
ffffffff80004c5e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c65:	89 d6                	mov    %edx,%esi
ffffffff80004c67:	48 89 c7             	mov    %rax,%rdi
ffffffff80004c6a:	e8 91 fb ff ff       	call   ffffffff80004800 <dec_private_parse>
        goto cleanup;
ffffffff80004c6f:	e9 3b 10 00 00       	jmp    ffffffff80005caf <control_sequence_parse+0x1284>
    }

    bool r = ctx->scroll_enabled;
ffffffff80004c74:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c7b:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
ffffffff80004c7f:	88 85 6f ff ff ff    	mov    %al,-0x91(%rbp)
    ctx->scroll_enabled = false;
ffffffff80004c85:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c8c:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
    size_t x, y;
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80004c90:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004c97:	4c 8b 80 08 01 00 00 	mov    0x108(%rax),%r8
ffffffff80004c9e:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
ffffffff80004ca5:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
ffffffff80004cac:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004cb3:	48 89 ce             	mov    %rcx,%rsi
ffffffff80004cb6:	48 89 c7             	mov    %rax,%rdi
ffffffff80004cb9:	41 ff d0             	call   *%r8

    switch (c) {
ffffffff80004cbc:	0f b6 85 04 ff ff ff 	movzbl -0xfc(%rbp),%eax
ffffffff80004cc3:	83 e8 40             	sub    $0x40,%eax
ffffffff80004cc6:	83 f8 35             	cmp    $0x35,%eax
ffffffff80004cc9:	0f 87 cf 0f 00 00    	ja     ffffffff80005c9e <control_sequence_parse+0x1273>
ffffffff80004ccf:	89 c0                	mov    %eax,%eax
ffffffff80004cd1:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80004cd8:	00 
ffffffff80004cd9:	48 8d 05 e0 76 00 00 	lea    0x76e0(%rip),%rax        # ffffffff8000c3c0 <col256+0x3c0>
ffffffff80004ce0:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80004ce3:	48 98                	cltq   
ffffffff80004ce5:	48 8d 15 d4 76 00 00 	lea    0x76d4(%rip),%rdx        # ffffffff8000c3c0 <col256+0x3c0>
ffffffff80004cec:	48 01 d0             	add    %rdx,%rax
ffffffff80004cef:	3e ff e0             	notrack jmp *%rax
        case 'F':
            x = 0;
ffffffff80004cf2:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
ffffffff80004cf9:	00 00 00 00 
            // FALLTHRU
        case 'A': {
            if (ctx->esc_values[0] > y)
ffffffff80004cfd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d04:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004d07:	89 c2                	mov    %eax,%edx
ffffffff80004d09:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004d10:	48 39 c2             	cmp    %rax,%rdx
ffffffff80004d13:	76 13                	jbe    ffffffff80004d28 <control_sequence_parse+0x2fd>
                ctx->esc_values[0] = y;
ffffffff80004d15:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004d1c:	89 c2                	mov    %eax,%edx
ffffffff80004d1e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d25:	89 50 78             	mov    %edx,0x78(%rax)
            size_t orig_y = y;
ffffffff80004d28:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004d2f:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
            size_t dest_y = y - ctx->esc_values[0];
ffffffff80004d36:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80004d3d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d44:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004d47:	89 c1                	mov    %eax,%ecx
ffffffff80004d49:	48 89 d0             	mov    %rdx,%rax
ffffffff80004d4c:	48 29 c8             	sub    %rcx,%rax
ffffffff80004d4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            bool will_be_in_scroll_region = false;
ffffffff80004d53:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
            if ((ctx->scroll_top_margin >= dest_y && ctx->scroll_top_margin <= orig_y)
ffffffff80004d57:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d5e:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80004d62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80004d66:	77 14                	ja     ffffffff80004d7c <control_sequence_parse+0x351>
ffffffff80004d68:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d6f:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80004d73:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
ffffffff80004d7a:	73 25                	jae    ffffffff80004da1 <control_sequence_parse+0x376>
             || (ctx->scroll_bottom_margin >= dest_y && ctx->scroll_bottom_margin <= orig_y)) {
ffffffff80004d7c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d83:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80004d87:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80004d8b:	77 18                	ja     ffffffff80004da5 <control_sequence_parse+0x37a>
ffffffff80004d8d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004d94:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80004d98:	48 39 85 20 ff ff ff 	cmp    %rax,-0xe0(%rbp)
ffffffff80004d9f:	72 04                	jb     ffffffff80004da5 <control_sequence_parse+0x37a>
                will_be_in_scroll_region = true;
ffffffff80004da1:	c6 45 e7 01          	movb   $0x1,-0x19(%rbp)
            }
            if (will_be_in_scroll_region && dest_y < ctx->scroll_top_margin) {
ffffffff80004da5:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
ffffffff80004da9:	74 20                	je     ffffffff80004dcb <control_sequence_parse+0x3a0>
ffffffff80004dab:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004db2:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80004db6:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80004dba:	73 0f                	jae    ffffffff80004dcb <control_sequence_parse+0x3a0>
                dest_y = ctx->scroll_top_margin;
ffffffff80004dbc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004dc3:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80004dc7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
            ctx->set_cursor_pos(ctx, x, dest_y);
ffffffff80004dcb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004dd2:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80004dd9:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80004de0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80004de4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004deb:	48 89 ce             	mov    %rcx,%rsi
ffffffff80004dee:	48 89 c7             	mov    %rax,%rdi
ffffffff80004df1:	41 ff d0             	call   *%r8
            break;
ffffffff80004df4:	e9 a5 0e 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        }
        case 'E':
            x = 0;
ffffffff80004df9:	48 c7 85 18 ff ff ff 	movq   $0x0,-0xe8(%rbp)
ffffffff80004e00:	00 00 00 00 
            // FALLTHRU
        case 'e':
        case 'B': {
            if (y + ctx->esc_values[0] > ctx->rows - 1)
ffffffff80004e04:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004e0b:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004e0e:	89 c2                	mov    %eax,%edx
ffffffff80004e10:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004e17:	48 01 c2             	add    %rax,%rdx
ffffffff80004e1a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004e21:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80004e28:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80004e2c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80004e2f:	76 2a                	jbe    ffffffff80004e5b <control_sequence_parse+0x430>
                ctx->esc_values[0] = (ctx->rows - 1) - y;
ffffffff80004e31:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004e38:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80004e3f:	89 c2                	mov    %eax,%edx
ffffffff80004e41:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004e48:	89 c1                	mov    %eax,%ecx
ffffffff80004e4a:	89 d0                	mov    %edx,%eax
ffffffff80004e4c:	29 c8                	sub    %ecx,%eax
ffffffff80004e4e:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80004e51:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004e58:	89 50 78             	mov    %edx,0x78(%rax)
            size_t orig_y = y;
ffffffff80004e5b:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004e62:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
            size_t dest_y = y + ctx->esc_values[0];
ffffffff80004e69:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004e70:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004e73:	89 c2                	mov    %eax,%edx
ffffffff80004e75:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80004e7c:	48 01 d0             	add    %rdx,%rax
ffffffff80004e7f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            bool will_be_in_scroll_region = false;
ffffffff80004e83:	c6 45 d7 00          	movb   $0x0,-0x29(%rbp)
            if ((ctx->scroll_top_margin >= orig_y && ctx->scroll_top_margin <= dest_y)
ffffffff80004e87:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004e8e:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80004e92:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
ffffffff80004e99:	77 11                	ja     ffffffff80004eac <control_sequence_parse+0x481>
ffffffff80004e9b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ea2:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80004ea6:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80004eaa:	73 25                	jae    ffffffff80004ed1 <control_sequence_parse+0x4a6>
             || (ctx->scroll_bottom_margin >= orig_y && ctx->scroll_bottom_margin <= dest_y)) {
ffffffff80004eac:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004eb3:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80004eb7:	48 39 85 28 ff ff ff 	cmp    %rax,-0xd8(%rbp)
ffffffff80004ebe:	77 15                	ja     ffffffff80004ed5 <control_sequence_parse+0x4aa>
ffffffff80004ec0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ec7:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80004ecb:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80004ecf:	72 04                	jb     ffffffff80004ed5 <control_sequence_parse+0x4aa>
                will_be_in_scroll_region = true;
ffffffff80004ed1:	c6 45 d7 01          	movb   $0x1,-0x29(%rbp)
            }
            if (will_be_in_scroll_region && dest_y >= ctx->scroll_bottom_margin) {
ffffffff80004ed5:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
ffffffff80004ed9:	74 24                	je     ffffffff80004eff <control_sequence_parse+0x4d4>
ffffffff80004edb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ee2:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80004ee6:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80004eea:	72 13                	jb     ffffffff80004eff <control_sequence_parse+0x4d4>
                dest_y = ctx->scroll_bottom_margin - 1;
ffffffff80004eec:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ef3:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80004ef7:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80004efb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            }
            ctx->set_cursor_pos(ctx, x, dest_y);
ffffffff80004eff:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f06:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80004f0d:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80004f14:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80004f18:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f1f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80004f22:	48 89 c7             	mov    %rax,%rdi
ffffffff80004f25:	41 ff d0             	call   *%r8
            break;
ffffffff80004f28:	e9 71 0d 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        }
        case 'a':
        case 'C':
            if (x + ctx->esc_values[0] > ctx->cols - 1)
ffffffff80004f2d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f34:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004f37:	89 c2                	mov    %eax,%edx
ffffffff80004f39:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80004f40:	48 01 c2             	add    %rax,%rdx
ffffffff80004f43:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f4a:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80004f51:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80004f55:	48 39 c2             	cmp    %rax,%rdx
ffffffff80004f58:	76 2a                	jbe    ffffffff80004f84 <control_sequence_parse+0x559>
                ctx->esc_values[0] = (ctx->cols - 1) - x;
ffffffff80004f5a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f61:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80004f68:	89 c2                	mov    %eax,%edx
ffffffff80004f6a:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80004f71:	89 c1                	mov    %eax,%ecx
ffffffff80004f73:	89 d0                	mov    %edx,%eax
ffffffff80004f75:	29 c8                	sub    %ecx,%eax
ffffffff80004f77:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80004f7a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f81:	89 50 78             	mov    %edx,0x78(%rax)
            ctx->set_cursor_pos(ctx, x + ctx->esc_values[0], y);
ffffffff80004f84:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004f8b:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80004f92:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80004f99:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004fa0:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004fa3:	89 c6                	mov    %eax,%esi
ffffffff80004fa5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80004fac:	48 01 c6             	add    %rax,%rsi
ffffffff80004faf:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004fb6:	48 89 c7             	mov    %rax,%rdi
ffffffff80004fb9:	ff d1                	call   *%rcx
            break;
ffffffff80004fbb:	e9 de 0c 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'D':
            if (ctx->esc_values[0] > x)
ffffffff80004fc0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004fc7:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80004fca:	89 c2                	mov    %eax,%edx
ffffffff80004fcc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80004fd3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80004fd6:	76 13                	jbe    ffffffff80004feb <control_sequence_parse+0x5c0>
                ctx->esc_values[0] = x;
ffffffff80004fd8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80004fdf:	89 c2                	mov    %eax,%edx
ffffffff80004fe1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004fe8:	89 50 78             	mov    %edx,0x78(%rax)
            ctx->set_cursor_pos(ctx, x - ctx->esc_values[0], y);
ffffffff80004feb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80004ff2:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80004ff9:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005000:	48 8b b5 18 ff ff ff 	mov    -0xe8(%rbp),%rsi
ffffffff80005007:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000500e:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005011:	89 c0                	mov    %eax,%eax
ffffffff80005013:	48 29 c6             	sub    %rax,%rsi
ffffffff80005016:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000501d:	48 89 c7             	mov    %rax,%rdi
ffffffff80005020:	ff d1                	call   *%rcx
            break;
ffffffff80005022:	e9 77 0c 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'c':
            if (ctx->callback != NULL) {
ffffffff80005027:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000502e:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff80005035:	48 85 c0             	test   %rax,%rax
ffffffff80005038:	0f 84 56 0c 00 00    	je     ffffffff80005c94 <control_sequence_parse+0x1269>
                ctx->callback(ctx, FLANTERM_CB_PRIVATE_ID, 0, 0, 0);
ffffffff8000503e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005045:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff8000504c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005053:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80005059:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8000505e:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80005063:	be 1e 00 00 00       	mov    $0x1e,%esi
ffffffff80005068:	48 89 c7             	mov    %rax,%rdi
ffffffff8000506b:	41 ff d1             	call   *%r9
            }
            break;
ffffffff8000506e:	e9 21 0c 00 00       	jmp    ffffffff80005c94 <control_sequence_parse+0x1269>
        case 'd':
            ctx->esc_values[0] -= 1;
ffffffff80005073:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000507a:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000507d:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80005080:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005087:	89 50 78             	mov    %edx,0x78(%rax)
            if (ctx->esc_values[0] >= ctx->rows)
ffffffff8000508a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005091:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005094:	89 c2                	mov    %eax,%edx
ffffffff80005096:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000509d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff800050a4:	48 39 c2             	cmp    %rax,%rdx
ffffffff800050a7:	72 1b                	jb     ffffffff800050c4 <control_sequence_parse+0x699>
                ctx->esc_values[0] = ctx->rows - 1;
ffffffff800050a9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800050b0:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff800050b7:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff800050ba:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800050c1:	89 50 78             	mov    %edx,0x78(%rax)
            ctx->set_cursor_pos(ctx, x, ctx->esc_values[0]);
ffffffff800050c4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800050cb:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff800050d2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800050d9:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff800050dc:	89 c2                	mov    %eax,%edx
ffffffff800050de:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff800050e5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800050ec:	48 89 ce             	mov    %rcx,%rsi
ffffffff800050ef:	48 89 c7             	mov    %rax,%rdi
ffffffff800050f2:	41 ff d0             	call   *%r8
            break;
ffffffff800050f5:	e9 a4 0b 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'G':
        case '`':
            ctx->esc_values[0] -= 1;
ffffffff800050fa:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005101:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005104:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80005107:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000510e:	89 50 78             	mov    %edx,0x78(%rax)
            if (ctx->esc_values[0] >= ctx->cols)
ffffffff80005111:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005118:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000511b:	89 c2                	mov    %eax,%edx
ffffffff8000511d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005124:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000512b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000512e:	72 1b                	jb     ffffffff8000514b <control_sequence_parse+0x720>
                ctx->esc_values[0] = ctx->cols - 1;
ffffffff80005130:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005137:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000513e:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80005141:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005148:	89 50 78             	mov    %edx,0x78(%rax)
            ctx->set_cursor_pos(ctx, ctx->esc_values[0], y);
ffffffff8000514b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005152:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80005159:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005160:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005167:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000516a:	89 c6                	mov    %eax,%esi
ffffffff8000516c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005173:	48 89 c7             	mov    %rax,%rdi
ffffffff80005176:	ff d1                	call   *%rcx
            break;
ffffffff80005178:	e9 21 0b 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'H':
        case 'f':
            if (ctx->esc_values[0] != 0) {
ffffffff8000517d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005184:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005187:	85 c0                	test   %eax,%eax
ffffffff80005189:	74 17                	je     ffffffff800051a2 <control_sequence_parse+0x777>
                ctx->esc_values[0]--;
ffffffff8000518b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005192:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005195:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80005198:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000519f:	89 50 78             	mov    %edx,0x78(%rax)
            }
            if (ctx->esc_values[1] != 0) {
ffffffff800051a2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051a9:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff800051ac:	85 c0                	test   %eax,%eax
ffffffff800051ae:	74 17                	je     ffffffff800051c7 <control_sequence_parse+0x79c>
                ctx->esc_values[1]--;
ffffffff800051b0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051b7:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff800051ba:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff800051bd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051c4:	89 50 7c             	mov    %edx,0x7c(%rax)
            }
            if (ctx->esc_values[1] >= ctx->cols)
ffffffff800051c7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051ce:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff800051d1:	89 c2                	mov    %eax,%edx
ffffffff800051d3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051da:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800051e1:	48 39 c2             	cmp    %rax,%rdx
ffffffff800051e4:	72 1b                	jb     ffffffff80005201 <control_sequence_parse+0x7d6>
                ctx->esc_values[1] = ctx->cols - 1;
ffffffff800051e6:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051ed:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800051f4:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff800051f7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800051fe:	89 50 7c             	mov    %edx,0x7c(%rax)
            if (ctx->esc_values[0] >= ctx->rows)
ffffffff80005201:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005208:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000520b:	89 c2                	mov    %eax,%edx
ffffffff8000520d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005214:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff8000521b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000521e:	72 1b                	jb     ffffffff8000523b <control_sequence_parse+0x810>
                ctx->esc_values[0] = ctx->rows - 1;
ffffffff80005220:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005227:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff8000522e:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff80005231:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005238:	89 50 78             	mov    %edx,0x78(%rax)
            ctx->set_cursor_pos(ctx, ctx->esc_values[1], ctx->esc_values[0]);
ffffffff8000523b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005242:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80005249:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005250:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005253:	89 c2                	mov    %eax,%edx
ffffffff80005255:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000525c:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff8000525f:	89 c6                	mov    %eax,%esi
ffffffff80005261:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005268:	48 89 c7             	mov    %rax,%rdi
ffffffff8000526b:	ff d1                	call   *%rcx
            break;
ffffffff8000526d:	e9 2c 0a 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'M': {
            size_t count = ctx->esc_values[0] > ctx->rows ? ctx->rows : ctx->esc_values[0];
ffffffff80005272:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005279:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000527c:	89 c2                	mov    %eax,%edx
ffffffff8000527e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005285:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff8000528c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000528f:	48 0f 46 c2          	cmovbe %rdx,%rax
ffffffff80005293:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
            for (size_t i = 0; i < count; i++) {
ffffffff8000529a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff800052a1:	00 
ffffffff800052a2:	eb 1f                	jmp    ffffffff800052c3 <control_sequence_parse+0x898>
                ctx->scroll(ctx);
ffffffff800052a4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800052ab:	48 8b 90 68 01 00 00 	mov    0x168(%rax),%rdx
ffffffff800052b2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800052b9:	48 89 c7             	mov    %rax,%rdi
ffffffff800052bc:	ff d2                	call   *%rdx
            for (size_t i = 0; i < count; i++) {
ffffffff800052be:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
ffffffff800052c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800052c7:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff800052ce:	72 d4                	jb     ffffffff800052a4 <control_sequence_parse+0x879>
            }
            break;
ffffffff800052d0:	e9 c9 09 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        }
        case 'L': {
            size_t old_scroll_top_margin = ctx->scroll_top_margin;
ffffffff800052d5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800052dc:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff800052e0:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
            ctx->scroll_top_margin = y;
ffffffff800052e7:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff800052ee:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800052f5:	48 89 50 68          	mov    %rdx,0x68(%rax)
            size_t count = ctx->esc_values[0] > ctx->rows ? ctx->rows : ctx->esc_values[0];
ffffffff800052f9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005300:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005303:	89 c2                	mov    %eax,%edx
ffffffff80005305:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000530c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80005313:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005316:	48 0f 46 c2          	cmovbe %rdx,%rax
ffffffff8000531a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
            for (size_t i = 0; i < count; i++) {
ffffffff80005321:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80005328:	00 
ffffffff80005329:	eb 1f                	jmp    ffffffff8000534a <control_sequence_parse+0x91f>
                ctx->revscroll(ctx);
ffffffff8000532b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005332:	48 8b 90 70 01 00 00 	mov    0x170(%rax),%rdx
ffffffff80005339:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005340:	48 89 c7             	mov    %rax,%rdi
ffffffff80005343:	ff d2                	call   *%rdx
            for (size_t i = 0; i < count; i++) {
ffffffff80005345:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
ffffffff8000534a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000534e:	48 3b 85 48 ff ff ff 	cmp    -0xb8(%rbp),%rax
ffffffff80005355:	72 d4                	jb     ffffffff8000532b <control_sequence_parse+0x900>
            }
            ctx->scroll_top_margin = old_scroll_top_margin;
ffffffff80005357:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000535e:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
ffffffff80005365:	48 89 50 68          	mov    %rdx,0x68(%rax)
            break;
ffffffff80005369:	e9 30 09 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        }
        case 'n':
            switch (ctx->esc_values[0]) {
ffffffff8000536e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005375:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005378:	83 f8 05             	cmp    $0x5,%eax
ffffffff8000537b:	74 0a                	je     ffffffff80005387 <control_sequence_parse+0x95c>
ffffffff8000537d:	83 f8 06             	cmp    $0x6,%eax
ffffffff80005380:	74 4e                	je     ffffffff800053d0 <control_sequence_parse+0x9a5>
                    if (ctx->callback != NULL) {
                        ctx->callback(ctx, FLANTERM_CB_POS_REPORT, x + 1, y + 1, 0);
                    }
                    break;
            }
            break;
ffffffff80005382:	e9 17 09 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
                    if (ctx->callback != NULL) {
ffffffff80005387:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000538e:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff80005395:	48 85 c0             	test   %rax,%rax
ffffffff80005398:	0f 84 83 00 00 00    	je     ffffffff80005421 <control_sequence_parse+0x9f6>
                        ctx->callback(ctx, FLANTERM_CB_STATUS_REPORT, 0, 0, 0);
ffffffff8000539e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800053a5:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff800053ac:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800053b3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff800053b9:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff800053be:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800053c3:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff800053c8:	48 89 c7             	mov    %rax,%rdi
ffffffff800053cb:	41 ff d1             	call   *%r9
                    break;
ffffffff800053ce:	eb 51                	jmp    ffffffff80005421 <control_sequence_parse+0x9f6>
                    if (ctx->callback != NULL) {
ffffffff800053d0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800053d7:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff800053de:	48 85 c0             	test   %rax,%rax
ffffffff800053e1:	74 44                	je     ffffffff80005427 <control_sequence_parse+0x9fc>
                        ctx->callback(ctx, FLANTERM_CB_POS_REPORT, x + 1, y + 1, 0);
ffffffff800053e3:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800053ea:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff800053f1:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff800053f8:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff800053fc:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80005403:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80005407:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000540e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80005414:	be 32 00 00 00       	mov    $0x32,%esi
ffffffff80005419:	48 89 c7             	mov    %rax,%rdi
ffffffff8000541c:	41 ff d1             	call   *%r9
                    break;
ffffffff8000541f:	eb 06                	jmp    ffffffff80005427 <control_sequence_parse+0x9fc>
                    break;
ffffffff80005421:	90                   	nop
ffffffff80005422:	e9 77 08 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
                    break;
ffffffff80005427:	90                   	nop
            break;
ffffffff80005428:	e9 71 08 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'q':
            if (ctx->callback != NULL) {
ffffffff8000542d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005434:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff8000543b:	48 85 c0             	test   %rax,%rax
ffffffff8000543e:	0f 84 53 08 00 00    	je     ffffffff80005c97 <control_sequence_parse+0x126c>
                ctx->callback(ctx, FLANTERM_CB_KBD_LEDS, ctx->esc_values[0], 0, 0);
ffffffff80005444:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000544b:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff80005452:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005459:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000545c:	89 c2                	mov    %eax,%edx
ffffffff8000545e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005465:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8000546b:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80005470:	be 3c 00 00 00       	mov    $0x3c,%esi
ffffffff80005475:	48 89 c7             	mov    %rax,%rdi
ffffffff80005478:	41 ff d1             	call   *%r9
            }
            break;
ffffffff8000547b:	e9 17 08 00 00       	jmp    ffffffff80005c97 <control_sequence_parse+0x126c>
        case 'J':
            switch (ctx->esc_values[0]) {
ffffffff80005480:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005487:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff8000548a:	83 f8 03             	cmp    $0x3,%eax
ffffffff8000548d:	0f 87 07 08 00 00    	ja     ffffffff80005c9a <control_sequence_parse+0x126f>
ffffffff80005493:	83 f8 02             	cmp    $0x2,%eax
ffffffff80005496:	0f 83 e1 01 00 00    	jae    ffffffff8000567d <control_sequence_parse+0xc52>
ffffffff8000549c:	85 c0                	test   %eax,%eax
ffffffff8000549e:	74 0e                	je     ffffffff800054ae <control_sequence_parse+0xa83>
ffffffff800054a0:	83 f8 01             	cmp    $0x1,%eax
ffffffff800054a3:	0f 84 e5 00 00 00    	je     ffffffff8000558e <control_sequence_parse+0xb63>
                case 2:
                case 3:
                    ctx->clear(ctx, false);
                    break;
            }
            break;
ffffffff800054a9:	e9 ec 07 00 00       	jmp    ffffffff80005c9a <control_sequence_parse+0x126f>
                    size_t rows_remaining = ctx->rows - (y + 1);
ffffffff800054ae:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800054b5:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff800054bc:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff800054c3:	48 29 d0             	sub    %rdx,%rax
ffffffff800054c6:	48 83 e8 01          	sub    $0x1,%rax
ffffffff800054ca:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
                    size_t cols_diff = ctx->cols - (x + 1);
ffffffff800054d1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800054d8:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800054df:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
ffffffff800054e6:	48 29 d0             	sub    %rdx,%rax
ffffffff800054e9:	48 83 e8 01          	sub    $0x1,%rax
ffffffff800054ed:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
                    size_t to_clear = rows_remaining * ctx->cols + cols_diff + 1;
ffffffff800054f4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800054fb:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80005502:	48 0f af 85 40 ff ff 	imul   -0xc0(%rbp),%rax
ffffffff80005509:	ff 
ffffffff8000550a:	48 89 c2             	mov    %rax,%rdx
ffffffff8000550d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
ffffffff80005514:	48 01 d0             	add    %rdx,%rax
ffffffff80005517:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000551b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
                    for (size_t i = 0; i < to_clear; i++) {
ffffffff80005522:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
ffffffff80005529:	00 
ffffffff8000552a:	eb 24                	jmp    ffffffff80005550 <control_sequence_parse+0xb25>
                        ctx->raw_putchar(ctx, ' ');
ffffffff8000552c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005533:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000553a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005541:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80005546:	48 89 c7             	mov    %rax,%rdi
ffffffff80005549:	ff d2                	call   *%rdx
                    for (size_t i = 0; i < to_clear; i++) {
ffffffff8000554b:	48 83 45 b8 01       	addq   $0x1,-0x48(%rbp)
ffffffff80005550:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80005554:	48 3b 85 30 ff ff ff 	cmp    -0xd0(%rbp),%rax
ffffffff8000555b:	72 cf                	jb     ffffffff8000552c <control_sequence_parse+0xb01>
                    ctx->set_cursor_pos(ctx, x, y);
ffffffff8000555d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005564:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff8000556b:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005572:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80005579:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005580:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005583:	48 89 c7             	mov    %rax,%rdi
ffffffff80005586:	41 ff d0             	call   *%r8
                    break;
ffffffff80005589:	e9 0f 01 00 00       	jmp    ffffffff8000569d <control_sequence_parse+0xc72>
                    ctx->set_cursor_pos(ctx, 0, 0);
ffffffff8000558e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005595:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff8000559c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800055a3:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800055a8:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff800055ad:	48 89 c7             	mov    %rax,%rdi
ffffffff800055b0:	ff d1                	call   *%rcx
                    bool b = false;
ffffffff800055b2:	c6 45 b7 00          	movb   $0x0,-0x49(%rbp)
                    for (size_t yc = 0; yc < ctx->rows; yc++) {
ffffffff800055b6:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
ffffffff800055bd:	00 
ffffffff800055be:	e9 9d 00 00 00       	jmp    ffffffff80005660 <control_sequence_parse+0xc35>
                        for (size_t xc = 0; xc < ctx->cols; xc++) {
ffffffff800055c3:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
ffffffff800055ca:	00 
ffffffff800055cb:	eb 70                	jmp    ffffffff8000563d <control_sequence_parse+0xc12>
                            ctx->raw_putchar(ctx, ' ');
ffffffff800055cd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800055d4:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800055db:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800055e2:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800055e7:	48 89 c7             	mov    %rax,%rdi
ffffffff800055ea:	ff d2                	call   *%rdx
                            if (xc == x && yc == y) {
ffffffff800055ec:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff800055f3:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
ffffffff800055f7:	75 3f                	jne    ffffffff80005638 <control_sequence_parse+0xc0d>
ffffffff800055f9:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80005600:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80005604:	75 32                	jne    ffffffff80005638 <control_sequence_parse+0xc0d>
                                ctx->set_cursor_pos(ctx, x, y);
ffffffff80005606:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000560d:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80005614:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff8000561b:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80005622:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005629:	48 89 ce             	mov    %rcx,%rsi
ffffffff8000562c:	48 89 c7             	mov    %rax,%rdi
ffffffff8000562f:	41 ff d0             	call   *%r8
                                b = true;
ffffffff80005632:	c6 45 b7 01          	movb   $0x1,-0x49(%rbp)
                                break;
ffffffff80005636:	eb 1d                	jmp    ffffffff80005655 <control_sequence_parse+0xc2a>
                        for (size_t xc = 0; xc < ctx->cols; xc++) {
ffffffff80005638:	48 83 45 a0 01       	addq   $0x1,-0x60(%rbp)
ffffffff8000563d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005644:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff8000564b:	48 39 45 a0          	cmp    %rax,-0x60(%rbp)
ffffffff8000564f:	0f 82 78 ff ff ff    	jb     ffffffff800055cd <control_sequence_parse+0xba2>
                        if (b == true)
ffffffff80005655:	80 7d b7 00          	cmpb   $0x0,-0x49(%rbp)
ffffffff80005659:	75 1f                	jne    ffffffff8000567a <control_sequence_parse+0xc4f>
                    for (size_t yc = 0; yc < ctx->rows; yc++) {
ffffffff8000565b:	48 83 45 a8 01       	addq   $0x1,-0x58(%rbp)
ffffffff80005660:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005667:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff8000566e:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff80005672:	0f 82 4b ff ff ff    	jb     ffffffff800055c3 <control_sequence_parse+0xb98>
                    break;
ffffffff80005678:	eb 23                	jmp    ffffffff8000569d <control_sequence_parse+0xc72>
                            break;
ffffffff8000567a:	90                   	nop
                    break;
ffffffff8000567b:	eb 20                	jmp    ffffffff8000569d <control_sequence_parse+0xc72>
                    ctx->clear(ctx, false);
ffffffff8000567d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005684:	48 8b 90 f8 00 00 00 	mov    0xf8(%rax),%rdx
ffffffff8000568b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005692:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80005697:	48 89 c7             	mov    %rax,%rdi
ffffffff8000569a:	ff d2                	call   *%rdx
                    break;
ffffffff8000569c:	90                   	nop
            break;
ffffffff8000569d:	e9 f8 05 00 00       	jmp    ffffffff80005c9a <control_sequence_parse+0x126f>
        case '@':
            for (size_t i = ctx->cols - 1; ; i--) {
ffffffff800056a2:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800056a9:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800056b0:	48 83 e8 01          	sub    $0x1,%rax
ffffffff800056b4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
                ctx->move_character(ctx, i + ctx->esc_values[0], y, i, y);
ffffffff800056b8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800056bf:	4c 8b 88 60 01 00 00 	mov    0x160(%rax),%r9
ffffffff800056c6:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
ffffffff800056cd:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff800056d4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800056db:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff800056de:	89 c1                	mov    %eax,%ecx
ffffffff800056e0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff800056e4:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
ffffffff800056e8:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff800056ec:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800056f3:	49 89 f8             	mov    %rdi,%r8
ffffffff800056f6:	48 89 c7             	mov    %rax,%rdi
ffffffff800056f9:	41 ff d1             	call   *%r9
                ctx->set_cursor_pos(ctx, i, y);
ffffffff800056fc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005703:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff8000570a:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005711:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff80005715:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000571c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8000571f:	48 89 c7             	mov    %rax,%rdi
ffffffff80005722:	41 ff d0             	call   *%r8
                ctx->raw_putchar(ctx, ' ');
ffffffff80005725:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000572c:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80005733:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000573a:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000573f:	48 89 c7             	mov    %rax,%rdi
ffffffff80005742:	ff d2                	call   *%rdx
                if (i == x) {
ffffffff80005744:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff8000574b:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff8000574f:	74 0a                	je     ffffffff8000575b <control_sequence_parse+0xd30>
            for (size_t i = ctx->cols - 1; ; i--) {
ffffffff80005751:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
                ctx->move_character(ctx, i + ctx->esc_values[0], y, i, y);
ffffffff80005756:	e9 5d ff ff ff       	jmp    ffffffff800056b8 <control_sequence_parse+0xc8d>
                    break;
ffffffff8000575b:	90                   	nop
                }
            }
            ctx->set_cursor_pos(ctx, x, y);
ffffffff8000575c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005763:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff8000576a:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005771:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80005778:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000577f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005782:	48 89 c7             	mov    %rax,%rdi
ffffffff80005785:	41 ff d0             	call   *%r8
            break;
ffffffff80005788:	e9 11 05 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'P':
            for (size_t i = x + ctx->esc_values[0]; i < ctx->cols; i++)
ffffffff8000578d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005794:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005797:	89 c2                	mov    %eax,%edx
ffffffff80005799:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff800057a0:	48 01 d0             	add    %rdx,%rax
ffffffff800057a3:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff800057a7:	eb 4b                	jmp    ffffffff800057f4 <control_sequence_parse+0xdc9>
                ctx->move_character(ctx, i - ctx->esc_values[0], y, i, y);
ffffffff800057a9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800057b0:	4c 8b 88 60 01 00 00 	mov    0x160(%rax),%r9
ffffffff800057b7:	48 8b bd 10 ff ff ff 	mov    -0xf0(%rbp),%rdi
ffffffff800057be:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff800057c5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800057cc:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff800057cf:	89 c1                	mov    %eax,%ecx
ffffffff800057d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800057d5:	48 29 c8             	sub    %rcx,%rax
ffffffff800057d8:	48 89 c6             	mov    %rax,%rsi
ffffffff800057db:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
ffffffff800057df:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800057e6:	49 89 f8             	mov    %rdi,%r8
ffffffff800057e9:	48 89 c7             	mov    %rax,%rdi
ffffffff800057ec:	41 ff d1             	call   *%r9
            for (size_t i = x + ctx->esc_values[0]; i < ctx->cols; i++)
ffffffff800057ef:	48 83 45 90 01       	addq   $0x1,-0x70(%rbp)
ffffffff800057f4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800057fb:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80005802:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff80005806:	72 a1                	jb     ffffffff800057a9 <control_sequence_parse+0xd7e>
            ctx->set_cursor_pos(ctx, ctx->cols - ctx->esc_values[0], y);
ffffffff80005808:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000580f:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80005816:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff8000581d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005824:	48 8b b0 e8 00 00 00 	mov    0xe8(%rax),%rsi
ffffffff8000582b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005832:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005835:	89 c0                	mov    %eax,%eax
ffffffff80005837:	48 29 c6             	sub    %rax,%rsi
ffffffff8000583a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005841:	48 89 c7             	mov    %rax,%rdi
ffffffff80005844:	ff d1                	call   *%rcx
            // FALLTHRU
        case 'X': {
            size_t count = ctx->esc_values[0] > ctx->cols ? ctx->cols : ctx->esc_values[0];
ffffffff80005846:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000584d:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005850:	89 c2                	mov    %eax,%edx
ffffffff80005852:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005859:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80005860:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005863:	48 0f 46 c2          	cmovbe %rdx,%rax
ffffffff80005867:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
            for (size_t i = 0; i < count; i++)
ffffffff8000586e:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
ffffffff80005875:	00 
ffffffff80005876:	eb 24                	jmp    ffffffff8000589c <control_sequence_parse+0xe71>
                ctx->raw_putchar(ctx, ' ');
ffffffff80005878:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000587f:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80005886:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000588d:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80005892:	48 89 c7             	mov    %rax,%rdi
ffffffff80005895:	ff d2                	call   *%rdx
            for (size_t i = 0; i < count; i++)
ffffffff80005897:	48 83 45 88 01       	addq   $0x1,-0x78(%rbp)
ffffffff8000589c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff800058a0:	48 3b 85 60 ff ff ff 	cmp    -0xa0(%rbp),%rax
ffffffff800058a7:	72 cf                	jb     ffffffff80005878 <control_sequence_parse+0xe4d>
            ctx->set_cursor_pos(ctx, x, y);
ffffffff800058a9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800058b0:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff800058b7:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff800058be:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff800058c5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800058cc:	48 89 ce             	mov    %rcx,%rsi
ffffffff800058cf:	48 89 c7             	mov    %rax,%rdi
ffffffff800058d2:	41 ff d0             	call   *%r8
            break;
ffffffff800058d5:	e9 c4 03 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        }
        case 'm':
            sgr(ctx);
ffffffff800058da:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800058e1:	48 89 c7             	mov    %rax,%rdi
ffffffff800058e4:	e8 bb e3 ff ff       	call   ffffffff80003ca4 <sgr>
            break;
ffffffff800058e9:	e9 b0 03 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 's':
            ctx->get_cursor_pos(ctx, &ctx->saved_cursor_x, &ctx->saved_cursor_y);
ffffffff800058ee:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800058f5:	48 8b 88 08 01 00 00 	mov    0x108(%rax),%rcx
ffffffff800058fc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005903:	48 8d 50 50          	lea    0x50(%rax),%rdx
ffffffff80005907:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000590e:	48 8d 70 48          	lea    0x48(%rax),%rsi
ffffffff80005912:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005919:	48 89 c7             	mov    %rax,%rdi
ffffffff8000591c:	ff d1                	call   *%rcx
            break;
ffffffff8000591e:	e9 7b 03 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'u':
            ctx->set_cursor_pos(ctx, ctx->saved_cursor_x, ctx->saved_cursor_y);
ffffffff80005923:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000592a:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80005931:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005938:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff8000593c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005943:	48 8b 48 48          	mov    0x48(%rax),%rcx
ffffffff80005947:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000594e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005951:	48 89 c7             	mov    %rax,%rdi
ffffffff80005954:	41 ff d0             	call   *%r8
            break;
ffffffff80005957:	e9 42 03 00 00       	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'K':
            switch (ctx->esc_values[0]) {
ffffffff8000595c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005963:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005966:	83 f8 02             	cmp    $0x2,%eax
ffffffff80005969:	0f 84 fc 00 00 00    	je     ffffffff80005a6b <control_sequence_parse+0x1040>
ffffffff8000596f:	83 f8 02             	cmp    $0x2,%eax
ffffffff80005972:	0f 87 25 03 00 00    	ja     ffffffff80005c9d <control_sequence_parse+0x1272>
ffffffff80005978:	85 c0                	test   %eax,%eax
ffffffff8000597a:	74 0a                	je     ffffffff80005986 <control_sequence_parse+0xf5b>
ffffffff8000597c:	83 f8 01             	cmp    $0x1,%eax
ffffffff8000597f:	74 7b                	je     ffffffff800059fc <control_sequence_parse+0xfd1>
                        ctx->raw_putchar(ctx, ' ');
                    ctx->set_cursor_pos(ctx, x, y);
                    break;
                }
            }
            break;
ffffffff80005981:	e9 17 03 00 00       	jmp    ffffffff80005c9d <control_sequence_parse+0x1272>
                    for (size_t i = x; i < ctx->cols; i++)
ffffffff80005986:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff8000598d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff80005991:	eb 24                	jmp    ffffffff800059b7 <control_sequence_parse+0xf8c>
                        ctx->raw_putchar(ctx, ' ');
ffffffff80005993:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000599a:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800059a1:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800059a8:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff800059ad:	48 89 c7             	mov    %rax,%rdi
ffffffff800059b0:	ff d2                	call   *%rdx
                    for (size_t i = x; i < ctx->cols; i++)
ffffffff800059b2:	48 83 45 80 01       	addq   $0x1,-0x80(%rbp)
ffffffff800059b7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800059be:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800059c5:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
ffffffff800059c9:	72 c8                	jb     ffffffff80005993 <control_sequence_parse+0xf68>
                    ctx->set_cursor_pos(ctx, x, y);
ffffffff800059cb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800059d2:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff800059d9:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff800059e0:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff800059e7:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff800059ee:	48 89 ce             	mov    %rcx,%rsi
ffffffff800059f1:	48 89 c7             	mov    %rax,%rdi
ffffffff800059f4:	41 ff d0             	call   *%r8
                    break;
ffffffff800059f7:	e9 0d 01 00 00       	jmp    ffffffff80005b09 <control_sequence_parse+0x10de>
                    ctx->set_cursor_pos(ctx, 0, y);
ffffffff800059fc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005a03:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80005a0a:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005a11:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005a18:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80005a1d:	48 89 c7             	mov    %rax,%rdi
ffffffff80005a20:	ff d1                	call   *%rcx
                    for (size_t i = 0; i < x; i++)
ffffffff80005a22:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
ffffffff80005a29:	00 00 00 00 
ffffffff80005a2d:	eb 27                	jmp    ffffffff80005a56 <control_sequence_parse+0x102b>
                        ctx->raw_putchar(ctx, ' ');
ffffffff80005a2f:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005a36:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80005a3d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005a44:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80005a49:	48 89 c7             	mov    %rax,%rdi
ffffffff80005a4c:	ff d2                	call   *%rdx
                    for (size_t i = 0; i < x; i++)
ffffffff80005a4e:	48 83 85 78 ff ff ff 	addq   $0x1,-0x88(%rbp)
ffffffff80005a55:	01 
ffffffff80005a56:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80005a5d:	48 39 85 78 ff ff ff 	cmp    %rax,-0x88(%rbp)
ffffffff80005a64:	72 c9                	jb     ffffffff80005a2f <control_sequence_parse+0x1004>
                    break;
ffffffff80005a66:	e9 9e 00 00 00       	jmp    ffffffff80005b09 <control_sequence_parse+0x10de>
                    ctx->set_cursor_pos(ctx, 0, y);
ffffffff80005a6b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005a72:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80005a79:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005a80:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005a87:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80005a8c:	48 89 c7             	mov    %rax,%rdi
ffffffff80005a8f:	ff d1                	call   *%rcx
                    for (size_t i = 0; i < ctx->cols; i++)
ffffffff80005a91:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
ffffffff80005a98:	00 00 00 00 
ffffffff80005a9c:	eb 27                	jmp    ffffffff80005ac5 <control_sequence_parse+0x109a>
                        ctx->raw_putchar(ctx, ' ');
ffffffff80005a9e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005aa5:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80005aac:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005ab3:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80005ab8:	48 89 c7             	mov    %rax,%rdi
ffffffff80005abb:	ff d2                	call   *%rdx
                    for (size_t i = 0; i < ctx->cols; i++)
ffffffff80005abd:	48 83 85 70 ff ff ff 	addq   $0x1,-0x90(%rbp)
ffffffff80005ac4:	01 
ffffffff80005ac5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005acc:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff80005ad3:	48 39 85 70 ff ff ff 	cmp    %rax,-0x90(%rbp)
ffffffff80005ada:	72 c2                	jb     ffffffff80005a9e <control_sequence_parse+0x1073>
                    ctx->set_cursor_pos(ctx, x, y);
ffffffff80005adc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005ae3:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80005aea:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
ffffffff80005af1:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80005af8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005aff:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005b02:	48 89 c7             	mov    %rax,%rdi
ffffffff80005b05:	41 ff d0             	call   *%r8
                    break;
ffffffff80005b08:	90                   	nop
            break;
ffffffff80005b09:	e9 8f 01 00 00       	jmp    ffffffff80005c9d <control_sequence_parse+0x1272>
        case 'r':
            if (ctx->esc_values[0] == 0) {
ffffffff80005b0e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b15:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005b18:	85 c0                	test   %eax,%eax
ffffffff80005b1a:	75 0e                	jne    ffffffff80005b2a <control_sequence_parse+0x10ff>
                ctx->esc_values[0] = 1;
ffffffff80005b1c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b23:	c7 40 78 01 00 00 00 	movl   $0x1,0x78(%rax)
            }
            if (ctx->esc_values[1] == 0) {
ffffffff80005b2a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b31:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80005b34:	85 c0                	test   %eax,%eax
ffffffff80005b36:	75 0e                	jne    ffffffff80005b46 <control_sequence_parse+0x111b>
                ctx->esc_values[1] = 1;
ffffffff80005b38:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b3f:	c7 40 7c 01 00 00 00 	movl   $0x1,0x7c(%rax)
            }
            ctx->scroll_top_margin = 0;
ffffffff80005b46:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b4d:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
ffffffff80005b54:	00 
            ctx->scroll_bottom_margin = ctx->rows;
ffffffff80005b55:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b5c:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff80005b63:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b6a:	48 89 50 70          	mov    %rdx,0x70(%rax)
            if (ctx->esc_values_i > 0) {
ffffffff80005b6e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b75:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80005b79:	48 85 c0             	test   %rax,%rax
ffffffff80005b7c:	74 1a                	je     ffffffff80005b98 <control_sequence_parse+0x116d>
                ctx->scroll_top_margin = ctx->esc_values[0] - 1;
ffffffff80005b7e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b85:	8b 40 78             	mov    0x78(%rax),%eax
ffffffff80005b88:	83 e8 01             	sub    $0x1,%eax
ffffffff80005b8b:	89 c2                	mov    %eax,%edx
ffffffff80005b8d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b94:	48 89 50 68          	mov    %rdx,0x68(%rax)
            }
            if (ctx->esc_values_i > 1) {
ffffffff80005b98:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005b9f:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80005ba3:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80005ba7:	76 17                	jbe    ffffffff80005bc0 <control_sequence_parse+0x1195>
                ctx->scroll_bottom_margin = ctx->esc_values[1];
ffffffff80005ba9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005bb0:	8b 40 7c             	mov    0x7c(%rax),%eax
ffffffff80005bb3:	89 c2                	mov    %eax,%edx
ffffffff80005bb5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005bbc:	48 89 50 70          	mov    %rdx,0x70(%rax)
            }
            if (ctx->scroll_top_margin >= ctx->rows
ffffffff80005bc0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005bc7:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80005bcb:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005bd2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80005bd9:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005bdc:	73 3d                	jae    ffffffff80005c1b <control_sequence_parse+0x11f0>
             || ctx->scroll_bottom_margin > ctx->rows
ffffffff80005bde:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005be5:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff80005be9:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005bf0:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
ffffffff80005bf7:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005bfa:	77 1f                	ja     ffffffff80005c1b <control_sequence_parse+0x11f0>
             || ctx->scroll_top_margin >= (ctx->scroll_bottom_margin - 1)) {
ffffffff80005bfc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c03:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80005c07:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c0e:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80005c12:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80005c16:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005c19:	72 28                	jb     ffffffff80005c43 <control_sequence_parse+0x1218>
                ctx->scroll_top_margin = 0;
ffffffff80005c1b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c22:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
ffffffff80005c29:	00 
                ctx->scroll_bottom_margin = ctx->rows;
ffffffff80005c2a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c31:	48 8b 90 e0 00 00 00 	mov    0xe0(%rax),%rdx
ffffffff80005c38:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c3f:	48 89 50 70          	mov    %rdx,0x70(%rax)
            }
            ctx->set_cursor_pos(ctx, 0, 0);
ffffffff80005c43:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c4a:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80005c51:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c58:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80005c5d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80005c62:	48 89 c7             	mov    %rax,%rdi
ffffffff80005c65:	ff d1                	call   *%rcx
            break;
ffffffff80005c67:	eb 35                	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case 'l':
        case 'h':
            mode_toggle(ctx, c);
ffffffff80005c69:	0f b6 95 04 ff ff ff 	movzbl -0xfc(%rbp),%edx
ffffffff80005c70:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c77:	89 d6                	mov    %edx,%esi
ffffffff80005c79:	48 89 c7             	mov    %rax,%rdi
ffffffff80005c7c:	e8 9f ec ff ff       	call   ffffffff80004920 <mode_toggle>
            break;
ffffffff80005c81:	eb 1b                	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
        case ']':
            linux_private_parse(ctx);
ffffffff80005c83:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005c8a:	48 89 c7             	mov    %rax,%rdi
ffffffff80005c8d:	e8 29 ec ff ff       	call   ffffffff800048bb <linux_private_parse>
            break;
ffffffff80005c92:	eb 0a                	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
            break;
ffffffff80005c94:	90                   	nop
ffffffff80005c95:	eb 07                	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
            break;
ffffffff80005c97:	90                   	nop
ffffffff80005c98:	eb 04                	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
            break;
ffffffff80005c9a:	90                   	nop
ffffffff80005c9b:	eb 01                	jmp    ffffffff80005c9e <control_sequence_parse+0x1273>
            break;
ffffffff80005c9d:	90                   	nop
    }

    ctx->scroll_enabled = r;
ffffffff80005c9e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005ca5:	0f b6 95 6f ff ff ff 	movzbl -0x91(%rbp),%edx
ffffffff80005cac:	88 50 0a             	mov    %dl,0xa(%rax)

cleanup:
    ctx->control_sequence = false;
ffffffff80005caf:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005cb6:	c6 40 0b 00          	movb   $0x0,0xb(%rax)
    ctx->escape = false;
ffffffff80005cba:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff80005cc1:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
ffffffff80005cc5:	eb 04                	jmp    ffffffff80005ccb <control_sequence_parse+0x12a0>
            return;
ffffffff80005cc7:	90                   	nop
ffffffff80005cc8:	eb 01                	jmp    ffffffff80005ccb <control_sequence_parse+0x12a0>
            return;
ffffffff80005cca:	90                   	nop
}
ffffffff80005ccb:	c9                   	leave  
ffffffff80005ccc:	c3                   	ret    

ffffffff80005ccd <restore_state>:

static void restore_state(struct flanterm_context *ctx) {
ffffffff80005ccd:	f3 0f 1e fa          	endbr64 
ffffffff80005cd1:	55                   	push   %rbp
ffffffff80005cd2:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005cd5:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80005cd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ctx->bold = ctx->saved_state_bold;
ffffffff80005cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005ce1:	0f b6 90 c0 00 00 00 	movzbl 0xc0(%rax),%edx
ffffffff80005ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005cec:	88 50 11             	mov    %dl,0x11(%rax)
    ctx->bg_bold = ctx->saved_state_bg_bold;
ffffffff80005cef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005cf3:	0f b6 90 c1 00 00 00 	movzbl 0xc1(%rax),%edx
ffffffff80005cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005cfe:	88 50 12             	mov    %dl,0x12(%rax)
    ctx->reverse_video = ctx->saved_state_reverse_video;
ffffffff80005d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d05:	0f b6 90 c2 00 00 00 	movzbl 0xc2(%rax),%edx
ffffffff80005d0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d10:	88 50 13             	mov    %dl,0x13(%rax)
    ctx->current_charset = ctx->saved_state_current_charset;
ffffffff80005d13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d17:	48 8b 90 c8 00 00 00 	mov    0xc8(%rax),%rdx
ffffffff80005d1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d22:	48 89 50 30          	mov    %rdx,0x30(%rax)
    ctx->current_primary = ctx->saved_state_current_primary;
ffffffff80005d26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d2a:	48 8b 90 d0 00 00 00 	mov    0xd0(%rax),%rdx
ffffffff80005d31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d35:	48 89 50 58          	mov    %rdx,0x58(%rax)
    ctx->current_bg = ctx->saved_state_current_bg;
ffffffff80005d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d3d:	48 8b 90 d8 00 00 00 	mov    0xd8(%rax),%rdx
ffffffff80005d44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d48:	48 89 50 60          	mov    %rdx,0x60(%rax)

    ctx->restore_state(ctx);
ffffffff80005d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d50:	48 8b 90 88 01 00 00 	mov    0x188(%rax),%rdx
ffffffff80005d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d5b:	48 89 c7             	mov    %rax,%rdi
ffffffff80005d5e:	ff d2                	call   *%rdx
}
ffffffff80005d60:	90                   	nop
ffffffff80005d61:	c9                   	leave  
ffffffff80005d62:	c3                   	ret    

ffffffff80005d63 <save_state>:

static void save_state(struct flanterm_context *ctx) {
ffffffff80005d63:	f3 0f 1e fa          	endbr64 
ffffffff80005d67:	55                   	push   %rbp
ffffffff80005d68:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005d6b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80005d6f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    ctx->save_state(ctx);
ffffffff80005d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d77:	48 8b 90 80 01 00 00 	mov    0x180(%rax),%rdx
ffffffff80005d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d82:	48 89 c7             	mov    %rax,%rdi
ffffffff80005d85:	ff d2                	call   *%rdx

    ctx->saved_state_bold = ctx->bold;
ffffffff80005d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d8b:	0f b6 50 11          	movzbl 0x11(%rax),%edx
ffffffff80005d8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d93:	88 90 c0 00 00 00    	mov    %dl,0xc0(%rax)
    ctx->saved_state_bg_bold = ctx->bg_bold;
ffffffff80005d99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005d9d:	0f b6 50 12          	movzbl 0x12(%rax),%edx
ffffffff80005da1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005da5:	88 90 c1 00 00 00    	mov    %dl,0xc1(%rax)
    ctx->saved_state_reverse_video = ctx->reverse_video;
ffffffff80005dab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005daf:	0f b6 50 13          	movzbl 0x13(%rax),%edx
ffffffff80005db3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005db7:	88 90 c2 00 00 00    	mov    %dl,0xc2(%rax)
    ctx->saved_state_current_charset = ctx->current_charset;
ffffffff80005dbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005dc1:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80005dc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005dc9:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)
    ctx->saved_state_current_primary = ctx->current_primary;
ffffffff80005dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005dd4:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80005dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005ddc:	48 89 90 d0 00 00 00 	mov    %rdx,0xd0(%rax)
    ctx->saved_state_current_bg = ctx->current_bg;
ffffffff80005de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005de7:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80005deb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005def:	48 89 90 d8 00 00 00 	mov    %rdx,0xd8(%rax)
}
ffffffff80005df6:	90                   	nop
ffffffff80005df7:	c9                   	leave  
ffffffff80005df8:	c3                   	ret    

ffffffff80005df9 <escape_parse>:

static void escape_parse(struct flanterm_context *ctx, uint8_t c) {
ffffffff80005df9:	f3 0f 1e fa          	endbr64 
ffffffff80005dfd:	55                   	push   %rbp
ffffffff80005dfe:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005e01:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80005e05:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80005e09:	89 f0                	mov    %esi,%eax
ffffffff80005e0b:	88 45 d4             	mov    %al,-0x2c(%rbp)
    ctx->escape_offset++;
ffffffff80005e0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e12:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80005e16:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80005e1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e1e:	48 89 50 38          	mov    %rdx,0x38(%rax)

    if (ctx->osc == true) {
ffffffff80005e22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e26:	0f b6 40 0d          	movzbl 0xd(%rax),%eax
ffffffff80005e2a:	84 c0                	test   %al,%al
ffffffff80005e2c:	74 17                	je     ffffffff80005e45 <escape_parse+0x4c>
        osc_parse(ctx, c);
ffffffff80005e2e:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
ffffffff80005e32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e36:	89 d6                	mov    %edx,%esi
ffffffff80005e38:	48 89 c7             	mov    %rax,%rdi
ffffffff80005e3b:	e8 82 eb ff ff       	call   ffffffff800049c2 <osc_parse>
        return;
ffffffff80005e40:	e9 c6 02 00 00       	jmp    ffffffff8000610b <escape_parse+0x312>
    }

    if (ctx->control_sequence == true) {
ffffffff80005e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e49:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
ffffffff80005e4d:	84 c0                	test   %al,%al
ffffffff80005e4f:	74 17                	je     ffffffff80005e68 <escape_parse+0x6f>
        control_sequence_parse(ctx, c);
ffffffff80005e51:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
ffffffff80005e55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e59:	89 d6                	mov    %edx,%esi
ffffffff80005e5b:	48 89 c7             	mov    %rax,%rdi
ffffffff80005e5e:	e8 c8 eb ff ff       	call   ffffffff80004a2b <control_sequence_parse>
        return;
ffffffff80005e63:	e9 a3 02 00 00       	jmp    ffffffff8000610b <escape_parse+0x312>
    }

    size_t x, y;
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80005e68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e6c:	4c 8b 80 08 01 00 00 	mov    0x108(%rax),%r8
ffffffff80005e73:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
ffffffff80005e77:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
ffffffff80005e7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005e7f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005e82:	48 89 c7             	mov    %rax,%rdi
ffffffff80005e85:	41 ff d0             	call   *%r8

    switch (c) {
ffffffff80005e88:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
ffffffff80005e8c:	83 e8 28             	sub    $0x28,%eax
ffffffff80005e8f:	83 f8 3b             	cmp    $0x3b,%eax
ffffffff80005e92:	0f 87 6b 02 00 00    	ja     ffffffff80006103 <escape_parse+0x30a>
ffffffff80005e98:	89 c0                	mov    %eax,%eax
ffffffff80005e9a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80005ea1:	00 
ffffffff80005ea2:	48 8d 05 ef 65 00 00 	lea    0x65ef(%rip),%rax        # ffffffff8000c498 <col256+0x498>
ffffffff80005ea9:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80005eac:	48 98                	cltq   
ffffffff80005eae:	48 8d 15 e3 65 00 00 	lea    0x65e3(%rip),%rdx        # ffffffff8000c498 <col256+0x498>
ffffffff80005eb5:	48 01 d0             	add    %rdx,%rax
ffffffff80005eb8:	3e ff e0             	notrack jmp *%rax
        case ']':
            ctx->osc_escape = false;
ffffffff80005ebb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005ebf:	c6 40 0e 00          	movb   $0x0,0xe(%rax)
            ctx->osc = true;
ffffffff80005ec3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005ec7:	c6 40 0d 01          	movb   $0x1,0xd(%rax)
            return;
ffffffff80005ecb:	e9 3b 02 00 00       	jmp    ffffffff8000610b <escape_parse+0x312>
        case '[':
            for (size_t i = 0; i < FLANTERM_MAX_ESC_VALUES; i++)
ffffffff80005ed0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80005ed7:	00 
ffffffff80005ed8:	eb 19                	jmp    ffffffff80005ef3 <escape_parse+0xfa>
                ctx->esc_values[i] = 0;
ffffffff80005eda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005ede:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80005ee2:	48 83 c2 1c          	add    $0x1c,%rdx
ffffffff80005ee6:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%rax,%rdx,4)
ffffffff80005eed:	00 
            for (size_t i = 0; i < FLANTERM_MAX_ESC_VALUES; i++)
ffffffff80005eee:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80005ef3:	48 83 7d f8 0f       	cmpq   $0xf,-0x8(%rbp)
ffffffff80005ef8:	76 e0                	jbe    ffffffff80005eda <escape_parse+0xe1>
            ctx->esc_values_i = 0;
ffffffff80005efa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005efe:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
ffffffff80005f05:	00 
            ctx->rrr = false;
ffffffff80005f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f0a:	c6 40 0f 00          	movb   $0x0,0xf(%rax)
            ctx->control_sequence = true;
ffffffff80005f0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f12:	c6 40 0b 01          	movb   $0x1,0xb(%rax)
            return;
ffffffff80005f16:	e9 f0 01 00 00       	jmp    ffffffff8000610b <escape_parse+0x312>
        case '7':
            save_state(ctx);
ffffffff80005f1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f1f:	48 89 c7             	mov    %rax,%rdi
ffffffff80005f22:	e8 3c fe ff ff       	call   ffffffff80005d63 <save_state>
            break;
ffffffff80005f27:	e9 d7 01 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
        case '8':
            restore_state(ctx);
ffffffff80005f2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f30:	48 89 c7             	mov    %rax,%rdi
ffffffff80005f33:	e8 95 fd ff ff       	call   ffffffff80005ccd <restore_state>
            break;
ffffffff80005f38:	e9 c6 01 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
        case 'c':
            flanterm_context_reinit(ctx);
ffffffff80005f3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f41:	48 89 c7             	mov    %rax,%rdi
ffffffff80005f44:	e8 b4 db ff ff       	call   ffffffff80003afd <flanterm_context_reinit>
            ctx->clear(ctx, true);
ffffffff80005f49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f4d:	48 8b 90 f8 00 00 00 	mov    0xf8(%rax),%rdx
ffffffff80005f54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f58:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80005f5d:	48 89 c7             	mov    %rax,%rdi
ffffffff80005f60:	ff d2                	call   *%rdx
            break;
ffffffff80005f62:	e9 9c 01 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
        case 'D':
            if (y == ctx->scroll_bottom_margin - 1) {
ffffffff80005f67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f6b:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80005f6f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80005f73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80005f77:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005f7a:	75 39                	jne    ffffffff80005fb5 <escape_parse+0x1bc>
                ctx->scroll(ctx);
ffffffff80005f7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f80:	48 8b 90 68 01 00 00 	mov    0x168(%rax),%rdx
ffffffff80005f87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f8b:	48 89 c7             	mov    %rax,%rdi
ffffffff80005f8e:	ff d2                	call   *%rdx
                ctx->set_cursor_pos(ctx, x, y);
ffffffff80005f90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005f94:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80005f9b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80005f9f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80005fa3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005fa7:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005faa:	48 89 c7             	mov    %rax,%rdi
ffffffff80005fad:	41 ff d0             	call   *%r8
            } else {
                ctx->set_cursor_pos(ctx, x, y + 1);
            }
            break;
ffffffff80005fb0:	e9 4e 01 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
                ctx->set_cursor_pos(ctx, x, y + 1);
ffffffff80005fb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005fb9:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80005fc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80005fc4:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80005fc8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80005fcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005fd0:	48 89 ce             	mov    %rcx,%rsi
ffffffff80005fd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80005fd6:	41 ff d0             	call   *%r8
            break;
ffffffff80005fd9:	e9 25 01 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
        case 'E':
            if (y == ctx->scroll_bottom_margin - 1) {
ffffffff80005fde:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005fe2:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80005fe6:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80005fea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80005fee:	48 39 c2             	cmp    %rax,%rdx
ffffffff80005ff1:	75 36                	jne    ffffffff80006029 <escape_parse+0x230>
                ctx->scroll(ctx);
ffffffff80005ff3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005ff7:	48 8b 90 68 01 00 00 	mov    0x168(%rax),%rdx
ffffffff80005ffe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006002:	48 89 c7             	mov    %rax,%rdi
ffffffff80006005:	ff d2                	call   *%rdx
                ctx->set_cursor_pos(ctx, 0, y);
ffffffff80006007:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000600b:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80006012:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80006016:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000601a:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8000601f:	48 89 c7             	mov    %rax,%rdi
ffffffff80006022:	ff d1                	call   *%rcx
            } else {
                ctx->set_cursor_pos(ctx, 0, y + 1);
            }
            break;
ffffffff80006024:	e9 da 00 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
                ctx->set_cursor_pos(ctx, 0, y + 1);
ffffffff80006029:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000602d:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff80006034:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80006038:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8000603c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006040:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80006045:	48 89 c7             	mov    %rax,%rdi
ffffffff80006048:	ff d1                	call   *%rcx
            break;
ffffffff8000604a:	e9 b4 00 00 00       	jmp    ffffffff80006103 <escape_parse+0x30a>
        case 'M':
            // "Reverse linefeed"
            if (y == ctx->scroll_top_margin) {
ffffffff8000604f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006053:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80006057:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000605b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8000605e:	75 33                	jne    ffffffff80006093 <escape_parse+0x29a>
                ctx->revscroll(ctx);
ffffffff80006060:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006064:	48 8b 90 70 01 00 00 	mov    0x170(%rax),%rdx
ffffffff8000606b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000606f:	48 89 c7             	mov    %rax,%rdi
ffffffff80006072:	ff d2                	call   *%rdx
                ctx->set_cursor_pos(ctx, 0, y);
ffffffff80006074:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006078:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff8000607f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80006083:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006087:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8000608c:	48 89 c7             	mov    %rax,%rdi
ffffffff8000608f:	ff d1                	call   *%rcx
            } else {
                ctx->set_cursor_pos(ctx, 0, y - 1);
            }
            break;
ffffffff80006091:	eb 70                	jmp    ffffffff80006103 <escape_parse+0x30a>
                ctx->set_cursor_pos(ctx, 0, y - 1);
ffffffff80006093:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006097:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff8000609e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800060a2:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff800060a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800060aa:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff800060af:	48 89 c7             	mov    %rax,%rdi
ffffffff800060b2:	ff d1                	call   *%rcx
            break;
ffffffff800060b4:	eb 4d                	jmp    ffffffff80006103 <escape_parse+0x30a>
        case 'Z':
            if (ctx->callback != NULL) {
ffffffff800060b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800060ba:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff800060c1:	48 85 c0             	test   %rax,%rax
ffffffff800060c4:	74 3c                	je     ffffffff80006102 <escape_parse+0x309>
                ctx->callback(ctx, FLANTERM_CB_PRIVATE_ID, 0, 0, 0);
ffffffff800060c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800060ca:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff800060d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800060d5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff800060db:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff800060e0:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800060e5:	be 1e 00 00 00       	mov    $0x1e,%esi
ffffffff800060ea:	48 89 c7             	mov    %rax,%rdi
ffffffff800060ed:	41 ff d1             	call   *%r9
            }
            break;
ffffffff800060f0:	eb 10                	jmp    ffffffff80006102 <escape_parse+0x309>
        case '(':
        case ')':
            ctx->g_select = c - '\'';
ffffffff800060f2:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
ffffffff800060f6:	8d 50 d9             	lea    -0x27(%rax),%edx
ffffffff800060f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800060fd:	88 50 28             	mov    %dl,0x28(%rax)
            break;
ffffffff80006100:	eb 01                	jmp    ffffffff80006103 <escape_parse+0x30a>
            break;
ffffffff80006102:	90                   	nop
    }

    ctx->escape = false;
ffffffff80006103:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006107:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
}
ffffffff8000610b:	c9                   	leave  
ffffffff8000610c:	c3                   	ret    

ffffffff8000610d <dec_special_print>:

static bool dec_special_print(struct flanterm_context *ctx, uint8_t c) {
ffffffff8000610d:	f3 0f 1e fa          	endbr64 
ffffffff80006111:	55                   	push   %rbp
ffffffff80006112:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006115:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80006119:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000611d:	89 f0                	mov    %esi,%eax
ffffffff8000611f:	88 45 f4             	mov    %al,-0xc(%rbp)
#define FLANTERM_DEC_SPCL_PRN(C) ctx->raw_putchar(ctx, (C)); return true;
    switch (c) {
ffffffff80006122:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
ffffffff80006126:	83 e8 2b             	sub    $0x2b,%eax
ffffffff80006129:	83 f8 53             	cmp    $0x53,%eax
ffffffff8000612c:	0f 87 eb 03 00 00    	ja     ffffffff8000651d <dec_special_print+0x410>
ffffffff80006132:	89 c0                	mov    %eax,%eax
ffffffff80006134:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff8000613b:	00 
ffffffff8000613c:	48 8d 05 45 64 00 00 	lea    0x6445(%rip),%rax        # ffffffff8000c588 <col256+0x588>
ffffffff80006143:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80006146:	48 98                	cltq   
ffffffff80006148:	48 8d 15 39 64 00 00 	lea    0x6439(%rip),%rdx        # ffffffff8000c588 <col256+0x588>
ffffffff8000614f:	48 01 d0             	add    %rdx,%rax
ffffffff80006152:	3e ff e0             	notrack jmp *%rax
        case '`': FLANTERM_DEC_SPCL_PRN(0x04)
ffffffff80006155:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006159:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006164:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80006169:	48 89 c7             	mov    %rax,%rdi
ffffffff8000616c:	ff d2                	call   *%rdx
ffffffff8000616e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006173:	e9 aa 03 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '0': FLANTERM_DEC_SPCL_PRN(0xdb)
ffffffff80006178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000617c:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006187:	be db 00 00 00       	mov    $0xdb,%esi
ffffffff8000618c:	48 89 c7             	mov    %rax,%rdi
ffffffff8000618f:	ff d2                	call   *%rdx
ffffffff80006191:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006196:	e9 87 03 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '-': FLANTERM_DEC_SPCL_PRN(0x18)
ffffffff8000619b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000619f:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800061a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800061aa:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff800061af:	48 89 c7             	mov    %rax,%rdi
ffffffff800061b2:	ff d2                	call   *%rdx
ffffffff800061b4:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800061b9:	e9 64 03 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case ',': FLANTERM_DEC_SPCL_PRN(0x1b)
ffffffff800061be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800061c2:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800061c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800061cd:	be 1b 00 00 00       	mov    $0x1b,%esi
ffffffff800061d2:	48 89 c7             	mov    %rax,%rdi
ffffffff800061d5:	ff d2                	call   *%rdx
ffffffff800061d7:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800061dc:	e9 41 03 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '.': FLANTERM_DEC_SPCL_PRN(0x19)
ffffffff800061e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800061e5:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800061ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800061f0:	be 19 00 00 00       	mov    $0x19,%esi
ffffffff800061f5:	48 89 c7             	mov    %rax,%rdi
ffffffff800061f8:	ff d2                	call   *%rdx
ffffffff800061fa:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800061ff:	e9 1e 03 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'a': FLANTERM_DEC_SPCL_PRN(0xb1)
ffffffff80006204:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006208:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000620f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006213:	be b1 00 00 00       	mov    $0xb1,%esi
ffffffff80006218:	48 89 c7             	mov    %rax,%rdi
ffffffff8000621b:	ff d2                	call   *%rdx
ffffffff8000621d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006222:	e9 fb 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'f': FLANTERM_DEC_SPCL_PRN(0xf8)
ffffffff80006227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000622b:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006232:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006236:	be f8 00 00 00       	mov    $0xf8,%esi
ffffffff8000623b:	48 89 c7             	mov    %rax,%rdi
ffffffff8000623e:	ff d2                	call   *%rdx
ffffffff80006240:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006245:	e9 d8 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'g': FLANTERM_DEC_SPCL_PRN(0xf1)
ffffffff8000624a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000624e:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006259:	be f1 00 00 00       	mov    $0xf1,%esi
ffffffff8000625e:	48 89 c7             	mov    %rax,%rdi
ffffffff80006261:	ff d2                	call   *%rdx
ffffffff80006263:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006268:	e9 b5 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'h': FLANTERM_DEC_SPCL_PRN(0xb0)
ffffffff8000626d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006271:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006278:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000627c:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff80006281:	48 89 c7             	mov    %rax,%rdi
ffffffff80006284:	ff d2                	call   *%rdx
ffffffff80006286:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000628b:	e9 92 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'j': FLANTERM_DEC_SPCL_PRN(0xd9)
ffffffff80006290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006294:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000629b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000629f:	be d9 00 00 00       	mov    $0xd9,%esi
ffffffff800062a4:	48 89 c7             	mov    %rax,%rdi
ffffffff800062a7:	ff d2                	call   *%rdx
ffffffff800062a9:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800062ae:	e9 6f 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'k': FLANTERM_DEC_SPCL_PRN(0xbf)
ffffffff800062b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800062b7:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800062be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800062c2:	be bf 00 00 00       	mov    $0xbf,%esi
ffffffff800062c7:	48 89 c7             	mov    %rax,%rdi
ffffffff800062ca:	ff d2                	call   *%rdx
ffffffff800062cc:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800062d1:	e9 4c 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'l': FLANTERM_DEC_SPCL_PRN(0xda)
ffffffff800062d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800062da:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800062e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800062e5:	be da 00 00 00       	mov    $0xda,%esi
ffffffff800062ea:	48 89 c7             	mov    %rax,%rdi
ffffffff800062ed:	ff d2                	call   *%rdx
ffffffff800062ef:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800062f4:	e9 29 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'm': FLANTERM_DEC_SPCL_PRN(0xc0)
ffffffff800062f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800062fd:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006304:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006308:	be c0 00 00 00       	mov    $0xc0,%esi
ffffffff8000630d:	48 89 c7             	mov    %rax,%rdi
ffffffff80006310:	ff d2                	call   *%rdx
ffffffff80006312:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006317:	e9 06 02 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'n': FLANTERM_DEC_SPCL_PRN(0xc5)
ffffffff8000631c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006320:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000632b:	be c5 00 00 00       	mov    $0xc5,%esi
ffffffff80006330:	48 89 c7             	mov    %rax,%rdi
ffffffff80006333:	ff d2                	call   *%rdx
ffffffff80006335:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000633a:	e9 e3 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'q': FLANTERM_DEC_SPCL_PRN(0xc4)
ffffffff8000633f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006343:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000634a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000634e:	be c4 00 00 00       	mov    $0xc4,%esi
ffffffff80006353:	48 89 c7             	mov    %rax,%rdi
ffffffff80006356:	ff d2                	call   *%rdx
ffffffff80006358:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000635d:	e9 c0 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 's': FLANTERM_DEC_SPCL_PRN(0x5f)
ffffffff80006362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006366:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000636d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006371:	be 5f 00 00 00       	mov    $0x5f,%esi
ffffffff80006376:	48 89 c7             	mov    %rax,%rdi
ffffffff80006379:	ff d2                	call   *%rdx
ffffffff8000637b:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006380:	e9 9d 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 't': FLANTERM_DEC_SPCL_PRN(0xc3)
ffffffff80006385:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006389:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006390:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006394:	be c3 00 00 00       	mov    $0xc3,%esi
ffffffff80006399:	48 89 c7             	mov    %rax,%rdi
ffffffff8000639c:	ff d2                	call   *%rdx
ffffffff8000639e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800063a3:	e9 7a 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'u': FLANTERM_DEC_SPCL_PRN(0xb4)
ffffffff800063a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800063ac:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800063b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800063b7:	be b4 00 00 00       	mov    $0xb4,%esi
ffffffff800063bc:	48 89 c7             	mov    %rax,%rdi
ffffffff800063bf:	ff d2                	call   *%rdx
ffffffff800063c1:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800063c6:	e9 57 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'v': FLANTERM_DEC_SPCL_PRN(0xc1)
ffffffff800063cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800063cf:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800063d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800063da:	be c1 00 00 00       	mov    $0xc1,%esi
ffffffff800063df:	48 89 c7             	mov    %rax,%rdi
ffffffff800063e2:	ff d2                	call   *%rdx
ffffffff800063e4:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800063e9:	e9 34 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'w': FLANTERM_DEC_SPCL_PRN(0xc2)
ffffffff800063ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800063f2:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800063f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800063fd:	be c2 00 00 00       	mov    $0xc2,%esi
ffffffff80006402:	48 89 c7             	mov    %rax,%rdi
ffffffff80006405:	ff d2                	call   *%rdx
ffffffff80006407:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000640c:	e9 11 01 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'x': FLANTERM_DEC_SPCL_PRN(0xb3)
ffffffff80006411:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006415:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000641c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006420:	be b3 00 00 00       	mov    $0xb3,%esi
ffffffff80006425:	48 89 c7             	mov    %rax,%rdi
ffffffff80006428:	ff d2                	call   *%rdx
ffffffff8000642a:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000642f:	e9 ee 00 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'y': FLANTERM_DEC_SPCL_PRN(0xf3)
ffffffff80006434:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006438:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000643f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006443:	be f3 00 00 00       	mov    $0xf3,%esi
ffffffff80006448:	48 89 c7             	mov    %rax,%rdi
ffffffff8000644b:	ff d2                	call   *%rdx
ffffffff8000644d:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006452:	e9 cb 00 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case 'z': FLANTERM_DEC_SPCL_PRN(0xf2)
ffffffff80006457:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000645b:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006466:	be f2 00 00 00       	mov    $0xf2,%esi
ffffffff8000646b:	48 89 c7             	mov    %rax,%rdi
ffffffff8000646e:	ff d2                	call   *%rdx
ffffffff80006470:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006475:	e9 a8 00 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '~': FLANTERM_DEC_SPCL_PRN(0xfa)
ffffffff8000647a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000647e:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006485:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006489:	be fa 00 00 00       	mov    $0xfa,%esi
ffffffff8000648e:	48 89 c7             	mov    %rax,%rdi
ffffffff80006491:	ff d2                	call   *%rdx
ffffffff80006493:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006498:	e9 85 00 00 00       	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '_': FLANTERM_DEC_SPCL_PRN(0xff)
ffffffff8000649d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800064a1:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800064a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800064ac:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff800064b1:	48 89 c7             	mov    %rax,%rdi
ffffffff800064b4:	ff d2                	call   *%rdx
ffffffff800064b6:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800064bb:	eb 65                	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '+': FLANTERM_DEC_SPCL_PRN(0x1a)
ffffffff800064bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800064c1:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800064c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800064cc:	be 1a 00 00 00       	mov    $0x1a,%esi
ffffffff800064d1:	48 89 c7             	mov    %rax,%rdi
ffffffff800064d4:	ff d2                	call   *%rdx
ffffffff800064d6:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800064db:	eb 45                	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '{': FLANTERM_DEC_SPCL_PRN(0xe3)
ffffffff800064dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800064e1:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff800064e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800064ec:	be e3 00 00 00       	mov    $0xe3,%esi
ffffffff800064f1:	48 89 c7             	mov    %rax,%rdi
ffffffff800064f4:	ff d2                	call   *%rdx
ffffffff800064f6:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800064fb:	eb 25                	jmp    ffffffff80006522 <dec_special_print+0x415>
        case '}': FLANTERM_DEC_SPCL_PRN(0x9c)
ffffffff800064fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006501:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80006508:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000650c:	be 9c 00 00 00       	mov    $0x9c,%esi
ffffffff80006511:	48 89 c7             	mov    %rax,%rdi
ffffffff80006514:	ff d2                	call   *%rdx
ffffffff80006516:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000651b:	eb 05                	jmp    ffffffff80006522 <dec_special_print+0x415>
    }
#undef FLANTERM_DEC_SPCL_PRN

    return false;
ffffffff8000651d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80006522:	c9                   	leave  
ffffffff80006523:	c3                   	ret    

ffffffff80006524 <bisearch>:
    uint32_t first;
    uint32_t last;
};

/* auxiliary function for binary search in interval table */
static int bisearch(uint32_t ucs, const struct interval *table, int max) {
ffffffff80006524:	f3 0f 1e fa          	endbr64 
ffffffff80006528:	55                   	push   %rbp
ffffffff80006529:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000652c:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80006530:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80006533:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80006537:	89 55 e8             	mov    %edx,-0x18(%rbp)
  int min = 0;
ffffffff8000653a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  int mid;

  if (ucs < table[0].first || ucs > table[max].last)
ffffffff80006541:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006545:	8b 00                	mov    (%rax),%eax
ffffffff80006547:	39 45 ec             	cmp    %eax,-0x14(%rbp)
ffffffff8000654a:	72 1c                	jb     ffffffff80006568 <bisearch+0x44>
ffffffff8000654c:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff8000654f:	48 98                	cltq   
ffffffff80006551:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80006558:	00 
ffffffff80006559:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000655d:	48 01 d0             	add    %rdx,%rax
ffffffff80006560:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80006563:	39 45 ec             	cmp    %eax,-0x14(%rbp)
ffffffff80006566:	76 6f                	jbe    ffffffff800065d7 <bisearch+0xb3>
    return 0;
ffffffff80006568:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8000656d:	eb 75                	jmp    ffffffff800065e4 <bisearch+0xc0>
  while (max >= min) {
    mid = (min + max) / 2;
ffffffff8000656f:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80006572:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80006575:	01 d0                	add    %edx,%eax
ffffffff80006577:	89 c2                	mov    %eax,%edx
ffffffff80006579:	c1 ea 1f             	shr    $0x1f,%edx
ffffffff8000657c:	01 d0                	add    %edx,%eax
ffffffff8000657e:	d1 f8                	sar    %eax
ffffffff80006580:	89 45 f8             	mov    %eax,-0x8(%rbp)
    if (ucs > table[mid].last)
ffffffff80006583:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80006586:	48 98                	cltq   
ffffffff80006588:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8000658f:	00 
ffffffff80006590:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006594:	48 01 d0             	add    %rdx,%rax
ffffffff80006597:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8000659a:	39 45 ec             	cmp    %eax,-0x14(%rbp)
ffffffff8000659d:	76 0b                	jbe    ffffffff800065aa <bisearch+0x86>
      min = mid + 1;
ffffffff8000659f:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800065a2:	83 c0 01             	add    $0x1,%eax
ffffffff800065a5:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800065a8:	eb 2d                	jmp    ffffffff800065d7 <bisearch+0xb3>
    else if (ucs < table[mid].first)
ffffffff800065aa:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800065ad:	48 98                	cltq   
ffffffff800065af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff800065b6:	00 
ffffffff800065b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800065bb:	48 01 d0             	add    %rdx,%rax
ffffffff800065be:	8b 00                	mov    (%rax),%eax
ffffffff800065c0:	39 45 ec             	cmp    %eax,-0x14(%rbp)
ffffffff800065c3:	73 0b                	jae    ffffffff800065d0 <bisearch+0xac>
      max = mid - 1;
ffffffff800065c5:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800065c8:	83 e8 01             	sub    $0x1,%eax
ffffffff800065cb:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff800065ce:	eb 07                	jmp    ffffffff800065d7 <bisearch+0xb3>
    else
      return 1;
ffffffff800065d0:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800065d5:	eb 0d                	jmp    ffffffff800065e4 <bisearch+0xc0>
  while (max >= min) {
ffffffff800065d7:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800065da:	3b 45 fc             	cmp    -0x4(%rbp),%eax
ffffffff800065dd:	7d 90                	jge    ffffffff8000656f <bisearch+0x4b>
  }

  return 0;
ffffffff800065df:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff800065e4:	c9                   	leave  
ffffffff800065e5:	c3                   	ret    

ffffffff800065e6 <mk_wcwidth>:

int mk_wcwidth(uint32_t ucs) {
ffffffff800065e6:	f3 0f 1e fa          	endbr64 
ffffffff800065ea:	55                   	push   %rbp
ffffffff800065eb:	48 89 e5             	mov    %rsp,%rbp
ffffffff800065ee:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800065f2:	89 7d fc             	mov    %edi,-0x4(%rbp)
    { 0x1D242, 0x1D244 }, { 0xE0001, 0xE0001 }, { 0xE0020, 0xE007F },
    { 0xE0100, 0xE01EF }
  };

  /* test for 8-bit control characters */
  if (ucs == 0)
ffffffff800065f5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800065f9:	75 0a                	jne    ffffffff80006605 <mk_wcwidth+0x1f>
    return 0;
ffffffff800065fb:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80006600:	e9 38 01 00 00       	jmp    ffffffff8000673d <mk_wcwidth+0x157>
  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))
ffffffff80006605:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
ffffffff80006609:	76 0f                	jbe    ffffffff8000661a <mk_wcwidth+0x34>
ffffffff8000660b:	83 7d fc 7e          	cmpl   $0x7e,-0x4(%rbp)
ffffffff8000660f:	76 13                	jbe    ffffffff80006624 <mk_wcwidth+0x3e>
ffffffff80006611:	81 7d fc 9f 00 00 00 	cmpl   $0x9f,-0x4(%rbp)
ffffffff80006618:	77 0a                	ja     ffffffff80006624 <mk_wcwidth+0x3e>
    return 1;
ffffffff8000661a:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000661f:	e9 19 01 00 00       	jmp    ffffffff8000673d <mk_wcwidth+0x157>

  /* binary search in table of non-spacing characters */
  if (bisearch(ucs, combining,
ffffffff80006624:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80006627:	ba 8d 00 00 00       	mov    $0x8d,%edx
ffffffff8000662c:	48 8d 0d 8d 6c 00 00 	lea    0x6c8d(%rip),%rcx        # ffffffff8000d2c0 <combining.0>
ffffffff80006633:	48 89 ce             	mov    %rcx,%rsi
ffffffff80006636:	89 c7                	mov    %eax,%edi
ffffffff80006638:	e8 e7 fe ff ff       	call   ffffffff80006524 <bisearch>
ffffffff8000663d:	85 c0                	test   %eax,%eax
ffffffff8000663f:	74 0a                	je     ffffffff8000664b <mk_wcwidth+0x65>
	       sizeof(combining) / sizeof(struct interval) - 1))
    return 0;
ffffffff80006641:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80006646:	e9 f2 00 00 00       	jmp    ffffffff8000673d <mk_wcwidth+0x157>

  /* if we arrive here, ucs is not a combining or C0/C1 control character */

  return 1 +
    (ucs >= 0x1100 &&
ffffffff8000664b:	81 7d fc ff 10 00 00 	cmpl   $0x10ff,-0x4(%rbp)
ffffffff80006652:	0f 86 dd 00 00 00    	jbe    ffffffff80006735 <mk_wcwidth+0x14f>
ffffffff80006658:	81 7d fc 5f 11 00 00 	cmpl   $0x115f,-0x4(%rbp)
ffffffff8000665f:	0f 86 c9 00 00 00    	jbe    ffffffff8000672e <mk_wcwidth+0x148>
     (ucs <= 0x115f ||                    /* Hangul Jamo init. consonants */
ffffffff80006665:	81 7d fc 29 23 00 00 	cmpl   $0x2329,-0x4(%rbp)
ffffffff8000666c:	0f 84 bc 00 00 00    	je     ffffffff8000672e <mk_wcwidth+0x148>
      ucs == 0x2329 || ucs == 0x232a ||
ffffffff80006672:	81 7d fc 2a 23 00 00 	cmpl   $0x232a,-0x4(%rbp)
ffffffff80006679:	0f 84 af 00 00 00    	je     ffffffff8000672e <mk_wcwidth+0x148>
ffffffff8000667f:	81 7d fc 7f 2e 00 00 	cmpl   $0x2e7f,-0x4(%rbp)
ffffffff80006686:	76 16                	jbe    ffffffff8000669e <mk_wcwidth+0xb8>
      (ucs >= 0x2e80 && ucs <= 0xa4cf &&
ffffffff80006688:	81 7d fc cf a4 00 00 	cmpl   $0xa4cf,-0x4(%rbp)
ffffffff8000668f:	77 0d                	ja     ffffffff8000669e <mk_wcwidth+0xb8>
ffffffff80006691:	81 7d fc 3f 30 00 00 	cmpl   $0x303f,-0x4(%rbp)
ffffffff80006698:	0f 85 90 00 00 00    	jne    ffffffff8000672e <mk_wcwidth+0x148>
       ucs != 0x303f) ||                  /* CJK ... Yi */
ffffffff8000669e:	81 7d fc ff ab 00 00 	cmpl   $0xabff,-0x4(%rbp)
ffffffff800066a5:	76 09                	jbe    ffffffff800066b0 <mk_wcwidth+0xca>
      (ucs >= 0xac00 && ucs <= 0xd7a3) || /* Hangul Syllables */
ffffffff800066a7:	81 7d fc a3 d7 00 00 	cmpl   $0xd7a3,-0x4(%rbp)
ffffffff800066ae:	76 7e                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff800066b0:	81 7d fc ff f8 00 00 	cmpl   $0xf8ff,-0x4(%rbp)
ffffffff800066b7:	76 09                	jbe    ffffffff800066c2 <mk_wcwidth+0xdc>
      (ucs >= 0xf900 && ucs <= 0xfaff) || /* CJK Compatibility Ideographs */
ffffffff800066b9:	81 7d fc ff fa 00 00 	cmpl   $0xfaff,-0x4(%rbp)
ffffffff800066c0:	76 6c                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff800066c2:	81 7d fc 0f fe 00 00 	cmpl   $0xfe0f,-0x4(%rbp)
ffffffff800066c9:	76 09                	jbe    ffffffff800066d4 <mk_wcwidth+0xee>
      (ucs >= 0xfe10 && ucs <= 0xfe19) || /* Vertical forms */
ffffffff800066cb:	81 7d fc 19 fe 00 00 	cmpl   $0xfe19,-0x4(%rbp)
ffffffff800066d2:	76 5a                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff800066d4:	81 7d fc 2f fe 00 00 	cmpl   $0xfe2f,-0x4(%rbp)
ffffffff800066db:	76 09                	jbe    ffffffff800066e6 <mk_wcwidth+0x100>
      (ucs >= 0xfe30 && ucs <= 0xfe6f) || /* CJK Compatibility Forms */
ffffffff800066dd:	81 7d fc 6f fe 00 00 	cmpl   $0xfe6f,-0x4(%rbp)
ffffffff800066e4:	76 48                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff800066e6:	81 7d fc ff fe 00 00 	cmpl   $0xfeff,-0x4(%rbp)
ffffffff800066ed:	76 09                	jbe    ffffffff800066f8 <mk_wcwidth+0x112>
      (ucs >= 0xff00 && ucs <= 0xff60) || /* Fullwidth Forms */
ffffffff800066ef:	81 7d fc 60 ff 00 00 	cmpl   $0xff60,-0x4(%rbp)
ffffffff800066f6:	76 36                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff800066f8:	81 7d fc df ff 00 00 	cmpl   $0xffdf,-0x4(%rbp)
ffffffff800066ff:	76 09                	jbe    ffffffff8000670a <mk_wcwidth+0x124>
      (ucs >= 0xffe0 && ucs <= 0xffe6) ||
ffffffff80006701:	81 7d fc e6 ff 00 00 	cmpl   $0xffe6,-0x4(%rbp)
ffffffff80006708:	76 24                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff8000670a:	81 7d fc ff ff 01 00 	cmpl   $0x1ffff,-0x4(%rbp)
ffffffff80006711:	76 09                	jbe    ffffffff8000671c <mk_wcwidth+0x136>
      (ucs >= 0x20000 && ucs <= 0x2fffd) ||
ffffffff80006713:	81 7d fc fd ff 02 00 	cmpl   $0x2fffd,-0x4(%rbp)
ffffffff8000671a:	76 12                	jbe    ffffffff8000672e <mk_wcwidth+0x148>
ffffffff8000671c:	81 7d fc ff ff 02 00 	cmpl   $0x2ffff,-0x4(%rbp)
ffffffff80006723:	76 10                	jbe    ffffffff80006735 <mk_wcwidth+0x14f>
      (ucs >= 0x30000 && ucs <= 0x3fffd)));
ffffffff80006725:	81 7d fc fd ff 03 00 	cmpl   $0x3fffd,-0x4(%rbp)
ffffffff8000672c:	77 07                	ja     ffffffff80006735 <mk_wcwidth+0x14f>
    (ucs >= 0x1100 &&
ffffffff8000672e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006733:	eb 05                	jmp    ffffffff8000673a <mk_wcwidth+0x154>
ffffffff80006735:	b8 00 00 00 00       	mov    $0x0,%eax
  return 1 +
ffffffff8000673a:	83 c0 01             	add    $0x1,%eax
}
ffffffff8000673d:	c9                   	leave  
ffffffff8000673e:	c3                   	ret    

ffffffff8000673f <unicode_to_cp437>:

// End of https://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c inherited code

static int unicode_to_cp437(uint64_t code_point) {
ffffffff8000673f:	f3 0f 1e fa          	endbr64 
ffffffff80006743:	55                   	push   %rbp
ffffffff80006744:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006747:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000674b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    switch (code_point) {
ffffffff8000674f:	48 81 7d f8 6b 26 00 	cmpq   $0x266b,-0x8(%rbp)
ffffffff80006756:	00 
ffffffff80006757:	0f 87 c9 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff8000675d:	48 81 7d f8 00 25 00 	cmpq   $0x2500,-0x8(%rbp)
ffffffff80006764:	00 
ffffffff80006765:	0f 83 8d 01 00 00    	jae    ffffffff800068f8 <unicode_to_cp437+0x1b9>
ffffffff8000676b:	48 81 7d f8 21 23 00 	cmpq   $0x2321,-0x8(%rbp)
ffffffff80006772:	00 
ffffffff80006773:	0f 84 67 08 00 00    	je     ffffffff80006fe0 <unicode_to_cp437+0x8a1>
ffffffff80006779:	48 81 7d f8 21 23 00 	cmpq   $0x2321,-0x8(%rbp)
ffffffff80006780:	00 
ffffffff80006781:	0f 87 9f 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006787:	48 81 7d f8 20 23 00 	cmpq   $0x2320,-0x8(%rbp)
ffffffff8000678e:	00 
ffffffff8000678f:	0f 84 44 08 00 00    	je     ffffffff80006fd9 <unicode_to_cp437+0x89a>
ffffffff80006795:	48 81 7d f8 20 23 00 	cmpq   $0x2320,-0x8(%rbp)
ffffffff8000679c:	00 
ffffffff8000679d:	0f 87 83 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800067a3:	48 81 7d f8 10 23 00 	cmpq   $0x2310,-0x8(%rbp)
ffffffff800067aa:	00 
ffffffff800067ab:	0f 84 4f 05 00 00    	je     ffffffff80006d00 <unicode_to_cp437+0x5c1>
ffffffff800067b1:	48 81 7d f8 10 23 00 	cmpq   $0x2310,-0x8(%rbp)
ffffffff800067b8:	00 
ffffffff800067b9:	0f 87 67 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800067bf:	48 81 7d f8 02 23 00 	cmpq   $0x2302,-0x8(%rbp)
ffffffff800067c6:	00 
ffffffff800067c7:	0f 84 8f 03 00 00    	je     ffffffff80006b5c <unicode_to_cp437+0x41d>
ffffffff800067cd:	48 81 7d f8 02 23 00 	cmpq   $0x2302,-0x8(%rbp)
ffffffff800067d4:	00 
ffffffff800067d5:	0f 87 4b 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800067db:	48 81 7d f8 65 22 00 	cmpq   $0x2265,-0x8(%rbp)
ffffffff800067e2:	00 
ffffffff800067e3:	0f 84 e2 07 00 00    	je     ffffffff80006fcb <unicode_to_cp437+0x88c>
ffffffff800067e9:	48 81 7d f8 65 22 00 	cmpq   $0x2265,-0x8(%rbp)
ffffffff800067f0:	00 
ffffffff800067f1:	0f 87 2f 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800067f7:	48 81 7d f8 64 22 00 	cmpq   $0x2264,-0x8(%rbp)
ffffffff800067fe:	00 
ffffffff800067ff:	0f 84 cd 07 00 00    	je     ffffffff80006fd2 <unicode_to_cp437+0x893>
ffffffff80006805:	48 81 7d f8 64 22 00 	cmpq   $0x2264,-0x8(%rbp)
ffffffff8000680c:	00 
ffffffff8000680d:	0f 87 13 08 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006813:	48 81 7d f8 61 22 00 	cmpq   $0x2261,-0x8(%rbp)
ffffffff8000681a:	00 
ffffffff8000681b:	0f 84 9c 07 00 00    	je     ffffffff80006fbd <unicode_to_cp437+0x87e>
ffffffff80006821:	48 81 7d f8 61 22 00 	cmpq   $0x2261,-0x8(%rbp)
ffffffff80006828:	00 
ffffffff80006829:	0f 87 f7 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff8000682f:	48 81 7d f8 48 22 00 	cmpq   $0x2248,-0x8(%rbp)
ffffffff80006836:	00 
ffffffff80006837:	0f 87 e9 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff8000683d:	48 81 7d f8 19 22 00 	cmpq   $0x2219,-0x8(%rbp)
ffffffff80006844:	00 
ffffffff80006845:	0f 83 e4 00 00 00    	jae    ffffffff8000692f <unicode_to_cp437+0x1f0>
ffffffff8000684b:	48 81 7d f8 a8 21 00 	cmpq   $0x21a8,-0x8(%rbp)
ffffffff80006852:	00 
ffffffff80006853:	0f 87 cd 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006859:	48 81 7d f8 90 21 00 	cmpq   $0x2190,-0x8(%rbp)
ffffffff80006860:	00 
ffffffff80006861:	0f 83 fd 00 00 00    	jae    ffffffff80006964 <unicode_to_cp437+0x225>
ffffffff80006867:	48 81 7d f8 a7 20 00 	cmpq   $0x20a7,-0x8(%rbp)
ffffffff8000686e:	00 
ffffffff8000686f:	0f 84 1d 04 00 00    	je     ffffffff80006c92 <unicode_to_cp437+0x553>
ffffffff80006875:	48 81 7d f8 a7 20 00 	cmpq   $0x20a7,-0x8(%rbp)
ffffffff8000687c:	00 
ffffffff8000687d:	0f 87 a3 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006883:	48 81 7d f8 7f 20 00 	cmpq   $0x207f,-0x8(%rbp)
ffffffff8000688a:	00 
ffffffff8000688b:	0f 84 80 07 00 00    	je     ffffffff80007011 <unicode_to_cp437+0x8d2>
ffffffff80006891:	48 81 7d f8 7f 20 00 	cmpq   $0x207f,-0x8(%rbp)
ffffffff80006898:	00 
ffffffff80006899:	0f 87 87 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff8000689f:	48 81 7d f8 3c 20 00 	cmpq   $0x203c,-0x8(%rbp)
ffffffff800068a6:	00 
ffffffff800068a7:	0f 84 2d 02 00 00    	je     ffffffff80006ada <unicode_to_cp437+0x39b>
ffffffff800068ad:	48 81 7d f8 3c 20 00 	cmpq   $0x203c,-0x8(%rbp)
ffffffff800068b4:	00 
ffffffff800068b5:	0f 87 6b 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800068bb:	48 81 7d f8 22 20 00 	cmpq   $0x2022,-0x8(%rbp)
ffffffff800068c2:	00 
ffffffff800068c3:	0f 84 99 01 00 00    	je     ffffffff80006a62 <unicode_to_cp437+0x323>
ffffffff800068c9:	48 81 7d f8 22 20 00 	cmpq   $0x2022,-0x8(%rbp)
ffffffff800068d0:	00 
ffffffff800068d1:	0f 87 4f 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800068d7:	48 81 7d f8 92 01 00 	cmpq   $0x192,-0x8(%rbp)
ffffffff800068de:	00 
ffffffff800068df:	0f 87 20 01 00 00    	ja     ffffffff80006a05 <unicode_to_cp437+0x2c6>
ffffffff800068e5:	48 81 7d f8 a1 00 00 	cmpq   $0xa1,-0x8(%rbp)
ffffffff800068ec:	00 
ffffffff800068ed:	0f 83 db 00 00 00    	jae    ffffffff800069ce <unicode_to_cp437+0x28f>
ffffffff800068f3:	e9 2e 07 00 00       	jmp    ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800068f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800068fc:	48 2d 00 25 00 00    	sub    $0x2500,%rax
ffffffff80006902:	48 3d 6b 01 00 00    	cmp    $0x16b,%rax
ffffffff80006908:	0f 87 18 07 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff8000690e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80006915:	00 
ffffffff80006916:	48 8d 05 bb 5d 00 00 	lea    0x5dbb(%rip),%rax        # ffffffff8000c6d8 <col256+0x6d8>
ffffffff8000691d:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80006920:	48 98                	cltq   
ffffffff80006922:	48 8d 15 af 5d 00 00 	lea    0x5daf(%rip),%rdx        # ffffffff8000c6d8 <col256+0x6d8>
ffffffff80006929:	48 01 d0             	add    %rdx,%rax
ffffffff8000692c:	3e ff e0             	notrack jmp *%rax
ffffffff8000692f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006933:	48 2d 19 22 00 00    	sub    $0x2219,%rax
ffffffff80006939:	48 83 f8 2f          	cmp    $0x2f,%rax
ffffffff8000693d:	0f 87 e3 06 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006943:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff8000694a:	00 
ffffffff8000694b:	48 8d 05 36 63 00 00 	lea    0x6336(%rip),%rax        # ffffffff8000cc88 <col256+0xc88>
ffffffff80006952:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80006955:	48 98                	cltq   
ffffffff80006957:	48 8d 15 2a 63 00 00 	lea    0x632a(%rip),%rdx        # ffffffff8000cc88 <col256+0xc88>
ffffffff8000695e:	48 01 d0             	add    %rdx,%rax
ffffffff80006961:	3e ff e0             	notrack jmp *%rax
ffffffff80006964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006968:	48 2d 90 21 00 00    	sub    $0x2190,%rax
ffffffff8000696e:	48 83 f8 18          	cmp    $0x18,%rax
ffffffff80006972:	0f 87 ae 06 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006978:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff8000697f:	00 
ffffffff80006980:	48 8d 05 c1 63 00 00 	lea    0x63c1(%rip),%rax        # ffffffff8000cd48 <col256+0xd48>
ffffffff80006987:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff8000698a:	48 98                	cltq   
ffffffff8000698c:	48 8d 15 b5 63 00 00 	lea    0x63b5(%rip),%rdx        # ffffffff8000cd48 <col256+0xd48>
ffffffff80006993:	48 01 d0             	add    %rdx,%rax
ffffffff80006996:	3e ff e0             	notrack jmp *%rax
ffffffff80006999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000699d:	48 2d 93 03 00 00    	sub    $0x393,%rax
ffffffff800069a3:	48 83 f8 33          	cmp    $0x33,%rax
ffffffff800069a7:	0f 87 79 06 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800069ad:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff800069b4:	00 
ffffffff800069b5:	48 8d 05 f0 63 00 00 	lea    0x63f0(%rip),%rax        # ffffffff8000cdac <col256+0xdac>
ffffffff800069bc:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff800069bf:	48 98                	cltq   
ffffffff800069c1:	48 8d 15 e4 63 00 00 	lea    0x63e4(%rip),%rdx        # ffffffff8000cdac <col256+0xdac>
ffffffff800069c8:	48 01 d0             	add    %rdx,%rax
ffffffff800069cb:	3e ff e0             	notrack jmp *%rax
ffffffff800069ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800069d2:	48 2d a1 00 00 00    	sub    $0xa1,%rax
ffffffff800069d8:	48 3d f1 00 00 00    	cmp    $0xf1,%rax
ffffffff800069de:	0f 87 42 06 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff800069e4:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff800069eb:	00 
ffffffff800069ec:	48 8d 05 89 64 00 00 	lea    0x6489(%rip),%rax        # ffffffff8000ce7c <col256+0xe7c>
ffffffff800069f3:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff800069f6:	48 98                	cltq   
ffffffff800069f8:	48 8d 15 7d 64 00 00 	lea    0x647d(%rip),%rdx        # ffffffff8000ce7c <col256+0xe7c>
ffffffff800069ff:	48 01 d0             	add    %rdx,%rax
ffffffff80006a02:	3e ff e0             	notrack jmp *%rax
ffffffff80006a05:	48 81 7d f8 c6 03 00 	cmpq   $0x3c6,-0x8(%rbp)
ffffffff80006a0c:	00 
ffffffff80006a0d:	0f 87 13 06 00 00    	ja     ffffffff80007026 <unicode_to_cp437+0x8e7>
ffffffff80006a13:	48 81 7d f8 93 03 00 	cmpq   $0x393,-0x8(%rbp)
ffffffff80006a1a:	00 
ffffffff80006a1b:	0f 83 78 ff ff ff    	jae    ffffffff80006999 <unicode_to_cp437+0x25a>
ffffffff80006a21:	e9 00 06 00 00       	jmp    ffffffff80007026 <unicode_to_cp437+0x8e7>
        case 0x263a: return 1;
ffffffff80006a26:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80006a2b:	e9 fb 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x263b: return 2;
ffffffff80006a30:	b8 02 00 00 00       	mov    $0x2,%eax
ffffffff80006a35:	e9 f1 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2665: return 3;
ffffffff80006a3a:	b8 03 00 00 00       	mov    $0x3,%eax
ffffffff80006a3f:	e9 e7 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2666: return 4;
ffffffff80006a44:	b8 04 00 00 00       	mov    $0x4,%eax
ffffffff80006a49:	e9 dd 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2663: return 5;
ffffffff80006a4e:	b8 05 00 00 00       	mov    $0x5,%eax
ffffffff80006a53:	e9 d3 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2660: return 6;
ffffffff80006a58:	b8 06 00 00 00       	mov    $0x6,%eax
ffffffff80006a5d:	e9 c9 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2022: return 7;
ffffffff80006a62:	b8 07 00 00 00       	mov    $0x7,%eax
ffffffff80006a67:	e9 bf 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25d8: return 8;
ffffffff80006a6c:	b8 08 00 00 00       	mov    $0x8,%eax
ffffffff80006a71:	e9 b5 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25cb: return 9;
ffffffff80006a76:	b8 09 00 00 00       	mov    $0x9,%eax
ffffffff80006a7b:	e9 ab 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25d9: return 10;
ffffffff80006a80:	b8 0a 00 00 00       	mov    $0xa,%eax
ffffffff80006a85:	e9 a1 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2642: return 11;
ffffffff80006a8a:	b8 0b 00 00 00       	mov    $0xb,%eax
ffffffff80006a8f:	e9 97 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2640: return 12;
ffffffff80006a94:	b8 0c 00 00 00       	mov    $0xc,%eax
ffffffff80006a99:	e9 8d 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x266a: return 13;
ffffffff80006a9e:	b8 0d 00 00 00       	mov    $0xd,%eax
ffffffff80006aa3:	e9 83 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x266b: return 14;
ffffffff80006aa8:	b8 0e 00 00 00       	mov    $0xe,%eax
ffffffff80006aad:	e9 79 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x263c: return 15;
ffffffff80006ab2:	b8 0f 00 00 00       	mov    $0xf,%eax
ffffffff80006ab7:	e9 6f 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25ba: return 16;
ffffffff80006abc:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80006ac1:	e9 65 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25c4: return 17;
ffffffff80006ac6:	b8 11 00 00 00       	mov    $0x11,%eax
ffffffff80006acb:	e9 5b 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2195: return 18;
ffffffff80006ad0:	b8 12 00 00 00       	mov    $0x12,%eax
ffffffff80006ad5:	e9 51 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x203c: return 19;
ffffffff80006ada:	b8 13 00 00 00       	mov    $0x13,%eax
ffffffff80006adf:	e9 47 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00b6: return 20;
ffffffff80006ae4:	b8 14 00 00 00       	mov    $0x14,%eax
ffffffff80006ae9:	e9 3d 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00a7: return 21;
ffffffff80006aee:	b8 15 00 00 00       	mov    $0x15,%eax
ffffffff80006af3:	e9 33 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25ac: return 22;
ffffffff80006af8:	b8 16 00 00 00       	mov    $0x16,%eax
ffffffff80006afd:	e9 29 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x21a8: return 23;
ffffffff80006b02:	b8 17 00 00 00       	mov    $0x17,%eax
ffffffff80006b07:	e9 1f 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2191: return 24;
ffffffff80006b0c:	b8 18 00 00 00       	mov    $0x18,%eax
ffffffff80006b11:	e9 15 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2193: return 25;
ffffffff80006b16:	b8 19 00 00 00       	mov    $0x19,%eax
ffffffff80006b1b:	e9 0b 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2192: return 26;
ffffffff80006b20:	b8 1a 00 00 00       	mov    $0x1a,%eax
ffffffff80006b25:	e9 01 05 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2190: return 27;
ffffffff80006b2a:	b8 1b 00 00 00       	mov    $0x1b,%eax
ffffffff80006b2f:	e9 f7 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x221f: return 28;
ffffffff80006b34:	b8 1c 00 00 00       	mov    $0x1c,%eax
ffffffff80006b39:	e9 ed 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2194: return 29;
ffffffff80006b3e:	b8 1d 00 00 00       	mov    $0x1d,%eax
ffffffff80006b43:	e9 e3 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25b2: return 30;
ffffffff80006b48:	b8 1e 00 00 00       	mov    $0x1e,%eax
ffffffff80006b4d:	e9 d9 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25bc: return 31;
ffffffff80006b52:	b8 1f 00 00 00       	mov    $0x1f,%eax
ffffffff80006b57:	e9 cf 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>

        case 0x2302: return 127;
ffffffff80006b5c:	b8 7f 00 00 00       	mov    $0x7f,%eax
ffffffff80006b61:	e9 c5 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00c7: return 128;
ffffffff80006b66:	b8 80 00 00 00       	mov    $0x80,%eax
ffffffff80006b6b:	e9 bb 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00fc: return 129;
ffffffff80006b70:	b8 81 00 00 00       	mov    $0x81,%eax
ffffffff80006b75:	e9 b1 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e9: return 130;
ffffffff80006b7a:	b8 82 00 00 00       	mov    $0x82,%eax
ffffffff80006b7f:	e9 a7 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e2: return 131;
ffffffff80006b84:	b8 83 00 00 00       	mov    $0x83,%eax
ffffffff80006b89:	e9 9d 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e4: return 132;
ffffffff80006b8e:	b8 84 00 00 00       	mov    $0x84,%eax
ffffffff80006b93:	e9 93 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e0: return 133;
ffffffff80006b98:	b8 85 00 00 00       	mov    $0x85,%eax
ffffffff80006b9d:	e9 89 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e5: return 134;
ffffffff80006ba2:	b8 86 00 00 00       	mov    $0x86,%eax
ffffffff80006ba7:	e9 7f 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e7: return 135;
ffffffff80006bac:	b8 87 00 00 00       	mov    $0x87,%eax
ffffffff80006bb1:	e9 75 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ea: return 136;
ffffffff80006bb6:	b8 88 00 00 00       	mov    $0x88,%eax
ffffffff80006bbb:	e9 6b 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00eb: return 137;
ffffffff80006bc0:	b8 89 00 00 00       	mov    $0x89,%eax
ffffffff80006bc5:	e9 61 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e8: return 138;
ffffffff80006bca:	b8 8a 00 00 00       	mov    $0x8a,%eax
ffffffff80006bcf:	e9 57 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ef: return 139;
ffffffff80006bd4:	b8 8b 00 00 00       	mov    $0x8b,%eax
ffffffff80006bd9:	e9 4d 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ee: return 140;
ffffffff80006bde:	b8 8c 00 00 00       	mov    $0x8c,%eax
ffffffff80006be3:	e9 43 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ec: return 141;
ffffffff80006be8:	b8 8d 00 00 00       	mov    $0x8d,%eax
ffffffff80006bed:	e9 39 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00c4: return 142;
ffffffff80006bf2:	b8 8e 00 00 00       	mov    $0x8e,%eax
ffffffff80006bf7:	e9 2f 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00c5: return 143;
ffffffff80006bfc:	b8 8f 00 00 00       	mov    $0x8f,%eax
ffffffff80006c01:	e9 25 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00c9: return 144;
ffffffff80006c06:	b8 90 00 00 00       	mov    $0x90,%eax
ffffffff80006c0b:	e9 1b 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e6: return 145;
ffffffff80006c10:	b8 91 00 00 00       	mov    $0x91,%eax
ffffffff80006c15:	e9 11 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00c6: return 146;
ffffffff80006c1a:	b8 92 00 00 00       	mov    $0x92,%eax
ffffffff80006c1f:	e9 07 04 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f4: return 147;
ffffffff80006c24:	b8 93 00 00 00       	mov    $0x93,%eax
ffffffff80006c29:	e9 fd 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f6: return 148;
ffffffff80006c2e:	b8 94 00 00 00       	mov    $0x94,%eax
ffffffff80006c33:	e9 f3 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f2: return 149;
ffffffff80006c38:	b8 95 00 00 00       	mov    $0x95,%eax
ffffffff80006c3d:	e9 e9 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00fb: return 150;
ffffffff80006c42:	b8 96 00 00 00       	mov    $0x96,%eax
ffffffff80006c47:	e9 df 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f9: return 151;
ffffffff80006c4c:	b8 97 00 00 00       	mov    $0x97,%eax
ffffffff80006c51:	e9 d5 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ff: return 152;
ffffffff80006c56:	b8 98 00 00 00       	mov    $0x98,%eax
ffffffff80006c5b:	e9 cb 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00d6: return 153;
ffffffff80006c60:	b8 99 00 00 00       	mov    $0x99,%eax
ffffffff80006c65:	e9 c1 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00dc: return 154;
ffffffff80006c6a:	b8 9a 00 00 00       	mov    $0x9a,%eax
ffffffff80006c6f:	e9 b7 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00a2: return 155;
ffffffff80006c74:	b8 9b 00 00 00       	mov    $0x9b,%eax
ffffffff80006c79:	e9 ad 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00a3: return 156;
ffffffff80006c7e:	b8 9c 00 00 00       	mov    $0x9c,%eax
ffffffff80006c83:	e9 a3 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00a5: return 157;
ffffffff80006c88:	b8 9d 00 00 00       	mov    $0x9d,%eax
ffffffff80006c8d:	e9 99 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x20a7: return 158;
ffffffff80006c92:	b8 9e 00 00 00       	mov    $0x9e,%eax
ffffffff80006c97:	e9 8f 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x0192: return 159;
ffffffff80006c9c:	b8 9f 00 00 00       	mov    $0x9f,%eax
ffffffff80006ca1:	e9 85 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00e1: return 160;
ffffffff80006ca6:	b8 a0 00 00 00       	mov    $0xa0,%eax
ffffffff80006cab:	e9 7b 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ed: return 161;
ffffffff80006cb0:	b8 a1 00 00 00       	mov    $0xa1,%eax
ffffffff80006cb5:	e9 71 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f3: return 162;
ffffffff80006cba:	b8 a2 00 00 00       	mov    $0xa2,%eax
ffffffff80006cbf:	e9 67 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00fa: return 163;
ffffffff80006cc4:	b8 a3 00 00 00       	mov    $0xa3,%eax
ffffffff80006cc9:	e9 5d 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f1: return 164;
ffffffff80006cce:	b8 a4 00 00 00       	mov    $0xa4,%eax
ffffffff80006cd3:	e9 53 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00d1: return 165;
ffffffff80006cd8:	b8 a5 00 00 00       	mov    $0xa5,%eax
ffffffff80006cdd:	e9 49 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00aa: return 166;
ffffffff80006ce2:	b8 a6 00 00 00       	mov    $0xa6,%eax
ffffffff80006ce7:	e9 3f 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ba: return 167;
ffffffff80006cec:	b8 a7 00 00 00       	mov    $0xa7,%eax
ffffffff80006cf1:	e9 35 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00bf: return 168;
ffffffff80006cf6:	b8 a8 00 00 00       	mov    $0xa8,%eax
ffffffff80006cfb:	e9 2b 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2310: return 169;
ffffffff80006d00:	b8 a9 00 00 00       	mov    $0xa9,%eax
ffffffff80006d05:	e9 21 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ac: return 170;
ffffffff80006d0a:	b8 aa 00 00 00       	mov    $0xaa,%eax
ffffffff80006d0f:	e9 17 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00bd: return 171;
ffffffff80006d14:	b8 ab 00 00 00       	mov    $0xab,%eax
ffffffff80006d19:	e9 0d 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00bc: return 172;
ffffffff80006d1e:	b8 ac 00 00 00       	mov    $0xac,%eax
ffffffff80006d23:	e9 03 03 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00a1: return 173;
ffffffff80006d28:	b8 ad 00 00 00       	mov    $0xad,%eax
ffffffff80006d2d:	e9 f9 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00ab: return 174;
ffffffff80006d32:	b8 ae 00 00 00       	mov    $0xae,%eax
ffffffff80006d37:	e9 ef 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00bb: return 175;
ffffffff80006d3c:	b8 af 00 00 00       	mov    $0xaf,%eax
ffffffff80006d41:	e9 e5 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2591: return 176;
ffffffff80006d46:	b8 b0 00 00 00       	mov    $0xb0,%eax
ffffffff80006d4b:	e9 db 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2592: return 177;
ffffffff80006d50:	b8 b1 00 00 00       	mov    $0xb1,%eax
ffffffff80006d55:	e9 d1 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2593: return 178;
ffffffff80006d5a:	b8 b2 00 00 00       	mov    $0xb2,%eax
ffffffff80006d5f:	e9 c7 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2502: return 179;
ffffffff80006d64:	b8 b3 00 00 00       	mov    $0xb3,%eax
ffffffff80006d69:	e9 bd 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2524: return 180;
ffffffff80006d6e:	b8 b4 00 00 00       	mov    $0xb4,%eax
ffffffff80006d73:	e9 b3 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2561: return 181;
ffffffff80006d78:	b8 b5 00 00 00       	mov    $0xb5,%eax
ffffffff80006d7d:	e9 a9 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2562: return 182;
ffffffff80006d82:	b8 b6 00 00 00       	mov    $0xb6,%eax
ffffffff80006d87:	e9 9f 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2556: return 183;
ffffffff80006d8c:	b8 b7 00 00 00       	mov    $0xb7,%eax
ffffffff80006d91:	e9 95 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2555: return 184;
ffffffff80006d96:	b8 b8 00 00 00       	mov    $0xb8,%eax
ffffffff80006d9b:	e9 8b 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2563: return 185;
ffffffff80006da0:	b8 b9 00 00 00       	mov    $0xb9,%eax
ffffffff80006da5:	e9 81 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2551: return 186;
ffffffff80006daa:	b8 ba 00 00 00       	mov    $0xba,%eax
ffffffff80006daf:	e9 77 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2557: return 187;
ffffffff80006db4:	b8 bb 00 00 00       	mov    $0xbb,%eax
ffffffff80006db9:	e9 6d 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x255d: return 188;
ffffffff80006dbe:	b8 bc 00 00 00       	mov    $0xbc,%eax
ffffffff80006dc3:	e9 63 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x255c: return 189;
ffffffff80006dc8:	b8 bd 00 00 00       	mov    $0xbd,%eax
ffffffff80006dcd:	e9 59 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x255b: return 190;
ffffffff80006dd2:	b8 be 00 00 00       	mov    $0xbe,%eax
ffffffff80006dd7:	e9 4f 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2510: return 191;
ffffffff80006ddc:	b8 bf 00 00 00       	mov    $0xbf,%eax
ffffffff80006de1:	e9 45 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2514: return 192;
ffffffff80006de6:	b8 c0 00 00 00       	mov    $0xc0,%eax
ffffffff80006deb:	e9 3b 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2534: return 193;
ffffffff80006df0:	b8 c1 00 00 00       	mov    $0xc1,%eax
ffffffff80006df5:	e9 31 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x252c: return 194;
ffffffff80006dfa:	b8 c2 00 00 00       	mov    $0xc2,%eax
ffffffff80006dff:	e9 27 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x251c: return 195;
ffffffff80006e04:	b8 c3 00 00 00       	mov    $0xc3,%eax
ffffffff80006e09:	e9 1d 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2500: return 196;
ffffffff80006e0e:	b8 c4 00 00 00       	mov    $0xc4,%eax
ffffffff80006e13:	e9 13 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x253c: return 197;
ffffffff80006e18:	b8 c5 00 00 00       	mov    $0xc5,%eax
ffffffff80006e1d:	e9 09 02 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x255e: return 198;
ffffffff80006e22:	b8 c6 00 00 00       	mov    $0xc6,%eax
ffffffff80006e27:	e9 ff 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x255f: return 199;
ffffffff80006e2c:	b8 c7 00 00 00       	mov    $0xc7,%eax
ffffffff80006e31:	e9 f5 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x255a: return 200;
ffffffff80006e36:	b8 c8 00 00 00       	mov    $0xc8,%eax
ffffffff80006e3b:	e9 eb 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2554: return 201;
ffffffff80006e40:	b8 c9 00 00 00       	mov    $0xc9,%eax
ffffffff80006e45:	e9 e1 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2569: return 202;
ffffffff80006e4a:	b8 ca 00 00 00       	mov    $0xca,%eax
ffffffff80006e4f:	e9 d7 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2566: return 203;
ffffffff80006e54:	b8 cb 00 00 00       	mov    $0xcb,%eax
ffffffff80006e59:	e9 cd 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2560: return 204;
ffffffff80006e5e:	b8 cc 00 00 00       	mov    $0xcc,%eax
ffffffff80006e63:	e9 c3 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2550: return 205;
ffffffff80006e68:	b8 cd 00 00 00       	mov    $0xcd,%eax
ffffffff80006e6d:	e9 b9 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x256c: return 206;
ffffffff80006e72:	b8 ce 00 00 00       	mov    $0xce,%eax
ffffffff80006e77:	e9 af 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2567: return 207;
ffffffff80006e7c:	b8 cf 00 00 00       	mov    $0xcf,%eax
ffffffff80006e81:	e9 a5 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2568: return 208;
ffffffff80006e86:	b8 d0 00 00 00       	mov    $0xd0,%eax
ffffffff80006e8b:	e9 9b 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2564: return 209;
ffffffff80006e90:	b8 d1 00 00 00       	mov    $0xd1,%eax
ffffffff80006e95:	e9 91 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2565: return 210;
ffffffff80006e9a:	b8 d2 00 00 00       	mov    $0xd2,%eax
ffffffff80006e9f:	e9 87 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2559: return 211;
ffffffff80006ea4:	b8 d3 00 00 00       	mov    $0xd3,%eax
ffffffff80006ea9:	e9 7d 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2558: return 212;
ffffffff80006eae:	b8 d4 00 00 00       	mov    $0xd4,%eax
ffffffff80006eb3:	e9 73 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2552: return 213;
ffffffff80006eb8:	b8 d5 00 00 00       	mov    $0xd5,%eax
ffffffff80006ebd:	e9 69 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2553: return 214;
ffffffff80006ec2:	b8 d6 00 00 00       	mov    $0xd6,%eax
ffffffff80006ec7:	e9 5f 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x256b: return 215;
ffffffff80006ecc:	b8 d7 00 00 00       	mov    $0xd7,%eax
ffffffff80006ed1:	e9 55 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x256a: return 216;
ffffffff80006ed6:	b8 d8 00 00 00       	mov    $0xd8,%eax
ffffffff80006edb:	e9 4b 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2518: return 217;
ffffffff80006ee0:	b8 d9 00 00 00       	mov    $0xd9,%eax
ffffffff80006ee5:	e9 41 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x250c: return 218;
ffffffff80006eea:	b8 da 00 00 00       	mov    $0xda,%eax
ffffffff80006eef:	e9 37 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2588: return 219;
ffffffff80006ef4:	b8 db 00 00 00       	mov    $0xdb,%eax
ffffffff80006ef9:	e9 2d 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2584: return 220;
ffffffff80006efe:	b8 dc 00 00 00       	mov    $0xdc,%eax
ffffffff80006f03:	e9 23 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x258c: return 221;
ffffffff80006f08:	b8 dd 00 00 00       	mov    $0xdd,%eax
ffffffff80006f0d:	e9 19 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2590: return 222;
ffffffff80006f12:	b8 de 00 00 00       	mov    $0xde,%eax
ffffffff80006f17:	e9 0f 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2580: return 223;
ffffffff80006f1c:	b8 df 00 00 00       	mov    $0xdf,%eax
ffffffff80006f21:	e9 05 01 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03b1: return 224;
ffffffff80006f26:	b8 e0 00 00 00       	mov    $0xe0,%eax
ffffffff80006f2b:	e9 fb 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00df: return 225;
ffffffff80006f30:	b8 e1 00 00 00       	mov    $0xe1,%eax
ffffffff80006f35:	e9 f1 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x0393: return 226;
ffffffff80006f3a:	b8 e2 00 00 00       	mov    $0xe2,%eax
ffffffff80006f3f:	e9 e7 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03c0: return 227;
ffffffff80006f44:	b8 e3 00 00 00       	mov    $0xe3,%eax
ffffffff80006f49:	e9 dd 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03a3: return 228;
ffffffff80006f4e:	b8 e4 00 00 00       	mov    $0xe4,%eax
ffffffff80006f53:	e9 d3 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03c3: return 229;
ffffffff80006f58:	b8 e5 00 00 00       	mov    $0xe5,%eax
ffffffff80006f5d:	e9 c9 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00b5: return 230;
ffffffff80006f62:	b8 e6 00 00 00       	mov    $0xe6,%eax
ffffffff80006f67:	e9 bf 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03c4: return 231;
ffffffff80006f6c:	b8 e7 00 00 00       	mov    $0xe7,%eax
ffffffff80006f71:	e9 b5 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03a6: return 232;
ffffffff80006f76:	b8 e8 00 00 00       	mov    $0xe8,%eax
ffffffff80006f7b:	e9 ab 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x0398: return 233;
ffffffff80006f80:	b8 e9 00 00 00       	mov    $0xe9,%eax
ffffffff80006f85:	e9 a1 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03a9: return 234;
ffffffff80006f8a:	b8 ea 00 00 00       	mov    $0xea,%eax
ffffffff80006f8f:	e9 97 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03b4: return 235;
ffffffff80006f94:	b8 eb 00 00 00       	mov    $0xeb,%eax
ffffffff80006f99:	e9 8d 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x221e: return 236;
ffffffff80006f9e:	b8 ec 00 00 00       	mov    $0xec,%eax
ffffffff80006fa3:	e9 83 00 00 00       	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03c6: return 237;
ffffffff80006fa8:	b8 ed 00 00 00       	mov    $0xed,%eax
ffffffff80006fad:	eb 7c                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x03b5: return 238;
ffffffff80006faf:	b8 ee 00 00 00       	mov    $0xee,%eax
ffffffff80006fb4:	eb 75                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2229: return 239;
ffffffff80006fb6:	b8 ef 00 00 00       	mov    $0xef,%eax
ffffffff80006fbb:	eb 6e                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2261: return 240;
ffffffff80006fbd:	b8 f0 00 00 00       	mov    $0xf0,%eax
ffffffff80006fc2:	eb 67                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00b1: return 241;
ffffffff80006fc4:	b8 f1 00 00 00       	mov    $0xf1,%eax
ffffffff80006fc9:	eb 60                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2265: return 242;
ffffffff80006fcb:	b8 f2 00 00 00       	mov    $0xf2,%eax
ffffffff80006fd0:	eb 59                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2264: return 243;
ffffffff80006fd2:	b8 f3 00 00 00       	mov    $0xf3,%eax
ffffffff80006fd7:	eb 52                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2320: return 244;
ffffffff80006fd9:	b8 f4 00 00 00       	mov    $0xf4,%eax
ffffffff80006fde:	eb 4b                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2321: return 245;
ffffffff80006fe0:	b8 f5 00 00 00       	mov    $0xf5,%eax
ffffffff80006fe5:	eb 44                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00f7: return 246;
ffffffff80006fe7:	b8 f6 00 00 00       	mov    $0xf6,%eax
ffffffff80006fec:	eb 3d                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2248: return 247;
ffffffff80006fee:	b8 f7 00 00 00       	mov    $0xf7,%eax
ffffffff80006ff3:	eb 36                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00b0: return 248;
ffffffff80006ff5:	b8 f8 00 00 00       	mov    $0xf8,%eax
ffffffff80006ffa:	eb 2f                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x2219: return 249;
ffffffff80006ffc:	b8 f9 00 00 00       	mov    $0xf9,%eax
ffffffff80007001:	eb 28                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00b7: return 250;
ffffffff80007003:	b8 fa 00 00 00       	mov    $0xfa,%eax
ffffffff80007008:	eb 21                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x221a: return 251;
ffffffff8000700a:	b8 fb 00 00 00       	mov    $0xfb,%eax
ffffffff8000700f:	eb 1a                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x207f: return 252;
ffffffff80007011:	b8 fc 00 00 00       	mov    $0xfc,%eax
ffffffff80007016:	eb 13                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x00b2: return 253;
ffffffff80007018:	b8 fd 00 00 00       	mov    $0xfd,%eax
ffffffff8000701d:	eb 0c                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
        case 0x25a0: return 254;
ffffffff8000701f:	b8 fe 00 00 00       	mov    $0xfe,%eax
ffffffff80007024:	eb 05                	jmp    ffffffff8000702b <unicode_to_cp437+0x8ec>
    }

    return -1;
ffffffff80007026:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
ffffffff8000702b:	c9                   	leave  
ffffffff8000702c:	c3                   	ret    

ffffffff8000702d <flanterm_putchar>:

static void flanterm_putchar(struct flanterm_context *ctx, uint8_t c) {
ffffffff8000702d:	f3 0f 1e fa          	endbr64 
ffffffff80007031:	55                   	push   %rbp
ffffffff80007032:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007035:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80007039:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000703d:	89 f0                	mov    %esi,%eax
ffffffff8000703f:	88 45 c4             	mov    %al,-0x3c(%rbp)
    if (ctx->discard_next || (c == 0x18 || c == 0x1a)) {
ffffffff80007042:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007046:	0f b6 40 10          	movzbl 0x10(%rax),%eax
ffffffff8000704a:	84 c0                	test   %al,%al
ffffffff8000704c:	75 0c                	jne    ffffffff8000705a <flanterm_putchar+0x2d>
ffffffff8000704e:	80 7d c4 18          	cmpb   $0x18,-0x3c(%rbp)
ffffffff80007052:	74 06                	je     ffffffff8000705a <flanterm_putchar+0x2d>
ffffffff80007054:	80 7d c4 1a          	cmpb   $0x1a,-0x3c(%rbp)
ffffffff80007058:	75 41                	jne    ffffffff8000709b <flanterm_putchar+0x6e>
        ctx->discard_next = false;
ffffffff8000705a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000705e:	c6 40 10 00          	movb   $0x0,0x10(%rax)
        ctx->escape = false;
ffffffff80007062:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007066:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
        ctx->control_sequence = false;
ffffffff8000706a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000706e:	c6 40 0b 00          	movb   $0x0,0xb(%rax)
        ctx->unicode_remaining = 0;
ffffffff80007072:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007076:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff8000707d:	00 
        ctx->osc = false;
ffffffff8000707e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007082:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
        ctx->osc_escape = false;
ffffffff80007086:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000708a:	c6 40 0e 00          	movb   $0x0,0xe(%rax)
        ctx->g_select = 0;
ffffffff8000708e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007092:	c6 40 28 00          	movb   $0x0,0x28(%rax)
        return;
ffffffff80007096:	e9 d2 05 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
    }

    if (ctx->unicode_remaining != 0) {
ffffffff8000709b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000709f:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff800070a3:	48 85 c0             	test   %rax,%rax
ffffffff800070a6:	0f 84 26 01 00 00    	je     ffffffff800071d2 <flanterm_putchar+0x1a5>
        if ((c & 0xc0) != 0x80) {
ffffffff800070ac:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff800070b0:	25 c0 00 00 00       	and    $0xc0,%eax
ffffffff800070b5:	3d 80 00 00 00       	cmp    $0x80,%eax
ffffffff800070ba:	74 11                	je     ffffffff800070cd <flanterm_putchar+0xa0>
            ctx->unicode_remaining = 0;
ffffffff800070bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800070c0:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff800070c7:	00 
            goto unicode_error;
ffffffff800070c8:	e9 06 01 00 00       	jmp    ffffffff800071d3 <flanterm_putchar+0x1a6>
        }

        ctx->unicode_remaining--;
ffffffff800070cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800070d1:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff800070d5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff800070d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800070dd:	48 89 50 20          	mov    %rdx,0x20(%rax)
        ctx->code_point |= (uint64_t)(c & 0x3f) << (6 * ctx->unicode_remaining);
ffffffff800070e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800070e5:	48 8b 70 18          	mov    0x18(%rax),%rsi
ffffffff800070e9:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff800070ed:	83 e0 3f             	and    $0x3f,%eax
ffffffff800070f0:	48 89 c2             	mov    %rax,%rdx
ffffffff800070f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800070f7:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff800070fb:	89 c1                	mov    %eax,%ecx
ffffffff800070fd:	89 c8                	mov    %ecx,%eax
ffffffff800070ff:	01 c0                	add    %eax,%eax
ffffffff80007101:	01 c8                	add    %ecx,%eax
ffffffff80007103:	01 c0                	add    %eax,%eax
ffffffff80007105:	89 c1                	mov    %eax,%ecx
ffffffff80007107:	48 d3 e2             	shl    %cl,%rdx
ffffffff8000710a:	48 89 d0             	mov    %rdx,%rax
ffffffff8000710d:	48 09 c6             	or     %rax,%rsi
ffffffff80007110:	48 89 f2             	mov    %rsi,%rdx
ffffffff80007113:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007117:	48 89 50 18          	mov    %rdx,0x18(%rax)
        if (ctx->unicode_remaining != 0) {
ffffffff8000711b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000711f:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80007123:	48 85 c0             	test   %rax,%rax
ffffffff80007126:	0f 85 34 05 00 00    	jne    ffffffff80007660 <flanterm_putchar+0x633>
            return;
        }

        int cc = unicode_to_cp437(ctx->code_point);
ffffffff8000712c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007130:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80007134:	48 89 c7             	mov    %rax,%rdi
ffffffff80007137:	e8 03 f6 ff ff       	call   ffffffff8000673f <unicode_to_cp437>
ffffffff8000713c:	89 45 ec             	mov    %eax,-0x14(%rbp)

        if (cc == -1) {
ffffffff8000713f:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%rbp)
ffffffff80007143:	75 6c                	jne    ffffffff800071b1 <flanterm_putchar+0x184>
            size_t replacement_width = (size_t)mk_wcwidth(ctx->code_point);
ffffffff80007145:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007149:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000714d:	89 c7                	mov    %eax,%edi
ffffffff8000714f:	e8 92 f4 ff ff       	call   ffffffff800065e6 <mk_wcwidth>
ffffffff80007154:	48 98                	cltq   
ffffffff80007156:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            if (replacement_width > 0) {
ffffffff8000715a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8000715f:	74 19                	je     ffffffff8000717a <flanterm_putchar+0x14d>
                ctx->raw_putchar(ctx, 0xfe);
ffffffff80007161:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007165:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000716c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007170:	be fe 00 00 00       	mov    $0xfe,%esi
ffffffff80007175:	48 89 c7             	mov    %rax,%rdi
ffffffff80007178:	ff d2                	call   *%rdx
            }
            for (size_t i = 1; i < replacement_width; i++) {
ffffffff8000717a:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff80007181:	00 
ffffffff80007182:	eb 1e                	jmp    ffffffff800071a2 <flanterm_putchar+0x175>
                ctx->raw_putchar(ctx, ' ');
ffffffff80007184:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007188:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff8000718f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007193:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff80007198:	48 89 c7             	mov    %rax,%rdi
ffffffff8000719b:	ff d2                	call   *%rdx
            for (size_t i = 1; i < replacement_width; i++) {
ffffffff8000719d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff800071a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800071a6:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff800071aa:	72 d8                	jb     ffffffff80007184 <flanterm_putchar+0x157>
            }
        } else {
            ctx->raw_putchar(ctx, cc);
        }
        return;
ffffffff800071ac:	e9 bc 04 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
            ctx->raw_putchar(ctx, cc);
ffffffff800071b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800071b5:	48 8b 88 f0 00 00 00 	mov    0xf0(%rax),%rcx
ffffffff800071bc:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800071bf:	0f b6 d0             	movzbl %al,%edx
ffffffff800071c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800071c6:	89 d6                	mov    %edx,%esi
ffffffff800071c8:	48 89 c7             	mov    %rax,%rdi
ffffffff800071cb:	ff d1                	call   *%rcx
        return;
ffffffff800071cd:	e9 9b 04 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
    }

unicode_error:
ffffffff800071d2:	90                   	nop
    if (c >= 0xc0 && c <= 0xf7) {
ffffffff800071d3:	80 7d c4 bf          	cmpb   $0xbf,-0x3c(%rbp)
ffffffff800071d7:	0f 86 ab 00 00 00    	jbe    ffffffff80007288 <flanterm_putchar+0x25b>
ffffffff800071dd:	80 7d c4 f7          	cmpb   $0xf7,-0x3c(%rbp)
ffffffff800071e1:	0f 87 a1 00 00 00    	ja     ffffffff80007288 <flanterm_putchar+0x25b>
        if (c >= 0xc0 && c <= 0xdf) {
ffffffff800071e7:	80 7d c4 bf          	cmpb   $0xbf,-0x3c(%rbp)
ffffffff800071eb:	76 2c                	jbe    ffffffff80007219 <flanterm_putchar+0x1ec>
ffffffff800071ed:	80 7d c4 df          	cmpb   $0xdf,-0x3c(%rbp)
ffffffff800071f1:	77 26                	ja     ffffffff80007219 <flanterm_putchar+0x1ec>
            ctx->unicode_remaining = 1;
ffffffff800071f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800071f7:	48 c7 40 20 01 00 00 	movq   $0x1,0x20(%rax)
ffffffff800071fe:	00 
            ctx->code_point = (uint64_t)(c & 0x1f) << 6;
ffffffff800071ff:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff80007203:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80007207:	25 c0 07 00 00       	and    $0x7c0,%eax
ffffffff8000720c:	48 89 c2             	mov    %rax,%rdx
ffffffff8000720f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007213:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff80007217:	eb 6a                	jmp    ffffffff80007283 <flanterm_putchar+0x256>
        } else if (c >= 0xe0 && c <= 0xef) {
ffffffff80007219:	80 7d c4 df          	cmpb   $0xdf,-0x3c(%rbp)
ffffffff8000721d:	76 27                	jbe    ffffffff80007246 <flanterm_putchar+0x219>
ffffffff8000721f:	80 7d c4 ef          	cmpb   $0xef,-0x3c(%rbp)
ffffffff80007223:	77 21                	ja     ffffffff80007246 <flanterm_putchar+0x219>
            ctx->unicode_remaining = 2;
ffffffff80007225:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007229:	48 c7 40 20 02 00 00 	movq   $0x2,0x20(%rax)
ffffffff80007230:	00 
            ctx->code_point = (uint64_t)(c & 0x0f) << (6 * 2);
ffffffff80007231:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff80007235:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80007239:	0f b7 d0             	movzwl %ax,%edx
ffffffff8000723c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007240:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff80007244:	eb 3d                	jmp    ffffffff80007283 <flanterm_putchar+0x256>
        } else if (c >= 0xf0 && c <= 0xf7) {
ffffffff80007246:	80 7d c4 ef          	cmpb   $0xef,-0x3c(%rbp)
ffffffff8000724a:	0f 86 13 04 00 00    	jbe    ffffffff80007663 <flanterm_putchar+0x636>
ffffffff80007250:	80 7d c4 f7          	cmpb   $0xf7,-0x3c(%rbp)
ffffffff80007254:	0f 87 09 04 00 00    	ja     ffffffff80007663 <flanterm_putchar+0x636>
            ctx->unicode_remaining = 3;
ffffffff8000725a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000725e:	48 c7 40 20 03 00 00 	movq   $0x3,0x20(%rax)
ffffffff80007265:	00 
            ctx->code_point = (uint64_t)(c & 0x07) << (6 * 3);
ffffffff80007266:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff8000726a:	48 c1 e0 12          	shl    $0x12,%rax
ffffffff8000726e:	25 00 00 1c 00       	and    $0x1c0000,%eax
ffffffff80007273:	48 89 c2             	mov    %rax,%rdx
ffffffff80007276:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000727a:	48 89 50 18          	mov    %rdx,0x18(%rax)
        }
        return;
ffffffff8000727e:	e9 e0 03 00 00       	jmp    ffffffff80007663 <flanterm_putchar+0x636>
ffffffff80007283:	e9 db 03 00 00       	jmp    ffffffff80007663 <flanterm_putchar+0x636>
    }

    if (ctx->escape == true) {
ffffffff80007288:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000728c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
ffffffff80007290:	84 c0                	test   %al,%al
ffffffff80007292:	74 17                	je     ffffffff800072ab <flanterm_putchar+0x27e>
        escape_parse(ctx, c);
ffffffff80007294:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
ffffffff80007298:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000729c:	89 d6                	mov    %edx,%esi
ffffffff8000729e:	48 89 c7             	mov    %rax,%rdi
ffffffff800072a1:	e8 53 eb ff ff       	call   ffffffff80005df9 <escape_parse>
        return;
ffffffff800072a6:	e9 c2 03 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
    }

    if (ctx->g_select) {
ffffffff800072ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800072af:	0f b6 40 28          	movzbl 0x28(%rax),%eax
ffffffff800072b3:	84 c0                	test   %al,%al
ffffffff800072b5:	74 5c                	je     ffffffff80007313 <flanterm_putchar+0x2e6>
        ctx->g_select--;
ffffffff800072b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800072bb:	0f b6 40 28          	movzbl 0x28(%rax),%eax
ffffffff800072bf:	8d 50 ff             	lea    -0x1(%rax),%edx
ffffffff800072c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800072c6:	88 50 28             	mov    %dl,0x28(%rax)
        switch (c) {
ffffffff800072c9:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff800072cd:	83 f8 30             	cmp    $0x30,%eax
ffffffff800072d0:	74 1d                	je     ffffffff800072ef <flanterm_putchar+0x2c2>
ffffffff800072d2:	83 f8 42             	cmp    $0x42,%eax
ffffffff800072d5:	75 2f                	jne    ffffffff80007306 <flanterm_putchar+0x2d9>
            case 'B':
                ctx->charsets[ctx->g_select] = CHARSET_DEFAULT; break;
ffffffff800072d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800072db:	0f b6 40 28          	movzbl 0x28(%rax),%eax
ffffffff800072df:	0f b6 c0             	movzbl %al,%eax
ffffffff800072e2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800072e6:	48 98                	cltq   
ffffffff800072e8:	c6 44 02 29 00       	movb   $0x0,0x29(%rdx,%rax,1)
ffffffff800072ed:	eb 17                	jmp    ffffffff80007306 <flanterm_putchar+0x2d9>
            case '0':
                ctx->charsets[ctx->g_select] = CHARSET_DEC_SPECIAL; break;
ffffffff800072ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800072f3:	0f b6 40 28          	movzbl 0x28(%rax),%eax
ffffffff800072f7:	0f b6 c0             	movzbl %al,%eax
ffffffff800072fa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800072fe:	48 98                	cltq   
ffffffff80007300:	c6 44 02 29 01       	movb   $0x1,0x29(%rdx,%rax,1)
ffffffff80007305:	90                   	nop
        }
        ctx->g_select = 0;
ffffffff80007306:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000730a:	c6 40 28 00          	movb   $0x0,0x28(%rax)
        return;
ffffffff8000730e:	e9 5a 03 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
    }

    size_t x, y;
    ctx->get_cursor_pos(ctx, &x, &y);
ffffffff80007313:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007317:	4c 8b 80 08 01 00 00 	mov    0x108(%rax),%r8
ffffffff8000731e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
ffffffff80007322:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
ffffffff80007326:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000732a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8000732d:	48 89 c7             	mov    %rax,%rdi
ffffffff80007330:	41 ff d0             	call   *%r8

    switch (c) {
ffffffff80007333:	0f b6 45 c4          	movzbl -0x3c(%rbp),%eax
ffffffff80007337:	83 f8 1b             	cmp    $0x1b,%eax
ffffffff8000733a:	7f 34                	jg     ffffffff80007370 <flanterm_putchar+0x343>
ffffffff8000733c:	85 c0                	test   %eax,%eax
ffffffff8000733e:	0f 88 46 02 00 00    	js     ffffffff8000758a <flanterm_putchar+0x55d>
ffffffff80007344:	83 f8 1b             	cmp    $0x1b,%eax
ffffffff80007347:	0f 87 3d 02 00 00    	ja     ffffffff8000758a <flanterm_putchar+0x55d>
ffffffff8000734d:	89 c0                	mov    %eax,%eax
ffffffff8000734f:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff80007356:	00 
ffffffff80007357:	48 8d 05 e6 5e 00 00 	lea    0x5ee6(%rip),%rax        # ffffffff8000d244 <col256+0x1244>
ffffffff8000735e:	8b 04 02             	mov    (%rdx,%rax,1),%eax
ffffffff80007361:	48 98                	cltq   
ffffffff80007363:	48 8d 15 da 5e 00 00 	lea    0x5eda(%rip),%rdx        # ffffffff8000d244 <col256+0x1244>
ffffffff8000736a:	48 01 d0             	add    %rdx,%rax
ffffffff8000736d:	3e ff e0             	notrack jmp *%rax
ffffffff80007370:	83 f8 7f             	cmp    $0x7f,%eax
ffffffff80007373:	0f 85 11 02 00 00    	jne    ffffffff8000758a <flanterm_putchar+0x55d>
        case 0x00:
        case 0x7f:
            return;
ffffffff80007379:	e9 e8 02 00 00       	jmp    ffffffff80007666 <flanterm_putchar+0x639>
        case 0x1b:
            ctx->escape_offset = 0;
ffffffff8000737e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007382:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80007389:	00 
            ctx->escape = true;
ffffffff8000738a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000738e:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
            return;
ffffffff80007392:	e9 d6 02 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        case '\t':
            if ((x / ctx->tab_size + 1) >= ctx->cols) {
ffffffff80007397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000739b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8000739f:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff800073a2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800073a7:	48 f7 f7             	div    %rdi
ffffffff800073aa:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800073ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800073b2:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800073b9:	48 39 c2             	cmp    %rax,%rdx
ffffffff800073bc:	72 2c                	jb     ffffffff800073ea <flanterm_putchar+0x3bd>
                ctx->set_cursor_pos(ctx, ctx->cols - 1, y);
ffffffff800073be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800073c2:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff800073c9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff800073cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800073d1:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800073d8:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff800073dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800073e0:	48 89 c7             	mov    %rax,%rdi
ffffffff800073e3:	ff d1                	call   *%rcx
                return;
ffffffff800073e5:	e9 83 02 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
            }
            ctx->set_cursor_pos(ctx, (x / ctx->tab_size + 1) * ctx->tab_size, y);
ffffffff800073ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800073ee:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff800073f5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
ffffffff800073f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800073fd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80007401:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff80007404:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80007409:	48 f7 f7             	div    %rdi
ffffffff8000740c:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80007410:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007414:	48 8b 00             	mov    (%rax),%rax
ffffffff80007417:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000741a:	48 0f af c8          	imul   %rax,%rcx
ffffffff8000741e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007422:	48 89 f2             	mov    %rsi,%rdx
ffffffff80007425:	48 89 ce             	mov    %rcx,%rsi
ffffffff80007428:	48 89 c7             	mov    %rax,%rdi
ffffffff8000742b:	41 ff d0             	call   *%r8
            return;
ffffffff8000742e:	e9 3a 02 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        case 0x0b:
        case 0x0c:
        case '\n':
            if (y == ctx->scroll_bottom_margin - 1) {
ffffffff80007433:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007437:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff8000743b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8000743f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80007443:	48 39 c2             	cmp    %rax,%rdx
ffffffff80007446:	75 53                	jne    ffffffff8000749b <flanterm_putchar+0x46e>
                ctx->scroll(ctx);
ffffffff80007448:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000744c:	48 8b 90 68 01 00 00 	mov    0x168(%rax),%rdx
ffffffff80007453:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007457:	48 89 c7             	mov    %rax,%rdi
ffffffff8000745a:	ff d2                	call   *%rdx
                ctx->set_cursor_pos(ctx, (ctx->oob_output & FLANTERM_OOB_OUTPUT_ONLCR) ? 0 : x, y);
ffffffff8000745c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007460:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff80007467:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8000746b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000746f:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
ffffffff80007476:	83 e0 10             	and    $0x10,%eax
ffffffff80007479:	48 85 c0             	test   %rax,%rax
ffffffff8000747c:	75 06                	jne    ffffffff80007484 <flanterm_putchar+0x457>
ffffffff8000747e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80007482:	eb 05                	jmp    ffffffff80007489 <flanterm_putchar+0x45c>
ffffffff80007484:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007489:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000748d:	48 89 c6             	mov    %rax,%rsi
ffffffff80007490:	48 89 cf             	mov    %rcx,%rdi
ffffffff80007493:	41 ff d0             	call   *%r8
            } else {
                ctx->set_cursor_pos(ctx, (ctx->oob_output & FLANTERM_OOB_OUTPUT_ONLCR) ? 0 : x, y + 1);
            }
            return;
ffffffff80007496:	e9 d2 01 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
                ctx->set_cursor_pos(ctx, (ctx->oob_output & FLANTERM_OOB_OUTPUT_ONLCR) ? 0 : x, y + 1);
ffffffff8000749b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000749f:	4c 8b 80 00 01 00 00 	mov    0x100(%rax),%r8
ffffffff800074a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800074aa:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff800074ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800074b2:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
ffffffff800074b9:	83 e0 10             	and    $0x10,%eax
ffffffff800074bc:	48 85 c0             	test   %rax,%rax
ffffffff800074bf:	75 06                	jne    ffffffff800074c7 <flanterm_putchar+0x49a>
ffffffff800074c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800074c5:	eb 05                	jmp    ffffffff800074cc <flanterm_putchar+0x49f>
ffffffff800074c7:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800074cc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800074d0:	48 89 c6             	mov    %rax,%rsi
ffffffff800074d3:	48 89 cf             	mov    %rcx,%rdi
ffffffff800074d6:	41 ff d0             	call   *%r8
            return;
ffffffff800074d9:	e9 8f 01 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        case '\b':
            ctx->set_cursor_pos(ctx, x - 1, y);
ffffffff800074de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800074e2:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff800074e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff800074ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800074f1:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff800074f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800074f9:	48 89 c7             	mov    %rax,%rdi
ffffffff800074fc:	ff d1                	call   *%rcx
            return;
ffffffff800074fe:	e9 6a 01 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        case '\r':
            ctx->set_cursor_pos(ctx, 0, y);
ffffffff80007503:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007507:	48 8b 88 00 01 00 00 	mov    0x100(%rax),%rcx
ffffffff8000750e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80007512:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007516:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8000751b:	48 89 c7             	mov    %rax,%rdi
ffffffff8000751e:	ff d1                	call   *%rcx
            return;
ffffffff80007520:	e9 48 01 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        case '\a':
            // The bell is handled by the kernel
            if (ctx->callback != NULL) {
ffffffff80007525:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007529:	48 8b 80 a8 01 00 00 	mov    0x1a8(%rax),%rax
ffffffff80007530:	48 85 c0             	test   %rax,%rax
ffffffff80007533:	0f 84 30 01 00 00    	je     ffffffff80007669 <flanterm_putchar+0x63c>
                ctx->callback(ctx, FLANTERM_CB_BELL, 0, 0, 0);
ffffffff80007539:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000753d:	4c 8b 88 a8 01 00 00 	mov    0x1a8(%rax),%r9
ffffffff80007544:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007548:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8000754e:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80007553:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80007558:	be 14 00 00 00       	mov    $0x14,%esi
ffffffff8000755d:	48 89 c7             	mov    %rax,%rdi
ffffffff80007560:	41 ff d1             	call   *%r9
            }
            return;
ffffffff80007563:	e9 01 01 00 00       	jmp    ffffffff80007669 <flanterm_putchar+0x63c>
        case 14:
            // Move to G1 set
            ctx->current_charset = 1;
ffffffff80007568:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000756c:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
ffffffff80007573:	00 
            return;
ffffffff80007574:	e9 f4 00 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        case 15:
            // Move to G0 set
            ctx->current_charset = 0;
ffffffff80007579:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000757d:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80007584:	00 
            return;
ffffffff80007585:	e9 e3 00 00 00       	jmp    ffffffff8000766d <flanterm_putchar+0x640>
    }

    if (ctx->insert_mode == true) {
ffffffff8000758a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000758e:	0f b6 40 15          	movzbl 0x15(%rax),%eax
ffffffff80007592:	84 c0                	test   %al,%al
ffffffff80007594:	74 51                	je     ffffffff800075e7 <flanterm_putchar+0x5ba>
        for (size_t i = ctx->cols - 1; ; i--) {
ffffffff80007596:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000759a:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
ffffffff800075a1:	48 83 e8 01          	sub    $0x1,%rax
ffffffff800075a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
            ctx->move_character(ctx, i + 1, y, i, y);
ffffffff800075a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800075ad:	4c 8b 88 60 01 00 00 	mov    0x160(%rax),%r9
ffffffff800075b4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff800075b8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff800075bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800075c0:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff800075c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800075c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800075cc:	49 89 f8             	mov    %rdi,%r8
ffffffff800075cf:	48 89 c7             	mov    %rax,%rdi
ffffffff800075d2:	41 ff d1             	call   *%r9
            if (i == x) {
ffffffff800075d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800075d9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff800075dd:	74 07                	je     ffffffff800075e6 <flanterm_putchar+0x5b9>
        for (size_t i = ctx->cols - 1; ; i--) {
ffffffff800075df:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
            ctx->move_character(ctx, i + 1, y, i, y);
ffffffff800075e4:	eb c3                	jmp    ffffffff800075a9 <flanterm_putchar+0x57c>
                break;
ffffffff800075e6:	90                   	nop
            }
        }
    }

    // Translate character set
    switch (ctx->charsets[ctx->current_charset]) {
ffffffff800075e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800075eb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff800075ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800075f3:	0f b6 44 02 29       	movzbl 0x29(%rdx,%rax,1),%eax
ffffffff800075f8:	0f b6 c0             	movzbl %al,%eax
ffffffff800075fb:	85 c0                	test   %eax,%eax
ffffffff800075fd:	74 1d                	je     ffffffff8000761c <flanterm_putchar+0x5ef>
ffffffff800075ff:	83 f8 01             	cmp    $0x1,%eax
ffffffff80007602:	75 19                	jne    ffffffff8000761d <flanterm_putchar+0x5f0>
        case CHARSET_DEFAULT:
            break;
        case CHARSET_DEC_SPECIAL:
            if (dec_special_print(ctx, c)) {
ffffffff80007604:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
ffffffff80007608:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000760c:	89 d6                	mov    %edx,%esi
ffffffff8000760e:	48 89 c7             	mov    %rax,%rdi
ffffffff80007611:	e8 f7 ea ff ff       	call   ffffffff8000610d <dec_special_print>
ffffffff80007616:	84 c0                	test   %al,%al
ffffffff80007618:	75 52                	jne    ffffffff8000766c <flanterm_putchar+0x63f>
                return;
            }
            break;
ffffffff8000761a:	eb 01                	jmp    ffffffff8000761d <flanterm_putchar+0x5f0>
            break;
ffffffff8000761c:	90                   	nop
    }

    if (c >= 0x20 && c <= 0x7e) {
ffffffff8000761d:	80 7d c4 1f          	cmpb   $0x1f,-0x3c(%rbp)
ffffffff80007621:	76 22                	jbe    ffffffff80007645 <flanterm_putchar+0x618>
ffffffff80007623:	80 7d c4 7e          	cmpb   $0x7e,-0x3c(%rbp)
ffffffff80007627:	77 1c                	ja     ffffffff80007645 <flanterm_putchar+0x618>
        ctx->raw_putchar(ctx, c);
ffffffff80007629:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000762d:	48 8b 88 f0 00 00 00 	mov    0xf0(%rax),%rcx
ffffffff80007634:	0f b6 55 c4          	movzbl -0x3c(%rbp),%edx
ffffffff80007638:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000763c:	89 d6                	mov    %edx,%esi
ffffffff8000763e:	48 89 c7             	mov    %rax,%rdi
ffffffff80007641:	ff d1                	call   *%rcx
ffffffff80007643:	eb 28                	jmp    ffffffff8000766d <flanterm_putchar+0x640>
    } else {
        ctx->raw_putchar(ctx, 0xfe);
ffffffff80007645:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007649:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
ffffffff80007650:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80007654:	be fe 00 00 00       	mov    $0xfe,%esi
ffffffff80007659:	48 89 c7             	mov    %rax,%rdi
ffffffff8000765c:	ff d2                	call   *%rdx
ffffffff8000765e:	eb 0d                	jmp    ffffffff8000766d <flanterm_putchar+0x640>
            return;
ffffffff80007660:	90                   	nop
ffffffff80007661:	eb 0a                	jmp    ffffffff8000766d <flanterm_putchar+0x640>
        return;
ffffffff80007663:	90                   	nop
ffffffff80007664:	eb 07                	jmp    ffffffff8000766d <flanterm_putchar+0x640>
            return;
ffffffff80007666:	90                   	nop
ffffffff80007667:	eb 04                	jmp    ffffffff8000766d <flanterm_putchar+0x640>
            return;
ffffffff80007669:	90                   	nop
ffffffff8000766a:	eb 01                	jmp    ffffffff8000766d <flanterm_putchar+0x640>
                return;
ffffffff8000766c:	90                   	nop
    }
}
ffffffff8000766d:	c9                   	leave  
ffffffff8000766e:	c3                   	ret    

ffffffff8000766f <gdt_install>:
static uint8_t ent_ptr = 0;
static struct GDTPointer gpointer;


static void gdt_install()
{
ffffffff8000766f:	f3 0f 1e fa          	endbr64 
ffffffff80007673:	55                   	push   %rbp
ffffffff80007674:	48 89 e5             	mov    %rsp,%rbp
	__asm__ volatile("lgdt %0\n"
ffffffff80007677:	0f 01 15 02 f7 0d 00 	lgdt   0xdf702(%rip)        # ffffffff800e6d80 <gpointer>
		
		:: "m"(gpointer));
	__asm__ volatile ("call reloadSegments\n");
ffffffff8000767e:	e8 6d 20 00 00       	call   ffffffff800096f0 <reloadSegments>
}
ffffffff80007683:	90                   	nop
ffffffff80007684:	5d                   	pop    %rbp
ffffffff80007685:	c3                   	ret    

ffffffff80007686 <create_gdt_entry>:

static void create_gdt_entry(uint32_t base, uint32_t limit, uint8_t access, uint8_t flags)
{
ffffffff80007686:	f3 0f 1e fa          	endbr64 
ffffffff8000768a:	55                   	push   %rbp
ffffffff8000768b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000768e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80007692:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80007695:	89 75 e8             	mov    %esi,-0x18(%rbp)
ffffffff80007698:	89 c8                	mov    %ecx,%eax
ffffffff8000769a:	88 55 e4             	mov    %dl,-0x1c(%rbp)
ffffffff8000769d:	88 45 e0             	mov    %al,-0x20(%rbp)
	struct gdt_entry *ent = &gentries[ent_ptr++];
ffffffff800076a0:	0f b6 05 d1 f6 0d 00 	movzbl 0xdf6d1(%rip),%eax        # ffffffff800e6d78 <ent_ptr>
ffffffff800076a7:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff800076aa:	88 15 c8 f6 0d 00    	mov    %dl,0xdf6c8(%rip)        # ffffffff800e6d78 <ent_ptr>
ffffffff800076b0:	0f b6 c0             	movzbl %al,%eax
ffffffff800076b3:	48 98                	cltq   
ffffffff800076b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff800076bc:	00 
ffffffff800076bd:	48 8d 05 9c f6 0d 00 	lea    0xdf69c(%rip),%rax        # ffffffff800e6d60 <gentries>
ffffffff800076c4:	48 01 d0             	add    %rdx,%rax
ffffffff800076c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	ent->base_low = base &    0x0000FFFF;
ffffffff800076cb:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800076ce:	89 c2                	mov    %eax,%edx
ffffffff800076d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800076d4:	66 89 50 02          	mov    %dx,0x2(%rax)
	ent->base_mid = base &   (0x00FF0000) >> 16;
ffffffff800076d8:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800076db:	89 c2                	mov    %eax,%edx
ffffffff800076dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800076e1:	88 50 04             	mov    %dl,0x4(%rax)
	ent->base_upper = base & (0xFF000000) >> 24;
ffffffff800076e4:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800076e7:	89 c2                	mov    %eax,%edx
ffffffff800076e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800076ed:	88 50 07             	mov    %dl,0x7(%rax)

	ent->access = access;
ffffffff800076f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800076f4:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
ffffffff800076f8:	88 50 05             	mov    %dl,0x5(%rax)
	ent->flags  =  flags;
ffffffff800076fb:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
ffffffff800076ff:	83 e0 0f             	and    $0xf,%eax
ffffffff80007702:	89 c2                	mov    %eax,%edx
ffffffff80007704:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007708:	89 d1                	mov    %edx,%ecx
ffffffff8000770a:	c1 e1 04             	shl    $0x4,%ecx
ffffffff8000770d:	0f b6 50 06          	movzbl 0x6(%rax),%edx
ffffffff80007711:	83 e2 0f             	and    $0xf,%edx
ffffffff80007714:	09 ca                	or     %ecx,%edx
ffffffff80007716:	88 50 06             	mov    %dl,0x6(%rax)

	ent->limit_low = limit &    0x0000FFFF;
ffffffff80007719:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff8000771c:	89 c2                	mov    %eax,%edx
ffffffff8000771e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007722:	66 89 10             	mov    %dx,(%rax)
	ent->limit_upper = limit & (0x000F0000) >> 16;
ffffffff80007725:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80007728:	83 e0 0f             	and    $0xf,%eax
ffffffff8000772b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000772f:	83 e0 0f             	and    $0xf,%eax
ffffffff80007732:	89 c1                	mov    %eax,%ecx
ffffffff80007734:	0f b6 42 06          	movzbl 0x6(%rdx),%eax
ffffffff80007738:	83 e0 f0             	and    $0xfffffff0,%eax
ffffffff8000773b:	09 c8                	or     %ecx,%eax
ffffffff8000773d:	88 42 06             	mov    %al,0x6(%rdx)
}
ffffffff80007740:	90                   	nop
ffffffff80007741:	c9                   	leave  
ffffffff80007742:	c3                   	ret    

ffffffff80007743 <load_gdt>:

void load_gdt()
{
ffffffff80007743:	f3 0f 1e fa          	endbr64 
ffffffff80007747:	55                   	push   %rbp
ffffffff80007748:	48 89 e5             	mov    %rsp,%rbp
	
	gentries[0] = 0x0000000000000000; // NULL.
ffffffff8000774b:	48 c7 05 0a f6 0d 00 	movq   $0x0,0xdf60a(%rip)        # ffffffff800e6d60 <gentries>
ffffffff80007752:	00 00 00 00 

	gentries[1] = 0x00af9b000000ffff; // CODE.
ffffffff80007756:	48 b8 ff ff 00 00 00 	movabs $0xaf9b000000ffff,%rax
ffffffff8000775d:	9b af 00 
ffffffff80007760:	48 89 05 01 f6 0d 00 	mov    %rax,0xdf601(%rip)        # ffffffff800e6d68 <gentries+0x8>
    
	gentries[2] = 0x00af93000000ffff; // DATA.
ffffffff80007767:	48 b8 ff ff 00 00 00 	movabs $0xaf93000000ffff,%rax
ffffffff8000776e:	93 af 00 
ffffffff80007771:	48 89 05 f8 f5 0d 00 	mov    %rax,0xdf5f8(%rip)        # ffffffff800e6d70 <gentries+0x10>

	gpointer.addr = (uint64_t)(uintptr_t)gentries;
ffffffff80007778:	48 8d 05 e1 f5 0d 00 	lea    0xdf5e1(%rip),%rax        # ffffffff800e6d60 <gentries>
ffffffff8000777f:	48 89 05 fc f5 0d 00 	mov    %rax,0xdf5fc(%rip)        # ffffffff800e6d82 <gpointer+0x2>
	gpointer.size = sizeof(gentries) - 1;
ffffffff80007786:	66 c7 05 f1 f5 0d 00 	movw   $0x17,0xdf5f1(%rip)        # ffffffff800e6d80 <gpointer>
ffffffff8000778d:	17 00 
	gdt_install();
ffffffff8000778f:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007794:	e8 d6 fe ff ff       	call   ffffffff8000766f <gdt_install>
ffffffff80007799:	90                   	nop
ffffffff8000779a:	5d                   	pop    %rbp
ffffffff8000779b:	c3                   	ret    

ffffffff8000779c <putpixel>:

uint32_t line_counter = 0;
uint32_t last_finish_x = 0;

void putpixel(volatile uint32_t *fb, uint32_t pitch, uint32_t x, uint32_t y, uint32_t color) 
{
ffffffff8000779c:	f3 0f 1e fa          	endbr64 
ffffffff800077a0:	55                   	push   %rbp
ffffffff800077a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800077a4:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800077a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800077ac:	89 75 f4             	mov    %esi,-0xc(%rbp)
ffffffff800077af:	89 55 f0             	mov    %edx,-0x10(%rbp)
ffffffff800077b2:	89 4d ec             	mov    %ecx,-0x14(%rbp)
ffffffff800077b5:	44 89 45 e8          	mov    %r8d,-0x18(%rbp)
    fb[y * (pitch / 4) + x] = color;
ffffffff800077b9:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800077bc:	c1 e8 02             	shr    $0x2,%eax
ffffffff800077bf:	0f af 45 ec          	imul   -0x14(%rbp),%eax
ffffffff800077c3:	89 c2                	mov    %eax,%edx
ffffffff800077c5:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff800077c8:	01 d0                	add    %edx,%eax
ffffffff800077ca:	89 c0                	mov    %eax,%eax
ffffffff800077cc:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
ffffffff800077d3:	00 
ffffffff800077d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800077d8:	48 01 c2             	add    %rax,%rdx
ffffffff800077db:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800077de:	89 02                	mov    %eax,(%rdx)
}
ffffffff800077e0:	90                   	nop
ffffffff800077e1:	c9                   	leave  
ffffffff800077e2:	c3                   	ret    

ffffffff800077e3 <draw_char>:


void draw_char(volatile uint32_t *fb, uint32_t pitch, uint8_t font[][8], uint32_t x, uint32_t y, char c, uint32_t color, uint32_t scale) 
{
ffffffff800077e3:	f3 0f 1e fa          	endbr64 
ffffffff800077e7:	55                   	push   %rbp
ffffffff800077e8:	48 89 e5             	mov    %rsp,%rbp
ffffffff800077eb:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff800077ef:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff800077f3:	89 75 d4             	mov    %esi,-0x2c(%rbp)
ffffffff800077f6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff800077fa:	89 4d d0             	mov    %ecx,-0x30(%rbp)
ffffffff800077fd:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
ffffffff80007801:	44 89 c8             	mov    %r9d,%eax
ffffffff80007804:	88 45 c0             	mov    %al,-0x40(%rbp)
    const uint8_t *glyph = font[(uint8_t)c];
ffffffff80007807:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
ffffffff8000780b:	0f b6 c0             	movzbl %al,%eax
ffffffff8000780e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80007815:	00 
ffffffff80007816:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000781a:	48 01 d0             	add    %rdx,%rax
ffffffff8000781d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    for (uint32_t i = 0; i < 8; i++) {
ffffffff80007821:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80007828:	e9 a7 00 00 00       	jmp    ffffffff800078d4 <draw_char+0xf1>
        for (uint32_t j = 0; j < 8; j++) {
ffffffff8000782d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff80007834:	e9 8d 00 00 00       	jmp    ffffffff800078c6 <draw_char+0xe3>
            // If the j-th bit of the i-th byte is set, draw a pixel
            if (glyph[i] & (1 << (7 - j))) {
ffffffff80007839:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000783c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007840:	48 01 d0             	add    %rdx,%rax
ffffffff80007843:	0f b6 00             	movzbl (%rax),%eax
ffffffff80007846:	0f b6 d0             	movzbl %al,%edx
ffffffff80007849:	b8 07 00 00 00       	mov    $0x7,%eax
ffffffff8000784e:	2b 45 f8             	sub    -0x8(%rbp),%eax
ffffffff80007851:	89 c1                	mov    %eax,%ecx
ffffffff80007853:	d3 fa                	sar    %cl,%edx
ffffffff80007855:	89 d0                	mov    %edx,%eax
ffffffff80007857:	83 e0 01             	and    $0x1,%eax
ffffffff8000785a:	85 c0                	test   %eax,%eax
ffffffff8000785c:	74 64                	je     ffffffff800078c2 <draw_char+0xdf>
                // Scale the pixel
                for (uint32_t dy = 0; dy < scale; dy++) {
ffffffff8000785e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80007865:	eb 53                	jmp    ffffffff800078ba <draw_char+0xd7>
                    for (uint32_t dx = 0; dx < scale; dx++) {
ffffffff80007867:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff8000786e:	eb 3e                	jmp    ffffffff800078ae <draw_char+0xcb>
                        putpixel(fb, pitch, x + j * scale + dx, y + i * scale + dy, color);
ffffffff80007870:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007873:	0f af 45 18          	imul   0x18(%rbp),%eax
ffffffff80007877:	89 c2                	mov    %eax,%edx
ffffffff80007879:	8b 45 c4             	mov    -0x3c(%rbp),%eax
ffffffff8000787c:	01 c2                	add    %eax,%edx
ffffffff8000787e:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80007881:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
ffffffff80007884:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80007887:	0f af 45 18          	imul   0x18(%rbp),%eax
ffffffff8000788b:	89 c2                	mov    %eax,%edx
ffffffff8000788d:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffff80007890:	01 c2                	add    %eax,%edx
ffffffff80007892:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80007895:	01 c2                	add    %eax,%edx
ffffffff80007897:	8b 75 d4             	mov    -0x2c(%rbp),%esi
ffffffff8000789a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000789e:	44 8b 45 10          	mov    0x10(%rbp),%r8d
ffffffff800078a2:	48 89 c7             	mov    %rax,%rdi
ffffffff800078a5:	e8 f2 fe ff ff       	call   ffffffff8000779c <putpixel>
                    for (uint32_t dx = 0; dx < scale; dx++) {
ffffffff800078aa:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
ffffffff800078ae:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff800078b1:	3b 45 18             	cmp    0x18(%rbp),%eax
ffffffff800078b4:	72 ba                	jb     ffffffff80007870 <draw_char+0x8d>
                for (uint32_t dy = 0; dy < scale; dy++) {
ffffffff800078b6:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
ffffffff800078ba:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800078bd:	3b 45 18             	cmp    0x18(%rbp),%eax
ffffffff800078c0:	72 a5                	jb     ffffffff80007867 <draw_char+0x84>
        for (uint32_t j = 0; j < 8; j++) {
ffffffff800078c2:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
ffffffff800078c6:	83 7d f8 07          	cmpl   $0x7,-0x8(%rbp)
ffffffff800078ca:	0f 86 69 ff ff ff    	jbe    ffffffff80007839 <draw_char+0x56>
    for (uint32_t i = 0; i < 8; i++) {
ffffffff800078d0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff800078d4:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
ffffffff800078d8:	0f 86 4f ff ff ff    	jbe    ffffffff8000782d <draw_char+0x4a>
                    }
                }
            }
        }
    }
}
ffffffff800078de:	90                   	nop
ffffffff800078df:	90                   	nop
ffffffff800078e0:	c9                   	leave  
ffffffff800078e1:	c3                   	ret    

ffffffff800078e2 <draw_str>:

void draw_str(volatile uint32_t *fb, uint32_t pitch, uint8_t font[][8], uint32_t x, uint32_t y, const char* str, uint32_t color, uint32_t scale)
{
ffffffff800078e2:	f3 0f 1e fa          	endbr64 
ffffffff800078e6:	55                   	push   %rbp
ffffffff800078e7:	48 89 e5             	mov    %rsp,%rbp
ffffffff800078ea:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff800078ee:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff800078f2:	89 75 d4             	mov    %esi,-0x2c(%rbp)
ffffffff800078f5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff800078f9:	89 4d d0             	mov    %ecx,-0x30(%rbp)
ffffffff800078fc:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
ffffffff80007900:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
    int stx = x;
ffffffff80007904:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffff80007907:	89 45 f4             	mov    %eax,-0xc(%rbp)

    int ex = x;
ffffffff8000790a:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffff8000790d:	89 45 fc             	mov    %eax,-0x4(%rbp)
    int ey = y;
ffffffff80007910:	8b 45 c4             	mov    -0x3c(%rbp),%eax
ffffffff80007913:	89 45 f0             	mov    %eax,-0x10(%rbp)

    int len = strlen(str);
ffffffff80007916:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000791a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000791d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007922:	e8 2a 08 00 00       	call   ffffffff80008151 <strlen>
ffffffff80007927:	89 45 ec             	mov    %eax,-0x14(%rbp)

    for(int i = 0; i < len; i++)
ffffffff8000792a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff80007931:	e9 a5 00 00 00       	jmp    ffffffff800079db <draw_str+0xf9>
    {
        if (str[i] == '\n') {
ffffffff80007936:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80007939:	48 63 d0             	movslq %eax,%rdx
ffffffff8000793c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80007940:	48 01 d0             	add    %rdx,%rax
ffffffff80007943:	0f b6 00             	movzbl (%rax),%eax
ffffffff80007946:	3c 0a                	cmp    $0xa,%al
ffffffff80007948:	75 21                	jne    ffffffff8000796b <draw_str+0x89>
            // Move to the next line by incrementing y and resetting x
            ex = stx;
ffffffff8000794a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000794d:	89 45 fc             	mov    %eax,-0x4(%rbp)
            line_counter++;
ffffffff80007950:	8b 05 36 f4 0d 00    	mov    0xdf436(%rip),%eax        # ffffffff800e6d8c <line_counter>
ffffffff80007956:	83 c0 01             	add    $0x1,%eax
ffffffff80007959:	89 05 2d f4 0d 00    	mov    %eax,0xdf42d(%rip)        # ffffffff800e6d8c <line_counter>
            last_finish_x = 0;
ffffffff8000795f:	c7 05 27 f4 0d 00 00 	movl   $0x0,0xdf427(%rip)        # ffffffff800e6d90 <last_finish_x>
ffffffff80007966:	00 00 00 
            continue;
ffffffff80007969:	eb 6c                	jmp    ffffffff800079d7 <draw_str+0xf5>
        }

        draw_char(fb, pitch, font8, ex, ey + line_counter*(8 * scale + 4), str[i], color, scale);
ffffffff8000796b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000796e:	48 63 d0             	movslq %eax,%rdx
ffffffff80007971:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80007975:	48 01 d0             	add    %rdx,%rax
ffffffff80007978:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000797b:	0f be f8             	movsbl %al,%edi
ffffffff8000797e:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff80007981:	c1 e0 03             	shl    $0x3,%eax
ffffffff80007984:	8d 50 04             	lea    0x4(%rax),%edx
ffffffff80007987:	8b 05 ff f3 0d 00    	mov    0xdf3ff(%rip),%eax        # ffffffff800e6d8c <line_counter>
ffffffff8000798d:	0f af d0             	imul   %eax,%edx
ffffffff80007990:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80007993:	44 8d 04 02          	lea    (%rdx,%rax,1),%r8d
ffffffff80007997:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000799a:	8b 75 d4             	mov    -0x2c(%rbp),%esi
ffffffff8000799d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800079a1:	8b 4d 18             	mov    0x18(%rbp),%ecx
ffffffff800079a4:	51                   	push   %rcx
ffffffff800079a5:	8b 4d 10             	mov    0x10(%rbp),%ecx
ffffffff800079a8:	51                   	push   %rcx
ffffffff800079a9:	41 89 f9             	mov    %edi,%r9d
ffffffff800079ac:	89 d1                	mov    %edx,%ecx
ffffffff800079ae:	48 8d 15 8b 5d 00 00 	lea    0x5d8b(%rip),%rdx        # ffffffff8000d740 <font8>
ffffffff800079b5:	48 89 c7             	mov    %rax,%rdi
ffffffff800079b8:	e8 26 fe ff ff       	call   ffffffff800077e3 <draw_char>
ffffffff800079bd:	48 83 c4 10          	add    $0x10,%rsp

        ex += scale*(3*scale);
ffffffff800079c1:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff800079c4:	0f af c0             	imul   %eax,%eax
ffffffff800079c7:	89 c2                	mov    %eax,%edx
ffffffff800079c9:	89 d0                	mov    %edx,%eax
ffffffff800079cb:	01 c0                	add    %eax,%eax
ffffffff800079cd:	01 c2                	add    %eax,%edx
ffffffff800079cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800079d2:	01 d0                	add    %edx,%eax
ffffffff800079d4:	89 45 fc             	mov    %eax,-0x4(%rbp)
    for(int i = 0; i < len; i++)
ffffffff800079d7:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
ffffffff800079db:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800079de:	3b 45 ec             	cmp    -0x14(%rbp),%eax
ffffffff800079e1:	0f 8c 4f ff ff ff    	jl     ffffffff80007936 <draw_str+0x54>
    }

    last_finish_x = ex;
ffffffff800079e7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800079ea:	89 05 a0 f3 0d 00    	mov    %eax,0xdf3a0(%rip)        # ffffffff800e6d90 <last_finish_x>
}
ffffffff800079f0:	90                   	nop
ffffffff800079f1:	c9                   	leave  
ffffffff800079f2:	c3                   	ret    

ffffffff800079f3 <create_color>:

uint32_t create_color(uint8_t red, uint8_t green, uint8_t blue) {
ffffffff800079f3:	f3 0f 1e fa          	endbr64 
ffffffff800079f7:	55                   	push   %rbp
ffffffff800079f8:	48 89 e5             	mov    %rsp,%rbp
ffffffff800079fb:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800079ff:	89 f1                	mov    %esi,%ecx
ffffffff80007a01:	89 d0                	mov    %edx,%eax
ffffffff80007a03:	89 fa                	mov    %edi,%edx
ffffffff80007a05:	88 55 fc             	mov    %dl,-0x4(%rbp)
ffffffff80007a08:	89 ca                	mov    %ecx,%edx
ffffffff80007a0a:	88 55 f8             	mov    %dl,-0x8(%rbp)
ffffffff80007a0d:	88 45 f4             	mov    %al,-0xc(%rbp)
    return (red << 16) | (green << 8) | blue | (0xFF << 24); // The last 0xFF is the unused padding
ffffffff80007a10:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
ffffffff80007a14:	c1 e0 10             	shl    $0x10,%eax
ffffffff80007a17:	89 c2                	mov    %eax,%edx
ffffffff80007a19:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff80007a1d:	c1 e0 08             	shl    $0x8,%eax
ffffffff80007a20:	09 c2                	or     %eax,%edx
ffffffff80007a22:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
ffffffff80007a26:	09 d0                	or     %edx,%eax
ffffffff80007a28:	0d 00 00 00 ff       	or     $0xff000000,%eax
}
ffffffff80007a2d:	c9                   	leave  
ffffffff80007a2e:	c3                   	ret    

ffffffff80007a2f <calc_text_size>:

void calc_text_size(const char* str, uint32_t scale, uint32_t *width, uint32_t *height) {
ffffffff80007a2f:	f3 0f 1e fa          	endbr64 
ffffffff80007a33:	55                   	push   %rbp
ffffffff80007a34:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007a37:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80007a3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80007a3f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff80007a42:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80007a46:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    *width = 0;
ffffffff80007a4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80007a4e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    *height = 0;
ffffffff80007a54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80007a58:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    uint32_t current_width = 0;
ffffffff80007a5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    uint32_t max_width = 0;
ffffffff80007a65:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

    for (size_t i = 0; i < strlen(str); i++) {
ffffffff80007a6c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80007a73:	00 
ffffffff80007a74:	eb 56                	jmp    ffffffff80007acc <calc_text_size+0x9d>
        if (str[i] == '\n') {
ffffffff80007a76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80007a7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80007a7e:	48 01 d0             	add    %rdx,%rax
ffffffff80007a81:	0f b6 00             	movzbl (%rax),%eax
ffffffff80007a84:	3c 0a                	cmp    $0xa,%al
ffffffff80007a86:	75 2e                	jne    ffffffff80007ab6 <calc_text_size+0x87>
            // New line, so reset current width and increment height
            if (current_width > max_width) {
ffffffff80007a88:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007a8b:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff80007a8e:	76 06                	jbe    ffffffff80007a96 <calc_text_size+0x67>
                max_width = current_width;
ffffffff80007a90:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007a93:	89 45 f8             	mov    %eax,-0x8(%rbp)
            }
            current_width = 0;
ffffffff80007a96:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
            *height += (8 * scale) + 4; // Character height + spacing
ffffffff80007a9d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80007aa1:	8b 10                	mov    (%rax),%edx
ffffffff80007aa3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80007aa6:	c1 e0 03             	shl    $0x3,%eax
ffffffff80007aa9:	01 d0                	add    %edx,%eax
ffffffff80007aab:	8d 50 04             	lea    0x4(%rax),%edx
ffffffff80007aae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80007ab2:	89 10                	mov    %edx,(%rax)
ffffffff80007ab4:	eb 11                	jmp    ffffffff80007ac7 <calc_text_size+0x98>
        } else {
            // Increase the width for each character
            current_width += scale*(3*scale); // Character width + spacing
ffffffff80007ab6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80007ab9:	0f af c0             	imul   %eax,%eax
ffffffff80007abc:	89 c2                	mov    %eax,%edx
ffffffff80007abe:	89 d0                	mov    %edx,%eax
ffffffff80007ac0:	01 c0                	add    %eax,%eax
ffffffff80007ac2:	01 d0                	add    %edx,%eax
ffffffff80007ac4:	01 45 fc             	add    %eax,-0x4(%rbp)
    for (size_t i = 0; i < strlen(str); i++) {
ffffffff80007ac7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80007acc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007ad0:	48 89 c7             	mov    %rax,%rdi
ffffffff80007ad3:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007ad8:	e8 74 06 00 00       	call   ffffffff80008151 <strlen>
ffffffff80007add:	48 98                	cltq   
ffffffff80007adf:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80007ae3:	72 91                	jb     ffffffff80007a76 <calc_text_size+0x47>
        }
    }

    // Update max_width for the last line if it doesn't end with a newline
    if (current_width > max_width) {
ffffffff80007ae5:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007ae8:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff80007aeb:	76 06                	jbe    ffffffff80007af3 <calc_text_size+0xc4>
        max_width = current_width;
ffffffff80007aed:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007af0:	89 45 f8             	mov    %eax,-0x8(%rbp)
    }

    // Set final width and height
    *width = max_width;
ffffffff80007af3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80007af7:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80007afa:	89 10                	mov    %edx,(%rax)
    *height += (8 * scale) + 4; // Add height for the last line
ffffffff80007afc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80007b00:	8b 10                	mov    (%rax),%edx
ffffffff80007b02:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80007b05:	c1 e0 03             	shl    $0x3,%eax
ffffffff80007b08:	01 d0                	add    %edx,%eax
ffffffff80007b0a:	8d 50 04             	lea    0x4(%rax),%edx
ffffffff80007b0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80007b11:	89 10                	mov    %edx,(%rax)
ffffffff80007b13:	90                   	nop
ffffffff80007b14:	c9                   	leave  
ffffffff80007b15:	c3                   	ret    

ffffffff80007b16 <outb>:
#include <stdint.h>
#include <stddef.h>

static inline void outb(uint16_t port, uint8_t val)
{
ffffffff80007b16:	55                   	push   %rbp
ffffffff80007b17:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007b1a:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80007b1e:	89 f8                	mov    %edi,%eax
ffffffff80007b20:	89 f2                	mov    %esi,%edx
ffffffff80007b22:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
ffffffff80007b26:	89 d0                	mov    %edx,%eax
ffffffff80007b28:	88 45 f8             	mov    %al,-0x8(%rbp)
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80007b2b:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff80007b2f:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx
ffffffff80007b33:	ee                   	out    %al,(%dx)
}
ffffffff80007b34:	90                   	nop
ffffffff80007b35:	c9                   	leave  
ffffffff80007b36:	c3                   	ret    

ffffffff80007b37 <inb>:
static inline uint8_t inb(uint16_t port)
{
ffffffff80007b37:	55                   	push   %rbp
ffffffff80007b38:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007b3b:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80007b3f:	89 f8                	mov    %edi,%eax
ffffffff80007b41:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
    uint8_t ret;
    __asm__ volatile ( "inb %1, %0"
ffffffff80007b45:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
ffffffff80007b49:	89 c2                	mov    %eax,%edx
ffffffff80007b4b:	ec                   	in     (%dx),%al
ffffffff80007b4c:	88 45 ff             	mov    %al,-0x1(%rbp)
                   : "=a"(ret)
                   : "Nd"(port) );
    return ret;
ffffffff80007b4f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff80007b53:	c9                   	leave  
ffffffff80007b54:	c3                   	ret    

ffffffff80007b55 <idt_setdesc>:
"Virtualization",
"Security Exception"
};

void idt_setdesc(uint64_t vec, void* isr, uint8_t flgs)
{
ffffffff80007b55:	f3 0f 1e fa          	endbr64 
ffffffff80007b59:	55                   	push   %rbp
ffffffff80007b5a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007b5d:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80007b61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80007b65:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80007b69:	89 d0                	mov    %edx,%eax
ffffffff80007b6b:	88 45 dc             	mov    %al,-0x24(%rbp)
    idt_desc* desc = &entries[vec];
ffffffff80007b6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007b72:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80007b76:	48 89 c2             	mov    %rax,%rdx
ffffffff80007b79:	48 8d 05 20 f2 0d 00 	lea    0xdf220(%rip),%rax        # ffffffff800e6da0 <entries>
ffffffff80007b80:	48 01 d0             	add    %rdx,%rax
ffffffff80007b83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    desc->offset_1 = (uint64_t)isr & 0xFFFF;
ffffffff80007b87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80007b8b:	89 c2                	mov    %eax,%edx
ffffffff80007b8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007b91:	66 89 10             	mov    %dx,(%rax)
    desc->selector = 0x8;
ffffffff80007b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007b98:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
    desc->ist = 0;
ffffffff80007b9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007ba2:	c6 40 04 00          	movb   $0x0,0x4(%rax)
    desc->type_attributes = flgs;
ffffffff80007ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007baa:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
ffffffff80007bae:	88 50 05             	mov    %dl,0x5(%rax)
    desc->offset_2 = ((uint64_t)isr >> 16) & 0xFFFF;
ffffffff80007bb1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80007bb5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80007bb9:	89 c2                	mov    %eax,%edx
ffffffff80007bbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007bbf:	66 89 50 06          	mov    %dx,0x6(%rax)
    desc->offset_3 =  ((uint64_t)isr >> 32) & 0xFFFFFFFF;
ffffffff80007bc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80007bc7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80007bcb:	89 c2                	mov    %eax,%edx
ffffffff80007bcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007bd1:	89 50 08             	mov    %edx,0x8(%rax)
    desc->zero = 0;
ffffffff80007bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007bd8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
}
ffffffff80007bdf:	90                   	nop
ffffffff80007be0:	c9                   	leave  
ffffffff80007be1:	c3                   	ret    

ffffffff80007be2 <idt_init>:
//a//.

void idt_init()
{
ffffffff80007be2:	f3 0f 1e fa          	endbr64 
ffffffff80007be6:	55                   	push   %rbp
ffffffff80007be7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007bea:	48 83 ec 10          	sub    $0x10,%rsp
    idtptr.size = (uint16_t)sizeof(entries)-1;
ffffffff80007bee:	66 c7 05 a9 01 0e 00 	movw   $0xfff,0xe01a9(%rip)        # ffffffff800e7da0 <idtptr>
ffffffff80007bf5:	ff 0f 
    idtptr.addr = (uintptr_t)&entries[0];
ffffffff80007bf7:	48 8d 05 a2 f1 0d 00 	lea    0xdf1a2(%rip),%rax        # ffffffff800e6da0 <entries>
ffffffff80007bfe:	48 89 05 9d 01 0e 00 	mov    %rax,0xe019d(%rip)        # ffffffff800e7da2 <idtptr+0x2>

    for(uint64_t v = 0; v < 256; v++)
ffffffff80007c05:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80007c0c:	00 
ffffffff80007c0d:	eb 30                	jmp    ffffffff80007c3f <idt_init+0x5d>
    {
        idt_setdesc(v, isr_stub_table[v], 0x8E);
ffffffff80007c0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007c13:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80007c1a:	00 
ffffffff80007c1b:	48 8d 05 92 94 00 00 	lea    0x9492(%rip),%rax        # ffffffff800110b4 <isr_stub_table>
ffffffff80007c22:	48 8b 0c 02          	mov    (%rdx,%rax,1),%rcx
ffffffff80007c26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007c2a:	ba 8e 00 00 00       	mov    $0x8e,%edx
ffffffff80007c2f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80007c32:	48 89 c7             	mov    %rax,%rdi
ffffffff80007c35:	e8 1b ff ff ff       	call   ffffffff80007b55 <idt_setdesc>
    for(uint64_t v = 0; v < 256; v++)
ffffffff80007c3a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80007c3f:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80007c46:	00 
ffffffff80007c47:	76 c6                	jbe    ffffffff80007c0f <idt_init+0x2d>
    }
    
    __asm__ volatile ("lidt %0" :: "m"(idtptr));
ffffffff80007c49:	0f 01 1d 50 01 0e 00 	lidt   0xe0150(%rip)        # ffffffff800e7da0 <idtptr>
    
    __asm__ volatile ("sti");
ffffffff80007c50:	fb                   	sti    

    pic_init();
ffffffff80007c51:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007c56:	e8 12 18 00 00       	call   ffffffff8000946d <pic_init>
    pic_timer_setup();
ffffffff80007c5b:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007c60:	e8 c3 19 00 00       	call   ffffffff80009628 <pic_timer_setup>
}
ffffffff80007c65:	90                   	nop
ffffffff80007c66:	c9                   	leave  
ffffffff80007c67:	c3                   	ret    

ffffffff80007c68 <inthandler>:



// EXCEPTION STUFF:
void inthandler(registers *regs)
{
ffffffff80007c68:	f3 0f 1e fa          	endbr64 
ffffffff80007c6c:	55                   	push   %rbp
ffffffff80007c6d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007c70:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80007c74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if(regs->int_no < 0x20){
ffffffff80007c78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007c7c:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff80007c80:	48 83 f8 1f          	cmp    $0x1f,%rax
ffffffff80007c84:	77 57                	ja     ffffffff80007cdd <inthandler+0x75>
        printf("Exception Caught: RIP -> %x || %s - %d : %x", regs->rip, exception_str[regs->int_no], regs->int_no, regs->error_code);
ffffffff80007c86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007c8a:	48 8b b0 80 00 00 00 	mov    0x80(%rax),%rsi
ffffffff80007c91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007c95:	48 8b 48 78          	mov    0x78(%rax),%rcx
ffffffff80007c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007c9d:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff80007ca1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80007ca8:	00 
ffffffff80007ca9:	48 8d 05 50 93 00 00 	lea    0x9350(%rip),%rax        # ffffffff80011000 <exception_str>
ffffffff80007cb0:	48 8b 14 02          	mov    (%rdx,%rax,1),%rdx
ffffffff80007cb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007cb8:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80007cbf:	49 89 f0             	mov    %rsi,%r8
ffffffff80007cc2:	48 89 c6             	mov    %rax,%rsi
ffffffff80007cc5:	48 8d 05 e4 5f 00 00 	lea    0x5fe4(%rip),%rax        # ffffffff8000dcb0 <font8+0x570>
ffffffff80007ccc:	48 89 c7             	mov    %rax,%rdi
ffffffff80007ccf:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007cd4:	e8 1b 02 00 00       	call   ffffffff80007ef4 <printf>
        __asm__ volatile("cli; hlt");
ffffffff80007cd9:	fa                   	cli    
ffffffff80007cda:	f4                   	hlt    
                pic_send_eoi(7);                
                break;
        }
    }
    
ffffffff80007cdb:	eb 76                	jmp    ffffffff80007d53 <inthandler+0xeb>
        switch(regs->int_no)
ffffffff80007cdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80007ce1:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff80007ce5:	48 83 f8 20          	cmp    $0x20,%rax
ffffffff80007ce9:	74 08                	je     ffffffff80007cf3 <inthandler+0x8b>
ffffffff80007ceb:	48 83 f8 27          	cmp    $0x27,%rax
ffffffff80007cef:	74 3b                	je     ffffffff80007d2c <inthandler+0xc4>
ffffffff80007cf1:	eb 60                	jmp    ffffffff80007d53 <inthandler+0xeb>
                timer_inc();
ffffffff80007cf3:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007cf8:	e8 4a 19 00 00       	call   ffffffff80009647 <timer_inc>
                if(timer_getct() == PIC_FREQ)
ffffffff80007cfd:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007d02:	e8 6f 19 00 00       	call   ffffffff80009676 <timer_getct>
ffffffff80007d07:	83 f8 12             	cmp    $0x12,%eax
ffffffff80007d0a:	75 14                	jne    ffffffff80007d20 <inthandler+0xb8>
                    timer_secinc();
ffffffff80007d0c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007d11:	e8 80 19 00 00       	call   ffffffff80009696 <timer_secinc>
                    timer_reset();
ffffffff80007d16:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007d1b:	e8 41 19 00 00       	call   ffffffff80009661 <timer_reset>
                pic_send_eoi(0); 
ffffffff80007d20:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80007d25:	e8 c6 18 00 00       	call   ffffffff800095f0 <pic_send_eoi>
                break;
ffffffff80007d2a:	eb 27                	jmp    ffffffff80007d53 <inthandler+0xeb>
                outb(0x20, 0x0B); 
ffffffff80007d2c:	be 0b 00 00 00       	mov    $0xb,%esi
ffffffff80007d31:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80007d36:	e8 db fd ff ff       	call   ffffffff80007b16 <outb>
                unsigned char irr = inb(0x20);
ffffffff80007d3b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80007d40:	e8 f2 fd ff ff       	call   ffffffff80007b37 <inb>
ffffffff80007d45:	88 45 ff             	mov    %al,-0x1(%rbp)
                pic_send_eoi(7);                
ffffffff80007d48:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff80007d4d:	e8 9e 18 00 00       	call   ffffffff800095f0 <pic_send_eoi>
                break;
ffffffff80007d52:	90                   	nop
ffffffff80007d53:	90                   	nop
ffffffff80007d54:	c9                   	leave  
ffffffff80007d55:	c3                   	ret    

ffffffff80007d56 <print_hex_impl>:
#include <font8.h>

char buffer[4096];
int bufUsed = 0;

void print_hex_impl(unsigned long long num, int nibbles) { for(int i = nibbles - 1; i >= 0; -- i) putch("0123456789ABCDEF"[(num >> (i * 4))&0xF]); }
ffffffff80007d56:	f3 0f 1e fa          	endbr64 
ffffffff80007d5a:	55                   	push   %rbp
ffffffff80007d5b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007d5e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80007d62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80007d66:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff80007d69:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80007d6c:	83 e8 01             	sub    $0x1,%eax
ffffffff80007d6f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80007d72:	eb 36                	jmp    ffffffff80007daa <print_hex_impl+0x54>
ffffffff80007d74:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007d77:	c1 e0 02             	shl    $0x2,%eax
ffffffff80007d7a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80007d7e:	89 c1                	mov    %eax,%ecx
ffffffff80007d80:	48 d3 ea             	shr    %cl,%rdx
ffffffff80007d83:	48 89 d0             	mov    %rdx,%rax
ffffffff80007d86:	83 e0 0f             	and    $0xf,%eax
ffffffff80007d89:	48 89 c2             	mov    %rax,%rdx
ffffffff80007d8c:	48 8d 05 4d 63 00 00 	lea    0x634d(%rip),%rax        # ffffffff8000e0e0 <font8+0x400>
ffffffff80007d93:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
ffffffff80007d97:	0f be c0             	movsbl %al,%eax
ffffffff80007d9a:	89 c7                	mov    %eax,%edi
ffffffff80007d9c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80007da1:	e8 0e 00 00 00       	call   ffffffff80007db4 <putch>
ffffffff80007da6:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
ffffffff80007daa:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80007dae:	79 c4                	jns    ffffffff80007d74 <print_hex_impl+0x1e>
ffffffff80007db0:	90                   	nop
ffffffff80007db1:	90                   	nop
ffffffff80007db2:	c9                   	leave  
ffffffff80007db3:	c3                   	ret    

ffffffff80007db4 <putch>:
#define print_hex(num) print_hex_impl((num), sizeof((num)) * 2)

void putch(char c)
{
ffffffff80007db4:	f3 0f 1e fa          	endbr64 
ffffffff80007db8:	55                   	push   %rbp
ffffffff80007db9:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007dbc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80007dc0:	89 f8                	mov    %edi,%eax
ffffffff80007dc2:	88 45 fc             	mov    %al,-0x4(%rbp)
    buffer[bufUsed++] = c;
ffffffff80007dc5:	8b 05 f5 0f 0e 00    	mov    0xe0ff5(%rip),%eax        # ffffffff800e8dc0 <bufUsed>
ffffffff80007dcb:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff80007dce:	89 15 ec 0f 0e 00    	mov    %edx,0xe0fec(%rip)        # ffffffff800e8dc0 <bufUsed>
ffffffff80007dd4:	48 98                	cltq   
ffffffff80007dd6:	48 8d 0d e3 ff 0d 00 	lea    0xdffe3(%rip),%rcx        # ffffffff800e7dc0 <buffer>
ffffffff80007ddd:	0f b6 55 fc          	movzbl -0x4(%rbp),%edx
ffffffff80007de1:	88 14 08             	mov    %dl,(%rax,%rcx,1)
}
ffffffff80007de4:	90                   	nop
ffffffff80007de5:	c9                   	leave  
ffffffff80007de6:	c3                   	ret    

ffffffff80007de7 <flush>:

void flush()
{
ffffffff80007de7:	f3 0f 1e fa          	endbr64 
ffffffff80007deb:	55                   	push   %rbp
ffffffff80007dec:	48 89 e5             	mov    %rsp,%rbp
    buffer[0] = '\0';
ffffffff80007def:	c6 05 ca ff 0d 00 00 	movb   $0x0,0xdffca(%rip)        # ffffffff800e7dc0 <buffer>
    bufUsed = 0;
ffffffff80007df6:	c7 05 c0 0f 0e 00 00 	movl   $0x0,0xe0fc0(%rip)        # ffffffff800e8dc0 <bufUsed>
ffffffff80007dfd:	00 00 00 
}
ffffffff80007e00:	90                   	nop
ffffffff80007e01:	5d                   	pop    %rbp
ffffffff80007e02:	c3                   	ret    

ffffffff80007e03 <putd>:

void putd(int x)
{
ffffffff80007e03:	f3 0f 1e fa          	endbr64 
ffffffff80007e07:	55                   	push   %rbp
ffffffff80007e08:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007e0b:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80007e0f:	89 7d ac             	mov    %edi,-0x54(%rbp)
    char strdec[60];
    char* str = itoa(strdec, x);
ffffffff80007e12:	8b 55 ac             	mov    -0x54(%rbp),%edx
ffffffff80007e15:	48 8d 45 b4          	lea    -0x4c(%rbp),%rax
ffffffff80007e19:	89 d6                	mov    %edx,%esi
ffffffff80007e1b:	48 89 c7             	mov    %rax,%rdi
ffffffff80007e1e:	e8 61 03 00 00       	call   ffffffff80008184 <itoa>
ffffffff80007e23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(int i = 0; i < strlen(str); i++)
ffffffff80007e27:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80007e2e:	eb 1e                	jmp    ffffffff80007e4e <putd+0x4b>
    {
        putch(str[i]);
ffffffff80007e30:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80007e33:	48 63 d0             	movslq %eax,%rdx
ffffffff80007e36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80007e3a:	48 01 d0             	add    %rdx,%rax
ffffffff80007e3d:	0f b6 00             	movzbl (%rax),%eax
ffffffff80007e40:	0f be c0             	movsbl %al,%eax
ffffffff80007e43:	89 c7                	mov    %eax,%edi
ffffffff80007e45:	e8 6a ff ff ff       	call   ffffffff80007db4 <putch>
    for(int i = 0; i < strlen(str); i++)
ffffffff80007e4a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80007e4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80007e52:	48 89 c7             	mov    %rax,%rdi
ffffffff80007e55:	e8 f7 02 00 00       	call   ffffffff80008151 <strlen>
ffffffff80007e5a:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80007e5d:	39 d0                	cmp    %edx,%eax
ffffffff80007e5f:	77 cf                	ja     ffffffff80007e30 <putd+0x2d>
    }
}
ffffffff80007e61:	90                   	nop
ffffffff80007e62:	90                   	nop
ffffffff80007e63:	c9                   	leave  
ffffffff80007e64:	c3                   	ret    

ffffffff80007e65 <puts>:

void puts(const char* str)
{
ffffffff80007e65:	f3 0f 1e fa          	endbr64 
ffffffff80007e69:	55                   	push   %rbp
ffffffff80007e6a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007e6d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80007e71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    if(TerminalMode == false)
ffffffff80007e75:	0f b6 05 34 92 00 00 	movzbl 0x9234(%rip),%eax        # ffffffff800110b0 <TerminalMode>
ffffffff80007e7c:	83 f0 01             	xor    $0x1,%eax
ffffffff80007e7f:	84 c0                	test   %al,%al
ffffffff80007e81:	74 48                	je     ffffffff80007ecb <puts+0x66>
        draw_str((volatile uint32_t *)framebuffer->address, framebuffer->pitch, font8, last_finish_x+10, 40, str, 0xFFFFFFFF, 2);
ffffffff80007e83:	8b 05 07 ef 0d 00    	mov    0xdef07(%rip),%eax        # ffffffff800e6d90 <last_finish_x>
ffffffff80007e89:	8d 50 0a             	lea    0xa(%rax),%edx
ffffffff80007e8c:	48 8b 05 4d 0f 0e 00 	mov    0xe0f4d(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80007e93:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80007e97:	89 c6                	mov    %eax,%esi
ffffffff80007e99:	48 8b 05 40 0f 0e 00 	mov    0xe0f40(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80007ea0:	48 8b 00             	mov    (%rax),%rax
ffffffff80007ea3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80007ea7:	6a 02                	push   $0x2
ffffffff80007ea9:	6a ff                	push   $0xffffffffffffffff
ffffffff80007eab:	49 89 c9             	mov    %rcx,%r9
ffffffff80007eae:	41 b8 28 00 00 00    	mov    $0x28,%r8d
ffffffff80007eb4:	89 d1                	mov    %edx,%ecx
ffffffff80007eb6:	48 8d 15 23 5e 00 00 	lea    0x5e23(%rip),%rdx        # ffffffff8000dce0 <font8>
ffffffff80007ebd:	48 89 c7             	mov    %rax,%rdi
ffffffff80007ec0:	e8 1d fa ff ff       	call   ffffffff800078e2 <draw_str>
ffffffff80007ec5:	48 83 c4 10          	add    $0x10,%rsp
    else
        kwrite(str);
}
ffffffff80007ec9:	eb 0c                	jmp    ffffffff80007ed7 <puts+0x72>
        kwrite(str);
ffffffff80007ecb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007ecf:	48 89 c7             	mov    %rax,%rdi
ffffffff80007ed2:	e8 f0 05 00 00       	call   ffffffff800084c7 <kwrite>
}
ffffffff80007ed7:	90                   	nop
ffffffff80007ed8:	c9                   	leave  
ffffffff80007ed9:	c3                   	ret    

ffffffff80007eda <pbuf>:

void pbuf()
{
ffffffff80007eda:	f3 0f 1e fa          	endbr64 
ffffffff80007ede:	55                   	push   %rbp
ffffffff80007edf:	48 89 e5             	mov    %rsp,%rbp
    puts(buffer);
ffffffff80007ee2:	48 8d 05 d7 fe 0d 00 	lea    0xdfed7(%rip),%rax        # ffffffff800e7dc0 <buffer>
ffffffff80007ee9:	48 89 c7             	mov    %rax,%rdi
ffffffff80007eec:	e8 74 ff ff ff       	call   ffffffff80007e65 <puts>
}
ffffffff80007ef1:	90                   	nop
ffffffff80007ef2:	5d                   	pop    %rbp
ffffffff80007ef3:	c3                   	ret    

ffffffff80007ef4 <printf>:


int printf(const char* fmt, ...)
{
ffffffff80007ef4:	f3 0f 1e fa          	endbr64 
ffffffff80007ef8:	55                   	push   %rbp
ffffffff80007ef9:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007efc:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff80007f00:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
ffffffff80007f04:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff80007f08:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff80007f0c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff80007f10:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
ffffffff80007f14:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
    va_list list;
    va_start(list, fmt);
ffffffff80007f18:	c7 45 90 08 00 00 00 	movl   $0x8,-0x70(%rbp)
ffffffff80007f1f:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff80007f23:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff80007f27:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
ffffffff80007f2b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

    int len = strlen(fmt);
ffffffff80007f2f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80007f33:	48 89 c7             	mov    %rax,%rdi
ffffffff80007f36:	e8 16 02 00 00       	call   ffffffff80008151 <strlen>
ffffffff80007f3b:	89 45 c4             	mov    %eax,-0x3c(%rbp)

    for(int i = 0; i < len; i++)
ffffffff80007f3e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
ffffffff80007f45:	e9 d1 01 00 00       	jmp    ffffffff8000811b <printf+0x227>
    {
        if(fmt[i] == '%')
ffffffff80007f4a:	8b 45 cc             	mov    -0x34(%rbp),%eax
ffffffff80007f4d:	48 63 d0             	movslq %eax,%rdx
ffffffff80007f50:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80007f54:	48 01 d0             	add    %rdx,%rax
ffffffff80007f57:	0f b6 00             	movzbl (%rax),%eax
ffffffff80007f5a:	3c 25                	cmp    $0x25,%al
ffffffff80007f5c:	0f 85 9b 01 00 00    	jne    ffffffff800080fd <printf+0x209>
        {
            switch(fmt[++i])
ffffffff80007f62:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
ffffffff80007f66:	8b 45 cc             	mov    -0x34(%rbp),%eax
ffffffff80007f69:	48 63 d0             	movslq %eax,%rdx
ffffffff80007f6c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80007f70:	48 01 d0             	add    %rdx,%rax
ffffffff80007f73:	0f b6 00             	movzbl (%rax),%eax
ffffffff80007f76:	0f be c0             	movsbl %al,%eax
ffffffff80007f79:	83 f8 78             	cmp    $0x78,%eax
ffffffff80007f7c:	0f 84 2a 01 00 00    	je     ffffffff800080ac <printf+0x1b8>
ffffffff80007f82:	83 f8 78             	cmp    $0x78,%eax
ffffffff80007f85:	0f 8f 8c 01 00 00    	jg     ffffffff80008117 <printf+0x223>
ffffffff80007f8b:	83 f8 73             	cmp    $0x73,%eax
ffffffff80007f8e:	74 6f                	je     ffffffff80007fff <printf+0x10b>
ffffffff80007f90:	83 f8 73             	cmp    $0x73,%eax
ffffffff80007f93:	0f 8f 7e 01 00 00    	jg     ffffffff80008117 <printf+0x223>
ffffffff80007f99:	83 f8 64             	cmp    $0x64,%eax
ffffffff80007f9c:	0f 84 ce 00 00 00    	je     ffffffff80008070 <printf+0x17c>
ffffffff80007fa2:	83 f8 64             	cmp    $0x64,%eax
ffffffff80007fa5:	0f 8f 6c 01 00 00    	jg     ffffffff80008117 <printf+0x223>
ffffffff80007fab:	83 f8 25             	cmp    $0x25,%eax
ffffffff80007fae:	0f 84 3d 01 00 00    	je     ffffffff800080f1 <printf+0x1fd>
ffffffff80007fb4:	83 f8 63             	cmp    $0x63,%eax
ffffffff80007fb7:	0f 85 5a 01 00 00    	jne    ffffffff80008117 <printf+0x223>
            {
                case 'c':
                {
                    int c = va_arg(list, int);
ffffffff80007fbd:	8b 45 90             	mov    -0x70(%rbp),%eax
ffffffff80007fc0:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80007fc3:	77 17                	ja     ffffffff80007fdc <printf+0xe8>
ffffffff80007fc5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80007fc9:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff80007fcc:	89 d2                	mov    %edx,%edx
ffffffff80007fce:	48 01 d0             	add    %rdx,%rax
ffffffff80007fd1:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff80007fd4:	83 c2 08             	add    $0x8,%edx
ffffffff80007fd7:	89 55 90             	mov    %edx,-0x70(%rbp)
ffffffff80007fda:	eb 0c                	jmp    ffffffff80007fe8 <printf+0xf4>
ffffffff80007fdc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80007fe0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80007fe4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff80007fe8:	8b 00                	mov    (%rax),%eax
ffffffff80007fea:	89 45 a8             	mov    %eax,-0x58(%rbp)
                    putch(c);
ffffffff80007fed:	8b 45 a8             	mov    -0x58(%rbp),%eax
ffffffff80007ff0:	0f be c0             	movsbl %al,%eax
ffffffff80007ff3:	89 c7                	mov    %eax,%edi
ffffffff80007ff5:	e8 ba fd ff ff       	call   ffffffff80007db4 <putch>
                    break;
ffffffff80007ffa:	e9 18 01 00 00       	jmp    ffffffff80008117 <printf+0x223>
                }
                case 's':
                {
                    char* str = va_arg(list, char*);
ffffffff80007fff:	8b 45 90             	mov    -0x70(%rbp),%eax
ffffffff80008002:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80008005:	77 17                	ja     ffffffff8000801e <printf+0x12a>
ffffffff80008007:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000800b:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff8000800e:	89 d2                	mov    %edx,%edx
ffffffff80008010:	48 01 d0             	add    %rdx,%rax
ffffffff80008013:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff80008016:	83 c2 08             	add    $0x8,%edx
ffffffff80008019:	89 55 90             	mov    %edx,-0x70(%rbp)
ffffffff8000801c:	eb 0c                	jmp    ffffffff8000802a <printf+0x136>
ffffffff8000801e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80008022:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80008026:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8000802a:	48 8b 00             	mov    (%rax),%rax
ffffffff8000802d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                    for(int i = 0; i < strlen(str); i++)
ffffffff80008031:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
ffffffff80008038:	eb 1e                	jmp    ffffffff80008058 <printf+0x164>
                    {
                        putch(str[i]);
ffffffff8000803a:	8b 45 c8             	mov    -0x38(%rbp),%eax
ffffffff8000803d:	48 63 d0             	movslq %eax,%rdx
ffffffff80008040:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80008044:	48 01 d0             	add    %rdx,%rax
ffffffff80008047:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000804a:	0f be c0             	movsbl %al,%eax
ffffffff8000804d:	89 c7                	mov    %eax,%edi
ffffffff8000804f:	e8 60 fd ff ff       	call   ffffffff80007db4 <putch>
                    for(int i = 0; i < strlen(str); i++)
ffffffff80008054:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
ffffffff80008058:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000805c:	48 89 c7             	mov    %rax,%rdi
ffffffff8000805f:	e8 ed 00 00 00       	call   ffffffff80008151 <strlen>
ffffffff80008064:	8b 55 c8             	mov    -0x38(%rbp),%edx
ffffffff80008067:	39 d0                	cmp    %edx,%eax
ffffffff80008069:	77 cf                	ja     ffffffff8000803a <printf+0x146>
                    }
                    break;
ffffffff8000806b:	e9 a7 00 00 00       	jmp    ffffffff80008117 <printf+0x223>
                }
                case 'd':
                {
                    int dcm = va_arg(list, int);
ffffffff80008070:	8b 45 90             	mov    -0x70(%rbp),%eax
ffffffff80008073:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff80008076:	77 17                	ja     ffffffff8000808f <printf+0x19b>
ffffffff80008078:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000807c:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff8000807f:	89 d2                	mov    %edx,%edx
ffffffff80008081:	48 01 d0             	add    %rdx,%rax
ffffffff80008084:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff80008087:	83 c2 08             	add    $0x8,%edx
ffffffff8000808a:	89 55 90             	mov    %edx,-0x70(%rbp)
ffffffff8000808d:	eb 0c                	jmp    ffffffff8000809b <printf+0x1a7>
ffffffff8000808f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80008093:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80008097:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8000809b:	8b 00                	mov    (%rax),%eax
ffffffff8000809d:	89 45 ac             	mov    %eax,-0x54(%rbp)
                    putd(dcm);
ffffffff800080a0:	8b 45 ac             	mov    -0x54(%rbp),%eax
ffffffff800080a3:	89 c7                	mov    %eax,%edi
ffffffff800080a5:	e8 59 fd ff ff       	call   ffffffff80007e03 <putd>
                    break;
ffffffff800080aa:	eb 6b                	jmp    ffffffff80008117 <printf+0x223>
                }
                case 'x':
                {
                    uint64_t hex = va_arg(list, uint64_t);
ffffffff800080ac:	8b 45 90             	mov    -0x70(%rbp),%eax
ffffffff800080af:	83 f8 2f             	cmp    $0x2f,%eax
ffffffff800080b2:	77 17                	ja     ffffffff800080cb <printf+0x1d7>
ffffffff800080b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800080b8:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff800080bb:	89 d2                	mov    %edx,%edx
ffffffff800080bd:	48 01 d0             	add    %rdx,%rax
ffffffff800080c0:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff800080c3:	83 c2 08             	add    $0x8,%edx
ffffffff800080c6:	89 55 90             	mov    %edx,-0x70(%rbp)
ffffffff800080c9:	eb 0c                	jmp    ffffffff800080d7 <printf+0x1e3>
ffffffff800080cb:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff800080cf:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff800080d3:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff800080d7:	48 8b 00             	mov    (%rax),%rax
ffffffff800080da:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
                    print_hex(hex);
ffffffff800080de:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800080e2:	be 10 00 00 00       	mov    $0x10,%esi
ffffffff800080e7:	48 89 c7             	mov    %rax,%rdi
ffffffff800080ea:	e8 67 fc ff ff       	call   ffffffff80007d56 <print_hex_impl>
                    break;   
ffffffff800080ef:	eb 26                	jmp    ffffffff80008117 <printf+0x223>
                }
                case '%':
                {
                    putch('%');
ffffffff800080f1:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff800080f6:	e8 b9 fc ff ff       	call   ffffffff80007db4 <putch>
                    break; 
ffffffff800080fb:	eb 1a                	jmp    ffffffff80008117 <printf+0x223>
                }       
            }
        }
        else
        {
            putch(fmt[i]);
ffffffff800080fd:	8b 45 cc             	mov    -0x34(%rbp),%eax
ffffffff80008100:	48 63 d0             	movslq %eax,%rdx
ffffffff80008103:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80008107:	48 01 d0             	add    %rdx,%rax
ffffffff8000810a:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000810d:	0f be c0             	movsbl %al,%eax
ffffffff80008110:	89 c7                	mov    %eax,%edi
ffffffff80008112:	e8 9d fc ff ff       	call   ffffffff80007db4 <putch>
    for(int i = 0; i < len; i++)
ffffffff80008117:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
ffffffff8000811b:	8b 45 cc             	mov    -0x34(%rbp),%eax
ffffffff8000811e:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
ffffffff80008121:	0f 8c 23 fe ff ff    	jl     ffffffff80007f4a <printf+0x56>
        }
    }
    putch('\0');
ffffffff80008127:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8000812c:	e8 83 fc ff ff       	call   ffffffff80007db4 <putch>
    puts(buffer);
ffffffff80008131:	48 8d 05 88 fc 0d 00 	lea    0xdfc88(%rip),%rax        # ffffffff800e7dc0 <buffer>
ffffffff80008138:	48 89 c7             	mov    %rax,%rdi
ffffffff8000813b:	e8 25 fd ff ff       	call   ffffffff80007e65 <puts>
    flush();
ffffffff80008140:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008145:	e8 9d fc ff ff       	call   ffffffff80007de7 <flush>
    va_end(list);
    return 1;
ffffffff8000814a:	b8 01 00 00 00       	mov    $0x1,%eax
}
ffffffff8000814f:	c9                   	leave  
ffffffff80008150:	c3                   	ret    

ffffffff80008151 <strlen>:
#include <libc/string.h>

uint32_t strlen(const char* str)
{
ffffffff80008151:	f3 0f 1e fa          	endbr64 
ffffffff80008155:	55                   	push   %rbp
ffffffff80008156:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008159:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000815d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    uint32_t len = 0;
ffffffff80008161:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

    while(str[len] != '\0')
ffffffff80008168:	eb 04                	jmp    ffffffff8000816e <strlen+0x1d>
    {
        len++;
ffffffff8000816a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    while(str[len] != '\0')
ffffffff8000816e:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80008171:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008175:	48 01 d0             	add    %rdx,%rax
ffffffff80008178:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000817b:	84 c0                	test   %al,%al
ffffffff8000817d:	75 eb                	jne    ffffffff8000816a <strlen+0x19>
    }

    return len;
ffffffff8000817f:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
ffffffff80008182:	c9                   	leave  
ffffffff80008183:	c3                   	ret    

ffffffff80008184 <itoa>:

char* itoa(char* str, int m){
ffffffff80008184:	f3 0f 1e fa          	endbr64 
ffffffff80008188:	55                   	push   %rbp
ffffffff80008189:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000818c:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80008190:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80008194:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    int tmp = 0;
ffffffff80008197:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    int f = 0;
ffffffff8000819e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    while(m != 0)
ffffffff800081a5:	eb 68                	jmp    ffffffff8000820f <itoa+0x8b>
    {
        tmp = /*tmp * 10*/ m % 10;
ffffffff800081a7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff800081aa:	48 63 c2             	movslq %edx,%rax
ffffffff800081ad:	48 69 c0 67 66 66 66 	imul   $0x66666667,%rax,%rax
ffffffff800081b4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff800081b8:	c1 f8 02             	sar    $0x2,%eax
ffffffff800081bb:	89 d6                	mov    %edx,%esi
ffffffff800081bd:	c1 fe 1f             	sar    $0x1f,%esi
ffffffff800081c0:	29 f0                	sub    %esi,%eax
ffffffff800081c2:	89 c1                	mov    %eax,%ecx
ffffffff800081c4:	89 c8                	mov    %ecx,%eax
ffffffff800081c6:	c1 e0 02             	shl    $0x2,%eax
ffffffff800081c9:	01 c8                	add    %ecx,%eax
ffffffff800081cb:	01 c0                	add    %eax,%eax
ffffffff800081cd:	29 c2                	sub    %eax,%edx
ffffffff800081cf:	89 55 f8             	mov    %edx,-0x8(%rbp)
        str[f++] = tmp+'0';
ffffffff800081d2:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800081d5:	8d 48 30             	lea    0x30(%rax),%ecx
ffffffff800081d8:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800081db:	8d 50 01             	lea    0x1(%rax),%edx
ffffffff800081de:	89 55 fc             	mov    %edx,-0x4(%rbp)
ffffffff800081e1:	48 63 d0             	movslq %eax,%rdx
ffffffff800081e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800081e8:	48 01 d0             	add    %rdx,%rax
ffffffff800081eb:	89 ca                	mov    %ecx,%edx
ffffffff800081ed:	88 10                	mov    %dl,(%rax)

        m /= 10;
ffffffff800081ef:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800081f2:	48 63 d0             	movslq %eax,%rdx
ffffffff800081f5:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
ffffffff800081fc:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80008200:	c1 fa 02             	sar    $0x2,%edx
ffffffff80008203:	c1 f8 1f             	sar    $0x1f,%eax
ffffffff80008206:	89 c1                	mov    %eax,%ecx
ffffffff80008208:	89 d0                	mov    %edx,%eax
ffffffff8000820a:	29 c8                	sub    %ecx,%eax
ffffffff8000820c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    while(m != 0)
ffffffff8000820f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff80008213:	75 92                	jne    ffffffff800081a7 <itoa+0x23>
    }
    return strrev(str);
ffffffff80008215:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008219:	48 89 c7             	mov    %rax,%rdi
ffffffff8000821c:	e8 02 00 00 00       	call   ffffffff80008223 <strrev>
}
ffffffff80008221:	c9                   	leave  
ffffffff80008222:	c3                   	ret    

ffffffff80008223 <strrev>:

char* strrev(char* str)
{
ffffffff80008223:	f3 0f 1e fa          	endbr64 
ffffffff80008227:	55                   	push   %rbp
ffffffff80008228:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000822b:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8000822f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    size_t strl = strlen(str);
ffffffff80008233:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008237:	48 89 c7             	mov    %rax,%rdi
ffffffff8000823a:	e8 12 ff ff ff       	call   ffffffff80008151 <strlen>
ffffffff8000823f:	89 c0                	mov    %eax,%eax
ffffffff80008241:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    for(int i = 0; i < strl / 2; i++)
ffffffff80008245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000824c:	eb 5f                	jmp    ffffffff800082ad <strrev+0x8a>
    {
        char ch = str[i];
ffffffff8000824e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80008251:	48 63 d0             	movslq %eax,%rdx
ffffffff80008254:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008258:	48 01 d0             	add    %rdx,%rax
ffffffff8000825b:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000825e:	88 45 ef             	mov    %al,-0x11(%rbp)
        str[i] = str[strl - i - 1];
ffffffff80008261:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80008264:	48 63 d0             	movslq %eax,%rdx
ffffffff80008267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000826b:	48 29 d0             	sub    %rdx,%rax
ffffffff8000826e:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80008272:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008276:	48 01 d0             	add    %rdx,%rax
ffffffff80008279:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000827c:	48 63 ca             	movslq %edx,%rcx
ffffffff8000827f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80008283:	48 01 ca             	add    %rcx,%rdx
ffffffff80008286:	0f b6 00             	movzbl (%rax),%eax
ffffffff80008289:	88 02                	mov    %al,(%rdx)
        str[strl - i - 1] = ch;
ffffffff8000828b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000828e:	48 63 d0             	movslq %eax,%rdx
ffffffff80008291:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008295:	48 29 d0             	sub    %rdx,%rax
ffffffff80008298:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8000829c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800082a0:	48 01 c2             	add    %rax,%rdx
ffffffff800082a3:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
ffffffff800082a7:	88 02                	mov    %al,(%rdx)
    for(int i = 0; i < strl / 2; i++)
ffffffff800082a9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff800082ad:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800082b0:	48 98                	cltq   
ffffffff800082b2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff800082b6:	48 d1 ea             	shr    %rdx
ffffffff800082b9:	48 39 d0             	cmp    %rdx,%rax
ffffffff800082bc:	72 90                	jb     ffffffff8000824e <strrev+0x2b>
    }

    return str;
ffffffff800082be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800082c2:	c9                   	leave  
ffffffff800082c3:	c3                   	ret    

ffffffff800082c4 <memcpy>:
// 4 functions even if they are not directly called.
// Implement them as the C specification mandates.
// DO NOT remove or rename these functions, or stuff will eventually break!
// They CAN be moved to a different .c file.

void *memcpy(void *dest, const void *src, size_t n) {
ffffffff800082c4:	f3 0f 1e fa          	endbr64 
ffffffff800082c8:	55                   	push   %rbp
ffffffff800082c9:	48 89 e5             	mov    %rsp,%rbp
ffffffff800082cc:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff800082d0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff800082d4:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff800082d8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    uint8_t *pdest = (uint8_t *)dest;
ffffffff800082dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800082e0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    const uint8_t *psrc = (const uint8_t *)src;
ffffffff800082e4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800082e8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for (size_t i = 0; i < n; i++) {
ffffffff800082ec:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff800082f3:	00 
ffffffff800082f4:	eb 20                	jmp    ffffffff80008316 <memcpy+0x52>
        pdest[i] = psrc[i];
ffffffff800082f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff800082fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800082fe:	48 01 d0             	add    %rdx,%rax
ffffffff80008301:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80008305:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80008309:	48 01 ca             	add    %rcx,%rdx
ffffffff8000830c:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000830f:	88 02                	mov    %al,(%rdx)
    for (size_t i = 0; i < n; i++) {
ffffffff80008311:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80008316:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000831a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8000831e:	72 d6                	jb     ffffffff800082f6 <memcpy+0x32>
    }

    return dest;
ffffffff80008320:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
ffffffff80008324:	c9                   	leave  
ffffffff80008325:	c3                   	ret    

ffffffff80008326 <memset>:

void *memset(void *s, int c, size_t n) {
ffffffff80008326:	f3 0f 1e fa          	endbr64 
ffffffff8000832a:	55                   	push   %rbp
ffffffff8000832b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000832e:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80008332:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80008336:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff80008339:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    uint8_t *p = (uint8_t *)s;
ffffffff8000833d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008341:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    for (size_t i = 0; i < n; i++) {
ffffffff80008345:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000834c:	00 
ffffffff8000834d:	eb 15                	jmp    ffffffff80008364 <memset+0x3e>
        p[i] = (uint8_t)c;
ffffffff8000834f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80008353:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008357:	48 01 d0             	add    %rdx,%rax
ffffffff8000835a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff8000835d:	88 10                	mov    %dl,(%rax)
    for (size_t i = 0; i < n; i++) {
ffffffff8000835f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80008364:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008368:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000836c:	72 e1                	jb     ffffffff8000834f <memset+0x29>
    }

    return s;
ffffffff8000836e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff80008372:	c9                   	leave  
ffffffff80008373:	c3                   	ret    

ffffffff80008374 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
ffffffff80008374:	f3 0f 1e fa          	endbr64 
ffffffff80008378:	55                   	push   %rbp
ffffffff80008379:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000837c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80008380:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80008384:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80008388:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    uint8_t *pdest = (uint8_t *)dest;
ffffffff8000838c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008390:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    const uint8_t *psrc = (const uint8_t *)src;
ffffffff80008394:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80008398:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    if (src > dest) {
ffffffff8000839c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800083a0:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff800083a4:	76 36                	jbe    ffffffff800083dc <memmove+0x68>
        for (size_t i = 0; i < n; i++) {
ffffffff800083a6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff800083ad:	00 
ffffffff800083ae:	eb 20                	jmp    ffffffff800083d0 <memmove+0x5c>
            pdest[i] = psrc[i];
ffffffff800083b0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff800083b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800083b8:	48 01 d0             	add    %rdx,%rax
ffffffff800083bb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800083bf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800083c3:	48 01 ca             	add    %rcx,%rdx
ffffffff800083c6:	0f b6 00             	movzbl (%rax),%eax
ffffffff800083c9:	88 02                	mov    %al,(%rdx)
        for (size_t i = 0; i < n; i++) {
ffffffff800083cb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff800083d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800083d4:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff800083d8:	72 d6                	jb     ffffffff800083b0 <memmove+0x3c>
ffffffff800083da:	eb 43                	jmp    ffffffff8000841f <memmove+0xab>
        }
    } else if (src < dest) {
ffffffff800083dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800083e0:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff800083e4:	73 39                	jae    ffffffff8000841f <memmove+0xab>
        for (size_t i = n; i > 0; i--) {
ffffffff800083e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800083ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800083ee:	eb 28                	jmp    ffffffff80008418 <memmove+0xa4>
            pdest[i-1] = psrc[i-1];
ffffffff800083f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800083f4:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff800083f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800083fc:	48 01 d0             	add    %rdx,%rax
ffffffff800083ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80008403:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
ffffffff80008407:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000840b:	48 01 ca             	add    %rcx,%rdx
ffffffff8000840e:	0f b6 00             	movzbl (%rax),%eax
ffffffff80008411:	88 02                	mov    %al,(%rdx)
        for (size_t i = n; i > 0; i--) {
ffffffff80008413:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
ffffffff80008418:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000841d:	75 d1                	jne    ffffffff800083f0 <memmove+0x7c>
        }
    }

    return dest;
ffffffff8000841f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
ffffffff80008423:	c9                   	leave  
ffffffff80008424:	c3                   	ret    

ffffffff80008425 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
ffffffff80008425:	f3 0f 1e fa          	endbr64 
ffffffff80008429:	55                   	push   %rbp
ffffffff8000842a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000842d:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80008431:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80008435:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80008439:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    const uint8_t *p1 = (const uint8_t *)s1;
ffffffff8000843d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008441:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    const uint8_t *p2 = (const uint8_t *)s2;
ffffffff80008445:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80008449:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for (size_t i = 0; i < n; i++) {
ffffffff8000844d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80008454:	00 
ffffffff80008455:	eb 53                	jmp    ffffffff800084aa <memcmp+0x85>
        if (p1[i] != p2[i]) {
ffffffff80008457:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000845b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000845f:	48 01 d0             	add    %rdx,%rax
ffffffff80008462:	0f b6 10             	movzbl (%rax),%edx
ffffffff80008465:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80008469:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000846d:	48 01 c8             	add    %rcx,%rax
ffffffff80008470:	0f b6 00             	movzbl (%rax),%eax
ffffffff80008473:	38 c2                	cmp    %al,%dl
ffffffff80008475:	74 2e                	je     ffffffff800084a5 <memcmp+0x80>
            return p1[i] < p2[i] ? -1 : 1;
ffffffff80008477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000847b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000847f:	48 01 d0             	add    %rdx,%rax
ffffffff80008482:	0f b6 10             	movzbl (%rax),%edx
ffffffff80008485:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80008489:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000848d:	48 01 c8             	add    %rcx,%rax
ffffffff80008490:	0f b6 00             	movzbl (%rax),%eax
ffffffff80008493:	38 c2                	cmp    %al,%dl
ffffffff80008495:	73 07                	jae    ffffffff8000849e <memcmp+0x79>
ffffffff80008497:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff8000849c:	eb 1b                	jmp    ffffffff800084b9 <memcmp+0x94>
ffffffff8000849e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff800084a3:	eb 14                	jmp    ffffffff800084b9 <memcmp+0x94>
    for (size_t i = 0; i < n; i++) {
ffffffff800084a5:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff800084aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800084ae:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff800084b2:	72 a3                	jb     ffffffff80008457 <memcmp+0x32>
        }
    }

    return 0;
ffffffff800084b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff800084b9:	c9                   	leave  
ffffffff800084ba:	c3                   	ret    

ffffffff800084bb <hcf>:

// Halt and catch fire function.
static void hcf(void) {
ffffffff800084bb:	f3 0f 1e fa          	endbr64 
ffffffff800084bf:	55                   	push   %rbp
ffffffff800084c0:	48 89 e5             	mov    %rsp,%rbp
    asm ("cli");
ffffffff800084c3:	fa                   	cli    
    for (;;) {
        asm ("hlt");
ffffffff800084c4:	f4                   	hlt    
ffffffff800084c5:	eb fd                	jmp    ffffffff800084c4 <hcf+0x9>

ffffffff800084c7 <kwrite>:
struct limine_framebuffer *framebuffer;
struct limine_hhdm_response *hhdm;
struct flanterm_context *ft_ctx;

void kwrite(const char* str)
{
ffffffff800084c7:	f3 0f 1e fa          	endbr64 
ffffffff800084cb:	55                   	push   %rbp
ffffffff800084cc:	48 89 e5             	mov    %rsp,%rbp
ffffffff800084cf:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800084d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    flanterm_write(ft_ctx, str, strlen(str));
ffffffff800084d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800084db:	48 89 c7             	mov    %rax,%rdi
ffffffff800084de:	e8 6e fc ff ff       	call   ffffffff80008151 <strlen>
ffffffff800084e3:	89 c2                	mov    %eax,%edx
ffffffff800084e5:	48 8b 05 04 09 0e 00 	mov    0xe0904(%rip),%rax        # ffffffff800e8df0 <ft_ctx>
ffffffff800084ec:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800084f0:	48 89 ce             	mov    %rcx,%rsi
ffffffff800084f3:	48 89 c7             	mov    %rax,%rdi
ffffffff800084f6:	e8 36 b7 ff ff       	call   ffffffff80003c31 <flanterm_write>
}
ffffffff800084fb:	90                   	nop
ffffffff800084fc:	c9                   	leave  
ffffffff800084fd:	c3                   	ret    

ffffffff800084fe <test_hhdm>:

bool TerminalMode = true;

void test_hhdm(void *hhdm) {
ffffffff800084fe:	f3 0f 1e fa          	endbr64 
ffffffff80008502:	55                   	push   %rbp
ffffffff80008503:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008506:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000850a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  return;
ffffffff8000850e:	90                   	nop
}
ffffffff8000850f:	c9                   	leave  
ffffffff80008510:	c3                   	ret    

ffffffff80008511 <_start>:

void _start(void) {
ffffffff80008511:	f3 0f 1e fa          	endbr64 
ffffffff80008515:	55                   	push   %rbp
ffffffff80008516:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008519:	53                   	push   %rbx
ffffffff8000851a:	48 83 ec 18          	sub    $0x18,%rsp
    // Ensure the bootloader actually understands our base revision (see spec).
    if (LIMINE_BASE_REVISION_SUPPORTED == false) {
ffffffff8000851e:	48 8b 05 cb 93 00 00 	mov    0x93cb(%rip),%rax        # ffffffff800118f0 <limine_base_revision+0x10>
ffffffff80008525:	48 85 c0             	test   %rax,%rax
ffffffff80008528:	74 05                	je     ffffffff8000852f <_start+0x1e>
        hcf();
ffffffff8000852a:	e8 8c ff ff ff       	call   ffffffff800084bb <hcf>
    }

    load_gdt();
ffffffff8000852f:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008534:	e8 0a f2 ff ff       	call   ffffffff80007743 <load_gdt>
 
    hhdm = hhdm_request.response;
ffffffff80008539:	48 8b 05 28 94 00 00 	mov    0x9428(%rip),%rax        # ffffffff80011968 <hhdm_request+0x28>
ffffffff80008540:	48 89 05 a1 08 0e 00 	mov    %rax,0xe08a1(%rip)        # ffffffff800e8de8 <hhdm>
    
    test_hhdm(hhdm->offset);
ffffffff80008547:	48 8b 05 9a 08 0e 00 	mov    0xe089a(%rip),%rax        # ffffffff800e8de8 <hhdm>
ffffffff8000854e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008552:	48 89 c7             	mov    %rax,%rdi
ffffffff80008555:	e8 a4 ff ff ff       	call   ffffffff800084fe <test_hhdm>

        // Ensure we got a framebuffer.
    if (framebuffer_request.response == NULL
ffffffff8000855a:	48 8b 05 c7 93 00 00 	mov    0x93c7(%rip),%rax        # ffffffff80011928 <framebuffer_request+0x28>
ffffffff80008561:	48 85 c0             	test   %rax,%rax
ffffffff80008564:	74 10                	je     ffffffff80008576 <_start+0x65>
    || framebuffer_request.response->framebuffer_count < 1) {
ffffffff80008566:	48 8b 05 bb 93 00 00 	mov    0x93bb(%rip),%rax        # ffffffff80011928 <framebuffer_request+0x28>
ffffffff8000856d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008571:	48 85 c0             	test   %rax,%rax
ffffffff80008574:	75 05                	jne    ffffffff8000857b <_start+0x6a>
        hcf();
ffffffff80008576:	e8 40 ff ff ff       	call   ffffffff800084bb <hcf>
    }

    // Fetch the first framebuffer. 
    framebuffer = framebuffer_request.response->framebuffers[0];
ffffffff8000857b:	48 8b 05 a6 93 00 00 	mov    0x93a6(%rip),%rax        # ffffffff80011928 <framebuffer_request+0x28>
ffffffff80008582:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80008586:	48 8b 00             	mov    (%rax),%rax
ffffffff80008589:	48 89 05 50 08 0e 00 	mov    %rax,0xe0850(%rip)        # ffffffff800e8de0 <framebuffer>

    if(TerminalMode == false) // note: do not turn off terminal mode
ffffffff80008590:	0f b6 05 19 8b 00 00 	movzbl 0x8b19(%rip),%eax        # ffffffff800110b0 <TerminalMode>
ffffffff80008597:	83 f0 01             	xor    $0x1,%eax
ffffffff8000859a:	84 c0                	test   %al,%al
ffffffff8000859c:	0f 84 ce 00 00 00    	je     ffffffff80008670 <_start+0x15f>
    {
        uint32_t twidth = 0, theight = 0;
ffffffff800085a2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff800085a9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
        calc_text_size("WELCOME TO AMPERSAND\n", 3, &twidth, &theight);
ffffffff800085b0:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
ffffffff800085b4:	48 8d 45 ec          	lea    -0x14(%rbp),%rax
ffffffff800085b8:	48 89 d1             	mov    %rdx,%rcx
ffffffff800085bb:	48 89 c2             	mov    %rax,%rdx
ffffffff800085be:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff800085c3:	48 8d 05 36 5f 00 00 	lea    0x5f36(%rip),%rax        # ffffffff8000e500 <font8+0x400>
ffffffff800085ca:	48 89 c7             	mov    %rax,%rdi
ffffffff800085cd:	e8 5d f4 ff ff       	call   ffffffff80007a2f <calc_text_size>

        draw_str((volatile uint32_t*)framebuffer->address, framebuffer->pitch, font8, framebuffer->width/2-twidth/2, 25, "WELCOME TO AMPERSAND\n", create_color(255,0,0), 3);
ffffffff800085d2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff800085d7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff800085dc:	bf ff 00 00 00       	mov    $0xff,%edi
ffffffff800085e1:	e8 0d f4 ff ff       	call   ffffffff800079f3 <create_color>
ffffffff800085e6:	89 c2                	mov    %eax,%edx
ffffffff800085e8:	48 8b 05 f1 07 0e 00 	mov    0xe07f1(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff800085ef:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff800085f3:	48 d1 e8             	shr    %rax
ffffffff800085f6:	89 c1                	mov    %eax,%ecx
ffffffff800085f8:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800085fb:	d1 e8                	shr    %eax
ffffffff800085fd:	29 c1                	sub    %eax,%ecx
ffffffff800085ff:	48 8b 05 da 07 0e 00 	mov    0xe07da(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80008606:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000860a:	89 c6                	mov    %eax,%esi
ffffffff8000860c:	48 8b 05 cd 07 0e 00 	mov    0xe07cd(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80008613:	48 8b 00             	mov    (%rax),%rax
ffffffff80008616:	6a 03                	push   $0x3
ffffffff80008618:	52                   	push   %rdx
ffffffff80008619:	4c 8d 0d e0 5e 00 00 	lea    0x5ee0(%rip),%r9        # ffffffff8000e500 <font8+0x400>
ffffffff80008620:	41 b8 19 00 00 00    	mov    $0x19,%r8d
ffffffff80008626:	48 8d 15 d3 5a 00 00 	lea    0x5ad3(%rip),%rdx        # ffffffff8000e100 <font8>
ffffffff8000862d:	48 89 c7             	mov    %rax,%rdi
ffffffff80008630:	e8 ad f2 ff ff       	call   ffffffff800078e2 <draw_str>
ffffffff80008635:	48 83 c4 10          	add    $0x10,%rsp
        last_finish_x = 0;
ffffffff80008639:	c7 05 4d e7 0d 00 00 	movl   $0x0,0xde74d(%rip)        # ffffffff800e6d90 <last_finish_x>
ffffffff80008640:	00 00 00 

        printf("This is a test of printf.");
ffffffff80008643:	48 8d 05 cc 5e 00 00 	lea    0x5ecc(%rip),%rax        # ffffffff8000e516 <font8+0x416>
ffffffff8000864a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000864d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008652:	e8 9d f8 ff ff       	call   ffffffff80007ef4 <printf>
        printf("This is written consecutively because I am very smart");
ffffffff80008657:	48 8d 05 d2 5e 00 00 	lea    0x5ed2(%rip),%rax        # ffffffff8000e530 <font8+0x430>
ffffffff8000865e:	48 89 c7             	mov    %rax,%rdi
ffffffff80008661:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008666:	e8 89 f8 ff ff       	call   ffffffff80007ef4 <printf>
ffffffff8000866b:	e9 74 01 00 00       	jmp    ffffffff800087e4 <_start+0x2d3>
            NULL,
            NULL,
            (volatile uint32_t*)framebuffer->address, framebuffer->width, framebuffer->height, framebuffer->pitch,
            framebuffer->red_mask_size, framebuffer->red_mask_shift,
            framebuffer->green_mask_size, framebuffer->green_mask_shift,
            framebuffer->blue_mask_size, framebuffer->blue_mask_shift,
ffffffff80008670:	48 8b 05 69 07 0e 00 	mov    0xe0769(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80008677:	0f b6 40 28          	movzbl 0x28(%rax),%eax
        ft_ctx = flanterm_fb_init(
ffffffff8000867b:	44 0f b6 d0          	movzbl %al,%r10d
            framebuffer->blue_mask_size, framebuffer->blue_mask_shift,
ffffffff8000867f:	48 8b 05 5a 07 0e 00 	mov    0xe075a(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80008686:	0f b6 40 27          	movzbl 0x27(%rax),%eax
        ft_ctx = flanterm_fb_init(
ffffffff8000868a:	44 0f b6 c8          	movzbl %al,%r9d
            framebuffer->green_mask_size, framebuffer->green_mask_shift,
ffffffff8000868e:	48 8b 05 4b 07 0e 00 	mov    0xe074b(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff80008695:	0f b6 40 26          	movzbl 0x26(%rax),%eax
        ft_ctx = flanterm_fb_init(
ffffffff80008699:	44 0f b6 c0          	movzbl %al,%r8d
            framebuffer->green_mask_size, framebuffer->green_mask_shift,
ffffffff8000869d:	48 8b 05 3c 07 0e 00 	mov    0xe073c(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff800086a4:	0f b6 40 25          	movzbl 0x25(%rax),%eax
        ft_ctx = flanterm_fb_init(
ffffffff800086a8:	0f b6 f8             	movzbl %al,%edi
            framebuffer->red_mask_size, framebuffer->red_mask_shift,
ffffffff800086ab:	48 8b 05 2e 07 0e 00 	mov    0xe072e(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff800086b2:	0f b6 40 24          	movzbl 0x24(%rax),%eax
        ft_ctx = flanterm_fb_init(
ffffffff800086b6:	0f b6 f0             	movzbl %al,%esi
            framebuffer->red_mask_size, framebuffer->red_mask_shift,
ffffffff800086b9:	48 8b 05 20 07 0e 00 	mov    0xe0720(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff800086c0:	0f b6 40 23          	movzbl 0x23(%rax),%eax
        ft_ctx = flanterm_fb_init(
ffffffff800086c4:	0f b6 c8             	movzbl %al,%ecx
            (volatile uint32_t*)framebuffer->address, framebuffer->width, framebuffer->height, framebuffer->pitch,
ffffffff800086c7:	48 8b 05 12 07 0e 00 	mov    0xe0712(%rip),%rax        # ffffffff800e8de0 <framebuffer>
        ft_ctx = flanterm_fb_init(
ffffffff800086ce:	48 8b 58 18          	mov    0x18(%rax),%rbx
            (volatile uint32_t*)framebuffer->address, framebuffer->width, framebuffer->height, framebuffer->pitch,
ffffffff800086d2:	48 8b 05 07 07 0e 00 	mov    0xe0707(%rip),%rax        # ffffffff800e8de0 <framebuffer>
        ft_ctx = flanterm_fb_init(
ffffffff800086d9:	4c 8b 58 10          	mov    0x10(%rax),%r11
            (volatile uint32_t*)framebuffer->address, framebuffer->width, framebuffer->height, framebuffer->pitch,
ffffffff800086dd:	48 8b 05 fc 06 0e 00 	mov    0xe06fc(%rip),%rax        # ffffffff800e8de0 <framebuffer>
        ft_ctx = flanterm_fb_init(
ffffffff800086e4:	48 8b 50 08          	mov    0x8(%rax),%rdx
            (volatile uint32_t*)framebuffer->address, framebuffer->width, framebuffer->height, framebuffer->pitch,
ffffffff800086e8:	48 8b 05 f1 06 0e 00 	mov    0xe06f1(%rip),%rax        # ffffffff800e8de0 <framebuffer>
ffffffff800086ef:	48 8b 00             	mov    (%rax),%rax
        ft_ctx = flanterm_fb_init(
ffffffff800086f2:	6a 00                	push   $0x0
ffffffff800086f4:	6a 00                	push   $0x0
ffffffff800086f6:	6a 00                	push   $0x0
ffffffff800086f8:	6a 01                	push   $0x1
ffffffff800086fa:	6a 00                	push   $0x0
ffffffff800086fc:	6a 00                	push   $0x0
ffffffff800086fe:	6a 00                	push   $0x0
ffffffff80008700:	6a 00                	push   $0x0
ffffffff80008702:	6a 00                	push   $0x0
ffffffff80008704:	6a 00                	push   $0x0
ffffffff80008706:	6a 00                	push   $0x0
ffffffff80008708:	6a 00                	push   $0x0
ffffffff8000870a:	6a 00                	push   $0x0
ffffffff8000870c:	6a 00                	push   $0x0
ffffffff8000870e:	41 52                	push   %r10
ffffffff80008710:	41 51                	push   %r9
ffffffff80008712:	41 50                	push   %r8
ffffffff80008714:	57                   	push   %rdi
ffffffff80008715:	56                   	push   %rsi
ffffffff80008716:	51                   	push   %rcx
ffffffff80008717:	49 89 d9             	mov    %rbx,%r9
ffffffff8000871a:	4d 89 d8             	mov    %r11,%r8
ffffffff8000871d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80008720:	48 89 c2             	mov    %rax,%rdx
ffffffff80008723:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80008728:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8000872d:	e8 50 90 ff ff       	call   ffffffff80001782 <flanterm_fb_init>
ffffffff80008732:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
ffffffff80008739:	48 89 05 b0 06 0e 00 	mov    %rax,0xe06b0(%rip)        # ffffffff800e8df0 <ft_ctx>
            NULL, 0, 0, 1,
            0, 0,
            0
        );

        printf("Welcome to Ampersand: Terminal Mode. Version 1.0-dev\n");
ffffffff80008740:	48 8d 05 21 5e 00 00 	lea    0x5e21(%rip),%rax        # ffffffff8000e568 <font8+0x468>
ffffffff80008747:	48 89 c7             	mov    %rax,%rdi
ffffffff8000874a:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8000874f:	e8 a0 f7 ff ff       	call   ffffffff80007ef4 <printf>
        printf("starting...\n");
ffffffff80008754:	48 8d 05 43 5e 00 00 	lea    0x5e43(%rip),%rax        # ffffffff8000e59e <font8+0x49e>
ffffffff8000875b:	48 89 c7             	mov    %rax,%rdi
ffffffff8000875e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008763:	e8 8c f7 ff ff       	call   ffffffff80007ef4 <printf>
        printf("intitializing paging...\n");
ffffffff80008768:	48 8d 05 3c 5e 00 00 	lea    0x5e3c(%rip),%rax        # ffffffff8000e5ab <font8+0x4ab>
ffffffff8000876f:	48 89 c7             	mov    %rax,%rdi
ffffffff80008772:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008777:	e8 78 f7 ff ff       	call   ffffffff80007ef4 <printf>
        printf("hhdm: %x", hhdm->offset);
ffffffff8000877c:	48 8b 05 65 06 0e 00 	mov    0xe0665(%rip),%rax        # ffffffff800e8de8 <hhdm>
ffffffff80008783:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008787:	48 89 c6             	mov    %rax,%rsi
ffffffff8000878a:	48 8d 05 33 5e 00 00 	lea    0x5e33(%rip),%rax        # ffffffff8000e5c4 <font8+0x4c4>
ffffffff80008791:	48 89 c7             	mov    %rax,%rdi
ffffffff80008794:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008799:	e8 56 f7 ff ff       	call   ffffffff80007ef4 <printf>
        pfbmp_init();
ffffffff8000879e:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800087a3:	e8 35 09 00 00       	call   ffffffff800090dd <pfbmp_init>
        idt_init();
ffffffff800087a8:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800087ad:	e8 30 f4 ff ff       	call   ffffffff80007be2 <idt_init>
        printf("PFA done.\n");
ffffffff800087b2:	48 8d 05 14 5e 00 00 	lea    0x5e14(%rip),%rax        # ffffffff8000e5cd <font8+0x4cd>
ffffffff800087b9:	48 89 c7             	mov    %rax,%rdi
ffffffff800087bc:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800087c1:	e8 2e f7 ff ff       	call   ffffffff80007ef4 <printf>
        pgsetup();
ffffffff800087c6:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800087cb:	e8 82 05 00 00       	call   ffffffff80008d52 <pgsetup>
        printf("paging enabled");
ffffffff800087d0:	48 8d 05 01 5e 00 00 	lea    0x5e01(%rip),%rax        # ffffffff8000e5d8 <font8+0x4d8>
ffffffff800087d7:	48 89 c7             	mov    %rax,%rdi
ffffffff800087da:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800087df:	e8 10 f7 ff ff       	call   ffffffff80007ef4 <printf>
    }
    // We're done, just hang... 
    hcf();
ffffffff800087e4:	e8 d2 fc ff ff       	call   ffffffff800084bb <hcf>
}
ffffffff800087e9:	90                   	nop
ffffffff800087ea:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff800087ee:	c9                   	leave  
ffffffff800087ef:	c3                   	ret    

ffffffff800087f0 <map_kernel>:
#define virt_to_phys(addr) ((uint64_t)(addr) - hhdm_offset)

#define pte_getaddr(pte) ((pte) & PAGE_FRAME)

static void map_kernel()
{
ffffffff800087f0:	f3 0f 1e fa          	endbr64 
ffffffff800087f4:	55                   	push   %rbp
ffffffff800087f5:	48 89 e5             	mov    %rsp,%rbp
ffffffff800087f8:	48 83 ec 60          	sub    $0x60,%rsp
    uint64_t paddr = kernaddress_req.response->physical_base;
ffffffff800087fc:	48 8b 05 a5 91 00 00 	mov    0x91a5(%rip),%rax        # ffffffff800119a8 <kernaddress_req+0x28>
ffffffff80008803:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008807:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    uint64_t vaddr = kernaddress_req.response->virtual_base;
ffffffff8000880b:	48 8b 05 96 91 00 00 	mov    0x9196(%rip),%rax        # ffffffff800119a8 <kernaddress_req+0x28>
ffffffff80008812:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80008816:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    uint64_t _text_start = ALIGN_DOWN((uint64_t)&text_start, PAGE_SIZE);
ffffffff8000881a:	48 8d 05 df 77 ff ff 	lea    -0x8821(%rip),%rax        # ffffffff80000000 <bump_alloc>
ffffffff80008821:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80008827:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    uint64_t _text_end = ALIGN_UP((uint64_t)&text_end, PAGE_SIZE);
ffffffff8000882b:	48 8d 05 87 19 00 00 	lea    0x1987(%rip),%rax        # ffffffff8000a1b9 <text_end>
ffffffff80008832:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80008838:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8000883e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    uint64_t _rodata_start = ALIGN_DOWN((uint64_t)&rodata_start, PAGE_SIZE);
ffffffff80008842:	48 8d 05 b7 27 00 00 	lea    0x27b7(%rip),%rax        # ffffffff8000b000 <builtin_font>
ffffffff80008849:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8000884f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    uint64_t _rodata_end = ALIGN_UP((uint64_t)&rodata_end, PAGE_SIZE);
ffffffff80008853:	48 8d 05 f6 5e 00 00 	lea    0x5ef6(%rip),%rax        # ffffffff8000e750 <rodata_end>
ffffffff8000885a:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80008860:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80008866:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    uint64_t _data_start = ALIGN_DOWN((uint64_t)&data_start, PAGE_SIZE);
ffffffff8000886a:	48 8d 05 8f 87 00 00 	lea    0x878f(%rip),%rax        # ffffffff80011000 <exception_str>
ffffffff80008871:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80008877:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    uint64_t _data_end = ALIGN_UP((uint64_t)&data_end, PAGE_SIZE);
ffffffff8000887b:	48 8d 05 7e 91 00 00 	lea    0x917e(%rip),%rax        # ffffffff80011a00 <_DYNAMIC>
ffffffff80008882:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80008888:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8000888e:	48 89 45 a8          	mov    %rax,-0x58(%rbp)


    printf("Kernel Section Mapping\n");
ffffffff80008892:	48 8d 05 4f 5d 00 00 	lea    0x5d4f(%rip),%rax        # ffffffff8000e5e8 <font8+0x4e8>
ffffffff80008899:	48 89 c7             	mov    %rax,%rdi
ffffffff8000889c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800088a1:	e8 4e f6 ff ff       	call   ffffffff80007ef4 <printf>
    printf("Start: Data %x, Rodata %x, Text %x\n", _data_start, _rodata_start, _text_start);
ffffffff800088a6:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800088aa:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff800088ae:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff800088b2:	48 89 c6             	mov    %rax,%rsi
ffffffff800088b5:	48 8d 05 44 5d 00 00 	lea    0x5d44(%rip),%rax        # ffffffff8000e600 <font8+0x500>
ffffffff800088bc:	48 89 c7             	mov    %rax,%rdi
ffffffff800088bf:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800088c4:	e8 2b f6 ff ff       	call   ffffffff80007ef4 <printf>
    printf("End: Data %x, Rodata %x, Text %x\n", _data_end, _rodata_end, _text_end);
ffffffff800088c9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800088cd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff800088d1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800088d5:	48 89 c6             	mov    %rax,%rsi
ffffffff800088d8:	48 8d 05 49 5d 00 00 	lea    0x5d49(%rip),%rax        # ffffffff8000e628 <font8+0x528>
ffffffff800088df:	48 89 c7             	mov    %rax,%rdi
ffffffff800088e2:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800088e7:	e8 08 f6 ff ff       	call   ffffffff80007ef4 <printf>

    for(uint64_t text = _text_start; text < _text_end; text += PAGE_SIZE)
ffffffff800088ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800088f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800088f4:	eb 5c                	jmp    ffffffff80008952 <map_kernel+0x162>
    {
        map(text, text - vaddr + paddr, PAGE_PRESENT | PAGE_USER);
ffffffff800088f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800088fa:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
ffffffff800088fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80008901:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008905:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80008909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000890d:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80008912:	48 89 ce             	mov    %rcx,%rsi
ffffffff80008915:	48 89 c7             	mov    %rax,%rdi
ffffffff80008918:	e8 bf 04 00 00       	call   ffffffff80008ddc <map>
        printf(" t mapped %x to %x\n", text, text - vaddr + paddr);
ffffffff8000891d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008921:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
ffffffff80008925:	48 89 c2             	mov    %rax,%rdx
ffffffff80008928:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000892c:	48 01 c2             	add    %rax,%rdx
ffffffff8000892f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008933:	48 89 c6             	mov    %rax,%rsi
ffffffff80008936:	48 8d 05 0d 5d 00 00 	lea    0x5d0d(%rip),%rax        # ffffffff8000e64a <font8+0x54a>
ffffffff8000893d:	48 89 c7             	mov    %rax,%rdi
ffffffff80008940:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008945:	e8 aa f5 ff ff       	call   ffffffff80007ef4 <printf>
    for(uint64_t text = _text_start; text < _text_end; text += PAGE_SIZE)
ffffffff8000894a:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80008951:	00 
ffffffff80008952:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008956:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8000895a:	72 9a                	jb     ffffffff800088f6 <map_kernel+0x106>
    }
    for(uint64_t rodata = _rodata_start; rodata < _rodata_end; rodata += PAGE_SIZE)
ffffffff8000895c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80008960:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80008964:	eb 61                	jmp    ffffffff800089c7 <map_kernel+0x1d7>
    {
        map(rodata, rodata - vaddr + paddr, PAGE_PRESENT | PAGE_NX | PAGE_USER);
ffffffff80008966:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000896a:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
ffffffff8000896e:	48 89 c2             	mov    %rax,%rdx
ffffffff80008971:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008975:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80008979:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000897d:	48 ba 05 00 00 00 00 	movabs $0x8000000000000005,%rdx
ffffffff80008984:	00 00 80 
ffffffff80008987:	48 89 ce             	mov    %rcx,%rsi
ffffffff8000898a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000898d:	e8 4a 04 00 00       	call   ffffffff80008ddc <map>
        printf(" rd mapped %x to %x\n", rodata, rodata - vaddr + paddr);
ffffffff80008992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008996:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
ffffffff8000899a:	48 89 c2             	mov    %rax,%rdx
ffffffff8000899d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800089a1:	48 01 c2             	add    %rax,%rdx
ffffffff800089a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800089a8:	48 89 c6             	mov    %rax,%rsi
ffffffff800089ab:	48 8d 05 ac 5c 00 00 	lea    0x5cac(%rip),%rax        # ffffffff8000e65e <font8+0x55e>
ffffffff800089b2:	48 89 c7             	mov    %rax,%rdi
ffffffff800089b5:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800089ba:	e8 35 f5 ff ff       	call   ffffffff80007ef4 <printf>
    for(uint64_t rodata = _rodata_start; rodata < _rodata_end; rodata += PAGE_SIZE)
ffffffff800089bf:	48 81 45 f0 00 10 00 	addq   $0x1000,-0x10(%rbp)
ffffffff800089c6:	00 
ffffffff800089c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800089cb:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff800089cf:	72 95                	jb     ffffffff80008966 <map_kernel+0x176>
    }
    for(uint64_t data = _data_start; data < _data_end; data += PAGE_SIZE)
ffffffff800089d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff800089d5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800089d9:	eb 61                	jmp    ffffffff80008a3c <map_kernel+0x24c>
    {
        map(data, data - vaddr + paddr, PAGE_PRESENT | PAGE_NX | PAGE_RW | PAGE_USER);
ffffffff800089db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800089df:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
ffffffff800089e3:	48 89 c2             	mov    %rax,%rdx
ffffffff800089e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800089ea:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff800089ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800089f2:	48 ba 07 00 00 00 00 	movabs $0x8000000000000007,%rdx
ffffffff800089f9:	00 00 80 
ffffffff800089fc:	48 89 ce             	mov    %rcx,%rsi
ffffffff800089ff:	48 89 c7             	mov    %rax,%rdi
ffffffff80008a02:	e8 d5 03 00 00       	call   ffffffff80008ddc <map>
        printf(" d mapped %x to %x\n", data, data - vaddr + paddr);
ffffffff80008a07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008a0b:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
ffffffff80008a0f:	48 89 c2             	mov    %rax,%rdx
ffffffff80008a12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008a16:	48 01 c2             	add    %rax,%rdx
ffffffff80008a19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008a1d:	48 89 c6             	mov    %rax,%rsi
ffffffff80008a20:	48 8d 05 4c 5c 00 00 	lea    0x5c4c(%rip),%rax        # ffffffff8000e673 <font8+0x573>
ffffffff80008a27:	48 89 c7             	mov    %rax,%rdi
ffffffff80008a2a:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008a2f:	e8 c0 f4 ff ff       	call   ffffffff80007ef4 <printf>
    for(uint64_t data = _data_start; data < _data_end; data += PAGE_SIZE)
ffffffff80008a34:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
ffffffff80008a3b:	00 
ffffffff80008a3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008a40:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80008a44:	72 95                	jb     ffffffff800089db <map_kernel+0x1eb>
    }

    printf("mapped kernel");
ffffffff80008a46:	48 8d 05 3a 5c 00 00 	lea    0x5c3a(%rip),%rax        # ffffffff8000e687 <font8+0x587>
ffffffff80008a4d:	48 89 c7             	mov    %rax,%rdi
ffffffff80008a50:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008a55:	e8 9a f4 ff ff       	call   ffffffff80007ef4 <printf>
}
ffffffff80008a5a:	90                   	nop
ffffffff80008a5b:	c9                   	leave  
ffffffff80008a5c:	c3                   	ret    

ffffffff80008a5d <map_btldr>:

void map_btldr()
{
ffffffff80008a5d:	f3 0f 1e fa          	endbr64 
ffffffff80008a61:	55                   	push   %rbp
ffffffff80008a62:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008a65:	48 83 ec 30          	sub    $0x30,%rsp
    printf("mapping the bootloader\n");
ffffffff80008a69:	48 8d 05 25 5c 00 00 	lea    0x5c25(%rip),%rax        # ffffffff8000e695 <font8+0x595>
ffffffff80008a70:	48 89 c7             	mov    %rax,%rdi
ffffffff80008a73:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008a78:	e8 77 f4 ff ff       	call   ffffffff80007ef4 <printf>

    for(uint8_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80008a7d:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80008a81:	e9 b3 00 00 00       	jmp    ffffffff80008b39 <map_btldr+0xdc>
    {
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80008a86:	48 8b 05 5b 8f 00 00 	mov    0x8f5b(%rip),%rax        # ffffffff800119e8 <memmap+0x28>
ffffffff80008a8d:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80008a91:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff80008a95:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80008a99:	48 01 d0             	add    %rdx,%rax
ffffffff80008a9c:	48 8b 00             	mov    (%rax),%rax
ffffffff80008a9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if (entry->type == LIMINE_MEMMAP_BOOTLOADER_RECLAIMABLE) {
ffffffff80008aa3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008aa7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80008aab:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80008aaf:	75 7e                	jne    ffffffff80008b2f <map_btldr+0xd2>
            uint64_t vaddr = (uint64_t)phys_to_virt(entry->base);
ffffffff80008ab1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008ab5:	48 8b 10             	mov    (%rax),%rdx
ffffffff80008ab8:	48 8b 05 61 13 0e 00 	mov    0xe1361(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008abf:	48 01 d0             	add    %rdx,%rax
ffffffff80008ac2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            uint64_t paddr = entry->base;
ffffffff80008ac6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008aca:	48 8b 00             	mov    (%rax),%rax
ffffffff80008acd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            uint64_t pages = entry->length / PAGE_SIZE;
ffffffff80008ad1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008ad5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008ad9:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80008add:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            for (uint64_t page = 0; page < pages; page++) {
ffffffff80008ae1:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80008ae8:	00 
ffffffff80008ae9:	eb 3a                	jmp    ffffffff80008b25 <map_btldr+0xc8>
                map(vaddr + (page * PAGE_SIZE), paddr + (page * PAGE_SIZE), PAGE_PRESENT | PAGE_RW | PAGE_USER);
ffffffff80008aeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008aef:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80008af3:	48 89 c2             	mov    %rax,%rdx
ffffffff80008af6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008afa:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80008afe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008b02:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80008b06:	48 89 c2             	mov    %rax,%rdx
ffffffff80008b09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008b0d:	48 01 d0             	add    %rdx,%rax
ffffffff80008b10:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80008b15:	48 89 ce             	mov    %rcx,%rsi
ffffffff80008b18:	48 89 c7             	mov    %rax,%rdi
ffffffff80008b1b:	e8 bc 02 00 00       	call   ffffffff80008ddc <map>
            for (uint64_t page = 0; page < pages; page++) {
ffffffff80008b20:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80008b25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008b29:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff80008b2d:	72 bc                	jb     ffffffff80008aeb <map_btldr+0x8e>
    for(uint8_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80008b2f:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff80008b33:	83 c0 01             	add    $0x1,%eax
ffffffff80008b36:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80008b39:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
ffffffff80008b3d:	48 8b 05 a4 8e 00 00 	mov    0x8ea4(%rip),%rax        # ffffffff800119e8 <memmap+0x28>
ffffffff80008b44:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008b48:	48 39 c2             	cmp    %rax,%rdx
ffffffff80008b4b:	0f 82 35 ff ff ff    	jb     ffffffff80008a86 <map_btldr+0x29>
            }
        }
    }
}
ffffffff80008b51:	90                   	nop
ffffffff80008b52:	90                   	nop
ffffffff80008b53:	c9                   	leave  
ffffffff80008b54:	c3                   	ret    

ffffffff80008b55 <get_largest_base>:

uint64_t get_largest_base()
{
ffffffff80008b55:	f3 0f 1e fa          	endbr64 
ffffffff80008b59:	55                   	push   %rbp
ffffffff80008b5a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008b5d:	48 83 ec 20          	sub    $0x20,%rsp
    uint64_t high = 0;
ffffffff80008b61:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80008b68:	00 
    for (uint8_t i=0; i<memmap.response->entry_count; i++) {
ffffffff80008b69:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
ffffffff80008b6d:	eb 5d                	jmp    ffffffff80008bcc <get_largest_base+0x77>
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80008b6f:	48 8b 05 72 8e 00 00 	mov    0x8e72(%rip),%rax        # ffffffff800119e8 <memmap+0x28>
ffffffff80008b76:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80008b7a:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
ffffffff80008b7e:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80008b82:	48 01 d0             	add    %rdx,%rax
ffffffff80008b85:	48 8b 00             	mov    (%rax),%rax
ffffffff80008b88:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if (entry->type != LIMINE_MEMMAP_RESERVED) {
ffffffff80008b8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008b90:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80008b94:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80008b98:	74 28                	je     ffffffff80008bc2 <get_largest_base+0x6d>
            uint64_t this_high = entry->base + entry->length;
ffffffff80008b9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008b9e:	48 8b 10             	mov    (%rax),%rdx
ffffffff80008ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008ba5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008ba9:	48 01 d0             	add    %rdx,%rax
ffffffff80008bac:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            if(this_high > high) high = this_high;
ffffffff80008bb0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008bb4:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
ffffffff80008bb8:	76 08                	jbe    ffffffff80008bc2 <get_largest_base+0x6d>
ffffffff80008bba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008bbe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    for (uint8_t i=0; i<memmap.response->entry_count; i++) {
ffffffff80008bc2:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
ffffffff80008bc6:	83 c0 01             	add    $0x1,%eax
ffffffff80008bc9:	88 45 f7             	mov    %al,-0x9(%rbp)
ffffffff80008bcc:	0f b6 55 f7          	movzbl -0x9(%rbp),%edx
ffffffff80008bd0:	48 8b 05 11 8e 00 00 	mov    0x8e11(%rip),%rax        # ffffffff800119e8 <memmap+0x28>
ffffffff80008bd7:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008bdb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80008bde:	72 8f                	jb     ffffffff80008b6f <get_largest_base+0x1a>
        }
    }
    return high;
ffffffff80008be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff80008be4:	c9                   	leave  
ffffffff80008be5:	c3                   	ret    

ffffffff80008be6 <map_hhdm>:

void map_hhdm()
{
ffffffff80008be6:	f3 0f 1e fa          	endbr64 
ffffffff80008bea:	55                   	push   %rbp
ffffffff80008beb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008bee:	48 83 ec 20          	sub    $0x20,%rsp
    uint64_t base = hhdm_offset;
ffffffff80008bf2:	48 8b 05 27 12 0e 00 	mov    0xe1227(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008bf9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    uint64_t high = get_largest_base;
ffffffff80008bfd:	48 8d 05 51 ff ff ff 	lea    -0xaf(%rip),%rax        # ffffffff80008b55 <get_largest_base>
ffffffff80008c04:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    printf("mapping hhdm memory\n");
ffffffff80008c08:	48 8d 05 9e 5a 00 00 	lea    0x5a9e(%rip),%rax        # ffffffff8000e6ad <font8+0x5ad>
ffffffff80008c0f:	48 89 c7             	mov    %rax,%rdi
ffffffff80008c12:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008c17:	e8 d8 f2 ff ff       	call   ffffffff80007ef4 <printf>
    for (uint64_t i = 0; i < high; i += PAGE_SIZE) {
ffffffff80008c1c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80008c23:	00 
ffffffff80008c24:	eb 28                	jmp    ffffffff80008c4e <map_hhdm+0x68>
        map(base + i, i, PAGE_PRESENT | PAGE_RW );
ffffffff80008c26:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80008c2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008c2e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80008c32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008c36:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80008c3b:	48 89 c6             	mov    %rax,%rsi
ffffffff80008c3e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80008c41:	e8 96 01 00 00       	call   ffffffff80008ddc <map>
    for (uint64_t i = 0; i < high; i += PAGE_SIZE) {
ffffffff80008c46:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80008c4d:	00 
ffffffff80008c4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008c52:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80008c56:	72 ce                	jb     ffffffff80008c26 <map_hhdm+0x40>
    }
}
ffffffff80008c58:	90                   	nop
ffffffff80008c59:	90                   	nop
ffffffff80008c5a:	c9                   	leave  
ffffffff80008c5b:	c3                   	ret    

ffffffff80008c5c <map_fdmem>:

void map_fdmem()
{
ffffffff80008c5c:	f3 0f 1e fa          	endbr64 
ffffffff80008c60:	55                   	push   %rbp
ffffffff80008c61:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008c64:	48 83 ec 30          	sub    $0x30,%rsp
    printf("mapping found mem\n");
ffffffff80008c68:	48 8d 05 53 5a 00 00 	lea    0x5a53(%rip),%rax        # ffffffff8000e6c2 <font8+0x5c2>
ffffffff80008c6f:	48 89 c7             	mov    %rax,%rdi
ffffffff80008c72:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008c77:	e8 78 f2 ff ff       	call   ffffffff80007ef4 <printf>
    for(size_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80008c7c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80008c83:	00 
ffffffff80008c84:	e9 b0 00 00 00       	jmp    ffffffff80008d39 <map_fdmem+0xdd>
    {
        struct limine_memmap_entry *entry = memmap.response->entries[i];
ffffffff80008c89:	48 8b 05 58 8d 00 00 	mov    0x8d58(%rip),%rax        # ffffffff800119e8 <memmap+0x28>
ffffffff80008c90:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80008c94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008c98:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80008c9c:	48 01 d0             	add    %rdx,%rax
ffffffff80008c9f:	48 8b 00             	mov    (%rax),%rax
ffffffff80008ca2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

        uint64_t vaddr = (uint64_t)phys_to_virt(entry->base);
ffffffff80008ca6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008caa:	48 8b 10             	mov    (%rax),%rdx
ffffffff80008cad:	48 8b 05 6c 11 0e 00 	mov    0xe116c(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008cb4:	48 01 d0             	add    %rdx,%rax
ffffffff80008cb7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        uint64_t paddr = entry->base;
ffffffff80008cbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008cbf:	48 8b 00             	mov    (%rax),%rax
ffffffff80008cc2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        uint64_t pages = entry->length / PAGE_SIZE;
ffffffff80008cc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008cca:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008cce:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80008cd2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

        if (entry->type != LIMINE_MEMMAP_USABLE) {
ffffffff80008cd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008cda:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80008cde:	48 85 c0             	test   %rax,%rax
ffffffff80008ce1:	75 50                	jne    ffffffff80008d33 <map_fdmem+0xd7>
            continue;
        }

        for (uint64_t page = 0; page < pages; page++) {
ffffffff80008ce3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80008cea:	00 
ffffffff80008ceb:	eb 3a                	jmp    ffffffff80008d27 <map_fdmem+0xcb>
            map(vaddr + (page * PAGE_SIZE), paddr + (page * PAGE_SIZE), PAGE_PRESENT | PAGE_RW | PAGE_USER);
ffffffff80008ced:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008cf1:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80008cf5:	48 89 c2             	mov    %rax,%rdx
ffffffff80008cf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80008cfc:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80008d00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008d04:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80008d08:	48 89 c2             	mov    %rax,%rdx
ffffffff80008d0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80008d0f:	48 01 d0             	add    %rdx,%rax
ffffffff80008d12:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80008d17:	48 89 ce             	mov    %rcx,%rsi
ffffffff80008d1a:	48 89 c7             	mov    %rax,%rdi
ffffffff80008d1d:	e8 ba 00 00 00       	call   ffffffff80008ddc <map>
        for (uint64_t page = 0; page < pages; page++) {
ffffffff80008d22:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80008d27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008d2b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff80008d2f:	72 bc                	jb     ffffffff80008ced <map_fdmem+0x91>
ffffffff80008d31:	eb 01                	jmp    ffffffff80008d34 <map_fdmem+0xd8>
            continue;
ffffffff80008d33:	90                   	nop
    for(size_t i = 0; i < memmap.response->entry_count; i++)
ffffffff80008d34:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80008d39:	48 8b 05 a8 8c 00 00 	mov    0x8ca8(%rip),%rax        # ffffffff800119e8 <memmap+0x28>
ffffffff80008d40:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008d44:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80008d48:	0f 82 3b ff ff ff    	jb     ffffffff80008c89 <map_fdmem+0x2d>
        }
    }
}
ffffffff80008d4e:	90                   	nop
ffffffff80008d4f:	90                   	nop
ffffffff80008d50:	c9                   	leave  
ffffffff80008d51:	c3                   	ret    

ffffffff80008d52 <pgsetup>:

extern void *memset(void *s, int c, size_t n);

void pgsetup()
{
ffffffff80008d52:	f3 0f 1e fa          	endbr64 
ffffffff80008d56:	55                   	push   %rbp
ffffffff80008d57:	48 89 e5             	mov    %rsp,%rbp
    hhdm_offset = hhdm->offset;
ffffffff80008d5a:	48 8b 05 87 00 0e 00 	mov    0xe0087(%rip),%rax        # ffffffff800e8de8 <hhdm>
ffffffff80008d61:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80008d65:	48 89 05 b4 10 0e 00 	mov    %rax,0xe10b4(%rip)        # ffffffff800e9e20 <hhdm_offset>
    page_dir_ptr_tab = (uint64_t *)kalloc_frame();
ffffffff80008d6c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008d71:	e8 7b 04 00 00       	call   ffffffff800091f1 <kalloc_frame>
ffffffff80008d76:	48 89 05 9b 10 0e 00 	mov    %rax,0xe109b(%rip)        # ffffffff800e9e18 <page_dir_ptr_tab>
    memset(page_dir_ptr_tab, 0, 512);
ffffffff80008d7d:	48 8b 05 94 10 0e 00 	mov    0xe1094(%rip),%rax        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff80008d84:	ba 00 02 00 00       	mov    $0x200,%edx
ffffffff80008d89:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80008d8e:	48 89 c7             	mov    %rax,%rdi
ffffffff80008d91:	e8 90 f5 ff ff       	call   ffffffff80008326 <memset>
    map_btldr();
ffffffff80008d96:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008d9b:	e8 bd fc ff ff       	call   ffffffff80008a5d <map_btldr>
    map_fdmem();
ffffffff80008da0:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008da5:	e8 b2 fe ff ff       	call   ffffffff80008c5c <map_fdmem>
    map_hhdm();
ffffffff80008daa:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008daf:	e8 32 fe ff ff       	call   ffffffff80008be6 <map_hhdm>
    map_kernel();
ffffffff80008db4:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008db9:	e8 32 fa ff ff       	call   ffffffff800087f0 <map_kernel>

    load_pdpt();
ffffffff80008dbe:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008dc3:	e8 98 02 00 00       	call   ffffffff80009060 <load_pdpt>
}
ffffffff80008dc8:	90                   	nop
ffffffff80008dc9:	5d                   	pop    %rbp
ffffffff80008dca:	c3                   	ret    

ffffffff80008dcb <flush_tlb>:

static void flush_tlb() {
ffffffff80008dcb:	f3 0f 1e fa          	endbr64 
ffffffff80008dcf:	55                   	push   %rbp
ffffffff80008dd0:	48 89 e5             	mov    %rsp,%rbp
    asm volatile("mov %cr3, %rax; mov %rax, %cr3");
ffffffff80008dd3:	0f 20 d8             	mov    %cr3,%rax
ffffffff80008dd6:	0f 22 d8             	mov    %rax,%cr3
}
ffffffff80008dd9:	90                   	nop
ffffffff80008dda:	5d                   	pop    %rbp
ffffffff80008ddb:	c3                   	ret    

ffffffff80008ddc <map>:


void map(uint64_t vaddr, uint64_t paddr, uint64_t flags)
{
ffffffff80008ddc:	f3 0f 1e fa          	endbr64 
ffffffff80008de0:	55                   	push   %rbp
ffffffff80008de1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008de4:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80008de8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80008dec:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80008df0:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    uint16_t pml4_index = (vaddr >> 39) & 0x1FF;
ffffffff80008df4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80008df8:	48 c1 e8 27          	shr    $0x27,%rax
ffffffff80008dfc:	66 25 ff 01          	and    $0x1ff,%ax
ffffffff80008e00:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
    uint16_t pml3_index = (vaddr >> 30) & 0x1FF;
ffffffff80008e04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80008e08:	48 c1 e8 1e          	shr    $0x1e,%rax
ffffffff80008e0c:	66 25 ff 01          	and    $0x1ff,%ax
ffffffff80008e10:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
    uint16_t pml2_index = (vaddr >> 21) & 0x1FF;
ffffffff80008e14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80008e18:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80008e1c:	66 25 ff 01          	and    $0x1ff,%ax
ffffffff80008e20:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
    uint16_t pml1_index = (vaddr >> 12) & 0x1FF;
ffffffff80008e24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80008e28:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80008e2c:	66 25 ff 01          	and    $0x1ff,%ax
ffffffff80008e30:	66 89 45 e0          	mov    %ax,-0x20(%rbp)

    uint64_t *pml3 = NULL;
ffffffff80008e34:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80008e3b:	00 
    if (page_dir_ptr_tab[pml4_index] & PAGE_PRESENT) {
ffffffff80008e3c:	48 8b 15 d5 0f 0e 00 	mov    0xe0fd5(%rip),%rdx        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff80008e43:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
ffffffff80008e47:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80008e4b:	48 01 d0             	add    %rdx,%rax
ffffffff80008e4e:	48 8b 00             	mov    (%rax),%rax
ffffffff80008e51:	83 e0 01             	and    $0x1,%eax
ffffffff80008e54:	48 85 c0             	test   %rax,%rax
ffffffff80008e57:	74 32                	je     ffffffff80008e8b <map+0xaf>
        pml3 = phys_to_virt(PTE_GET_ADDR(page_dir_ptr_tab[pml4_index]));
ffffffff80008e59:	48 8b 15 b8 0f 0e 00 	mov    0xe0fb8(%rip),%rdx        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff80008e60:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
ffffffff80008e64:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80008e68:	48 01 d0             	add    %rdx,%rax
ffffffff80008e6b:	48 8b 00             	mov    (%rax),%rax
ffffffff80008e6e:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80008e75:	ff 0f 00 
ffffffff80008e78:	48 21 c2             	and    %rax,%rdx
ffffffff80008e7b:	48 8b 05 9e 0f 0e 00 	mov    0xe0f9e(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008e82:	48 01 d0             	add    %rdx,%rax
ffffffff80008e85:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80008e89:	eb 38                	jmp    ffffffff80008ec3 <map+0xe7>
    } else {
        pml3 = (uint64_t *)kalloc_frame(); 
ffffffff80008e8b:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008e90:	e8 5c 03 00 00       	call   ffffffff800091f1 <kalloc_frame>
ffffffff80008e95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        page_dir_ptr_tab[pml4_index] = virt_to_phys(pml3) | PAGE_PRESENT | PAGE_RW;
ffffffff80008e99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008e9d:	48 8b 0d 7c 0f 0e 00 	mov    0xe0f7c(%rip),%rcx        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008ea4:	48 29 c8             	sub    %rcx,%rax
ffffffff80008ea7:	48 89 c2             	mov    %rax,%rdx
ffffffff80008eaa:	48 8b 0d 67 0f 0e 00 	mov    0xe0f67(%rip),%rcx        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff80008eb1:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
ffffffff80008eb5:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80008eb9:	48 01 c8             	add    %rcx,%rax
ffffffff80008ebc:	48 83 ca 03          	or     $0x3,%rdx
ffffffff80008ec0:	48 89 10             	mov    %rdx,(%rax)
    }

    uint64_t *pml2 = NULL;
ffffffff80008ec3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80008eca:	00 
    if (pml3[pml3_index] & PAGE_PRESENT) {
ffffffff80008ecb:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80008ecf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80008ed6:	00 
ffffffff80008ed7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008edb:	48 01 d0             	add    %rdx,%rax
ffffffff80008ede:	48 8b 00             	mov    (%rax),%rax
ffffffff80008ee1:	83 e0 01             	and    $0x1,%eax
ffffffff80008ee4:	48 85 c0             	test   %rax,%rax
ffffffff80008ee7:	74 33                	je     ffffffff80008f1c <map+0x140>
        pml2 = phys_to_virt(PTE_GET_ADDR(pml3[pml3_index]));
ffffffff80008ee9:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80008eed:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80008ef4:	00 
ffffffff80008ef5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008ef9:	48 01 d0             	add    %rdx,%rax
ffffffff80008efc:	48 8b 00             	mov    (%rax),%rax
ffffffff80008eff:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80008f06:	ff 0f 00 
ffffffff80008f09:	48 21 c2             	and    %rax,%rdx
ffffffff80008f0c:	48 8b 05 0d 0f 0e 00 	mov    0xe0f0d(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008f13:	48 01 d0             	add    %rdx,%rax
ffffffff80008f16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80008f1a:	eb 39                	jmp    ffffffff80008f55 <map+0x179>
    } else {
        pml2 = (uint64_t *)kalloc_frame(); 
ffffffff80008f1c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008f21:	e8 cb 02 00 00       	call   ffffffff800091f1 <kalloc_frame>
ffffffff80008f26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        pml3[pml3_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
ffffffff80008f2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008f2e:	48 8b 0d eb 0e 0e 00 	mov    0xe0eeb(%rip),%rcx        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008f35:	48 29 c8             	sub    %rcx,%rax
ffffffff80008f38:	48 89 c2             	mov    %rax,%rdx
ffffffff80008f3b:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
ffffffff80008f3f:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80008f46:	00 
ffffffff80008f47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80008f4b:	48 01 c8             	add    %rcx,%rax
ffffffff80008f4e:	48 83 ca 03          	or     $0x3,%rdx
ffffffff80008f52:	48 89 10             	mov    %rdx,(%rax)
    }

    uint64_t *pml1 = NULL;
ffffffff80008f55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80008f5c:	00 
    if (pml2[pml2_index] & PAGE_PRESENT) {
ffffffff80008f5d:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
ffffffff80008f61:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80008f68:	00 
ffffffff80008f69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008f6d:	48 01 d0             	add    %rdx,%rax
ffffffff80008f70:	48 8b 00             	mov    (%rax),%rax
ffffffff80008f73:	83 e0 01             	and    $0x1,%eax
ffffffff80008f76:	48 85 c0             	test   %rax,%rax
ffffffff80008f79:	74 33                	je     ffffffff80008fae <map+0x1d2>
        pml1 = phys_to_virt(PTE_GET_ADDR(pml2[pml2_index]));
ffffffff80008f7b:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
ffffffff80008f7f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80008f86:	00 
ffffffff80008f87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008f8b:	48 01 d0             	add    %rdx,%rax
ffffffff80008f8e:	48 8b 00             	mov    (%rax),%rax
ffffffff80008f91:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80008f98:	ff 0f 00 
ffffffff80008f9b:	48 21 c2             	and    %rax,%rdx
ffffffff80008f9e:	48 8b 05 7b 0e 0e 00 	mov    0xe0e7b(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008fa5:	48 01 d0             	add    %rdx,%rax
ffffffff80008fa8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80008fac:	eb 39                	jmp    ffffffff80008fe7 <map+0x20b>
    } else {
        pml1 = (uint64_t *)kalloc_frame(); 
ffffffff80008fae:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80008fb3:	e8 39 02 00 00       	call   ffffffff800091f1 <kalloc_frame>
ffffffff80008fb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        pml2[pml2_index] = virt_to_phys(pml2) | PAGE_PRESENT | PAGE_RW;
ffffffff80008fbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008fc0:	48 8b 0d 59 0e 0e 00 	mov    0xe0e59(%rip),%rcx        # ffffffff800e9e20 <hhdm_offset>
ffffffff80008fc7:	48 29 c8             	sub    %rcx,%rax
ffffffff80008fca:	48 89 c2             	mov    %rax,%rdx
ffffffff80008fcd:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
ffffffff80008fd1:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff80008fd8:	00 
ffffffff80008fd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80008fdd:	48 01 c8             	add    %rcx,%rax
ffffffff80008fe0:	48 83 ca 03          	or     $0x3,%rdx
ffffffff80008fe4:	48 89 10             	mov    %rdx,(%rax)
    }

    uint64_t perm_mod = pml1[pml1_index] & PAGE_PRESENT;
ffffffff80008fe7:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
ffffffff80008feb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80008ff2:	00 
ffffffff80008ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80008ff7:	48 01 d0             	add    %rdx,%rax
ffffffff80008ffa:	48 8b 00             	mov    (%rax),%rax
ffffffff80008ffd:	83 e0 01             	and    $0x1,%eax
ffffffff80009000:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    pml1[pml1_index] = paddr | flags;
ffffffff80009004:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
ffffffff80009008:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8000900f:	00 
ffffffff80009010:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80009014:	48 01 c2             	add    %rax,%rdx
ffffffff80009017:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000901b:	48 0b 45 b8          	or     -0x48(%rbp),%rax
ffffffff8000901f:	48 89 02             	mov    %rax,(%rdx)

    if(hhdmm)
ffffffff80009022:	0f b6 05 e7 0d 0e 00 	movzbl 0xe0de7(%rip),%eax        # ffffffff800e9e10 <hhdmm>
ffffffff80009029:	84 c0                	test   %al,%al
ffffffff8000902b:	74 1f                	je     ffffffff8000904c <map+0x270>
        printf("mapping %x to %x\n", vaddr, paddr);
ffffffff8000902d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80009031:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80009035:	48 89 c6             	mov    %rax,%rsi
ffffffff80009038:	48 8d 05 96 56 00 00 	lea    0x5696(%rip),%rax        # ffffffff8000e6d5 <font8+0x5d5>
ffffffff8000903f:	48 89 c7             	mov    %rax,%rdi
ffffffff80009042:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80009047:	e8 a8 ee ff ff       	call   ffffffff80007ef4 <printf>

    if (perm_mod) {
ffffffff8000904c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80009051:	74 0a                	je     ffffffff8000905d <map+0x281>
        flush_tlb();
ffffffff80009053:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80009058:	e8 6e fd ff ff       	call   ffffffff80008dcb <flush_tlb>
    }
}
ffffffff8000905d:	90                   	nop
ffffffff8000905e:	c9                   	leave  
ffffffff8000905f:	c3                   	ret    

ffffffff80009060 <load_pdpt>:

void load_pdpt()
{
ffffffff80009060:	f3 0f 1e fa          	endbr64 
ffffffff80009064:	55                   	push   %rbp
ffffffff80009065:	48 89 e5             	mov    %rsp,%rbp
    printf("\nabt to load pdpt\n");
ffffffff80009068:	48 8d 05 78 56 00 00 	lea    0x5678(%rip),%rax        # ffffffff8000e6e7 <font8+0x5e7>
ffffffff8000906f:	48 89 c7             	mov    %rax,%rdi
ffffffff80009072:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80009077:	e8 78 ee ff ff       	call   ffffffff80007ef4 <printf>
    printf("PDPT: Virtual %x, Physical %x, HHDM: %x", (uint64_t)&page_dir_ptr_tab, virt_to_phys((uint64_t)&page_dir_ptr_tab), hhdm_offset);
ffffffff8000907c:	48 8b 05 9d 0d 0e 00 	mov    0xe0d9d(%rip),%rax        # ffffffff800e9e20 <hhdm_offset>
ffffffff80009083:	48 8d 15 8e 0d 0e 00 	lea    0xe0d8e(%rip),%rdx        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff8000908a:	48 8b 0d 8f 0d 0e 00 	mov    0xe0d8f(%rip),%rcx        # ffffffff800e9e20 <hhdm_offset>
ffffffff80009091:	48 29 ca             	sub    %rcx,%rdx
ffffffff80009094:	48 8d 35 7d 0d 0e 00 	lea    0xe0d7d(%rip),%rsi        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff8000909b:	48 89 c1             	mov    %rax,%rcx
ffffffff8000909e:	48 8d 05 5b 56 00 00 	lea    0x565b(%rip),%rax        # ffffffff8000e700 <font8+0x600>
ffffffff800090a5:	48 89 c7             	mov    %rax,%rdi
ffffffff800090a8:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800090ad:	e8 42 ee ff ff       	call   ffffffff80007ef4 <printf>
    asm volatile ("mov %0, %%cr3" :: "r" virt_to_phys(((uint64_t)&page_dir_ptr_tab)));
ffffffff800090b2:	48 8d 05 5f 0d 0e 00 	lea    0xe0d5f(%rip),%rax        # ffffffff800e9e18 <page_dir_ptr_tab>
ffffffff800090b9:	48 8b 15 60 0d 0e 00 	mov    0xe0d60(%rip),%rdx        # ffffffff800e9e20 <hhdm_offset>
ffffffff800090c0:	48 29 d0             	sub    %rdx,%rax
ffffffff800090c3:	0f 22 d8             	mov    %rax,%cr3
    printf("loaded pdpt\n");
ffffffff800090c6:	48 8d 05 5b 56 00 00 	lea    0x565b(%rip),%rax        # ffffffff8000e728 <font8+0x628>
ffffffff800090cd:	48 89 c7             	mov    %rax,%rdi
ffffffff800090d0:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800090d5:	e8 1a ee ff ff       	call   ffffffff80007ef4 <printf>
ffffffff800090da:	90                   	nop
ffffffff800090db:	5d                   	pop    %rbp
ffffffff800090dc:	c3                   	ret    

ffffffff800090dd <pfbmp_init>:
uint64_t pfbmp[PAGE_FRAME_NUM / (sizeof(uint64_t) * 8)]; 

extern uint64_t get_largest_base();

void pfbmp_init()
{
ffffffff800090dd:	f3 0f 1e fa          	endbr64 
ffffffff800090e1:	55                   	push   %rbp
ffffffff800090e2:	48 89 e5             	mov    %rsp,%rbp
ffffffff800090e5:	48 83 ec 10          	sub    $0x10,%rsp
    start_address = get_largest_base() + hhdm->offset;
ffffffff800090e9:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800090ee:	e8 62 fa ff ff       	call   ffffffff80008b55 <get_largest_base>
ffffffff800090f3:	48 89 c2             	mov    %rax,%rdx
ffffffff800090f6:	48 8b 05 eb fc 0d 00 	mov    0xdfceb(%rip),%rax        # ffffffff800e8de8 <hhdm>
ffffffff800090fd:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80009101:	48 01 d0             	add    %rdx,%rax
ffffffff80009104:	48 89 05 35 0d 10 00 	mov    %rax,0x100d35(%rip)        # ffffffff80109e40 <start_address>

    for(uint64_t i = 0; i < PAGE_FRAME_NUM / (sizeof(uint64_t) * 8); i++)
ffffffff8000910b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80009112:	00 
ffffffff80009113:	eb 20                	jmp    ffffffff80009135 <pfbmp_init+0x58>
    {
        pfbmp[i] = PF_FREE;
ffffffff80009115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80009119:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80009120:	00 
ffffffff80009121:	48 8d 05 18 0d 0e 00 	lea    0xe0d18(%rip),%rax        # ffffffff800e9e40 <pfbmp>
ffffffff80009128:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
ffffffff8000912f:	00 
    for(uint64_t i = 0; i < PAGE_FRAME_NUM / (sizeof(uint64_t) * 8); i++)
ffffffff80009130:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80009135:	48 81 7d f8 ff 3f 00 	cmpq   $0x3fff,-0x8(%rbp)
ffffffff8000913c:	00 
ffffffff8000913d:	76 d6                	jbe    ffffffff80009115 <pfbmp_init+0x38>
    }
}
ffffffff8000913f:	90                   	nop
ffffffff80009140:	90                   	nop
ffffffff80009141:	c9                   	leave  
ffffffff80009142:	c3                   	ret    

ffffffff80009143 <kalloc_frame_int>:

extern void *memset(void *s, int c, size_t n);
static pageframe_t kalloc_frame_int()
{
ffffffff80009143:	f3 0f 1e fa          	endbr64 
ffffffff80009147:	55                   	push   %rbp
ffffffff80009148:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000914b:	48 83 ec 10          	sub    $0x10,%rsp
    uint64_t i = 0;
ffffffff8000914f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80009156:	00 
    while(pfbmp[i] != PF_FREE)
ffffffff80009157:	eb 2c                	jmp    ffffffff80009185 <kalloc_frame_int+0x42>
    {
        i++;
ffffffff80009159:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
        if(i == PAGE_FRAME_NUM)
ffffffff8000915e:	48 81 7d f8 00 00 10 	cmpq   $0x100000,-0x8(%rbp)
ffffffff80009165:	00 
ffffffff80009166:	75 1d                	jne    ffffffff80009185 <kalloc_frame_int+0x42>
        {
            printf("No available page frames.\n");
ffffffff80009168:	48 8d 05 c6 55 00 00 	lea    0x55c6(%rip),%rax        # ffffffff8000e735 <font8+0x635>
ffffffff8000916f:	48 89 c7             	mov    %rax,%rdi
ffffffff80009172:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80009177:	e8 78 ed ff ff       	call   ffffffff80007ef4 <printf>
            return -1; // replace with a kernel panic ASAP.
ffffffff8000917c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80009183:	eb 6a                	jmp    ffffffff800091ef <kalloc_frame_int+0xac>
    while(pfbmp[i] != PF_FREE)
ffffffff80009185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80009189:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80009190:	00 
ffffffff80009191:	48 8d 05 a8 0c 0e 00 	lea    0xe0ca8(%rip),%rax        # ffffffff800e9e40 <pfbmp>
ffffffff80009198:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
ffffffff8000919c:	48 85 c0             	test   %rax,%rax
ffffffff8000919f:	75 b8                	jne    ffffffff80009159 <kalloc_frame_int+0x16>
        }
    }
    pfbmp[i] = PF_USED;
ffffffff800091a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800091a5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff800091ac:	00 
ffffffff800091ad:	48 8d 05 8c 0c 0e 00 	lea    0xe0c8c(%rip),%rax        # ffffffff800e9e40 <pfbmp>
ffffffff800091b4:	48 c7 04 02 01 00 00 	movq   $0x1,(%rdx,%rax,1)
ffffffff800091bb:	00 
    pageframe_t frame = start_address+(i*PAGE_FRAME_SIZE);
ffffffff800091bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800091c0:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff800091c4:	48 89 c2             	mov    %rax,%rdx
ffffffff800091c7:	48 8b 05 72 0c 10 00 	mov    0x100c72(%rip),%rax        # ffffffff80109e40 <start_address>
ffffffff800091ce:	48 01 d0             	add    %rdx,%rax
ffffffff800091d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    memset((void*)frame, 0, PAGE_FRAME_SIZE);
ffffffff800091d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800091d9:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff800091de:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff800091e3:	48 89 c7             	mov    %rax,%rdi
ffffffff800091e6:	e8 3b f1 ff ff       	call   ffffffff80008326 <memset>

    return frame;
ffffffff800091eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff800091ef:	c9                   	leave  
ffffffff800091f0:	c3                   	ret    

ffffffff800091f1 <kalloc_frame>:
static pageframe_t preframes[20];
static uint8_t allocate = 1;
static uint8_t pframe = 0;

pageframe_t kalloc_frame()
{
ffffffff800091f1:	f3 0f 1e fa          	endbr64 
ffffffff800091f5:	55                   	push   %rbp
ffffffff800091f6:	48 89 e5             	mov    %rsp,%rbp
ffffffff800091f9:	48 83 ec 10          	sub    $0x10,%rsp
    pageframe_t ret;

    if(pframe == 20)
ffffffff800091fd:	0f b6 05 fc 0c 10 00 	movzbl 0x100cfc(%rip),%eax        # ffffffff80109f00 <pframe>
ffffffff80009204:	3c 14                	cmp    $0x14,%al
ffffffff80009206:	75 07                	jne    ffffffff8000920f <kalloc_frame+0x1e>
    {
        allocate = 1;
ffffffff80009208:	c6 05 a2 7e 00 00 01 	movb   $0x1,0x7ea2(%rip)        # ffffffff800110b1 <allocate>
    }

    if(allocate == 1)
ffffffff8000920f:	0f b6 05 9b 7e 00 00 	movzbl 0x7e9b(%rip),%eax        # ffffffff800110b1 <allocate>
ffffffff80009216:	3c 01                	cmp    $0x1,%al
ffffffff80009218:	75 44                	jne    ffffffff8000925e <kalloc_frame+0x6d>
    {
        for(int i = 0; i < 20; i++)
ffffffff8000921a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80009221:	eb 27                	jmp    ffffffff8000924a <kalloc_frame+0x59>
        {
            preframes[i] = kalloc_frame_int();
ffffffff80009223:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80009228:	e8 16 ff ff ff       	call   ffffffff80009143 <kalloc_frame_int>
ffffffff8000922d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80009230:	48 63 d2             	movslq %edx,%rdx
ffffffff80009233:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
ffffffff8000923a:	00 
ffffffff8000923b:	48 8d 15 1e 0c 10 00 	lea    0x100c1e(%rip),%rdx        # ffffffff80109e60 <preframes>
ffffffff80009242:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
        for(int i = 0; i < 20; i++)
ffffffff80009246:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff8000924a:	83 7d fc 13          	cmpl   $0x13,-0x4(%rbp)
ffffffff8000924e:	7e d3                	jle    ffffffff80009223 <kalloc_frame+0x32>
        }
        pframe = 0;
ffffffff80009250:	c6 05 a9 0c 10 00 00 	movb   $0x0,0x100ca9(%rip)        # ffffffff80109f00 <pframe>
        allocate = 0;
ffffffff80009257:	c6 05 53 7e 00 00 00 	movb   $0x0,0x7e53(%rip)        # ffffffff800110b1 <allocate>
    }

    ret = preframes[pframe];
ffffffff8000925e:	0f b6 05 9b 0c 10 00 	movzbl 0x100c9b(%rip),%eax        # ffffffff80109f00 <pframe>
ffffffff80009265:	0f b6 c0             	movzbl %al,%eax
ffffffff80009268:	48 98                	cltq   
ffffffff8000926a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80009271:	00 
ffffffff80009272:	48 8d 05 e7 0b 10 00 	lea    0x100be7(%rip),%rax        # ffffffff80109e60 <preframes>
ffffffff80009279:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
ffffffff8000927d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    pframe++;
ffffffff80009281:	0f b6 05 78 0c 10 00 	movzbl 0x100c78(%rip),%eax        # ffffffff80109f00 <pframe>
ffffffff80009288:	83 c0 01             	add    $0x1,%eax
ffffffff8000928b:	88 05 6f 0c 10 00    	mov    %al,0x100c6f(%rip)        # ffffffff80109f00 <pframe>
    return ret;
ffffffff80009291:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
ffffffff80009295:	c9                   	leave  
ffffffff80009296:	c3                   	ret    

ffffffff80009297 <kfree_frame>:

void kfree_frame(pageframe_t frame)
{
ffffffff80009297:	f3 0f 1e fa          	endbr64 
ffffffff8000929b:	55                   	push   %rbp
ffffffff8000929c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000929f:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800092a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    frame = frame - start_address;
ffffffff800092a7:	48 8b 05 92 0b 10 00 	mov    0x100b92(%rip),%rax        # ffffffff80109e40 <start_address>
ffffffff800092ae:	48 f7 d8             	neg    %rax
ffffffff800092b1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
    if(frame == 0)
ffffffff800092b5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff800092ba:	75 0d                	jne    ffffffff800092c9 <kfree_frame+0x32>
    {
        pfbmp[0] = PF_FREE;
ffffffff800092bc:	48 c7 05 79 0b 0e 00 	movq   $0x0,0xe0b79(%rip)        # ffffffff800e9e40 <pfbmp>
ffffffff800092c3:	00 00 00 00 
    else
    {
        uint64_t index = ((uint64_t)frame)/PAGE_FRAME_SIZE;
        pfbmp[index] = PF_FREE;
    }
ffffffff800092c7:	eb 27                	jmp    ffffffff800092f0 <kfree_frame+0x59>
        uint64_t index = ((uint64_t)frame)/PAGE_FRAME_SIZE;
ffffffff800092c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800092cd:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff800092d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        pfbmp[index] = PF_FREE;
ffffffff800092d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800092d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff800092e0:	00 
ffffffff800092e1:	48 8d 05 58 0b 0e 00 	lea    0xe0b58(%rip),%rax        # ffffffff800e9e40 <pfbmp>
ffffffff800092e8:	48 c7 04 02 00 00 00 	movq   $0x0,(%rdx,%rax,1)
ffffffff800092ef:	00 
ffffffff800092f0:	90                   	nop
ffffffff800092f1:	c9                   	leave  
ffffffff800092f2:	c3                   	ret    

ffffffff800092f3 <outb>:
{
ffffffff800092f3:	55                   	push   %rbp
ffffffff800092f4:	48 89 e5             	mov    %rsp,%rbp
ffffffff800092f7:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800092fb:	89 f8                	mov    %edi,%eax
ffffffff800092fd:	89 f2                	mov    %esi,%edx
ffffffff800092ff:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
ffffffff80009303:	89 d0                	mov    %edx,%eax
ffffffff80009305:	88 45 f8             	mov    %al,-0x8(%rbp)
    __asm__ volatile ( "outb %0, %1" : : "a"(val), "Nd"(port) );
ffffffff80009308:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
ffffffff8000930c:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx
ffffffff80009310:	ee                   	out    %al,(%dx)
}
ffffffff80009311:	90                   	nop
ffffffff80009312:	c9                   	leave  
ffffffff80009313:	c3                   	ret    

ffffffff80009314 <inb>:
{
ffffffff80009314:	55                   	push   %rbp
ffffffff80009315:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009318:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000931c:	89 f8                	mov    %edi,%eax
ffffffff8000931e:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
    __asm__ volatile ( "inb %1, %0"
ffffffff80009322:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax
ffffffff80009326:	89 c2                	mov    %eax,%edx
ffffffff80009328:	ec                   	in     (%dx),%al
ffffffff80009329:	88 45 ff             	mov    %al,-0x1(%rbp)
    return ret;
ffffffff8000932c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
ffffffff80009330:	c9                   	leave  
ffffffff80009331:	c3                   	ret    

ffffffff80009332 <io_wait>:
static inline void io_wait(void)
{
ffffffff80009332:	55                   	push   %rbp
ffffffff80009333:	48 89 e5             	mov    %rsp,%rbp
    outb(0x80, 0);
ffffffff80009336:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8000933b:	bf 80 00 00 00       	mov    $0x80,%edi
ffffffff80009340:	e8 ae ff ff ff       	call   ffffffff800092f3 <outb>
ffffffff80009345:	90                   	nop
ffffffff80009346:	5d                   	pop    %rbp
ffffffff80009347:	c3                   	ret    

ffffffff80009348 <pic_remap>:
#include <pic/pic.h>

void pic_remap(int offset1, int offset2)
{
ffffffff80009348:	f3 0f 1e fa          	endbr64 
ffffffff8000934c:	55                   	push   %rbp
ffffffff8000934d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009350:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80009354:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff80009357:	89 75 e8             	mov    %esi,-0x18(%rbp)
    uint8_t a1, a2;

    a1 = inb(PIC1_DATA);
ffffffff8000935a:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8000935f:	e8 b0 ff ff ff       	call   ffffffff80009314 <inb>
ffffffff80009364:	88 45 ff             	mov    %al,-0x1(%rbp)
    a2 = inb(PIC2_DATA);
ffffffff80009367:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8000936c:	e8 a3 ff ff ff       	call   ffffffff80009314 <inb>
ffffffff80009371:	88 45 fe             	mov    %al,-0x2(%rbp)

    outb(PIC1_COMMAND, ICW1_INIT | ICW1_ICW4);
ffffffff80009374:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80009379:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8000937e:	e8 70 ff ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff80009383:	e8 aa ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC2_COMMAND, ICW1_INIT | ICW1_ICW4);
ffffffff80009388:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff8000938d:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80009392:	e8 5c ff ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff80009397:	e8 96 ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC1_DATA, offset1); 
ffffffff8000939c:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff8000939f:	0f b6 c0             	movzbl %al,%eax
ffffffff800093a2:	89 c6                	mov    %eax,%esi
ffffffff800093a4:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800093a9:	e8 45 ff ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff800093ae:	e8 7f ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC2_DATA, offset2); 
ffffffff800093b3:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800093b6:	0f b6 c0             	movzbl %al,%eax
ffffffff800093b9:	89 c6                	mov    %eax,%esi
ffffffff800093bb:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800093c0:	e8 2e ff ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff800093c5:	e8 68 ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC1_DATA, 4);  
ffffffff800093ca:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff800093cf:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800093d4:	e8 1a ff ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff800093d9:	e8 54 ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC2_DATA, 2);   
ffffffff800093de:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff800093e3:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff800093e8:	e8 06 ff ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff800093ed:	e8 40 ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC1_DATA, ICW4_8086);
ffffffff800093f2:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800093f7:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff800093fc:	e8 f2 fe ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff80009401:	e8 2c ff ff ff       	call   ffffffff80009332 <io_wait>
    outb(PIC2_DATA, ICW4_8086);
ffffffff80009406:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000940b:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80009410:	e8 de fe ff ff       	call   ffffffff800092f3 <outb>
    io_wait(); 
ffffffff80009415:	e8 18 ff ff ff       	call   ffffffff80009332 <io_wait>

    outb(PIC1_DATA, a1);
ffffffff8000941a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000941e:	89 c6                	mov    %eax,%esi
ffffffff80009420:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80009425:	e8 c9 fe ff ff       	call   ffffffff800092f3 <outb>
	outb(PIC2_DATA, a2);
ffffffff8000942a:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff8000942e:	89 c6                	mov    %eax,%esi
ffffffff80009430:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80009435:	e8 b9 fe ff ff       	call   ffffffff800092f3 <outb>
}
ffffffff8000943a:	90                   	nop
ffffffff8000943b:	c9                   	leave  
ffffffff8000943c:	c3                   	ret    

ffffffff8000943d <irq_mask_all>:

void irq_mask_all() {
ffffffff8000943d:	f3 0f 1e fa          	endbr64 
ffffffff80009441:	55                   	push   %rbp
ffffffff80009442:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009445:	48 83 ec 10          	sub    $0x10,%rsp
  for (int i = 0; i < 16; i++) irq_set_mask(i);
ffffffff80009449:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80009450:	eb 11                	jmp    ffffffff80009463 <irq_mask_all+0x26>
ffffffff80009452:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80009455:	0f b6 c0             	movzbl %al,%eax
ffffffff80009458:	89 c7                	mov    %eax,%edi
ffffffff8000945a:	e8 50 00 00 00       	call   ffffffff800094af <irq_set_mask>
ffffffff8000945f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
ffffffff80009463:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
ffffffff80009467:	7e e9                	jle    ffffffff80009452 <irq_mask_all+0x15>
}
ffffffff80009469:	90                   	nop
ffffffff8000946a:	90                   	nop
ffffffff8000946b:	c9                   	leave  
ffffffff8000946c:	c3                   	ret    

ffffffff8000946d <pic_init>:

void pic_init()
{
ffffffff8000946d:	f3 0f 1e fa          	endbr64 
ffffffff80009471:	55                   	push   %rbp
ffffffff80009472:	48 89 e5             	mov    %rsp,%rbp
    pic_remap(0x20,0x28);
ffffffff80009475:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff8000947a:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8000947f:	e8 c4 fe ff ff       	call   ffffffff80009348 <pic_remap>

    irq_mask_all();
ffffffff80009484:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80009489:	e8 af ff ff ff       	call   ffffffff8000943d <irq_mask_all>
    irq_clear_mask(0);
ffffffff8000948e:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80009493:	e8 75 00 00 00       	call   ffffffff8000950d <irq_clear_mask>
    irq_clear_mask(1);
ffffffff80009498:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff8000949d:	e8 6b 00 00 00       	call   ffffffff8000950d <irq_clear_mask>
    irq_clear_mask(2);
ffffffff800094a2:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff800094a7:	e8 61 00 00 00       	call   ffffffff8000950d <irq_clear_mask>
    
}
ffffffff800094ac:	90                   	nop
ffffffff800094ad:	5d                   	pop    %rbp
ffffffff800094ae:	c3                   	ret    

ffffffff800094af <irq_set_mask>:
//.//.
void irq_set_mask(uint8_t IRQline)
{
ffffffff800094af:	f3 0f 1e fa          	endbr64 
ffffffff800094b3:	55                   	push   %rbp
ffffffff800094b4:	48 89 e5             	mov    %rsp,%rbp
ffffffff800094b7:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800094bb:	89 f8                	mov    %edi,%eax
ffffffff800094bd:	88 45 ec             	mov    %al,-0x14(%rbp)
    //a
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
ffffffff800094c0:	80 7d ec 07          	cmpb   $0x7,-0x14(%rbp)
ffffffff800094c4:	77 08                	ja     ffffffff800094ce <irq_set_mask+0x1f>
        port = PIC1_DATA;
ffffffff800094c6:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%rbp)
ffffffff800094cc:	eb 0a                	jmp    ffffffff800094d8 <irq_set_mask+0x29>
    } else {
        port = PIC2_DATA;
ffffffff800094ce:	66 c7 45 fe a1 00    	movw   $0xa1,-0x2(%rbp)
        IRQline -= 8;
ffffffff800094d4:	80 6d ec 08          	subb   $0x8,-0x14(%rbp)
    }
    value = inb(port) | (1 << IRQline);
ffffffff800094d8:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
ffffffff800094dc:	89 c7                	mov    %eax,%edi
ffffffff800094de:	e8 31 fe ff ff       	call   ffffffff80009314 <inb>
ffffffff800094e3:	89 c6                	mov    %eax,%esi
ffffffff800094e5:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
ffffffff800094e9:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800094ee:	89 c1                	mov    %eax,%ecx
ffffffff800094f0:	d3 e2                	shl    %cl,%edx
ffffffff800094f2:	89 d0                	mov    %edx,%eax
ffffffff800094f4:	09 f0                	or     %esi,%eax
ffffffff800094f6:	88 45 fd             	mov    %al,-0x3(%rbp)
    outb(port, value);  
ffffffff800094f9:	0f b6 55 fd          	movzbl -0x3(%rbp),%edx
ffffffff800094fd:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
ffffffff80009501:	89 d6                	mov    %edx,%esi
ffffffff80009503:	89 c7                	mov    %eax,%edi
ffffffff80009505:	e8 e9 fd ff ff       	call   ffffffff800092f3 <outb>
}
ffffffff8000950a:	90                   	nop
ffffffff8000950b:	c9                   	leave  
ffffffff8000950c:	c3                   	ret    

ffffffff8000950d <irq_clear_mask>:

void irq_clear_mask(uint8_t IRQline)
{
ffffffff8000950d:	f3 0f 1e fa          	endbr64 
ffffffff80009511:	55                   	push   %rbp
ffffffff80009512:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009515:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80009519:	89 f8                	mov    %edi,%eax
ffffffff8000951b:	88 45 ec             	mov    %al,-0x14(%rbp)
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
ffffffff8000951e:	80 7d ec 07          	cmpb   $0x7,-0x14(%rbp)
ffffffff80009522:	77 08                	ja     ffffffff8000952c <irq_clear_mask+0x1f>
        port = PIC1_DATA;
ffffffff80009524:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%rbp)
ffffffff8000952a:	eb 0a                	jmp    ffffffff80009536 <irq_clear_mask+0x29>
    } else {
        port = PIC2_DATA;
ffffffff8000952c:	66 c7 45 fe a1 00    	movw   $0xa1,-0x2(%rbp)
        IRQline -= 8;
ffffffff80009532:	80 6d ec 08          	subb   $0x8,-0x14(%rbp)
    }
    value = inb(port) & ~(1 << IRQline);
ffffffff80009536:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
ffffffff8000953a:	89 c7                	mov    %eax,%edi
ffffffff8000953c:	e8 d3 fd ff ff       	call   ffffffff80009314 <inb>
ffffffff80009541:	89 c6                	mov    %eax,%esi
ffffffff80009543:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
ffffffff80009547:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000954c:	89 c1                	mov    %eax,%ecx
ffffffff8000954e:	d3 e2                	shl    %cl,%edx
ffffffff80009550:	89 d0                	mov    %edx,%eax
ffffffff80009552:	f7 d0                	not    %eax
ffffffff80009554:	21 f0                	and    %esi,%eax
ffffffff80009556:	88 45 fd             	mov    %al,-0x3(%rbp)
    outb(port, value); 
ffffffff80009559:	0f b6 55 fd          	movzbl -0x3(%rbp),%edx
ffffffff8000955d:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
ffffffff80009561:	89 d6                	mov    %edx,%esi
ffffffff80009563:	89 c7                	mov    %eax,%edi
ffffffff80009565:	e8 89 fd ff ff       	call   ffffffff800092f3 <outb>
}
ffffffff8000956a:	90                   	nop
ffffffff8000956b:	c9                   	leave  
ffffffff8000956c:	c3                   	ret    

ffffffff8000956d <pic_get_IrqReg>:

uint16_t pic_get_IrqReg(int ocw3)
{
ffffffff8000956d:	f3 0f 1e fa          	endbr64 
ffffffff80009571:	55                   	push   %rbp
ffffffff80009572:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009575:	53                   	push   %rbx
ffffffff80009576:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8000957a:	89 7d f4             	mov    %edi,-0xc(%rbp)
    outb(PIC1_CMD, ocw3);
ffffffff8000957d:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80009580:	0f b6 c0             	movzbl %al,%eax
ffffffff80009583:	89 c6                	mov    %eax,%esi
ffffffff80009585:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8000958a:	e8 64 fd ff ff       	call   ffffffff800092f3 <outb>
    outb(PIC2_CMD, ocw3);
ffffffff8000958f:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80009592:	0f b6 c0             	movzbl %al,%eax
ffffffff80009595:	89 c6                	mov    %eax,%esi
ffffffff80009597:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8000959c:	e8 52 fd ff ff       	call   ffffffff800092f3 <outb>
    return (inb(PIC2_CMD) << 8) | inb(PIC1_CMD);
ffffffff800095a1:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff800095a6:	e8 69 fd ff ff       	call   ffffffff80009314 <inb>
ffffffff800095ab:	0f b6 c0             	movzbl %al,%eax
ffffffff800095ae:	c1 e0 08             	shl    $0x8,%eax
ffffffff800095b1:	89 c3                	mov    %eax,%ebx
ffffffff800095b3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800095b8:	e8 57 fd ff ff       	call   ffffffff80009314 <inb>
ffffffff800095bd:	0f b6 c0             	movzbl %al,%eax
ffffffff800095c0:	09 d8                	or     %ebx,%eax
}
ffffffff800095c2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff800095c6:	c9                   	leave  
ffffffff800095c7:	c3                   	ret    

ffffffff800095c8 <pic_getIRR>:

uint16_t pic_getIRR(void)
{
ffffffff800095c8:	f3 0f 1e fa          	endbr64 
ffffffff800095cc:	55                   	push   %rbp
ffffffff800095cd:	48 89 e5             	mov    %rsp,%rbp
    return pic_get_IrqReg(PIC_READ_IRR);
ffffffff800095d0:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff800095d5:	e8 93 ff ff ff       	call   ffffffff8000956d <pic_get_IrqReg>
}
ffffffff800095da:	5d                   	pop    %rbp
ffffffff800095db:	c3                   	ret    

ffffffff800095dc <pic_getISR>:

uint16_t pic_getISR(void)
{
ffffffff800095dc:	f3 0f 1e fa          	endbr64 
ffffffff800095e0:	55                   	push   %rbp
ffffffff800095e1:	48 89 e5             	mov    %rsp,%rbp
    return pic_get_IrqReg(PIC_READ_ISR);
ffffffff800095e4:	bf 0b 00 00 00       	mov    $0xb,%edi
ffffffff800095e9:	e8 7f ff ff ff       	call   ffffffff8000956d <pic_get_IrqReg>
}
ffffffff800095ee:	5d                   	pop    %rbp
ffffffff800095ef:	c3                   	ret    

ffffffff800095f0 <pic_send_eoi>:

void pic_send_eoi(uint8_t irq)
{
ffffffff800095f0:	f3 0f 1e fa          	endbr64 
ffffffff800095f4:	55                   	push   %rbp
ffffffff800095f5:	48 89 e5             	mov    %rsp,%rbp
ffffffff800095f8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff800095fc:	89 f8                	mov    %edi,%eax
ffffffff800095fe:	88 45 fc             	mov    %al,-0x4(%rbp)

    if(irq >= 8)
ffffffff80009601:	80 7d fc 07          	cmpb   $0x7,-0x4(%rbp)
ffffffff80009605:	76 0f                	jbe    ffffffff80009616 <pic_send_eoi+0x26>
		outb(PIC2_COMMAND, 0x20);
ffffffff80009607:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000960c:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80009611:	e8 dd fc ff ff       	call   ffffffff800092f3 <outb>
 
	outb(PIC1_COMMAND, 0x20);
ffffffff80009616:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff8000961b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80009620:	e8 ce fc ff ff       	call   ffffffff800092f3 <outb>
ffffffff80009625:	90                   	nop
ffffffff80009626:	c9                   	leave  
ffffffff80009627:	c3                   	ret    

ffffffff80009628 <pic_timer_setup>:

volatile int timer_count;
volatile int timer_seconds;

void pic_timer_setup()
{
ffffffff80009628:	f3 0f 1e fa          	endbr64 
ffffffff8000962c:	55                   	push   %rbp
ffffffff8000962d:	48 89 e5             	mov    %rsp,%rbp
    timer_count = 0;
ffffffff80009630:	c7 05 ca 08 10 00 00 	movl   $0x0,0x1008ca(%rip)        # ffffffff80109f04 <timer_count>
ffffffff80009637:	00 00 00 
    timer_seconds = 0;
ffffffff8000963a:	c7 05 c4 08 10 00 00 	movl   $0x0,0x1008c4(%rip)        # ffffffff80109f08 <timer_seconds>
ffffffff80009641:	00 00 00 
}
ffffffff80009644:	90                   	nop
ffffffff80009645:	5d                   	pop    %rbp
ffffffff80009646:	c3                   	ret    

ffffffff80009647 <timer_inc>:

void timer_inc()
{
ffffffff80009647:	f3 0f 1e fa          	endbr64 
ffffffff8000964b:	55                   	push   %rbp
ffffffff8000964c:	48 89 e5             	mov    %rsp,%rbp
    timer_count++;
ffffffff8000964f:	8b 05 af 08 10 00    	mov    0x1008af(%rip),%eax        # ffffffff80109f04 <timer_count>
ffffffff80009655:	83 c0 01             	add    $0x1,%eax
ffffffff80009658:	89 05 a6 08 10 00    	mov    %eax,0x1008a6(%rip)        # ffffffff80109f04 <timer_count>
}
ffffffff8000965e:	90                   	nop
ffffffff8000965f:	5d                   	pop    %rbp
ffffffff80009660:	c3                   	ret    

ffffffff80009661 <timer_reset>:

void timer_reset()
{
ffffffff80009661:	f3 0f 1e fa          	endbr64 
ffffffff80009665:	55                   	push   %rbp
ffffffff80009666:	48 89 e5             	mov    %rsp,%rbp
    timer_count = 0;
ffffffff80009669:	c7 05 91 08 10 00 00 	movl   $0x0,0x100891(%rip)        # ffffffff80109f04 <timer_count>
ffffffff80009670:	00 00 00 
}
ffffffff80009673:	90                   	nop
ffffffff80009674:	5d                   	pop    %rbp
ffffffff80009675:	c3                   	ret    

ffffffff80009676 <timer_getct>:

int timer_getct()
{
ffffffff80009676:	f3 0f 1e fa          	endbr64 
ffffffff8000967a:	55                   	push   %rbp
ffffffff8000967b:	48 89 e5             	mov    %rsp,%rbp
    return timer_count;
ffffffff8000967e:	8b 05 80 08 10 00    	mov    0x100880(%rip),%eax        # ffffffff80109f04 <timer_count>
}
ffffffff80009684:	5d                   	pop    %rbp
ffffffff80009685:	c3                   	ret    

ffffffff80009686 <timer_getsec>:

int timer_getsec()
{
ffffffff80009686:	f3 0f 1e fa          	endbr64 
ffffffff8000968a:	55                   	push   %rbp
ffffffff8000968b:	48 89 e5             	mov    %rsp,%rbp
    return timer_seconds;
ffffffff8000968e:	8b 05 74 08 10 00    	mov    0x100874(%rip),%eax        # ffffffff80109f08 <timer_seconds>
}
ffffffff80009694:	5d                   	pop    %rbp
ffffffff80009695:	c3                   	ret    

ffffffff80009696 <timer_secinc>:

void timer_secinc()
{
ffffffff80009696:	f3 0f 1e fa          	endbr64 
ffffffff8000969a:	55                   	push   %rbp
ffffffff8000969b:	48 89 e5             	mov    %rsp,%rbp
    timer_seconds++;
ffffffff8000969e:	8b 05 64 08 10 00    	mov    0x100864(%rip),%eax        # ffffffff80109f08 <timer_seconds>
ffffffff800096a4:	83 c0 01             	add    $0x1,%eax
ffffffff800096a7:	89 05 5b 08 10 00    	mov    %eax,0x10085b(%rip)        # ffffffff80109f08 <timer_seconds>
}
ffffffff800096ad:	90                   	nop
ffffffff800096ae:	5d                   	pop    %rbp
ffffffff800096af:	c3                   	ret    

ffffffff800096b0 <sleep>:

void sleep(int seconds)
{
ffffffff800096b0:	f3 0f 1e fa          	endbr64 
ffffffff800096b4:	55                   	push   %rbp
ffffffff800096b5:	48 89 e5             	mov    %rsp,%rbp
ffffffff800096b8:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800096bc:	89 7d ec             	mov    %edi,-0x14(%rbp)
    uint64_t seconds_end = timer_getsec() + seconds;
ffffffff800096bf:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800096c4:	e8 bd ff ff ff       	call   ffffffff80009686 <timer_getsec>
ffffffff800096c9:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff800096cc:	01 d0                	add    %edx,%eax
ffffffff800096ce:	48 98                	cltq   
ffffffff800096d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(timer_getsec() < seconds_end)
ffffffff800096d4:	eb 01                	jmp    ffffffff800096d7 <sleep+0x27>
    {
        __asm__ ("nop");
ffffffff800096d6:	90                   	nop
    while(timer_getsec() < seconds_end)
ffffffff800096d7:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff800096dc:	e8 a5 ff ff ff       	call   ffffffff80009686 <timer_getsec>
ffffffff800096e1:	48 98                	cltq   
ffffffff800096e3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff800096e7:	77 ed                	ja     ffffffff800096d6 <sleep+0x26>
    }
ffffffff800096e9:	90                   	nop
ffffffff800096ea:	90                   	nop
ffffffff800096eb:	c9                   	leave  
ffffffff800096ec:	c3                   	ret    
ffffffff800096ed:	0f 1f 00             	nopl   (%rax)

ffffffff800096f0 <reloadSegments>:
ffffffff800096f0:	6a 08                	push   $0x8
ffffffff800096f2:	48 8d 05 03 00 00 00 	lea    0x3(%rip),%rax        # ffffffff800096fc <reloadSegments.reload_CS>
ffffffff800096f9:	50                   	push   %rax
ffffffff800096fa:	48 cb                	lretq  

ffffffff800096fc <reloadSegments.reload_CS>:
ffffffff800096fc:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80009700:	8e d8                	mov    %eax,%ds
ffffffff80009702:	8e c0                	mov    %eax,%es
ffffffff80009704:	8e e0                	mov    %eax,%fs
ffffffff80009706:	8e e8                	mov    %eax,%gs
ffffffff80009708:	8e d0                	mov    %eax,%ss
ffffffff8000970a:	c3                   	ret    
ffffffff8000970b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80009710 <wrapper>:
ffffffff80009710:	fc                   	cld    
ffffffff80009711:	50                   	push   %rax
ffffffff80009712:	53                   	push   %rbx
ffffffff80009713:	51                   	push   %rcx
ffffffff80009714:	52                   	push   %rdx
ffffffff80009715:	56                   	push   %rsi
ffffffff80009716:	57                   	push   %rdi
ffffffff80009717:	55                   	push   %rbp
ffffffff80009718:	41 50                	push   %r8
ffffffff8000971a:	41 51                	push   %r9
ffffffff8000971c:	41 52                	push   %r10
ffffffff8000971e:	41 53                	push   %r11
ffffffff80009720:	41 54                	push   %r12
ffffffff80009722:	41 55                	push   %r13
ffffffff80009724:	41 56                	push   %r14
ffffffff80009726:	41 57                	push   %r15
ffffffff80009728:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000972b:	e8 38 e5 ff ff       	call   ffffffff80007c68 <inthandler>
ffffffff80009730:	41 5f                	pop    %r15
ffffffff80009732:	41 5e                	pop    %r14
ffffffff80009734:	41 5d                	pop    %r13
ffffffff80009736:	41 5c                	pop    %r12
ffffffff80009738:	41 5b                	pop    %r11
ffffffff8000973a:	41 5a                	pop    %r10
ffffffff8000973c:	41 59                	pop    %r9
ffffffff8000973e:	41 58                	pop    %r8
ffffffff80009740:	5d                   	pop    %rbp
ffffffff80009741:	5f                   	pop    %rdi
ffffffff80009742:	5e                   	pop    %rsi
ffffffff80009743:	5a                   	pop    %rdx
ffffffff80009744:	59                   	pop    %rcx
ffffffff80009745:	5b                   	pop    %rbx
ffffffff80009746:	58                   	pop    %rax
ffffffff80009747:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000974b:	48 cf                	iretq  

ffffffff8000974d <isr_stub_0>:
ffffffff8000974d:	6a 00                	push   $0x0
ffffffff8000974f:	6a 00                	push   $0x0
ffffffff80009751:	eb bd                	jmp    ffffffff80009710 <wrapper>

ffffffff80009753 <isr_stub_1>:
ffffffff80009753:	6a 00                	push   $0x0
ffffffff80009755:	6a 01                	push   $0x1
ffffffff80009757:	eb b7                	jmp    ffffffff80009710 <wrapper>

ffffffff80009759 <isr_stub_2>:
ffffffff80009759:	6a 00                	push   $0x0
ffffffff8000975b:	6a 02                	push   $0x2
ffffffff8000975d:	eb b1                	jmp    ffffffff80009710 <wrapper>

ffffffff8000975f <isr_stub_3>:
ffffffff8000975f:	6a 00                	push   $0x0
ffffffff80009761:	6a 03                	push   $0x3
ffffffff80009763:	eb ab                	jmp    ffffffff80009710 <wrapper>

ffffffff80009765 <isr_stub_4>:
ffffffff80009765:	6a 00                	push   $0x0
ffffffff80009767:	6a 04                	push   $0x4
ffffffff80009769:	eb a5                	jmp    ffffffff80009710 <wrapper>

ffffffff8000976b <isr_stub_5>:
ffffffff8000976b:	6a 00                	push   $0x0
ffffffff8000976d:	6a 05                	push   $0x5
ffffffff8000976f:	eb 9f                	jmp    ffffffff80009710 <wrapper>

ffffffff80009771 <isr_stub_6>:
ffffffff80009771:	6a 00                	push   $0x0
ffffffff80009773:	6a 06                	push   $0x6
ffffffff80009775:	eb 99                	jmp    ffffffff80009710 <wrapper>

ffffffff80009777 <isr_stub_7>:
ffffffff80009777:	6a 00                	push   $0x0
ffffffff80009779:	6a 07                	push   $0x7
ffffffff8000977b:	eb 93                	jmp    ffffffff80009710 <wrapper>

ffffffff8000977d <isr_stub_8>:
ffffffff8000977d:	6a 08                	push   $0x8
ffffffff8000977f:	eb 8f                	jmp    ffffffff80009710 <wrapper>

ffffffff80009781 <isr_stub_9>:
ffffffff80009781:	6a 00                	push   $0x0
ffffffff80009783:	6a 09                	push   $0x9
ffffffff80009785:	eb 89                	jmp    ffffffff80009710 <wrapper>

ffffffff80009787 <isr_stub_10>:
ffffffff80009787:	6a 0a                	push   $0xa
ffffffff80009789:	eb 85                	jmp    ffffffff80009710 <wrapper>

ffffffff8000978b <isr_stub_11>:
ffffffff8000978b:	6a 0b                	push   $0xb
ffffffff8000978d:	eb 81                	jmp    ffffffff80009710 <wrapper>

ffffffff8000978f <isr_stub_12>:
ffffffff8000978f:	6a 0c                	push   $0xc
ffffffff80009791:	e9 7a ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009796 <isr_stub_13>:
ffffffff80009796:	6a 0d                	push   $0xd
ffffffff80009798:	e9 73 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000979d <isr_stub_14>:
ffffffff8000979d:	6a 0e                	push   $0xe
ffffffff8000979f:	e9 6c ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097a4 <isr_stub_15>:
ffffffff800097a4:	6a 00                	push   $0x0
ffffffff800097a6:	6a 0f                	push   $0xf
ffffffff800097a8:	e9 63 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097ad <isr_stub_16>:
ffffffff800097ad:	6a 00                	push   $0x0
ffffffff800097af:	6a 10                	push   $0x10
ffffffff800097b1:	e9 5a ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097b6 <isr_stub_17>:
ffffffff800097b6:	6a 11                	push   $0x11
ffffffff800097b8:	e9 53 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097bd <isr_stub_18>:
ffffffff800097bd:	6a 00                	push   $0x0
ffffffff800097bf:	6a 12                	push   $0x12
ffffffff800097c1:	e9 4a ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097c6 <isr_stub_19>:
ffffffff800097c6:	6a 00                	push   $0x0
ffffffff800097c8:	6a 13                	push   $0x13
ffffffff800097ca:	e9 41 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097cf <isr_stub_20>:
ffffffff800097cf:	6a 00                	push   $0x0
ffffffff800097d1:	6a 14                	push   $0x14
ffffffff800097d3:	e9 38 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097d8 <isr_stub_21>:
ffffffff800097d8:	6a 00                	push   $0x0
ffffffff800097da:	6a 15                	push   $0x15
ffffffff800097dc:	e9 2f ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097e1 <isr_stub_22>:
ffffffff800097e1:	6a 00                	push   $0x0
ffffffff800097e3:	6a 16                	push   $0x16
ffffffff800097e5:	e9 26 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097ea <isr_stub_23>:
ffffffff800097ea:	6a 00                	push   $0x0
ffffffff800097ec:	6a 17                	push   $0x17
ffffffff800097ee:	e9 1d ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097f3 <isr_stub_24>:
ffffffff800097f3:	6a 00                	push   $0x0
ffffffff800097f5:	6a 18                	push   $0x18
ffffffff800097f7:	e9 14 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800097fc <isr_stub_25>:
ffffffff800097fc:	6a 00                	push   $0x0
ffffffff800097fe:	6a 19                	push   $0x19
ffffffff80009800:	e9 0b ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009805 <isr_stub_26>:
ffffffff80009805:	6a 00                	push   $0x0
ffffffff80009807:	6a 1a                	push   $0x1a
ffffffff80009809:	e9 02 ff ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000980e <isr_stub_27>:
ffffffff8000980e:	6a 00                	push   $0x0
ffffffff80009810:	6a 1b                	push   $0x1b
ffffffff80009812:	e9 f9 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009817 <isr_stub_28>:
ffffffff80009817:	6a 00                	push   $0x0
ffffffff80009819:	6a 1c                	push   $0x1c
ffffffff8000981b:	e9 f0 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009820 <isr_stub_29>:
ffffffff80009820:	6a 00                	push   $0x0
ffffffff80009822:	6a 1d                	push   $0x1d
ffffffff80009824:	e9 e7 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009829 <isr_stub_30>:
ffffffff80009829:	6a 1e                	push   $0x1e
ffffffff8000982b:	e9 e0 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009830 <isr_stub_31>:
ffffffff80009830:	6a 00                	push   $0x0
ffffffff80009832:	6a 1f                	push   $0x1f
ffffffff80009834:	e9 d7 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009839 <isr_stub_32>:
ffffffff80009839:	6a 00                	push   $0x0
ffffffff8000983b:	6a 20                	push   $0x20
ffffffff8000983d:	e9 ce fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009842 <isr_stub_33>:
ffffffff80009842:	6a 00                	push   $0x0
ffffffff80009844:	6a 21                	push   $0x21
ffffffff80009846:	e9 c5 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000984b <isr_stub_34>:
ffffffff8000984b:	6a 00                	push   $0x0
ffffffff8000984d:	6a 22                	push   $0x22
ffffffff8000984f:	e9 bc fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009854 <isr_stub_35>:
ffffffff80009854:	6a 00                	push   $0x0
ffffffff80009856:	6a 23                	push   $0x23
ffffffff80009858:	e9 b3 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000985d <isr_stub_36>:
ffffffff8000985d:	6a 00                	push   $0x0
ffffffff8000985f:	6a 24                	push   $0x24
ffffffff80009861:	e9 aa fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009866 <isr_stub_37>:
ffffffff80009866:	6a 00                	push   $0x0
ffffffff80009868:	6a 25                	push   $0x25
ffffffff8000986a:	e9 a1 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000986f <isr_stub_38>:
ffffffff8000986f:	6a 00                	push   $0x0
ffffffff80009871:	6a 26                	push   $0x26
ffffffff80009873:	e9 98 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009878 <isr_stub_39>:
ffffffff80009878:	6a 00                	push   $0x0
ffffffff8000987a:	6a 27                	push   $0x27
ffffffff8000987c:	e9 8f fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009881 <isr_stub_40>:
ffffffff80009881:	6a 00                	push   $0x0
ffffffff80009883:	6a 28                	push   $0x28
ffffffff80009885:	e9 86 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000988a <isr_stub_41>:
ffffffff8000988a:	6a 00                	push   $0x0
ffffffff8000988c:	6a 29                	push   $0x29
ffffffff8000988e:	e9 7d fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009893 <isr_stub_42>:
ffffffff80009893:	6a 00                	push   $0x0
ffffffff80009895:	6a 2a                	push   $0x2a
ffffffff80009897:	e9 74 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000989c <isr_stub_43>:
ffffffff8000989c:	6a 00                	push   $0x0
ffffffff8000989e:	6a 2b                	push   $0x2b
ffffffff800098a0:	e9 6b fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098a5 <isr_stub_44>:
ffffffff800098a5:	6a 00                	push   $0x0
ffffffff800098a7:	6a 2c                	push   $0x2c
ffffffff800098a9:	e9 62 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098ae <isr_stub_45>:
ffffffff800098ae:	6a 00                	push   $0x0
ffffffff800098b0:	6a 2d                	push   $0x2d
ffffffff800098b2:	e9 59 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098b7 <isr_stub_46>:
ffffffff800098b7:	6a 00                	push   $0x0
ffffffff800098b9:	6a 2e                	push   $0x2e
ffffffff800098bb:	e9 50 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098c0 <isr_stub_47>:
ffffffff800098c0:	6a 00                	push   $0x0
ffffffff800098c2:	6a 2f                	push   $0x2f
ffffffff800098c4:	e9 47 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098c9 <isr_stub_48>:
ffffffff800098c9:	6a 00                	push   $0x0
ffffffff800098cb:	6a 30                	push   $0x30
ffffffff800098cd:	e9 3e fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098d2 <isr_stub_49>:
ffffffff800098d2:	6a 00                	push   $0x0
ffffffff800098d4:	6a 31                	push   $0x31
ffffffff800098d6:	e9 35 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098db <isr_stub_50>:
ffffffff800098db:	6a 00                	push   $0x0
ffffffff800098dd:	6a 32                	push   $0x32
ffffffff800098df:	e9 2c fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098e4 <isr_stub_51>:
ffffffff800098e4:	6a 00                	push   $0x0
ffffffff800098e6:	6a 33                	push   $0x33
ffffffff800098e8:	e9 23 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098ed <isr_stub_52>:
ffffffff800098ed:	6a 00                	push   $0x0
ffffffff800098ef:	6a 34                	push   $0x34
ffffffff800098f1:	e9 1a fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098f6 <isr_stub_53>:
ffffffff800098f6:	6a 00                	push   $0x0
ffffffff800098f8:	6a 35                	push   $0x35
ffffffff800098fa:	e9 11 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800098ff <isr_stub_54>:
ffffffff800098ff:	6a 00                	push   $0x0
ffffffff80009901:	6a 36                	push   $0x36
ffffffff80009903:	e9 08 fe ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009908 <isr_stub_55>:
ffffffff80009908:	6a 00                	push   $0x0
ffffffff8000990a:	6a 37                	push   $0x37
ffffffff8000990c:	e9 ff fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009911 <isr_stub_56>:
ffffffff80009911:	6a 00                	push   $0x0
ffffffff80009913:	6a 38                	push   $0x38
ffffffff80009915:	e9 f6 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000991a <isr_stub_57>:
ffffffff8000991a:	6a 00                	push   $0x0
ffffffff8000991c:	6a 39                	push   $0x39
ffffffff8000991e:	e9 ed fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009923 <isr_stub_58>:
ffffffff80009923:	6a 00                	push   $0x0
ffffffff80009925:	6a 3a                	push   $0x3a
ffffffff80009927:	e9 e4 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000992c <isr_stub_59>:
ffffffff8000992c:	6a 00                	push   $0x0
ffffffff8000992e:	6a 3b                	push   $0x3b
ffffffff80009930:	e9 db fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009935 <isr_stub_60>:
ffffffff80009935:	6a 00                	push   $0x0
ffffffff80009937:	6a 3c                	push   $0x3c
ffffffff80009939:	e9 d2 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000993e <isr_stub_61>:
ffffffff8000993e:	6a 00                	push   $0x0
ffffffff80009940:	6a 3d                	push   $0x3d
ffffffff80009942:	e9 c9 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009947 <isr_stub_62>:
ffffffff80009947:	6a 00                	push   $0x0
ffffffff80009949:	6a 3e                	push   $0x3e
ffffffff8000994b:	e9 c0 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009950 <isr_stub_63>:
ffffffff80009950:	6a 00                	push   $0x0
ffffffff80009952:	6a 3f                	push   $0x3f
ffffffff80009954:	e9 b7 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009959 <isr_stub_64>:
ffffffff80009959:	6a 00                	push   $0x0
ffffffff8000995b:	6a 40                	push   $0x40
ffffffff8000995d:	e9 ae fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009962 <isr_stub_65>:
ffffffff80009962:	6a 00                	push   $0x0
ffffffff80009964:	6a 41                	push   $0x41
ffffffff80009966:	e9 a5 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000996b <isr_stub_66>:
ffffffff8000996b:	6a 00                	push   $0x0
ffffffff8000996d:	6a 42                	push   $0x42
ffffffff8000996f:	e9 9c fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009974 <isr_stub_67>:
ffffffff80009974:	6a 00                	push   $0x0
ffffffff80009976:	6a 43                	push   $0x43
ffffffff80009978:	e9 93 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000997d <isr_stub_68>:
ffffffff8000997d:	6a 00                	push   $0x0
ffffffff8000997f:	6a 44                	push   $0x44
ffffffff80009981:	e9 8a fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009986 <isr_stub_69>:
ffffffff80009986:	6a 00                	push   $0x0
ffffffff80009988:	6a 45                	push   $0x45
ffffffff8000998a:	e9 81 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000998f <isr_stub_70>:
ffffffff8000998f:	6a 00                	push   $0x0
ffffffff80009991:	6a 46                	push   $0x46
ffffffff80009993:	e9 78 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009998 <isr_stub_71>:
ffffffff80009998:	6a 00                	push   $0x0
ffffffff8000999a:	6a 47                	push   $0x47
ffffffff8000999c:	e9 6f fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099a1 <isr_stub_72>:
ffffffff800099a1:	6a 00                	push   $0x0
ffffffff800099a3:	6a 48                	push   $0x48
ffffffff800099a5:	e9 66 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099aa <isr_stub_73>:
ffffffff800099aa:	6a 00                	push   $0x0
ffffffff800099ac:	6a 49                	push   $0x49
ffffffff800099ae:	e9 5d fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099b3 <isr_stub_74>:
ffffffff800099b3:	6a 00                	push   $0x0
ffffffff800099b5:	6a 4a                	push   $0x4a
ffffffff800099b7:	e9 54 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099bc <isr_stub_75>:
ffffffff800099bc:	6a 00                	push   $0x0
ffffffff800099be:	6a 4b                	push   $0x4b
ffffffff800099c0:	e9 4b fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099c5 <isr_stub_76>:
ffffffff800099c5:	6a 00                	push   $0x0
ffffffff800099c7:	6a 4c                	push   $0x4c
ffffffff800099c9:	e9 42 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099ce <isr_stub_77>:
ffffffff800099ce:	6a 00                	push   $0x0
ffffffff800099d0:	6a 4d                	push   $0x4d
ffffffff800099d2:	e9 39 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099d7 <isr_stub_78>:
ffffffff800099d7:	6a 00                	push   $0x0
ffffffff800099d9:	6a 4e                	push   $0x4e
ffffffff800099db:	e9 30 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099e0 <isr_stub_79>:
ffffffff800099e0:	6a 00                	push   $0x0
ffffffff800099e2:	6a 4f                	push   $0x4f
ffffffff800099e4:	e9 27 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099e9 <isr_stub_80>:
ffffffff800099e9:	6a 00                	push   $0x0
ffffffff800099eb:	6a 50                	push   $0x50
ffffffff800099ed:	e9 1e fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099f2 <isr_stub_81>:
ffffffff800099f2:	6a 00                	push   $0x0
ffffffff800099f4:	6a 51                	push   $0x51
ffffffff800099f6:	e9 15 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff800099fb <isr_stub_82>:
ffffffff800099fb:	6a 00                	push   $0x0
ffffffff800099fd:	6a 52                	push   $0x52
ffffffff800099ff:	e9 0c fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a04 <isr_stub_83>:
ffffffff80009a04:	6a 00                	push   $0x0
ffffffff80009a06:	6a 53                	push   $0x53
ffffffff80009a08:	e9 03 fd ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a0d <isr_stub_84>:
ffffffff80009a0d:	6a 00                	push   $0x0
ffffffff80009a0f:	6a 54                	push   $0x54
ffffffff80009a11:	e9 fa fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a16 <isr_stub_85>:
ffffffff80009a16:	6a 00                	push   $0x0
ffffffff80009a18:	6a 55                	push   $0x55
ffffffff80009a1a:	e9 f1 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a1f <isr_stub_86>:
ffffffff80009a1f:	6a 00                	push   $0x0
ffffffff80009a21:	6a 56                	push   $0x56
ffffffff80009a23:	e9 e8 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a28 <isr_stub_87>:
ffffffff80009a28:	6a 00                	push   $0x0
ffffffff80009a2a:	6a 57                	push   $0x57
ffffffff80009a2c:	e9 df fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a31 <isr_stub_88>:
ffffffff80009a31:	6a 00                	push   $0x0
ffffffff80009a33:	6a 58                	push   $0x58
ffffffff80009a35:	e9 d6 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a3a <isr_stub_89>:
ffffffff80009a3a:	6a 00                	push   $0x0
ffffffff80009a3c:	6a 59                	push   $0x59
ffffffff80009a3e:	e9 cd fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a43 <isr_stub_90>:
ffffffff80009a43:	6a 00                	push   $0x0
ffffffff80009a45:	6a 5a                	push   $0x5a
ffffffff80009a47:	e9 c4 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a4c <isr_stub_91>:
ffffffff80009a4c:	6a 00                	push   $0x0
ffffffff80009a4e:	6a 5b                	push   $0x5b
ffffffff80009a50:	e9 bb fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a55 <isr_stub_92>:
ffffffff80009a55:	6a 00                	push   $0x0
ffffffff80009a57:	6a 5c                	push   $0x5c
ffffffff80009a59:	e9 b2 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a5e <isr_stub_93>:
ffffffff80009a5e:	6a 00                	push   $0x0
ffffffff80009a60:	6a 5d                	push   $0x5d
ffffffff80009a62:	e9 a9 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a67 <isr_stub_94>:
ffffffff80009a67:	6a 00                	push   $0x0
ffffffff80009a69:	6a 5e                	push   $0x5e
ffffffff80009a6b:	e9 a0 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a70 <isr_stub_95>:
ffffffff80009a70:	6a 00                	push   $0x0
ffffffff80009a72:	6a 5f                	push   $0x5f
ffffffff80009a74:	e9 97 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a79 <isr_stub_96>:
ffffffff80009a79:	6a 00                	push   $0x0
ffffffff80009a7b:	6a 60                	push   $0x60
ffffffff80009a7d:	e9 8e fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a82 <isr_stub_97>:
ffffffff80009a82:	6a 00                	push   $0x0
ffffffff80009a84:	6a 61                	push   $0x61
ffffffff80009a86:	e9 85 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a8b <isr_stub_98>:
ffffffff80009a8b:	6a 00                	push   $0x0
ffffffff80009a8d:	6a 62                	push   $0x62
ffffffff80009a8f:	e9 7c fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a94 <isr_stub_99>:
ffffffff80009a94:	6a 00                	push   $0x0
ffffffff80009a96:	6a 63                	push   $0x63
ffffffff80009a98:	e9 73 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009a9d <isr_stub_100>:
ffffffff80009a9d:	6a 00                	push   $0x0
ffffffff80009a9f:	6a 64                	push   $0x64
ffffffff80009aa1:	e9 6a fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009aa6 <isr_stub_101>:
ffffffff80009aa6:	6a 00                	push   $0x0
ffffffff80009aa8:	6a 65                	push   $0x65
ffffffff80009aaa:	e9 61 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009aaf <isr_stub_102>:
ffffffff80009aaf:	6a 00                	push   $0x0
ffffffff80009ab1:	6a 66                	push   $0x66
ffffffff80009ab3:	e9 58 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ab8 <isr_stub_103>:
ffffffff80009ab8:	6a 00                	push   $0x0
ffffffff80009aba:	6a 67                	push   $0x67
ffffffff80009abc:	e9 4f fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ac1 <isr_stub_104>:
ffffffff80009ac1:	6a 00                	push   $0x0
ffffffff80009ac3:	6a 68                	push   $0x68
ffffffff80009ac5:	e9 46 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009aca <isr_stub_105>:
ffffffff80009aca:	6a 00                	push   $0x0
ffffffff80009acc:	6a 69                	push   $0x69
ffffffff80009ace:	e9 3d fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ad3 <isr_stub_106>:
ffffffff80009ad3:	6a 00                	push   $0x0
ffffffff80009ad5:	6a 6a                	push   $0x6a
ffffffff80009ad7:	e9 34 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009adc <isr_stub_107>:
ffffffff80009adc:	6a 00                	push   $0x0
ffffffff80009ade:	6a 6b                	push   $0x6b
ffffffff80009ae0:	e9 2b fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ae5 <isr_stub_108>:
ffffffff80009ae5:	6a 00                	push   $0x0
ffffffff80009ae7:	6a 6c                	push   $0x6c
ffffffff80009ae9:	e9 22 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009aee <isr_stub_109>:
ffffffff80009aee:	6a 00                	push   $0x0
ffffffff80009af0:	6a 6d                	push   $0x6d
ffffffff80009af2:	e9 19 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009af7 <isr_stub_110>:
ffffffff80009af7:	6a 00                	push   $0x0
ffffffff80009af9:	6a 6e                	push   $0x6e
ffffffff80009afb:	e9 10 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b00 <isr_stub_111>:
ffffffff80009b00:	6a 00                	push   $0x0
ffffffff80009b02:	6a 6f                	push   $0x6f
ffffffff80009b04:	e9 07 fc ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b09 <isr_stub_112>:
ffffffff80009b09:	6a 00                	push   $0x0
ffffffff80009b0b:	6a 70                	push   $0x70
ffffffff80009b0d:	e9 fe fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b12 <isr_stub_113>:
ffffffff80009b12:	6a 00                	push   $0x0
ffffffff80009b14:	6a 71                	push   $0x71
ffffffff80009b16:	e9 f5 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b1b <isr_stub_114>:
ffffffff80009b1b:	6a 00                	push   $0x0
ffffffff80009b1d:	6a 72                	push   $0x72
ffffffff80009b1f:	e9 ec fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b24 <isr_stub_115>:
ffffffff80009b24:	6a 00                	push   $0x0
ffffffff80009b26:	6a 73                	push   $0x73
ffffffff80009b28:	e9 e3 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b2d <isr_stub_116>:
ffffffff80009b2d:	6a 00                	push   $0x0
ffffffff80009b2f:	6a 74                	push   $0x74
ffffffff80009b31:	e9 da fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b36 <isr_stub_117>:
ffffffff80009b36:	6a 00                	push   $0x0
ffffffff80009b38:	6a 75                	push   $0x75
ffffffff80009b3a:	e9 d1 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b3f <isr_stub_118>:
ffffffff80009b3f:	6a 00                	push   $0x0
ffffffff80009b41:	6a 76                	push   $0x76
ffffffff80009b43:	e9 c8 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b48 <isr_stub_119>:
ffffffff80009b48:	6a 00                	push   $0x0
ffffffff80009b4a:	6a 77                	push   $0x77
ffffffff80009b4c:	e9 bf fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b51 <isr_stub_120>:
ffffffff80009b51:	6a 00                	push   $0x0
ffffffff80009b53:	6a 78                	push   $0x78
ffffffff80009b55:	e9 b6 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b5a <isr_stub_121>:
ffffffff80009b5a:	6a 00                	push   $0x0
ffffffff80009b5c:	6a 79                	push   $0x79
ffffffff80009b5e:	e9 ad fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b63 <isr_stub_122>:
ffffffff80009b63:	6a 00                	push   $0x0
ffffffff80009b65:	6a 7a                	push   $0x7a
ffffffff80009b67:	e9 a4 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b6c <isr_stub_123>:
ffffffff80009b6c:	6a 00                	push   $0x0
ffffffff80009b6e:	6a 7b                	push   $0x7b
ffffffff80009b70:	e9 9b fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b75 <isr_stub_124>:
ffffffff80009b75:	6a 00                	push   $0x0
ffffffff80009b77:	6a 7c                	push   $0x7c
ffffffff80009b79:	e9 92 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b7e <isr_stub_125>:
ffffffff80009b7e:	6a 00                	push   $0x0
ffffffff80009b80:	6a 7d                	push   $0x7d
ffffffff80009b82:	e9 89 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b87 <isr_stub_126>:
ffffffff80009b87:	6a 00                	push   $0x0
ffffffff80009b89:	6a 7e                	push   $0x7e
ffffffff80009b8b:	e9 80 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b90 <isr_stub_127>:
ffffffff80009b90:	6a 00                	push   $0x0
ffffffff80009b92:	6a 7f                	push   $0x7f
ffffffff80009b94:	e9 77 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009b99 <isr_stub_128>:
ffffffff80009b99:	6a 00                	push   $0x0
ffffffff80009b9b:	68 80 00 00 00       	push   $0x80
ffffffff80009ba0:	e9 6b fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ba5 <isr_stub_129>:
ffffffff80009ba5:	6a 00                	push   $0x0
ffffffff80009ba7:	68 81 00 00 00       	push   $0x81
ffffffff80009bac:	e9 5f fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009bb1 <isr_stub_130>:
ffffffff80009bb1:	6a 00                	push   $0x0
ffffffff80009bb3:	68 82 00 00 00       	push   $0x82
ffffffff80009bb8:	e9 53 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009bbd <isr_stub_131>:
ffffffff80009bbd:	6a 00                	push   $0x0
ffffffff80009bbf:	68 83 00 00 00       	push   $0x83
ffffffff80009bc4:	e9 47 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009bc9 <isr_stub_132>:
ffffffff80009bc9:	6a 00                	push   $0x0
ffffffff80009bcb:	68 84 00 00 00       	push   $0x84
ffffffff80009bd0:	e9 3b fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009bd5 <isr_stub_133>:
ffffffff80009bd5:	6a 00                	push   $0x0
ffffffff80009bd7:	68 85 00 00 00       	push   $0x85
ffffffff80009bdc:	e9 2f fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009be1 <isr_stub_134>:
ffffffff80009be1:	6a 00                	push   $0x0
ffffffff80009be3:	68 86 00 00 00       	push   $0x86
ffffffff80009be8:	e9 23 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009bed <isr_stub_135>:
ffffffff80009bed:	6a 00                	push   $0x0
ffffffff80009bef:	68 87 00 00 00       	push   $0x87
ffffffff80009bf4:	e9 17 fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009bf9 <isr_stub_136>:
ffffffff80009bf9:	6a 00                	push   $0x0
ffffffff80009bfb:	68 88 00 00 00       	push   $0x88
ffffffff80009c00:	e9 0b fb ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c05 <isr_stub_137>:
ffffffff80009c05:	6a 00                	push   $0x0
ffffffff80009c07:	68 89 00 00 00       	push   $0x89
ffffffff80009c0c:	e9 ff fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c11 <isr_stub_138>:
ffffffff80009c11:	6a 00                	push   $0x0
ffffffff80009c13:	68 8a 00 00 00       	push   $0x8a
ffffffff80009c18:	e9 f3 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c1d <isr_stub_139>:
ffffffff80009c1d:	6a 00                	push   $0x0
ffffffff80009c1f:	68 8b 00 00 00       	push   $0x8b
ffffffff80009c24:	e9 e7 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c29 <isr_stub_140>:
ffffffff80009c29:	6a 00                	push   $0x0
ffffffff80009c2b:	68 8c 00 00 00       	push   $0x8c
ffffffff80009c30:	e9 db fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c35 <isr_stub_141>:
ffffffff80009c35:	6a 00                	push   $0x0
ffffffff80009c37:	68 8d 00 00 00       	push   $0x8d
ffffffff80009c3c:	e9 cf fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c41 <isr_stub_142>:
ffffffff80009c41:	6a 00                	push   $0x0
ffffffff80009c43:	68 8e 00 00 00       	push   $0x8e
ffffffff80009c48:	e9 c3 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c4d <isr_stub_143>:
ffffffff80009c4d:	6a 00                	push   $0x0
ffffffff80009c4f:	68 8f 00 00 00       	push   $0x8f
ffffffff80009c54:	e9 b7 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c59 <isr_stub_144>:
ffffffff80009c59:	6a 00                	push   $0x0
ffffffff80009c5b:	68 90 00 00 00       	push   $0x90
ffffffff80009c60:	e9 ab fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c65 <isr_stub_145>:
ffffffff80009c65:	6a 00                	push   $0x0
ffffffff80009c67:	68 91 00 00 00       	push   $0x91
ffffffff80009c6c:	e9 9f fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c71 <isr_stub_146>:
ffffffff80009c71:	6a 00                	push   $0x0
ffffffff80009c73:	68 92 00 00 00       	push   $0x92
ffffffff80009c78:	e9 93 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c7d <isr_stub_147>:
ffffffff80009c7d:	6a 00                	push   $0x0
ffffffff80009c7f:	68 93 00 00 00       	push   $0x93
ffffffff80009c84:	e9 87 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c89 <isr_stub_148>:
ffffffff80009c89:	6a 00                	push   $0x0
ffffffff80009c8b:	68 94 00 00 00       	push   $0x94
ffffffff80009c90:	e9 7b fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009c95 <isr_stub_149>:
ffffffff80009c95:	6a 00                	push   $0x0
ffffffff80009c97:	68 95 00 00 00       	push   $0x95
ffffffff80009c9c:	e9 6f fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ca1 <isr_stub_150>:
ffffffff80009ca1:	6a 00                	push   $0x0
ffffffff80009ca3:	68 96 00 00 00       	push   $0x96
ffffffff80009ca8:	e9 63 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009cad <isr_stub_151>:
ffffffff80009cad:	6a 00                	push   $0x0
ffffffff80009caf:	68 97 00 00 00       	push   $0x97
ffffffff80009cb4:	e9 57 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009cb9 <isr_stub_152>:
ffffffff80009cb9:	6a 00                	push   $0x0
ffffffff80009cbb:	68 98 00 00 00       	push   $0x98
ffffffff80009cc0:	e9 4b fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009cc5 <isr_stub_153>:
ffffffff80009cc5:	6a 00                	push   $0x0
ffffffff80009cc7:	68 99 00 00 00       	push   $0x99
ffffffff80009ccc:	e9 3f fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009cd1 <isr_stub_154>:
ffffffff80009cd1:	6a 00                	push   $0x0
ffffffff80009cd3:	68 9a 00 00 00       	push   $0x9a
ffffffff80009cd8:	e9 33 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009cdd <isr_stub_155>:
ffffffff80009cdd:	6a 00                	push   $0x0
ffffffff80009cdf:	68 9b 00 00 00       	push   $0x9b
ffffffff80009ce4:	e9 27 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ce9 <isr_stub_156>:
ffffffff80009ce9:	6a 00                	push   $0x0
ffffffff80009ceb:	68 9c 00 00 00       	push   $0x9c
ffffffff80009cf0:	e9 1b fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009cf5 <isr_stub_157>:
ffffffff80009cf5:	6a 00                	push   $0x0
ffffffff80009cf7:	68 9d 00 00 00       	push   $0x9d
ffffffff80009cfc:	e9 0f fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d01 <isr_stub_158>:
ffffffff80009d01:	6a 00                	push   $0x0
ffffffff80009d03:	68 9e 00 00 00       	push   $0x9e
ffffffff80009d08:	e9 03 fa ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d0d <isr_stub_159>:
ffffffff80009d0d:	6a 00                	push   $0x0
ffffffff80009d0f:	68 9f 00 00 00       	push   $0x9f
ffffffff80009d14:	e9 f7 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d19 <isr_stub_160>:
ffffffff80009d19:	6a 00                	push   $0x0
ffffffff80009d1b:	68 a0 00 00 00       	push   $0xa0
ffffffff80009d20:	e9 eb f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d25 <isr_stub_161>:
ffffffff80009d25:	6a 00                	push   $0x0
ffffffff80009d27:	68 a1 00 00 00       	push   $0xa1
ffffffff80009d2c:	e9 df f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d31 <isr_stub_162>:
ffffffff80009d31:	6a 00                	push   $0x0
ffffffff80009d33:	68 a2 00 00 00       	push   $0xa2
ffffffff80009d38:	e9 d3 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d3d <isr_stub_163>:
ffffffff80009d3d:	6a 00                	push   $0x0
ffffffff80009d3f:	68 a3 00 00 00       	push   $0xa3
ffffffff80009d44:	e9 c7 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d49 <isr_stub_164>:
ffffffff80009d49:	6a 00                	push   $0x0
ffffffff80009d4b:	68 a4 00 00 00       	push   $0xa4
ffffffff80009d50:	e9 bb f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d55 <isr_stub_165>:
ffffffff80009d55:	6a 00                	push   $0x0
ffffffff80009d57:	68 a5 00 00 00       	push   $0xa5
ffffffff80009d5c:	e9 af f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d61 <isr_stub_166>:
ffffffff80009d61:	6a 00                	push   $0x0
ffffffff80009d63:	68 a6 00 00 00       	push   $0xa6
ffffffff80009d68:	e9 a3 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d6d <isr_stub_167>:
ffffffff80009d6d:	6a 00                	push   $0x0
ffffffff80009d6f:	68 a7 00 00 00       	push   $0xa7
ffffffff80009d74:	e9 97 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d79 <isr_stub_168>:
ffffffff80009d79:	6a 00                	push   $0x0
ffffffff80009d7b:	68 a8 00 00 00       	push   $0xa8
ffffffff80009d80:	e9 8b f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d85 <isr_stub_169>:
ffffffff80009d85:	6a 00                	push   $0x0
ffffffff80009d87:	68 a9 00 00 00       	push   $0xa9
ffffffff80009d8c:	e9 7f f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d91 <isr_stub_170>:
ffffffff80009d91:	6a 00                	push   $0x0
ffffffff80009d93:	68 aa 00 00 00       	push   $0xaa
ffffffff80009d98:	e9 73 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009d9d <isr_stub_171>:
ffffffff80009d9d:	6a 00                	push   $0x0
ffffffff80009d9f:	68 ab 00 00 00       	push   $0xab
ffffffff80009da4:	e9 67 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009da9 <isr_stub_172>:
ffffffff80009da9:	6a 00                	push   $0x0
ffffffff80009dab:	68 ac 00 00 00       	push   $0xac
ffffffff80009db0:	e9 5b f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009db5 <isr_stub_173>:
ffffffff80009db5:	6a 00                	push   $0x0
ffffffff80009db7:	68 ad 00 00 00       	push   $0xad
ffffffff80009dbc:	e9 4f f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009dc1 <isr_stub_174>:
ffffffff80009dc1:	6a 00                	push   $0x0
ffffffff80009dc3:	68 ae 00 00 00       	push   $0xae
ffffffff80009dc8:	e9 43 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009dcd <isr_stub_175>:
ffffffff80009dcd:	6a 00                	push   $0x0
ffffffff80009dcf:	68 af 00 00 00       	push   $0xaf
ffffffff80009dd4:	e9 37 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009dd9 <isr_stub_176>:
ffffffff80009dd9:	6a 00                	push   $0x0
ffffffff80009ddb:	68 b0 00 00 00       	push   $0xb0
ffffffff80009de0:	e9 2b f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009de5 <isr_stub_177>:
ffffffff80009de5:	6a 00                	push   $0x0
ffffffff80009de7:	68 b1 00 00 00       	push   $0xb1
ffffffff80009dec:	e9 1f f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009df1 <isr_stub_178>:
ffffffff80009df1:	6a 00                	push   $0x0
ffffffff80009df3:	68 b2 00 00 00       	push   $0xb2
ffffffff80009df8:	e9 13 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009dfd <isr_stub_179>:
ffffffff80009dfd:	6a 00                	push   $0x0
ffffffff80009dff:	68 b3 00 00 00       	push   $0xb3
ffffffff80009e04:	e9 07 f9 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e09 <isr_stub_180>:
ffffffff80009e09:	6a 00                	push   $0x0
ffffffff80009e0b:	68 b4 00 00 00       	push   $0xb4
ffffffff80009e10:	e9 fb f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e15 <isr_stub_181>:
ffffffff80009e15:	6a 00                	push   $0x0
ffffffff80009e17:	68 b5 00 00 00       	push   $0xb5
ffffffff80009e1c:	e9 ef f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e21 <isr_stub_182>:
ffffffff80009e21:	6a 00                	push   $0x0
ffffffff80009e23:	68 b6 00 00 00       	push   $0xb6
ffffffff80009e28:	e9 e3 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e2d <isr_stub_183>:
ffffffff80009e2d:	6a 00                	push   $0x0
ffffffff80009e2f:	68 b7 00 00 00       	push   $0xb7
ffffffff80009e34:	e9 d7 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e39 <isr_stub_184>:
ffffffff80009e39:	6a 00                	push   $0x0
ffffffff80009e3b:	68 b8 00 00 00       	push   $0xb8
ffffffff80009e40:	e9 cb f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e45 <isr_stub_185>:
ffffffff80009e45:	6a 00                	push   $0x0
ffffffff80009e47:	68 b9 00 00 00       	push   $0xb9
ffffffff80009e4c:	e9 bf f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e51 <isr_stub_186>:
ffffffff80009e51:	6a 00                	push   $0x0
ffffffff80009e53:	68 ba 00 00 00       	push   $0xba
ffffffff80009e58:	e9 b3 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e5d <isr_stub_187>:
ffffffff80009e5d:	6a 00                	push   $0x0
ffffffff80009e5f:	68 bb 00 00 00       	push   $0xbb
ffffffff80009e64:	e9 a7 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e69 <isr_stub_188>:
ffffffff80009e69:	6a 00                	push   $0x0
ffffffff80009e6b:	68 bc 00 00 00       	push   $0xbc
ffffffff80009e70:	e9 9b f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e75 <isr_stub_189>:
ffffffff80009e75:	6a 00                	push   $0x0
ffffffff80009e77:	68 bd 00 00 00       	push   $0xbd
ffffffff80009e7c:	e9 8f f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e81 <isr_stub_190>:
ffffffff80009e81:	6a 00                	push   $0x0
ffffffff80009e83:	68 be 00 00 00       	push   $0xbe
ffffffff80009e88:	e9 83 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e8d <isr_stub_191>:
ffffffff80009e8d:	6a 00                	push   $0x0
ffffffff80009e8f:	68 bf 00 00 00       	push   $0xbf
ffffffff80009e94:	e9 77 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009e99 <isr_stub_192>:
ffffffff80009e99:	6a 00                	push   $0x0
ffffffff80009e9b:	68 c0 00 00 00       	push   $0xc0
ffffffff80009ea0:	e9 6b f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ea5 <isr_stub_193>:
ffffffff80009ea5:	6a 00                	push   $0x0
ffffffff80009ea7:	68 c1 00 00 00       	push   $0xc1
ffffffff80009eac:	e9 5f f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009eb1 <isr_stub_194>:
ffffffff80009eb1:	6a 00                	push   $0x0
ffffffff80009eb3:	68 c2 00 00 00       	push   $0xc2
ffffffff80009eb8:	e9 53 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ebd <isr_stub_195>:
ffffffff80009ebd:	6a 00                	push   $0x0
ffffffff80009ebf:	68 c3 00 00 00       	push   $0xc3
ffffffff80009ec4:	e9 47 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ec9 <isr_stub_196>:
ffffffff80009ec9:	6a 00                	push   $0x0
ffffffff80009ecb:	68 c4 00 00 00       	push   $0xc4
ffffffff80009ed0:	e9 3b f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ed5 <isr_stub_197>:
ffffffff80009ed5:	6a 00                	push   $0x0
ffffffff80009ed7:	68 c5 00 00 00       	push   $0xc5
ffffffff80009edc:	e9 2f f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ee1 <isr_stub_198>:
ffffffff80009ee1:	6a 00                	push   $0x0
ffffffff80009ee3:	68 c6 00 00 00       	push   $0xc6
ffffffff80009ee8:	e9 23 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009eed <isr_stub_199>:
ffffffff80009eed:	6a 00                	push   $0x0
ffffffff80009eef:	68 c7 00 00 00       	push   $0xc7
ffffffff80009ef4:	e9 17 f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ef9 <isr_stub_200>:
ffffffff80009ef9:	6a 00                	push   $0x0
ffffffff80009efb:	68 c8 00 00 00       	push   $0xc8
ffffffff80009f00:	e9 0b f8 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f05 <isr_stub_201>:
ffffffff80009f05:	6a 00                	push   $0x0
ffffffff80009f07:	68 c9 00 00 00       	push   $0xc9
ffffffff80009f0c:	e9 ff f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f11 <isr_stub_202>:
ffffffff80009f11:	6a 00                	push   $0x0
ffffffff80009f13:	68 ca 00 00 00       	push   $0xca
ffffffff80009f18:	e9 f3 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f1d <isr_stub_203>:
ffffffff80009f1d:	6a 00                	push   $0x0
ffffffff80009f1f:	68 cb 00 00 00       	push   $0xcb
ffffffff80009f24:	e9 e7 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f29 <isr_stub_204>:
ffffffff80009f29:	6a 00                	push   $0x0
ffffffff80009f2b:	68 cc 00 00 00       	push   $0xcc
ffffffff80009f30:	e9 db f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f35 <isr_stub_205>:
ffffffff80009f35:	6a 00                	push   $0x0
ffffffff80009f37:	68 cd 00 00 00       	push   $0xcd
ffffffff80009f3c:	e9 cf f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f41 <isr_stub_206>:
ffffffff80009f41:	6a 00                	push   $0x0
ffffffff80009f43:	68 ce 00 00 00       	push   $0xce
ffffffff80009f48:	e9 c3 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f4d <isr_stub_207>:
ffffffff80009f4d:	6a 00                	push   $0x0
ffffffff80009f4f:	68 cf 00 00 00       	push   $0xcf
ffffffff80009f54:	e9 b7 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f59 <isr_stub_208>:
ffffffff80009f59:	6a 00                	push   $0x0
ffffffff80009f5b:	68 d0 00 00 00       	push   $0xd0
ffffffff80009f60:	e9 ab f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f65 <isr_stub_209>:
ffffffff80009f65:	6a 00                	push   $0x0
ffffffff80009f67:	68 d1 00 00 00       	push   $0xd1
ffffffff80009f6c:	e9 9f f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f71 <isr_stub_210>:
ffffffff80009f71:	6a 00                	push   $0x0
ffffffff80009f73:	68 d2 00 00 00       	push   $0xd2
ffffffff80009f78:	e9 93 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f7d <isr_stub_211>:
ffffffff80009f7d:	6a 00                	push   $0x0
ffffffff80009f7f:	68 d3 00 00 00       	push   $0xd3
ffffffff80009f84:	e9 87 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f89 <isr_stub_212>:
ffffffff80009f89:	6a 00                	push   $0x0
ffffffff80009f8b:	68 d4 00 00 00       	push   $0xd4
ffffffff80009f90:	e9 7b f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009f95 <isr_stub_213>:
ffffffff80009f95:	6a 00                	push   $0x0
ffffffff80009f97:	68 d5 00 00 00       	push   $0xd5
ffffffff80009f9c:	e9 6f f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fa1 <isr_stub_214>:
ffffffff80009fa1:	6a 00                	push   $0x0
ffffffff80009fa3:	68 d6 00 00 00       	push   $0xd6
ffffffff80009fa8:	e9 63 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fad <isr_stub_215>:
ffffffff80009fad:	6a 00                	push   $0x0
ffffffff80009faf:	68 d7 00 00 00       	push   $0xd7
ffffffff80009fb4:	e9 57 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fb9 <isr_stub_216>:
ffffffff80009fb9:	6a 00                	push   $0x0
ffffffff80009fbb:	68 d8 00 00 00       	push   $0xd8
ffffffff80009fc0:	e9 4b f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fc5 <isr_stub_217>:
ffffffff80009fc5:	6a 00                	push   $0x0
ffffffff80009fc7:	68 d9 00 00 00       	push   $0xd9
ffffffff80009fcc:	e9 3f f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fd1 <isr_stub_218>:
ffffffff80009fd1:	6a 00                	push   $0x0
ffffffff80009fd3:	68 da 00 00 00       	push   $0xda
ffffffff80009fd8:	e9 33 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fdd <isr_stub_219>:
ffffffff80009fdd:	6a 00                	push   $0x0
ffffffff80009fdf:	68 db 00 00 00       	push   $0xdb
ffffffff80009fe4:	e9 27 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009fe9 <isr_stub_220>:
ffffffff80009fe9:	6a 00                	push   $0x0
ffffffff80009feb:	68 dc 00 00 00       	push   $0xdc
ffffffff80009ff0:	e9 1b f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff80009ff5 <isr_stub_221>:
ffffffff80009ff5:	6a 00                	push   $0x0
ffffffff80009ff7:	68 dd 00 00 00       	push   $0xdd
ffffffff80009ffc:	e9 0f f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a001 <isr_stub_222>:
ffffffff8000a001:	6a 00                	push   $0x0
ffffffff8000a003:	68 de 00 00 00       	push   $0xde
ffffffff8000a008:	e9 03 f7 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a00d <isr_stub_223>:
ffffffff8000a00d:	6a 00                	push   $0x0
ffffffff8000a00f:	68 df 00 00 00       	push   $0xdf
ffffffff8000a014:	e9 f7 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a019 <isr_stub_224>:
ffffffff8000a019:	6a 00                	push   $0x0
ffffffff8000a01b:	68 e0 00 00 00       	push   $0xe0
ffffffff8000a020:	e9 eb f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a025 <isr_stub_225>:
ffffffff8000a025:	6a 00                	push   $0x0
ffffffff8000a027:	68 e1 00 00 00       	push   $0xe1
ffffffff8000a02c:	e9 df f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a031 <isr_stub_226>:
ffffffff8000a031:	6a 00                	push   $0x0
ffffffff8000a033:	68 e2 00 00 00       	push   $0xe2
ffffffff8000a038:	e9 d3 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a03d <isr_stub_227>:
ffffffff8000a03d:	6a 00                	push   $0x0
ffffffff8000a03f:	68 e3 00 00 00       	push   $0xe3
ffffffff8000a044:	e9 c7 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a049 <isr_stub_228>:
ffffffff8000a049:	6a 00                	push   $0x0
ffffffff8000a04b:	68 e4 00 00 00       	push   $0xe4
ffffffff8000a050:	e9 bb f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a055 <isr_stub_229>:
ffffffff8000a055:	6a 00                	push   $0x0
ffffffff8000a057:	68 e5 00 00 00       	push   $0xe5
ffffffff8000a05c:	e9 af f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a061 <isr_stub_230>:
ffffffff8000a061:	6a 00                	push   $0x0
ffffffff8000a063:	68 e6 00 00 00       	push   $0xe6
ffffffff8000a068:	e9 a3 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a06d <isr_stub_231>:
ffffffff8000a06d:	6a 00                	push   $0x0
ffffffff8000a06f:	68 e7 00 00 00       	push   $0xe7
ffffffff8000a074:	e9 97 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a079 <isr_stub_232>:
ffffffff8000a079:	6a 00                	push   $0x0
ffffffff8000a07b:	68 e8 00 00 00       	push   $0xe8
ffffffff8000a080:	e9 8b f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a085 <isr_stub_233>:
ffffffff8000a085:	6a 00                	push   $0x0
ffffffff8000a087:	68 e9 00 00 00       	push   $0xe9
ffffffff8000a08c:	e9 7f f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a091 <isr_stub_234>:
ffffffff8000a091:	6a 00                	push   $0x0
ffffffff8000a093:	68 ea 00 00 00       	push   $0xea
ffffffff8000a098:	e9 73 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a09d <isr_stub_235>:
ffffffff8000a09d:	6a 00                	push   $0x0
ffffffff8000a09f:	68 eb 00 00 00       	push   $0xeb
ffffffff8000a0a4:	e9 67 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0a9 <isr_stub_236>:
ffffffff8000a0a9:	6a 00                	push   $0x0
ffffffff8000a0ab:	68 ec 00 00 00       	push   $0xec
ffffffff8000a0b0:	e9 5b f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0b5 <isr_stub_237>:
ffffffff8000a0b5:	6a 00                	push   $0x0
ffffffff8000a0b7:	68 ed 00 00 00       	push   $0xed
ffffffff8000a0bc:	e9 4f f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0c1 <isr_stub_238>:
ffffffff8000a0c1:	6a 00                	push   $0x0
ffffffff8000a0c3:	68 ee 00 00 00       	push   $0xee
ffffffff8000a0c8:	e9 43 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0cd <isr_stub_239>:
ffffffff8000a0cd:	6a 00                	push   $0x0
ffffffff8000a0cf:	68 ef 00 00 00       	push   $0xef
ffffffff8000a0d4:	e9 37 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0d9 <isr_stub_240>:
ffffffff8000a0d9:	6a 00                	push   $0x0
ffffffff8000a0db:	68 f0 00 00 00       	push   $0xf0
ffffffff8000a0e0:	e9 2b f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0e5 <isr_stub_241>:
ffffffff8000a0e5:	6a 00                	push   $0x0
ffffffff8000a0e7:	68 f1 00 00 00       	push   $0xf1
ffffffff8000a0ec:	e9 1f f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0f1 <isr_stub_242>:
ffffffff8000a0f1:	6a 00                	push   $0x0
ffffffff8000a0f3:	68 f2 00 00 00       	push   $0xf2
ffffffff8000a0f8:	e9 13 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a0fd <isr_stub_243>:
ffffffff8000a0fd:	6a 00                	push   $0x0
ffffffff8000a0ff:	68 f3 00 00 00       	push   $0xf3
ffffffff8000a104:	e9 07 f6 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a109 <isr_stub_244>:
ffffffff8000a109:	6a 00                	push   $0x0
ffffffff8000a10b:	68 f4 00 00 00       	push   $0xf4
ffffffff8000a110:	e9 fb f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a115 <isr_stub_245>:
ffffffff8000a115:	6a 00                	push   $0x0
ffffffff8000a117:	68 f5 00 00 00       	push   $0xf5
ffffffff8000a11c:	e9 ef f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a121 <isr_stub_246>:
ffffffff8000a121:	6a 00                	push   $0x0
ffffffff8000a123:	68 f6 00 00 00       	push   $0xf6
ffffffff8000a128:	e9 e3 f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a12d <isr_stub_247>:
ffffffff8000a12d:	6a 00                	push   $0x0
ffffffff8000a12f:	68 f7 00 00 00       	push   $0xf7
ffffffff8000a134:	e9 d7 f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a139 <isr_stub_248>:
ffffffff8000a139:	6a 00                	push   $0x0
ffffffff8000a13b:	68 f8 00 00 00       	push   $0xf8
ffffffff8000a140:	e9 cb f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a145 <isr_stub_249>:
ffffffff8000a145:	6a 00                	push   $0x0
ffffffff8000a147:	68 f9 00 00 00       	push   $0xf9
ffffffff8000a14c:	e9 bf f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a151 <isr_stub_250>:
ffffffff8000a151:	6a 00                	push   $0x0
ffffffff8000a153:	68 fa 00 00 00       	push   $0xfa
ffffffff8000a158:	e9 b3 f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a15d <isr_stub_251>:
ffffffff8000a15d:	6a 00                	push   $0x0
ffffffff8000a15f:	68 fb 00 00 00       	push   $0xfb
ffffffff8000a164:	e9 a7 f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a169 <isr_stub_252>:
ffffffff8000a169:	6a 00                	push   $0x0
ffffffff8000a16b:	68 fc 00 00 00       	push   $0xfc
ffffffff8000a170:	e9 9b f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a175 <isr_stub_253>:
ffffffff8000a175:	6a 00                	push   $0x0
ffffffff8000a177:	68 fd 00 00 00       	push   $0xfd
ffffffff8000a17c:	e9 8f f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a181 <isr_stub_254>:
ffffffff8000a181:	6a 00                	push   $0x0
ffffffff8000a183:	68 fe 00 00 00       	push   $0xfe
ffffffff8000a188:	e9 83 f5 ff ff       	jmp    ffffffff80009710 <wrapper>

ffffffff8000a18d <isr_stub_255>:
ffffffff8000a18d:	6a 00                	push   $0x0
ffffffff8000a18f:	68 ff 00 00 00       	push   $0xff
ffffffff8000a194:	e9 77 f5 ff ff       	jmp    ffffffff80009710 <wrapper>
ffffffff8000a199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8000a1a0 <enable_pae>:
ffffffff8000a1a0:	0f 20 e0             	mov    %cr4,%rax
ffffffff8000a1a3:	48 0f ba e8 05       	bts    $0x5,%rax
ffffffff8000a1a8:	0f 22 e0             	mov    %rax,%cr4
ffffffff8000a1ab:	c3                   	ret    

ffffffff8000a1ac <enable_paging>:
ffffffff8000a1ac:	0f 20 c0             	mov    %cr0,%rax
ffffffff8000a1af:	48 0d 00 00 00 80    	or     $0xffffffff80000000,%rax
ffffffff8000a1b5:	0f 22 c0             	mov    %rax,%cr0
ffffffff8000a1b8:	c3                   	ret    
